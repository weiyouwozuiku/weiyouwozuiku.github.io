<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《MySQL是怎样运行的》整理</title>
      <link href="/2022/03/07/kv-cun-chu/mysql-shi-zen-yang-yun-xing-de-zheng-li/"/>
      <url>/2022/03/07/kv-cun-chu/mysql-shi-zen-yang-yun-xing-de-zheng-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL技术内幕：InnoDB存储引擎》整理</title>
      <link href="/2022/03/07/kv-cun-chu/mysql-ji-zhu-nei-mu-innodb-cun-chu-yin-qing-zheng-li/"/>
      <url>/2022/03/07/kv-cun-chu/mysql-ji-zhu-nei-mu-innodb-cun-chu-yin-qing-zheng-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMU-15445</title>
      <link href="/2022/03/04/ji-suan-ji-ji-chu/cmu-15445/"/>
      <url>/2022/03/04/ji-suan-ji-ji-chu/cmu-15445/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《流畅的Python》整理</title>
      <link href="/2022/03/04/cheng-xu-she-ji/liu-chang-de-python-zheng-li/"/>
      <url>/2022/03/04/cheng-xu-she-ji/liu-chang-de-python-zheng-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest教程</title>
      <link href="/2022/03/04/ce-shi/pytest-jiao-cheng/"/>
      <url>/2022/03/04/ce-shi/pytest-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>pytest是动态编程语言Python专用的测试框架，它具有易于上手、功能强大、第三方插件丰富、效率高、可扩展性好、兼容性强等特点。</p><p>本博客不介绍相对基础及其所见即所得的内容，只记录学习过程中自认为相对重要的点或步骤，依据《pytest测试实战》整理，推荐阅读原书。</p><h2 id="测试概念定义"><a href="#测试概念定义" class="headerlink" title="测试概念定义"></a>测试概念定义</h2><ul><li>单元测试：检查一小段代码（如一个函数、或一个类）的测试。</li><li>集成测试：检查大段代码（如多个类，或一个子系统）的测试。集成测试的规模介于单元测试与系统测试之间。</li><li>系统测试：检查整个系统的测试，通常要求测试环境竟可能接近最终用户的使用环境。</li><li>功能测试：检查单个系统功能的测试。</li><li>皮下测试：不针对最终用户界面，而是针对用户界面以下的接口的测试。</li><li>冒烟测试：可以了解当前系统中是否存在大的缺陷。通常冒烟测试不会包含全套测试，只选择可以快速出结果的测试子集 。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install pytest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>可以在pytest命令后加上<code>-v</code>和<code>--verbose</code>查看更加详细的测试信息。</p><p><code>--collect-only</code>选项展示哪些测试用例会被运行。</p><p><code>-k</code>选项允许使用表达式来指定运行的测试用例，如<code>pytest -k "fun1 or fun2"</code></p><p><code>-m</code>选项用来标记测试并分组。使用什么标记名自行决定，假设想要使用run_these_please，则可以使用@pytest.mark.run_these_please这样的装饰器来标记。同时这个标记类似<code>k</code>选项支持表达式，如<code>-m "mark1 and not mark2"</code>。</p><p><code>-x</code>选项在遇错误后全局停止后续测试。</p><p><code>--maxfail=num</code>选项表示明确指定可以失败几次。</p><p><code>–-tb=no</code>选项表示关系错误堆栈回溯。</p><p><code>-s</code>表示允许终端在测试运行时输出某些结果。-s  shortcut for –capture=no.</p><p><code>--capture=method</code> per-test capturing method: one of fd|sys|no|tee-sys. </p><p><code>--capture=fd</code>表示若文件描述符为1或2[^1]，则会被输出至临时文件中。</p><p><code>–capture==sys</code>表示<code>sys.stdout/stderr</code>输出至内存。</p><p><code>-l</code>或<code>--showlocals</code>表示在测试失败时打印局部变量名和其值。</p><p><code>--lf, --last-failed </code>执行上次失败的case。</p><p><code>--ff, --failed-first</code>表示先执行最后一次失败的case再执行其他case。</p><p><code>-v, --verbose  </code>表示详细输出信息，每个文件中的每个测试用例都占一行（默认每个文件占一行）。</p><p><code>-q, --quiet </code>表示简化输出信息，与上一个命令相反。</p><p><code>--tb=style</code>   traceback print mode (auto/long/short/line/native/no).</p><ul><li><code>short</code>表示进输出assert这一行以及系统判定内容（不显示上下文）</li><li><code>line</code>模式只使用一行输出所有的错误信息 </li><li><code>no</code>则直接屏蔽全部回溯信息</li><li><code>long</code>输出最为详尽的回溯信息</li><li><code>auto</code>默认值，如果多个测试用例失败，仅打印最后一个和第一个测试用例的回溯信息，long格式展示</li><li><code>native</code>只输出Python标准库的回溯信息</li></ul><p><code>--durations=N</code>  show N slowest setup/test durations (N=0 for all).</p><p><code>-rs</code>显示跳过原因，需要之前设置了跳过原因</p><p>-r chars              show extra test summary info as specified by chars:<br>                        (p/P), or (A)ll. (w)arnings are enabled by default (see</p><p>–lf, –last-failed   rerun only the tests that failed at the last run (or all，仅运行上次未通过的测试用例。</p><p>–ff, –failed-first  run all tests, but run the last failures first.之前运行未通过的测试用例会首先执行，然后才是其他用例。</p><p><code>-s</code>参数可以在测试仍在执行期间就把输出直接发送到stdout。</p><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>只要遵循pytest的命名规则就可以自动搜索所有待执行的测试用例。主要的命名规则如下：</p><ul><li>测试文件应当命名为<code>test_&lt;something&gt;.py</code>或者<code>&lt;something&gt;_test.py</code></li><li>测试函数、测试类方法应当命名为<code>test_&lt;something&gt;</code></li><li>测试类应当命名为<code>Test&lt;Something&gt;</code></li></ul><p>测试输出的<code>inifile</code>表示配置文件。</p><h3 id="结果表示"><a href="#结果表示" class="headerlink" title="结果表示"></a>结果表示</h3><p>执行结果的表示：</p><ul><li><code>.</code>表示PASSED通过</li><li><code>F</code>表示Failure（失败），也有可能是XPASS状态与strict选项冲突造成的失败</li><li><code>E</code>表示error（测试用例之外的代码触发的异常），可能是fixture引起，也可能是因为hook函数</li><li><code>s</code>表示skip（跳过），<code>@pytest.mark.skip()</code>或<code>@pytest。Mark。skipf()</code>指定跳过测试的条件</li><li><code>x</code>表示xfail（预期失败，并且确实失败），使用<code>@pytest.mark.xfail()</code>指定你认为会失败的用例</li><li><code>X</code>表示xpass（预期失败但通过，不符合预期）</li></ul><h2 id="编写测试函数"><a href="#编写测试函数" class="headerlink" title="编写测试函数"></a>编写测试函数</h2><p>推荐将test目录放在src文件夹下，其中存放所有与pytest相关的代码。</p><p><code>assert</code>语法会判断后面的表达式，将其值转变为布尔值。</p><p><code>with pytest.raises(TypeError):</code>表示无论with中的内容是什么都发生了预期中的<code>TypeError</code>异常。</p><p><code>with pytest.raises(ValueError) as a:</code>表示with中执行后返回TypeError异常后，这里捕获并将参数传递给a变量。通过a变量判断。</p><p>marker机制是支持一对多或多对一。</p><p>marker的装饰器是<code>@pytest.mark.&lt;marker名称&gt;</code></p><p>pytest内置了一些标记：</p><ul><li><code>skip</code>和<code>skipif</code>允许跳过不希望运行的测试。<ul><li><code>@pytest.mark.skip(reason='...')</code></li><li><code>@pytest.mark.skipif(task.__version__&lt;'0.2.0',reason='..')</code>当task版本小于0.2.0时跳过测试，这里支持任意表达式</li><li>上述两种跳过方式都支持reason传递</li></ul></li><li><code>sfail</code>表示运行此测试，预期其失败</li></ul><h3 id="批量测试"><a href="#批量测试" class="headerlink" title="批量测试"></a>批量测试</h3><p>使用<code>@pytest.mark.parametrize(argnames,argvalues)</code></p><p>可以使用完整的测试标识来重新指定需要的测试，形如<code>pytest -v "test_add_variety.py::test_add_3[eat eggs-BrIaN-False]"</code></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E6%B5%8B%E8%AF%95/pytest%E6%95%99%E7%A8%8B/%E5%8F%82%E6%95%B0%E5%8C%96kv.png" alt="参数化kv.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E6%B5%8B%E8%AF%95/pytest%E6%95%99%E7%A8%8B/%E5%8F%82%E6%95%B0%E5%8C%96%E8%BF%90%E8%A1%8C.png" alt="参数化运行.png"></p><p>在给<code>@pytest.mark.parametrize()</code>装饰器传入列表参数时，还可以在参数旁定义一个id来作为标识，语法<code>pytest.param(&lt;value&gt;,id="something")</code></p><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul><li>单个测试用例：可以使用<code>pytest ****.py::test_name</code>执行</li><li>单个目录：以目录作为pytest参数</li><li>单个文件/模块：pytest后跟路径+文件名</li><li>单个测试类：可以将测试一个接口的测试用例放在一个类中，运行时在文件名后加上::以及类名</li><li>单个测试类中的方法：文件名后加上::以及类名加上::加上方法名</li></ul><h2 id="pytest-Fixture"><a href="#pytest-Fixture" class="headerlink" title="pytest Fixture"></a>pytest Fixture</h2><p><code>pytest</code>是在测试函数运行前后，由pytest执行的外壳函数。</p><p><code>@pytest.fixture()</code>装饰器用于声明函数是一个<code>fixture</code>。如果测试函数的参数列表包含<code>fixture</code>名，那么pytest会检测到，并在测试函数执行之前执行该<code>fixture</code>。</p><p>pytest优先搜索该测试所在模块，然后搜索<code>conftest.py</code>。</p><p>在外层目录编写<code>conftest.py</code>可以让内层测试用例使用。</p><p><code>conftest.py</code>不能被import引入，对于pytest来说只是一个插件库。</p><p>可以借助<code>yield</code>的用法特性，在执行完<code>fixture</code>中前置逻辑后到达yield，等测试函数执行完毕，执行fixture的后续逻辑。</p><p>使用<code>--setup-show</code>回溯fixture的执行过程。 回溯信息中的F和S标识fixture的作用域分别是函数级别以及会话级别。</p><p>fixture中<code>scope</code>为可选参数，其有四个待选值，默认为function，：</p><ul><li>function：每个测试函数运行一遍</li><li>class：每个测试类运行一遍，测试类中的所有类方法共享这个fixture</li><li>module：模块级别的fixture运行一遍，无论模块中有多少测试函数、类方法或其他fixture都共享这个fixture</li><li>session：每个会话运行一次</li></ul><p>scope参数是在定义fixture定义的，而不是在调用fixture时定义的。因此使用fixture的测试函数是无法改变fixture的作用范围的。</p><p><strong>fixture只能使用同级别或比自己级别更好的fixture</strong>。</p><p>单个函数使用fixture是在传参中用fixture定义的名字，可以使用fixture的返回值。</p><p>类使用fixture需要用装饰器实现<code>@pytest.mark.usefixtures(&lt;fixture名字&gt;)</code>。</p><p><code>tmpdir_factory</code>的作用范围是会话级别，<code>tmpdir</code>的作用范围是函数级别。</p><p>使用<code>autouse=true</code>选项，使得作用域内的测试函数都运行该fixture。</p><p><code>@pytest.fixture(name="&lt;new name&gt;")</code>对fixture名称进行重命名。</p><p><code>pytest --fixture &lt;测试函数名称&gt;</code>可以列举所有可供测试的fixture。</p><p>在fixture函数的下面第一行用<code>"""</code>包裹下写fixture的功能描述。</p><p>fixture参数化可以在原本的fixture代码上使用<code>@pytest.fixture(params=&lt;队列名&gt;)</code>，并在下面的参数中设置传参<code>request</code>，通过<code>request.param</code>返回其中一个对象。这个fixture将会被调用<code>len(&lt;队列名&gt;)</code>的次数。同样支持用字符串列表指定id，<code>ids=</code>，这里也可以指定为一个函数，·供pytest生成task标识。</p><h2 id="内置Fixtrue"><a href="#内置Fixtrue" class="headerlink" title="内置Fixtrue"></a>内置Fixtrue</h2><h3 id="tmpdir和tmpdir-factory"><a href="#tmpdir和tmpdir-factory" class="headerlink" title="tmpdir和tmpdir_factory"></a>tmpdir和tmpdir_factory</h3><p>内置的tmpdir和tmpdir_factory负责在测试开始运行前创建临时目录，并在测试结束后删除。</p><p>tmpdir的返回值是<code>py.path.local</code>类型的一个对象。<strong>tmpdir的作用范围是函数级别，只能针对测试函数使用tmpdir创建文件或目录。如果需要fixture作用范围高于函数级别（如类、模块、会话级别），则应使用tmpdir_factory</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_tmpdir</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 在临时路径下创建somthing.txt</span>    a_file <span class="token operator">=</span> tmpdir<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'something.txt'</span><span class="token punctuation">)</span>    <span class="token comment"># 在临时路径下创建anything文件夹</span>    a_sub_dir <span class="token operator">=</span> tmpdir<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'anything'</span><span class="token punctuation">)</span>    <span class="token comment"># 在angthing文件夹下创建文件</span>    another_file <span class="token operator">=</span> a_sub_dir<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'something_else.txt'</span><span class="token punctuation">)</span>    <span class="token comment"># 向文件中写文件</span>    a_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'contents may settle during shipping'</span><span class="token punctuation">)</span>    <span class="token comment"># 从文件中读文件</span>    a_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_tmpdir_factory</span><span class="token punctuation">(</span>tmpdir_factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建以mydir为前缀的文件夹</span>    a_dir <span class="token operator">=</span> tmpdir_factory<span class="token punctuation">.</span>mktemp<span class="token punctuation">(</span><span class="token string">'mydir'</span><span class="token punctuation">)</span>    <span class="token comment"># 返回临时路径的根目录</span>    base_temp <span class="token operator">=</span> tmpdir_factory<span class="token punctuation">.</span>getbasetemp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>pytest --basetemp=mydir</code>指定所在的根目录。</p><h3 id="pytestconfig"><a href="#pytestconfig" class="headerlink" title="pytestconfig"></a>pytestconfig</h3><p>内置的pytestconfig可以通过命令行参数、选项、配置文件、插件、运行目录等方式来控制pytest。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pytest_addoption</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">:</span>    parser<span class="token punctuation">.</span>addoption<span class="token punctuation">(</span><span class="token string">"--myopt"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>                     <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"some boolean option"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>addoption<span class="token punctuation">(</span><span class="token string">"--foo"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"bar"</span><span class="token punctuation">,</span>                     <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"foo: bar or baz"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">❯ pytest -s -q --foo hhh --myopt  test_config.py::test_option"foo" set to: hhh"myopt" set to: True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>pytestconfig是一个fixture，它可以被其他fixture使用，形如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>pytestconfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pytestconfig<span class="token punctuation">.</span>option<span class="token punctuation">.</span>foo<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">myopt</span><span class="token punctuation">(</span>pytestconfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pytestconfig<span class="token punctuation">.</span>option<span class="token punctuation">.</span>myopt<span class="token keyword">def</span> <span class="token function">test_fixtures_for_options</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> myopt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"foo" set to:'</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'"myopt" set to:'</span><span class="token punctuation">,</span> myopt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些pytestcinfig的使用方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_pytestconfig</span><span class="token punctuation">(</span>pytestconfig<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args            :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inifile         :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>inifile<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'invocation_dir  :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>invocation_dir<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'rootdir         :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>rootdir<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-k EXPRESSION   :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>getoption<span class="token punctuation">(</span><span class="token string">'keyword'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-v, --verbose   :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>getoption<span class="token punctuation">(</span><span class="token string">'verbose'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-q, --quiet     :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>getoption<span class="token punctuation">(</span><span class="token string">'quiet'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-l, --showlocals:'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>getoption<span class="token punctuation">(</span><span class="token string">'showlocals'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--tb=style      :'</span><span class="token punctuation">,</span> pytestconfig<span class="token punctuation">.</span>getoption<span class="token punctuation">(</span><span class="token string">'tbstyle'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>cache的作用是存储一段测试会话的信息，在下一段测试会话中使用。</p><h3 id="capsys"><a href="#capsys" class="headerlink" title="capsys"></a>capsys</h3><p>capsys有两个功能：</p><ul><li>允许使用代码读取stdout和stderr</li><li>可以临时抓取日志输出</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hi, {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_greeting</span><span class="token punctuation">(</span>capsys<span class="token punctuation">)</span><span class="token punctuation">:</span>    greeting<span class="token punctuation">(</span><span class="token string">'Earthling'</span><span class="token punctuation">)</span>    out<span class="token punctuation">,</span> err <span class="token operator">=</span> capsys<span class="token punctuation">.</span>readouterr<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> out <span class="token operator">==</span> <span class="token string">'Hi, Earthling\n'</span>    <span class="token keyword">assert</span> err <span class="token operator">==</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">yikes</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'YIKES! {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_yikes</span><span class="token punctuation">(</span>capsys<span class="token punctuation">)</span><span class="token punctuation">:</span>    yikes<span class="token punctuation">(</span><span class="token string">'Out of coffee!'</span><span class="token punctuation">)</span>    out<span class="token punctuation">,</span> err <span class="token operator">=</span> capsys<span class="token punctuation">.</span>readouterr<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> out <span class="token operator">==</span> <span class="token string">''</span>    <span class="token keyword">assert</span> <span class="token string">'Out of coffee!'</span> <span class="token keyword">in</span> err<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>capsys.disabled()</code>检测是否关闭输出捕获。</p><h3 id="monkeypatch"><a href="#monkeypatch" class="headerlink" title="monkeypatch"></a>monkeypatch</h3><p>monkeypatch可以在运行期间对类或模块进行动态修改，提供以下函数：</p><ul><li><code>setattr(target,name,value=&lt;notset&gt;,rasing=True)</code>：设置一个属性</li><li><code>delattr(target,name=&lt;notset&gt;,raising=True)</code>：删除一个属性</li><li><code>setitem(dic,name,value)</code>：设置字典中的一条记录</li><li><code>delitem(dic,name,raising=True)</code>：删除字典中的一条记录</li><li><code>setenv(name,value,prepend=None)</code>：设置一个环境变量</li><li><code>delenv(name,raising=True)</code>：删除一个环境变量</li><li><code>syspath_prepend(path)</code>：将路径path加入sys.path并放在最前，sys.path是Python导入的系统路径列表</li><li><code>chdir(path)</code></li></ul><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="pytest与其他工具的搭配使用"><a href="#pytest与其他工具的搭配使用" class="headerlink" title="pytest与其他工具的搭配使用"></a>pytest与其他工具的搭配使用</h2><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>[^1]:在Linux系统中，一切设备都看作文件。而每打开一个文件，就有一个代表该打开文件的文件描述符。程序启动时默认打开三个I/O设备文件：标准输入文件stdin，标准输出文件stdout，标准错误输出文件stderr，分别得到文件描述符 0, 1, 2。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode多线程题</title>
      <link href="/2022/03/04/suan-fa/leetcode-he-ji/leetcode-duo-xian-cheng-ti/"/>
      <url>/2022/03/04/suan-fa/leetcode-he-ji/leetcode-duo-xian-cheng-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetcodeShell题</title>
      <link href="/2022/03/04/suan-fa/leetcode-he-ji/leetcodeshell-ti/"/>
      <url>/2022/03/04/suan-fa/leetcode-he-ji/leetcodeshell-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL整理与总结</title>
      <link href="/2022/03/01/cheng-xu-she-ji/mysql-zheng-li-yu-zong-jie/"/>
      <url>/2022/03/01/cheng-xu-she-ji/mysql-zheng-li-yu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL基础架构"><a href="#MySQL基础架构" class="headerlink" title="MySQL基础架构"></a>MySQL基础架构</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/MySQL%E6%95%B4%E7%90%86%E4%B8%8E%E6%80%BB%E7%BB%93/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="MySQL逻辑架构图.png"></p><p>MySQL大致可以分成Server层和存储引擎层。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立链接、获取权限、维持和管理链接。</p><p>一个用户成功创建连接后，即使对该用户修改权限，也不会影响当前存在连接的权限。修改完成之后，只有创建新的连接采用使用新的权限。</p><p>可以使用<code>show processlist;</code>查看连接状态。</p><p>客户端通过参数<code>wait_timeout</code>来控制没有动静的连接，默认一般是8小时。</p><p>使用长链接可能导致MySQL占用内存上涨很快。因为MySQL在执行过程中临时使用的内存是管理在连接对象里面的。这些资源只有在连接断开时才释放。长期积累可能导致内存占用过大，被系统强行OOM，从现象看就是MySQL异常重启。</p><p>对此解决方案：</p><ul><li>定期断开长连接</li><li>如果是MySQL5.7之后的版本，可以在执行一个较大内存的操作时，通过执行<code>MySQL_reset_connection</code>来重新初始化连接资源。此时连接会恢复成刚创建完时的状态</li></ul><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>MySQL拿到一个查询请求后，在老版本会先去查询缓存。之前执行的语句及其结果可能会以kv对的形式存在内存中。key是查询语句，value是查询结果。</p><p>但是不推荐使用缓存。因为<strong>通常情况下MySQL的缓存利大于弊。</strong></p><p>查询缓存的失效非常频繁。只要对一个表的更新，这个表上的所有查询缓存就会被清空。对于更新压力较大的数据库来说，查询缓存的命中率很低。<strong>除非你的业务是一个静态表，很长时间才更新一次。</strong></p><p>通过设置参数<code>query_cache_type</code>为<code>DEMAND</code>，这样默认的SQL语句都不使用查询缓存。需要是显式指定。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> SQL_cache <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL8.0之后没有查询缓存这个功能了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>分析器进行sql的词法分析，知道你要做什么。</p><h4 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h4><p>解析器处理语法和解析查询，生成对应的解析树。</p><h4 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h4><p>预处理器进一步检查解析树的合法。比如：数据表和数据列是否存在，别名是否有歧义。如果通过则生成新的解析树，再交给优化器。详见《高性能MySQL》6.4.3查询优化处理。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器是在表里面有多个索引时，决定使用哪个索引；或者一个语句有多个表join的时候，决定各个表的连接顺序。知道要怎么做。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>开始执行时会首先检查相应表你的权限。在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。</p><p>如果有权限，打开表继续执行，执行器会根据表的引擎定义，使用这个引擎提供的接口。如果命中索引的话可以在执行器阶段就直接通过索引查找，没有命中索引就遍历查找每行记录。</p><p>在数据库的慢查询日志中可以看到一个<code>rows_examined</code>字段，表示这个语句执行过程中扫描了多少行。</p><p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此<strong>引擎扫描行数在rows_examined并不是完全相同</strong>。</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>redo log是属于InnoDB特有的日志，属于存储引擎层，记录了这个页“做了什么改动”。</p><p>MySQL利用WAL（Write-Ahead Logging）技术，先写日志再落磁盘。具体来说就是当一条记录需要更新时，InnoDB引擎就会先把记录写在redo log中，并更新内存，此时更新算完成。等到InnoDB在恰当的时间会将这个更新操作写入磁盘。</p><p>InnoDB的redo log大小是固定的。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/MySQL%E6%95%B4%E7%90%86%E4%B8%8E%E6%80%BB%E7%BB%93/redo_log%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="redo_log示意图.png"></p><p><code>write pos</code> 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。<code>checkpoint</code> 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p><code>wirte pos</code>与<code>checkpoint</code>之间的空间就是还可以存放的容量。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<code>crash-safe</code>。</p><p><code>innodb_flush_log_at_trx_commit</code>设置为1表示每次事务的redo log直接持久化到磁盘。</p><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>binlog属于Sever层，binlog不具备<code>crash-safe</code>的能力。</p><p>binlog有两种模式，statement格式会记录sql语句，row格式会记录行的内容，记两条更新前后都有。</p><p><code>sync_binlog</code>设置为1表示每次事务的binlog直接持久化到磁盘。</p><h4 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h4><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是在某个数据页上做了什么修改；binlog是逻辑日志，记录的是这个语句的原始逻辑。</li><li>redo log是循环写，空间固定会用完；binlog是写到一定大小后切换到下一个，并不会覆盖之前的日志。</li></ol><h4 id="整体运行逻辑"><a href="#整体运行逻辑" class="headerlink" title="整体运行逻辑"></a>整体运行逻辑</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/MySQL%E6%95%B4%E7%90%86%E4%B8%8E%E6%80%BB%E7%BB%93/update%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="update语句执行流程.png"></p><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行简单的 update 语句<code>update table T set c=c+1 where ID=2</code>时的内部流程。</p><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><p>在上述过程中，redo存在“两阶段提交”，即prepare和commit。</p><p>两阶段提交的目的是<strong>为了让两份日志之间的逻辑一致</strong>。</p><p>如果要实现一定时间内的数据库数据恢复，可以通过binlog中存储的所有逻辑操作实现以及定期的整库备份。</p><p>当需要恢复数据到指定的某一秒时，那么可以：</p><ol><li>首先找到最近的一次全量备份。将这个表恢复到临时表。</li><li>从备份的时间点开始，将备份的binlog依次取出，重放到误操作之前的那个时刻。</li><li>再对比临时表与线上表之前的差异，同步到线上表。</li></ol><p>基于数据恢复的过程，可以论证为什么需要进行两阶段提交。这里不妨使用反证法，即两种情况：1. 先写redo log再写binlog 2. 先写binlog再写redo log。</p><p>针对情况1：假设redo log完成，binlog没有执行，MySQL进程异常重启。redo log保证了数据在系统重启后还能恢复，但是此时binlog中并没有相应的原始逻辑记录，这会导致当前数据能依据redo log恢复，但是之后通过binlog恢复则不存在这次操作的记录，也就没有相应的数据。</p><p>针对情况2：假设binlog完成，redo log没有执行，MySQL进程异常重启。由于redo log没有写，恢复后这个事务无效。数据为原本的数据。但是binlog中记录了修改数据的原始逻辑，之后用binlog恢复时就会多出一个事务来。</p><p>因此，不使用两阶段提交，数据库的状态就可能和用它日志恢复恢复出来的库的状态不一致。</p><p>除了数据恢复的场景，在扩容的时候，需要一些备库来增加系统的读能力的时候。现在主流的做法是全量备份加上应用binlog实现。</p><p>redo log和binlog都能表示事务的提交状态，而两阶段保持逻辑上的一致。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>事务的支持在引擎层实现</strong>。</p><p>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）。</p><h3 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h3><p>当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><p>在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，需要在二者之间寻找一个平衡点。</p><p>SQL 标准的事务隔离级别包括：</p><ul><li>读未提交（read uncommitted）：是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交（read committed）：是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读（repeatable read）：是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化（serializable ）：顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日碰撞和哈希函数</title>
      <link href="/2022/02/16/suan-fa/sheng-ri-peng-zhuang-he-ha-xi-han-shu/"/>
      <url>/2022/02/16/suan-fa/sheng-ri-peng-zhuang-he-ha-xi-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>所谓哈希（hash），就是将不同的输入映射成独一无二的、固定长度的值（又称”哈希值”）。它是最常见的软件运算之一。</p><p>如果不同的输入得到了同一个哈希值，就发生了”哈希碰撞”（collision）。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E7%94%9F%E6%97%A5%E7%A2%B0%E6%92%9E%E5%92%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/hash.png" alt="hash.png"></p><h2 id="生日攻击"><a href="#生日攻击" class="headerlink" title="生日攻击"></a>生日攻击</h2><p>哈希碰撞的概率取决于两个因素（假设哈希函数是可靠的，每个值的生成概率都相同）。</p><ul><li>哈希值的长度</li><li>整个生命周期中，哈希值的计算次数</li></ul><p>这个问题在数学上早有原型，叫做”<a href="https://en.wikipedia.org/wiki/Birthday_problem">生日问题</a>“（birthday problem）：一个班级需要有多少人，才能保证每个同学的生日都不一样？</p><p>答案很出人意料。如果至少两个同学生日相同的概率不超过5%，那么这个班只能有7个人。事实上，一个23人的班级有50%的概率，至少两个同学生日相同；50人班级有97%的概率，70人的班级则是99.9%的概率。</p><p>$\overline{p}(n)=1*(1-\frac{1}{365})*(1-\frac{2}{365}…(1-\frac{n-1}{365})))$=&gt;$p(n)=1-\overline{p}(n)=1-\frac{365!}{365^n(365-n)!}$</p><p>依据泰勒展开，指数展开可以写成：</p><p>$e^x=\sum^{\infty}_{k=0}\frac{x^k}{k!}=1+x+\frac{x^2}{2}+\frac{x^3}{6}+\frac{x^4}{24}+…$。当x取一个极小数时，上面的公式可以近似转化为$e^x=1+x$。</p><p>这意味着，如果哈希值的取值空间是365，只要计算23个哈希值，就有50%的可能产生碰撞。也就是说，哈希碰撞的可能性，远比想象的高。实际上，有一个近似的公式：$\sqrt{\frac{\pi}{2}N}$</p><p>将其形式化生日问题的概率公式变化为：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E7%94%9F%E6%97%A5%E7%A2%B0%E6%92%9E%E5%92%8C%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/%E7%94%9F%E6%97%A5%E9%97%AE%E9%A2%98.png" alt="生日问题.png"></p><p>将取值空间用d表达，则可以形式化为：</p><p>$p(n,d)\approx 1-e^{\frac{-n(n-1)}{2d}}$</p><p>这也就是哈希碰撞概率公式。</p><p>代码化如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> calculate <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> d<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span>E <span class="token operator">*</span><span class="token operator">*</span> exponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种利用哈希空间不足够大，而制造碰撞的攻击方法，就被称为生日攻击（birthday attack）。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>阮一峰，<a href="https://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">哈希碰撞与生日攻击</a>，2018</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU、LFU和TinyLFU算法</title>
      <link href="/2022/02/03/suan-fa/lru-lfu-he-tinylfu-suan-fa/"/>
      <url>/2022/02/03/suan-fa/lru-lfu-he-tinylfu-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LRU </tag>
            
            <tag> LFU </tag>
            
            <tag> TinyLFU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据压缩算法</title>
      <link href="/2022/02/02/suan-fa/shu-ju-ya-suo-suan-fa/"/>
      <url>/2022/02/02/suan-fa/shu-ju-ya-suo-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="压缩算法分类"><a href="#压缩算法分类" class="headerlink" title="压缩算法分类"></a>压缩算法分类</h2><p>数据压缩算法大致可以分为5类：</p><ul><li>变长编码</li><li>统计编码</li><li>字典编码</li><li>上下文编码</li><li>多上下文模型</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A+B</title>
      <link href="/2022/01/28/suan-fa/a-b/"/>
      <url>/2022/01/28/suan-fa/a-b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据处理方案</title>
      <link href="/2022/01/24/suan-fa/da-shu-ju-chu-li-fang-an/"/>
      <url>/2022/01/24/suan-fa/da-shu-ju-chu-li-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>所谓的海量数据是指海量数据的存储、处理和操作。正是因为数据量太大，所以导致要么无法在短时间迅速完成，要么无法一次性载入内存。</p><p>数据去重（data deduplication）是大数据领域司空见惯的问题了。除了统计UV等传统用法之外，去重的意义更在于消除不可靠数据源产生的脏数据——即重复上报数据或重复投递数据的影响，使计算产生的结果更加准确。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>博客园，<a href="https://www.cnblogs.com/luxiaoxun/p/14392375.html">大数据去重（data deduplication）方案</a>，2021</li><li>GitBook，<a href="https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/ch6.html">第六章 海量数据处理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树算法整理</title>
      <link href="/2022/01/23/suan-fa/shu-suan-fa-zheng-li/"/>
      <url>/2022/01/23/suan-fa/shu-suan-fa-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h2 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《A Primer on Memory Consistency and Cache Coherence》阅读总结</title>
      <link href="/2022/01/23/ji-suan-ji-ji-chu/a-primer-on-memory-consistency-and-cache-coherence-yue-du-zong-jie/"/>
      <url>/2022/01/23/ji-suan-ji-ji-chu/a-primer-on-memory-consistency-and-cache-coherence-yue-du-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>[A Primer on Memory Consistency and Cache Coherence.pdf](<a href="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AA-Primer-on-Memory-Consistency-and-Cache-Coherence%E3%80%8B%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/A">https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/计算机基础/《A-Primer-on-Memory-Consistency-and-Cache-Coherence》阅读总结/A</a> Primer on Memory Consistency and Cache Coherence.pdf)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Paper </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《What Every Programmer Should Know About Memory》阅读总结</title>
      <link href="/2022/01/23/ji-suan-ji-ji-chu/what-every-programmer-should-know-about-memory-yue-du-zong-jie/"/>
      <url>/2022/01/23/ji-suan-ji-ji-chu/what-every-programmer-should-know-about-memory-yue-du-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>[What Every Programmer Should Know About Memory.pdf](<a href="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AWhat-Every-Programmer-Should-Know-About-Memory%E3%80%8B%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/What">https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/计算机基础/《What-Every-Programmer-Should-Know-About-Memory》阅读总结/What</a> Every Programmer Should Know About Memory.pdf)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Paper </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Presto实战与演练</title>
      <link href="/2022/01/21/cheng-xu-she-ji/presto-shi-zhan-yu-yan-lian/"/>
      <url>/2022/01/21/cheng-xu-she-ji/presto-shi-zhan-yu-yan-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Facebook的数据仓库存储在少量大型Hadoop/HDFS集群。Hive是Facebook在几年前专为Hadoop打造的一款数据仓库工具。在以前，Facebook的科学家和分析师一直依靠Hive来做数据分析。但Hive使用MapReduce作为底层计算框架，是专为批处理设计的。但随着数据越来越多，使用Hive进行一个简单的数据查询可能要花费几分到几小时，显然不能满足交互式查询的需求。Facebook也调研了其他比Hive更快的工具，但它们要么在功能有所限制要么就太简单，以至于无法操作Facebook庞大的数据仓库。</p><p>2012年开始试用的一些外部项目都不合适，他们决定自己开发，这就是Presto。2012年秋季开始开发，目前该项目已经在超过 1000名Facebook雇员中使用，运行超过30000个查询，每日数据在1PB级别。Facebook称Presto的性能比Hive要好上10倍多。2013年Facebook正式宣布开源Presto。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>数据仓库指的是将多个数据源的数据经过ETL处理之后，按照一定的主题集成起来提供决策支持和联机分析应用的结构化数据环境。</p><p>ETL指的是Extract、Transform、Load。</p><p>下图是大致的数据处理示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86.png" alt="数据处理.png"></p><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>Hive是给予Hadoop的数据仓库工具，提供类sql语法。</p><p>Hive是将数据映射成数据库和一张张的表，库和表的元数据信息一般存在关系型数据库中。</p><p>以MR作为计算引擎、HDFS作为存储系统，提供超大数据集的计算、扩展能力。</p><p>Hive数据存储：Hive的数据是存储在HDFS上的，Hive表和库是对HDFS上数据的映射。</p><p>Hive元数据存储：元数据存储一般在外部关系库（Mysql），与Presto、Impala等共享。</p><p>Hive语句的执行过程：将HQL转化为MapReduce任务运行。因为你MR过程中会涉及到大量的IO操作，导致速度比较慢。</p><h2 id="Presto架构"><a href="#Presto架构" class="headerlink" title="Presto架构"></a>Presto架构</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/Presto%E6%9E%B6%E6%9E%84.png" alt="Presto架构.png"></p><p>Presto查询引擎是一个Master-Slave的架构，由一个Coordinator节点，一个Discovery Server节点，多个Worker节点组成，Discovery Server通常内嵌于Coordinator节点中。Coordinator负责解析SQL语句，生成执行计划，分发执行任务给Worker节点执行。Worker节点负责实际执行查询任务。Worker节点启动后向Discovery Server服务注册，Coordinator从Discovery Server获得可以正常工作的Worker节点。如果配置了Hive Connector，需要配置一个Hive MetaStore服务为Presto提供Hive元信息，Worker节点与HDFS交互读取数据。</p><h2 id="Presto查询过程"><a href="#Presto查询过程" class="headerlink" title="Presto查询过程"></a>Presto查询过程</h2><p>相较于传统的SQL优化原理之外，Presto采用了一些不同的优化方法：</p><ol><li>完全基于内存的并行计算</li><li>流水线</li><li>本地化计算</li><li>动态编译执行计划</li><li>小心使用内存和数据结构</li><li>类BlinkDB的近似查询</li><li>GC控制</li></ol><p>以下介绍下Presto查询过程</p><h3 id="提交查询"><a href="#提交查询" class="headerlink" title="提交查询"></a>提交查询</h3><p>用户使用Presto Cli提交一个查询语句后，Cli使用HTTP协议与Coordinator通信，Coordinator收到查询请求后调用SqlParser解析SQL语句得到Statement对象，并将Statement封装成一个QueryStarter对象放入线程池中等待执行。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2.jpeg" alt="提交查询.jpeg"></p><h3 id="SQL编译"><a href="#SQL编译" class="headerlink" title="SQL编译"></a>SQL编译</h3><p>Presto与Hive一样，使用Antlr编写SQL语法，语法规则定义在Statement.g和StatementBuilder.g两个文件中。 如下图中所示从SQL编译为最终的物理执行计划大概分为5部，最终生成在每个Worker节点上运行的LocalExecutionPlan，这里不详细介绍SQL解析为逻辑执行计划的过程，通过一个SQL语句来理解查询计划生成之后的计算过程。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/SQL%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.png" alt="SQL解析过程.png"></p><p>样例SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> c1<span class="token punctuation">.</span>rank<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dim<span class="token punctuation">.</span>city c1 <span class="token keyword">join</span> dim<span class="token punctuation">.</span>city c2 <span class="token keyword">on</span> c1<span class="token punctuation">.</span>id <span class="token operator">=</span> c2<span class="token punctuation">.</span>id <span class="token keyword">where</span> c1<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> c1<span class="token punctuation">.</span>rank <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/%E9%80%BB%E8%BE%91%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.jpeg" alt="逻辑执行计划.jpeg"></p><p>上面的SQL语句生成的逻辑执行计划Plan如上图所示。那么Presto是如何对上面的逻辑执行计划进行拆分以较高的并行度去执行完这个计划呢，我们来看看物理执行计划。</p><h3 id="物理执行计划"><a href="#物理执行计划" class="headerlink" title="物理执行计划"></a>物理执行计划</h3><p>逻辑执行计划图中的虚线就是Presto对逻辑执行计划的切分点，逻辑计划Plan生成的SubPlan分为四个部分，每一个SubPlan都会提交到一个或者多个Worker节点上执行。</p><p>SubPlan有几个重要的属性planDistribution、outputPartitioning、partitionBy属性。</p><ol><li>PlanDistribution表示一个查询Stage的分发方式，逻辑执行计划图中的4个SubPlan共有3种不同的PlanDistribution方式：Source表示这个SubPlan是数据源，Source类型的任务会按照数据源大小确定分配多少个节点进行执行；Fixed表示这个SubPlan会分配固定的节点数进行执行（Config配置中的query.initial-hash-partitions参数配置，默认是8）；None表示这个SubPlan只分配到一个节点进行执行。在下面的执行计划中，SubPlan1和SubPlan0 PlanDistribution=Source，这两个SubPlan都是提供数据源的节点，SubPlan1所有节点的读取数据都会发向SubPlan0的每一个节点；SubPlan2分配8个节点执行最终的聚合操作；SubPlan3只负责输出最后计算完成的数据。</li><li>OutputPartitioning属性只有两个值HASH和NONE，表示这个SubPlan的输出是否按照partitionBy的key值对数据进行Shuffle。在下面的执行计划中只有SubPlan0的OutputPartitioning=HASH，所以SubPlan2接收到的数据是按照rank字段Partition后的数据。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Presto%E5%AE%9E%E6%88%98%E4%B8%8E%E6%BC%94%E7%BB%83/%E7%89%A9%E7%90%86%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png" alt="物理执行计划.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p><a href="http://prestodb.io/">Presto官方文档</a></p></li><li><p><a href="https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920">Facebook Presto团队介绍Presto的文章</a></p></li><li><p>SlideShare两个分享Presto的PPT</p><ol><li><a href="http://www.slideshare.net/zhusx/presto-overview?from_search=1">PPT</a></li><li><a href="http://www.slideshare.net/frsyuki/hadoop-source-code-reading-15-in-japan-presto">PPT</a></li></ol></li><li><p>美团技术团队，<a href="https://tech.meituan.com/2014/06/16/presto.html">Presto实现原理和美团的使用实践</a>，2014</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Presto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题2101-2189</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-2101-2189/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-2101-2189/</url>
      
        <content type="html"><![CDATA[<h2 id="2101-2110"><a href="#2101-2110" class="headerlink" title="2101-2110"></a>2101-2110</h2><h2 id="2111-2120"><a href="#2111-2120" class="headerlink" title="2111-2120"></a>2111-2120</h2><h2 id="2121-2130"><a href="#2121-2130" class="headerlink" title="2121-2130"></a>2121-2130</h2><h2 id="2131-2140"><a href="#2131-2140" class="headerlink" title="2131-2140"></a>2131-2140</h2><h2 id="2141-2150"><a href="#2141-2150" class="headerlink" title="2141-2150"></a>2141-2150</h2><h2 id="2151-2160"><a href="#2151-2160" class="headerlink" title="2151-2160"></a>2151-2160</h2><h2 id="2161-2170"><a href="#2161-2170" class="headerlink" title="2161-2170"></a>2161-2170</h2><h2 id="2171-2180"><a href="#2171-2180" class="headerlink" title="2171-2180"></a>2171-2180</h2><h2 id="2181-2189"><a href="#2181-2189" class="headerlink" title="2181-2189"></a>2181-2189</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题2001-2100</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-2001-2100/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-2001-2100/</url>
      
        <content type="html"><![CDATA[<h2 id="2001-2010"><a href="#2001-2010" class="headerlink" title="2001-2010"></a>2001-2010</h2><h2 id="2011-2020"><a href="#2011-2020" class="headerlink" title="2011-2020"></a>2011-2020</h2><h2 id="2021-2030"><a href="#2021-2030" class="headerlink" title="2021-2030"></a>2021-2030</h2><h2 id="2031-2040"><a href="#2031-2040" class="headerlink" title="2031-2040"></a>2031-2040</h2><h2 id="2041-2050"><a href="#2041-2050" class="headerlink" title="2041-2050"></a>2041-2050</h2><h2 id="2051-2060"><a href="#2051-2060" class="headerlink" title="2051-2060"></a>2051-2060</h2><h2 id="2061-2070"><a href="#2061-2070" class="headerlink" title="2061-2070"></a>2061-2070</h2><h2 id="2071-2080"><a href="#2071-2080" class="headerlink" title="2071-2080"></a>2071-2080</h2><h2 id="2081-2090"><a href="#2081-2090" class="headerlink" title="2081-2090"></a>2081-2090</h2><h2 id="2091-2100"><a href="#2091-2100" class="headerlink" title="2091-2100"></a>2091-2100</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1901-2000</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1901-2000/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1901-2000/</url>
      
        <content type="html"><![CDATA[<h2 id="1901-1910"><a href="#1901-1910" class="headerlink" title="1901-1910"></a>1901-1910</h2><h2 id="1911-1920"><a href="#1911-1920" class="headerlink" title="1911-1920"></a>1911-1920</h2><h2 id="1921-1930"><a href="#1921-1930" class="headerlink" title="1921-1930"></a>1921-1930</h2><h2 id="1931-1940"><a href="#1931-1940" class="headerlink" title="1931-1940"></a>1931-1940</h2><h2 id="1941-1950"><a href="#1941-1950" class="headerlink" title="1941-1950"></a>1941-1950</h2><h2 id="1951-1960"><a href="#1951-1960" class="headerlink" title="1951-1960"></a>1951-1960</h2><h2 id="1961-1970"><a href="#1961-1970" class="headerlink" title="1961-1970"></a>1961-1970</h2><h2 id="1971-1980"><a href="#1971-1980" class="headerlink" title="1971-1980"></a>1971-1980</h2><h2 id="1981-1990"><a href="#1981-1990" class="headerlink" title="1981-1990"></a>1981-1990</h2><h2 id="1991-2000"><a href="#1991-2000" class="headerlink" title="1991-2000"></a>1991-2000</h2><h4 id="1991-找到数组的中间位置"><a href="#1991-找到数组的中间位置" class="headerlink" title="1991. 找到数组的中间位置"></a><a href="https://leetcode-cn.com/problems/find-the-middle-index-in-array/">1991. 找到数组的中间位置</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findMiddleIndex</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> total <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1801-1900</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1801-1900/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1801-1900/</url>
      
        <content type="html"><![CDATA[<h2 id="1801-1810"><a href="#1801-1810" class="headerlink" title="1801-1810"></a>1801-1810</h2><h2 id="1811-1820"><a href="#1811-1820" class="headerlink" title="1811-1820"></a>1811-1820</h2><h2 id="1821-1830"><a href="#1821-1830" class="headerlink" title="1821-1830"></a>1821-1830</h2><h2 id="1831-1840"><a href="#1831-1840" class="headerlink" title="1831-1840"></a>1831-1840</h2><h2 id="1841-1850"><a href="#1841-1850" class="headerlink" title="1841-1850"></a>1841-1850</h2><h2 id="1851-1860"><a href="#1851-1860" class="headerlink" title="1851-1860"></a>1851-1860</h2><h2 id="1861-1870"><a href="#1861-1870" class="headerlink" title="1861-1870"></a>1861-1870</h2><h4 id="1863-找出所有子集的异或总和再求和"><a href="#1863-找出所有子集的异或总和再求和" class="headerlink" title="1863. 找出所有子集的异或总和再求和"></a><a href="https://leetcode-cn.com/problems/sum-of-all-subset-xor-totals/">1863. 找出所有子集的异或总和再求和</a></h4><p>本题关键在于两点：</p><ol><li>找到所有子集的情况，这里可以用二进制表示元素在不在子集中，子集存在的数量为$2^n$，可以表示为1&lt;&lt;nums.size()。</li><li>找出每种情况中对应元素的情况并计算异或。这里使用<code>i&amp;(1&lt;&lt;j)</code>表示第j位对应的元素是否在该子集中。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">subsetXORSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//循环所有枚举情况</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//计算每种情况的异或和</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans <span class="token operator">^=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+=</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1871-1880"><a href="#1871-1880" class="headerlink" title="1871-1880"></a>1871-1880</h2><h2 id="1881-1890"><a href="#1881-1890" class="headerlink" title="1881-1890"></a>1881-1890</h2><h2 id="1891-1900"><a href="#1891-1900" class="headerlink" title="1891-1900"></a>1891-1900</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1701-1800</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1701-1800/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1701-1800/</url>
      
        <content type="html"><![CDATA[<h2 id="1701-1710"><a href="#1701-1710" class="headerlink" title="1701-1710"></a>1701-1710</h2><h2 id="1711-1720"><a href="#1711-1720" class="headerlink" title="1711-1720"></a>1711-1720</h2><h2 id="1721-1730"><a href="#1721-1730" class="headerlink" title="1721-1730"></a>1721-1730</h2><h2 id="1731-1740"><a href="#1731-1740" class="headerlink" title="1731-1740"></a>1731-1740</h2><h2 id="1741-1750"><a href="#1741-1750" class="headerlink" title="1741-1750"></a>1741-1750</h2><h2 id="1751-1760"><a href="#1751-1760" class="headerlink" title="1751-1760"></a>1751-1760</h2><h2 id="1761-1770"><a href="#1761-1770" class="headerlink" title="1761-1770"></a>1761-1770</h2><h2 id="1771-1780"><a href="#1771-1780" class="headerlink" title="1771-1780"></a>1771-1780</h2><h2 id="1781-1790"><a href="#1781-1790" class="headerlink" title="1781-1790"></a>1781-1790</h2><h2 id="1791-1800"><a href="#1791-1800" class="headerlink" title="1791-1800"></a>1791-1800</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1601-1700</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1601-1700/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1601-1700/</url>
      
        <content type="html"><![CDATA[<h2 id="1601-1610"><a href="#1601-1610" class="headerlink" title="1601-1610"></a>1601-1610</h2><h2 id="1611-1620"><a href="#1611-1620" class="headerlink" title="1611-1620"></a>1611-1620</h2><h2 id="1621-1630"><a href="#1621-1630" class="headerlink" title="1621-1630"></a>1621-1630</h2><h2 id="1631-1640"><a href="#1631-1640" class="headerlink" title="1631-1640"></a>1631-1640</h2><h2 id="1641-1650"><a href="#1641-1650" class="headerlink" title="1641-1650"></a>1641-1650</h2><h2 id="1651-1660"><a href="#1651-1660" class="headerlink" title="1651-1660"></a>1651-1660</h2><h2 id="1661-1670"><a href="#1661-1670" class="headerlink" title="1661-1670"></a>1661-1670</h2><h2 id="1671-1680"><a href="#1671-1680" class="headerlink" title="1671-1680"></a>1671-1680</h2><h2 id="1681-1690"><a href="#1681-1690" class="headerlink" title="1681-1690"></a>1681-1690</h2><h2 id="1691-1700"><a href="#1691-1700" class="headerlink" title="1691-1700"></a>1691-1700</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1501-1600</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1501-1600/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1501-1600/</url>
      
        <content type="html"><![CDATA[<h2 id="1501-1510"><a href="#1501-1510" class="headerlink" title="1501-1510"></a>1501-1510</h2><h2 id="1511-1520"><a href="#1511-1520" class="headerlink" title="1511-1520"></a>1511-1520</h2><h2 id="1521-1530"><a href="#1521-1530" class="headerlink" title="1521-1530"></a>1521-1530</h2><h2 id="1531-1540"><a href="#1531-1540" class="headerlink" title="1531-1540"></a>1531-1540</h2><h2 id="1541-1550"><a href="#1541-1550" class="headerlink" title="1541-1550"></a>1541-1550</h2><h2 id="1551-1560"><a href="#1551-1560" class="headerlink" title="1551-1560"></a>1551-1560</h2><h2 id="1561-1570"><a href="#1561-1570" class="headerlink" title="1561-1570"></a>1561-1570</h2><h2 id="1571-1580"><a href="#1571-1580" class="headerlink" title="1571-1580"></a>1571-1580</h2><h2 id="1581-1590"><a href="#1581-1590" class="headerlink" title="1581-1590"></a>1581-1590</h2><h4 id="1588-所有奇数长度子数组的和"><a href="#1588-所有奇数长度子数组的和" class="headerlink" title="1588. 所有奇数长度子数组的和"></a><a href="https://leetcode-cn.com/problems/sum-of-all-odd-length-subarrays/">1588. 所有奇数长度子数组的和</a></h4><p>本题有三种接法，复杂度依次减少。</p><ol><li><p>暴力方法</p><p>时间复杂度$O(n^3)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 暴力</span>    <span class="token keyword">int</span> <span class="token function">sumOddLengthSubarraysOn3</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 遍历所有位置作为起始位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 设置窗口，因为本题的特殊性，只会选择连续的奇数子集</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> step <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> step <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 累加范围内的子集和</span>                sum <span class="token operator">+=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> step<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前缀和方法</p><p>时间复杂度$O(n^2)$，空间复杂度$O(n)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 前缀和</span>    <span class="token keyword">int</span> <span class="token function">sumOddLengthSubarraysOn2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 将所有的重复和计算过程利用前缀和将循环变成常数时间复杂度</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> step <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> step <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> res<span class="token punctuation">[</span>i <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">-</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数学法</p><p>时间复杂度为$O(n)$，空间复杂度$O(1)$</p><p>从数学的角度考虑，可以将本题转换为统计任意值<code>arr[i]</code>在奇数子数组中出现次数。</p><p>对于原数组而言，其左边有$leftCount=i$个数，右边有$rightCount=n-i-1$个数。</p><p>形式化表达为：<code>arr[i]</code>作为某个奇数子数组的成员的充要条件为：其所在奇数子数组左右两边的元素奇偶性相同。即，左侧元素奇数个，右侧元素一定也是奇数个，从而保证加上arr[i]本身总体的奇数个。偶数的情况同样如此。</p><p>因此可以形式化为两种情况：</p><ul><li>当元素arr[i]的左右元素个数都是奇数时，在区间$[0,leftCount]$中存在方案数为$leftOdd=\lfloor \frac{leftCount+1}{2}\ \rfloor$。在区间$[leftCount,rightCount]$中存在方案数为$rightOdd=\lfloor \frac{rightCount+1}{2} \rfloor$。总的可能性即为二者相乘。</li><li>当元素arr[i]的左右元素个数都是偶数时，在区间$[0,leftCount]$中存在方案数为$leftEven=\lfloor \frac{leftCount}{2}+1 \rfloor$。在区间$[leftCount,rightCount]$中存在方案数为$rightEven=\lfloor \frac{rightCount}{2}+1 \rfloor$。总的可能性即为二者相乘。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 数字法</span>    <span class="token keyword">int</span> <span class="token function">sumOddLengthSubarraysOn1</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftCount<span class="token punctuation">,</span> rightCount<span class="token punctuation">,</span> leftOdd<span class="token punctuation">,</span> rightOdd<span class="token punctuation">,</span> leftEven<span class="token punctuation">,</span> rightEven<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftCount <span class="token operator">=</span> i<span class="token punctuation">;</span>            rightCount <span class="token operator">=</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            leftOdd <span class="token operator">=</span> <span class="token punctuation">(</span>leftCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            rightOdd <span class="token operator">=</span> <span class="token punctuation">(</span>rightCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            leftEven <span class="token operator">=</span> leftCount <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            rightEven <span class="token operator">=</span> rightCount <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>leftOdd <span class="token operator">*</span> rightOdd <span class="token operator">+</span> leftEven <span class="token operator">*</span> rightEven<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="1591-1600"><a href="#1591-1600" class="headerlink" title="1591-1600"></a>1591-1600</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1401-1500</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1401-1500/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1401-1500/</url>
      
        <content type="html"><![CDATA[<h2 id="1401-1410"><a href="#1401-1410" class="headerlink" title="1401-1410"></a>1401-1410</h2><h2 id="1411-1420"><a href="#1411-1420" class="headerlink" title="1411-1420"></a>1411-1420</h2><h2 id="1421-1430"><a href="#1421-1430" class="headerlink" title="1421-1430"></a>1421-1430</h2><h2 id="1431-1440"><a href="#1431-1440" class="headerlink" title="1431-1440"></a>1431-1440</h2><h2 id="1441-1450"><a href="#1441-1450" class="headerlink" title="1441-1450"></a>1441-1450</h2><h2 id="1451-1460"><a href="#1451-1460" class="headerlink" title="1451-1460"></a>1451-1460</h2><h2 id="1461-1470"><a href="#1461-1470" class="headerlink" title="1461-1470"></a>1461-1470</h2><h2 id="1471-1480"><a href="#1471-1480" class="headerlink" title="1471-1480"></a>1471-1480</h2><h4 id="1480-一维数组的动态和"><a href="#1480-一维数组的动态和" class="headerlink" title="1480. 一维数组的动态和"></a><a href="https://leetcode-cn.com/problems/running-sum-of-1d-array/">1480. 一维数组的动态和</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">runningSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1481-1490"><a href="#1481-1490" class="headerlink" title="1481-1490"></a>1481-1490</h2><h2 id="1491-1500"><a href="#1491-1500" class="headerlink" title="1491-1500"></a>1491-1500</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1301-1400</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1301-1400/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1301-1400/</url>
      
        <content type="html"><![CDATA[<h2 id="1301-1310"><a href="#1301-1310" class="headerlink" title="1301-1310"></a>1301-1310</h2><h2 id="1311-1320"><a href="#1311-1320" class="headerlink" title="1311-1320"></a>1311-1320</h2><h4 id="1314-矩阵区域和"><a href="#1314-矩阵区域和" class="headerlink" title="1314. 矩阵区域和"></a><a href="https://leetcode-cn.com/problems/matrix-block-sum/">1314. 矩阵区域和</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//获取边界条件</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">matrixBlockSum</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>mat<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">ans</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> k<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i <span class="token operator">-</span> k<span class="token punctuation">,</span> j <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span>                            <span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i <span class="token operator">-</span> k<span class="token punctuation">,</span> j <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1321-1330"><a href="#1321-1330" class="headerlink" title="1321-1330"></a>1321-1330</h2><h2 id="1331-1340"><a href="#1331-1340" class="headerlink" title="1331-1340"></a>1331-1340</h2><h4 id="1331-数组序号转换"><a href="#1331-数组序号转换" class="headerlink" title="1331. 数组序号转换"></a><a href="https://leetcode-cn.com/problems/rank-transform-of-an-array/">1331. 数组序号转换</a></h4><p>本题就是整数离散化，再用二分查找出对应的元素索引。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">arrayRankTransform</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1341-1350"><a href="#1341-1350" class="headerlink" title="1341-1350"></a>1341-1350</h2><h2 id="1351-1360"><a href="#1351-1360" class="headerlink" title="1351-1360"></a>1351-1360</h2><h2 id="1361-1370"><a href="#1361-1370" class="headerlink" title="1361-1370"></a>1361-1370</h2><h2 id="1371-1380"><a href="#1371-1380" class="headerlink" title="1371-1380"></a>1371-1380</h2><h2 id="1381-1390"><a href="#1381-1390" class="headerlink" title="1381-1390"></a>1381-1390</h2><h2 id="1391-1400"><a href="#1391-1400" class="headerlink" title="1391-1400"></a>1391-1400</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1201-1300</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1201-1300/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1201-1300/</url>
      
        <content type="html"><![CDATA[<h2 id="1201-1210"><a href="#1201-1210" class="headerlink" title="1201-1210"></a>1201-1210</h2><h2 id="1211-1220"><a href="#1211-1220" class="headerlink" title="1211-1220"></a>1211-1220</h2><h2 id="1221-1230"><a href="#1221-1230" class="headerlink" title="1221-1230"></a>1221-1230</h2><h2 id="1231-1240"><a href="#1231-1240" class="headerlink" title="1231-1240"></a>1231-1240</h2><h2 id="1241-1250"><a href="#1241-1250" class="headerlink" title="1241-1250"></a>1241-1250</h2><h2 id="1251-1260"><a href="#1251-1260" class="headerlink" title="1251-1260"></a>1251-1260</h2><h2 id="1261-1270"><a href="#1261-1270" class="headerlink" title="1261-1270"></a>1261-1270</h2><h2 id="1271-1280"><a href="#1271-1280" class="headerlink" title="1271-1280"></a>1271-1280</h2><h2 id="1281-1290"><a href="#1281-1290" class="headerlink" title="1281-1290"></a>1281-1290</h2><h2 id="1291-1300"><a href="#1291-1300" class="headerlink" title="1291-1300"></a>1291-1300</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1101-1200</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1101-1200/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1101-1200/</url>
      
        <content type="html"><![CDATA[<h2 id="1101-1110"><a href="#1101-1110" class="headerlink" title="1101-1110"></a>1101-1110</h2><h2 id="1111-1120"><a href="#1111-1120" class="headerlink" title="1111-1120"></a>1111-1120</h2><h2 id="1121-1130"><a href="#1121-1130" class="headerlink" title="1121-1130"></a>1121-1130</h2><h2 id="1131-1140"><a href="#1131-1140" class="headerlink" title="1131-1140"></a>1131-1140</h2><h2 id="1141-1150"><a href="#1141-1150" class="headerlink" title="1141-1150"></a>1141-1150</h2><h2 id="1151-1160"><a href="#1151-1160" class="headerlink" title="1151-1160"></a>1151-1160</h2><h2 id="1161-1170"><a href="#1161-1170" class="headerlink" title="1161-1170"></a>1161-1170</h2><h2 id="1171-1180"><a href="#1171-1180" class="headerlink" title="1171-1180"></a>1171-1180</h2><h2 id="1181-1190"><a href="#1181-1190" class="headerlink" title="1181-1190"></a>1181-1190</h2><h2 id="1191-1200"><a href="#1191-1200" class="headerlink" title="1191-1200"></a>1191-1200</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1001-1100</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1001-1100/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1001-1100/</url>
      
        <content type="html"><![CDATA[<h2 id="1001-1010"><a href="#1001-1010" class="headerlink" title="1001-1010"></a>1001-1010</h2><h2 id="1011-1020"><a href="#1011-1020" class="headerlink" title="1011-1020"></a>1011-1020</h2><h2 id="1021-1030"><a href="#1021-1030" class="headerlink" title="1021-1030"></a>1021-1030</h2><h2 id="1031-1040"><a href="#1031-1040" class="headerlink" title="1031-1040"></a>1031-1040</h2><h2 id="1041-1050"><a href="#1041-1050" class="headerlink" title="1041-1050"></a>1041-1050</h2><h2 id="1051-1060"><a href="#1051-1060" class="headerlink" title="1051-1060"></a>1051-1060</h2><h2 id="1061-1070"><a href="#1061-1070" class="headerlink" title="1061-1070"></a>1061-1070</h2><h2 id="1071-1080"><a href="#1071-1080" class="headerlink" title="1071-1080"></a>1071-1080</h2><h2 id="1081-1090"><a href="#1081-1090" class="headerlink" title="1081-1090"></a>1081-1090</h2><h2 id="1091-1100"><a href="#1091-1100" class="headerlink" title="1091-1100"></a>1091-1100</h2><h4 id="1094-拼车"><a href="#1094-拼车" class="headerlink" title="1094. 拼车"></a><a href="https://leetcode-cn.com/problems/car-pooling/">1094. 拼车</a></h4><p>本题可以抽象为在数组中指定位置增加或减少，即转化为差分问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">carPooling</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>trips<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>item<span class="token operator">:</span> trips<span class="token punctuation">)</span> <span class="token punctuation">{</span>            people<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            people<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 注意这里直接算前缀和会漏掉第0位元素，需要进行特判。或者这里用sum来计算累加和直接比较</span><span class="token comment">//        if (people[0] &gt; capacity) return false;</span><span class="token comment">//        for (int i = 1; i &lt;= 1000; i++) {</span><span class="token comment">//            people[i] += people[i - 1];</span><span class="token comment">//            if (people[i] &gt; capacity) return false;</span><span class="token comment">//        }</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> capacity<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题《程序员面试金典(第六版)》</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-cheng-xu-yuan-mian-shi-jin-dian-di-liu-ban/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-cheng-xu-yuan-mian-shi-jin-dian-di-liu-ban/</url>
      
        <content type="html"><![CDATA[<h4 id="面试题-05-01-插入"><a href="#面试题-05-01-插入" class="headerlink" title="面试题 05.01. 插入"></a><a href="https://leetcode-cn.com/problems/insert-into-bits-lcci/">面试题 05.01. 插入</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">insertBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//这里用longlong是为了防止出现越界</span>            <span class="token comment">//与0相与将i到j的二进制全部变成0</span>            N <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> N <span class="token operator">|</span> <span class="token punctuation">(</span>M <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="面试题-16-01-交换数字"><a href="#面试题-16-01-交换数字" class="headerlink" title="面试题 16.01. 交换数字"></a><a href="https://leetcode-cn.com/problems/swap-numbers-lcci/">面试题 16.01. 交换数字</a></h4><p>本题使用了位运算的性质：</p><ul><li>a^a=0</li><li>a^0=a</li></ul><p>因此本题解析为：</p><p>a=a^b;</p><p>b=a^b=(a^b)^b=a^(b^b)=a^0=a</p><p>a=a^b=a^b^a=0^b=b</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">swapNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> numbers<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetcodeSQL题1378-2175</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcodesql-ti-1378-2175/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcodesql-ti-1378-2175/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetcodeSQL题175-1369</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcodesql-ti-175-1369/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcodesql-ti-175-1369/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题901-1000</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-901-1000/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-901-1000/</url>
      
        <content type="html"><![CDATA[<h2 id="901-910"><a href="#901-910" class="headerlink" title="901-910"></a>901-910</h2><h2 id="911-920"><a href="#911-920" class="headerlink" title="911-920"></a>911-920</h2><h2 id="921-930"><a href="#921-930" class="headerlink" title="921-930"></a>921-930</h2><h2 id="931-940"><a href="#931-940" class="headerlink" title="931-940"></a>931-940</h2><h2 id="941-950"><a href="#941-950" class="headerlink" title="941-950"></a>941-950</h2><h2 id="951-960"><a href="#951-960" class="headerlink" title="951-960"></a>951-960</h2><h2 id="961-970"><a href="#961-970" class="headerlink" title="961-970"></a>961-970</h2><h2 id="971-980"><a href="#971-980" class="headerlink" title="971-980"></a>971-980</h2><h2 id="981-990"><a href="#981-990" class="headerlink" title="981-990"></a>981-990</h2><h2 id="991-1000"><a href="#991-1000" class="headerlink" title="991-1000"></a>991-1000</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题801-900</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-801-900/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-801-900/</url>
      
        <content type="html"><![CDATA[<h2 id="801-810"><a href="#801-810" class="headerlink" title="801-810"></a>801-810</h2><h2 id="811-820"><a href="#811-820" class="headerlink" title="811-820"></a>811-820</h2><h2 id="821-830"><a href="#821-830" class="headerlink" title="821-830"></a>821-830</h2><h2 id="831-840"><a href="#831-840" class="headerlink" title="831-840"></a>831-840</h2><h2 id="841-850"><a href="#841-850" class="headerlink" title="841-850"></a>841-850</h2><h2 id="851-860"><a href="#851-860" class="headerlink" title="851-860"></a>851-860</h2><h2 id="861-870"><a href="#861-870" class="headerlink" title="861-870"></a>861-870</h2><h2 id="871-880"><a href="#871-880" class="headerlink" title="871-880"></a>871-880</h2><h2 id="881-890"><a href="#881-890" class="headerlink" title="881-890"></a>881-890</h2><h2 id="891-900"><a href="#891-900" class="headerlink" title="891-900"></a>891-900</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题701-800</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-701-800/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-701-800/</url>
      
        <content type="html"><![CDATA[<h2 id="701-710"><a href="#701-710" class="headerlink" title="701-710"></a>701-710</h2><h4 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="711-720"><a href="#711-720" class="headerlink" title="711-720"></a>711-720</h2><h2 id="721-730"><a href="#721-730" class="headerlink" title="721-730"></a>721-730</h2><h4 id="724-寻找数组的中心下标"><a href="#724-寻找数组的中心下标" class="headerlink" title="724. 寻找数组的中心下标"></a><a href="https://leetcode-cn.com/problems/find-pivot-index/">724. 寻找数组的中心下标</a></h4><p>本题将题目抽象出来就是解题的代码。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token function">accumulate</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>total<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token keyword">else</span> s<span class="token operator">+=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="731-740"><a href="#731-740" class="headerlink" title="731-740"></a>731-740</h2><h2 id="741-750"><a href="#741-750" class="headerlink" title="741-750"></a>741-750</h2><h2 id="751-760"><a href="#751-760" class="headerlink" title="751-760"></a>751-760</h2><h2 id="761-770"><a href="#761-770" class="headerlink" title="761-770"></a>761-770</h2><h2 id="771-780"><a href="#771-780" class="headerlink" title="771-780"></a>771-780</h2><h2 id="781-790"><a href="#781-790" class="headerlink" title="781-790"></a>781-790</h2><h4 id="781-森林中的兔子"><a href="#781-森林中的兔子" class="headerlink" title="781. 森林中的兔子"></a><a href="https://leetcode-cn.com/problems/rabbits-in-forest/">781. 森林中的兔子</a></h4><p>这题的难点在于分析兔子的种类数量与同一种类中兔子的数量。因此分为两步计算：</p><p>假设有x只兔子说有y只兔子同色。</p><ol><li>计算兔子种类：$\lceil\frac{x}{y+1}\rceil$</li><li>计算同一种类兔子的数量：$y+1$</li><li>二者相乘就是本题答案</li></ol><p>注意代码中公式的顺序，因为整数除法涉及小数舍去。</p><p>代码中$\lceil\frac{x}{y+1}\rceil*(y+1)$通过$\frac{x+y}{y+1}*(y+1)$实现。</p><p>下面证明 $\lceil\frac{n}{x+1}\rceil = \frac{n +x}{x+1}$ 。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Leetcode%E7%AE%97%E6%B3%95%E9%A2%98701-800/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95_781.png" alt="Leetcode刷题记录_781.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numRabbits</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> answers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> cnt<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> itor <span class="token operator">:</span> answers<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>itor<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">:</span>cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span>v<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="791-800"><a href="#791-800" class="headerlink" title="791-800"></a>791-800</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题601-700</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-601-700/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-601-700/</url>
      
        <content type="html"><![CDATA[<h2 id="601-610"><a href="#601-610" class="headerlink" title="601-610"></a>601-610</h2><h2 id="611-620"><a href="#611-620" class="headerlink" title="611-620"></a>611-620</h2><h2 id="621-630"><a href="#621-630" class="headerlink" title="621-630"></a>621-630</h2><h2 id="631-640"><a href="#631-640" class="headerlink" title="631-640"></a>631-640</h2><h2 id="641-650"><a href="#641-650" class="headerlink" title="641-650"></a>641-650</h2><h2 id="651-660"><a href="#651-660" class="headerlink" title="651-660"></a>651-660</h2><h2 id="661-670"><a href="#661-670" class="headerlink" title="661-670"></a>661-670</h2><h2 id="671-680"><a href="#671-680" class="headerlink" title="671-680"></a>671-680</h2><h2 id="681-690"><a href="#681-690" class="headerlink" title="681-690"></a>681-690</h2><h2 id="691-700"><a href="#691-700" class="headerlink" title="691-700"></a>691-700</h2><h4 id="693-交替位二进制数"><a href="#693-交替位二进制数" class="headerlink" title="693. 交替位二进制数"></a><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693. 交替位二进制数</a></h4><p>相邻两位不同，可以通过二进制11去检测，如果是00或者11则会与运算出00或11，即0或3。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">hasAlternatingBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题501-600</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-501-600/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-501-600/</url>
      
        <content type="html"><![CDATA[<h2 id="501-510"><a href="#501-510" class="headerlink" title="501-510"></a>501-510</h2><h4 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503. 下一个更大元素 II</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 破环成链，将原本的环变成两个nums的链条</span>        nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&gt;=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 结果只存放0到nums.size()-1之间的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="511-520"><a href="#511-520" class="headerlink" title="511-520"></a>511-520</h2><h2 id="521-530"><a href="#521-530" class="headerlink" title="521-530"></a>521-530</h2><h2 id="531-540"><a href="#531-540" class="headerlink" title="531-540"></a>531-540</h2><h2 id="541-550"><a href="#541-550" class="headerlink" title="541-550"></a>541-550</h2><h2 id="551-560"><a href="#551-560" class="headerlink" title="551-560"></a>551-560</h2><h2 id="561-570"><a href="#561-570" class="headerlink" title="561-570"></a>561-570</h2><h2 id="571-580"><a href="#571-580" class="headerlink" title="571-580"></a>571-580</h2><h2 id="581-590"><a href="#581-590" class="headerlink" title="581-590"></a>581-590</h2><h2 id="591-600"><a href="#591-600" class="headerlink" title="591-600"></a>591-600</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题401-500</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-401-500/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-401-500/</url>
      
        <content type="html"><![CDATA[<h2 id="401-410"><a href="#401-410" class="headerlink" title="401-410"></a>401-410</h2><h2 id="411-420"><a href="#411-420" class="headerlink" title="411-420"></a>411-420</h2><h4 id="415-字符串相加"><a href="#415-字符串相加" class="headerlink" title="415. 字符串相加"></a><a href="https://leetcode-cn.com/problems/add-strings/">415. 字符串相加</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">addStrings</span><span class="token punctuation">(</span>string num1<span class="token punctuation">,</span> string num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> k <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> k <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="421-430"><a href="#421-430" class="headerlink" title="421-430"></a>421-430</h2><h2 id="431-440"><a href="#431-440" class="headerlink" title="431-440"></a>431-440</h2><h2 id="441-450"><a href="#441-450" class="headerlink" title="441-450"></a>441-450</h2><h2 id="451-460"><a href="#451-460" class="headerlink" title="451-460"></a>451-460</h2><h2 id="461-470"><a href="#461-470" class="headerlink" title="461-470"></a>461-470</h2><h4 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461. 汉明距离"></a><a href="https://leetcode-cn.com/problems/hamming-distance/">461. 汉明距离</a></h4><p>本题属于位运算的组合题。先使用异或的性质去除所有二进制不同位的位，再使用与计算二进制中1的个数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">^=</span> y<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="471-480"><a href="#471-480" class="headerlink" title="471-480"></a>471-480</h2><h2 id="481-490"><a href="#481-490" class="headerlink" title="481-490"></a>481-490</h2><h2 id="491-500"><a href="#491-500" class="headerlink" title="491-500"></a>491-500</h2><h4 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素 I</a></h4><p>本题本质上是一个单调栈的模板题，唯一不同的地方就是使用了两个vector存放数据，因此，在找到num2所有元素的下一个更大元素存入哈希表。再将num1中的元素通过哈希表查出对应的答案。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// key为nums2中的值，value为对应值下一个更大的元素</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> heap<span class="token punctuation">;</span>        <span class="token comment">// 存放单调栈</span>        <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">--</span>top<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> heap<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> heap<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>heap<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题301-400</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-301-400/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-301-400/</url>
      
        <content type="html"><![CDATA[<h2 id="301-310"><a href="#301-310" class="headerlink" title="301-310"></a>301-310</h2><h4 id="303-区域和检索-数组不可变"><a href="#303-区域和检索-数组不可变" class="headerlink" title="303. 区域和检索 - 数组不可变"></a><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">303. 区域和检索 - 数组不可变</a></h4><p>前缀和模板题，注意下下标是从0开始的，适当的将前缀和数组右移一位。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>    <span class="token function">NumArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 只有声明了容量才能直接使用下标</span>        ans<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> ans<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="311-320"><a href="#311-320" class="headerlink" title="311-320"></a>311-320</h2><h2 id="321-330"><a href="#321-330" class="headerlink" title="321-330"></a>321-330</h2><h2 id="331-340"><a href="#331-340" class="headerlink" title="331-340"></a>331-340</h2><h2 id="341-350"><a href="#341-350" class="headerlink" title="341-350"></a>341-350</h2><h4 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/">341. 扁平化嵌套列表迭代器</a></h4><p>递归写法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">NestedIterator</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>NestedInteger<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nestedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>itor<span class="token operator">:</span> nestedList<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>itor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>NestedInteger <span class="token operator">&amp;</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>itor<span class="token operator">:</span>next<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>itor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> q<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> k<span class="token operator">&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="351-360"><a href="#351-360" class="headerlink" title="351-360"></a>351-360</h2><h2 id="361-370"><a href="#361-370" class="headerlink" title="361-370"></a>361-370</h2><h2 id="371-380"><a href="#371-380" class="headerlink" title="371-380"></a>371-380</h2><h4 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371. 两整数之和"></a><a href="https://leetcode-cn.com/problems/sum-of-two-integers/">371. 两整数之和</a></h4><p>加法可以分为两步：</p><ol><li>使用a^b计算出不带进位的加法</li><li>使用(a&amp;b)&lt;&lt;1计算出进位</li></ol><p>针对每一位二进制，递归上述流程。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span> a<span class="token operator">:</span><span class="token function">getSum</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="381-390"><a href="#381-390" class="headerlink" title="381-390"></a>381-390</h2><h2 id="391-400"><a href="#391-400" class="headerlink" title="391-400"></a>391-400</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题201-300</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-201-300/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-201-300/</url>
      
        <content type="html"><![CDATA[<h2 id="201-210"><a href="#201-210" class="headerlink" title="201-210"></a>201-210</h2><h4 id="208-实现-Trie-前缀树"><a href="#208-实现-Trie-前缀树" class="headerlink" title="208. 实现 Trie (前缀树)"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h4><p>关于「二维数组」是如何工作 &amp; 1e5 大小的估算要搞懂为什么行数估算是 1e5，首先要搞清楚「二维数组」是如何工作的。</p><p>在「二维数组」中，我们是通过 indexindex 自增来控制使用了多少行的。</p><p>当我们有一个新的字符需要记录，我们会将 indexindex 自增（代表用到了新的一行），然后将这新行的下标记录到当前某个前缀的格子中。</p><p>举个🌰，假设我们先插入字符串 abc 这时候，前面三行会被占掉。</p><p>第 0 行 a 所对应的下标有值，值为 1，代表前缀 a 后面接的字符串会被记录在下标为 1 的行内</p><p>第 1 行 b 所对应的下标有值，值为 2，代表前缀 ab 后面接的字符串会被记录在下标为 2 的行内</p><p>第 2 行 c 所对应的下标有值，值为 3，代表前缀 abc 后面接的字符串会被记录在下标为 3 的行内</p><p>当再插入 abcl 的时候，这时候会先定位到 abc的前缀行（第 3 行），将 l 的下标更新为 4，代表 abcl 被加入前缀树，并且前缀 abcl 接下来会用到第 4 行进行记录。</p><p>但当插入 abl 的时候，则会定位到 ab 的前缀行（第 2 行），然后将 l 的下标更新为 5，代表 abl 被加入前缀树，并且前缀 abl 接下来会使用第 5 行进行记录。</p><p>当搞清楚了「二维数组」是如何工作之后，我们就能开始估算会用到多少行了，调用次数为 10^4 ，传入的字符串长度为 10^3 ，假设每一次的调用都是 insert，并且每一次调用都会使用到新的 10^3行。那么我们的行数需要开到 10^7。</p><p>但由于我们的字符集大小只有 26，因此不太可能在 10^4次调用中都用到新的 10^3行。</p><p>而且正常的测试数据应该是 search和 startsWith调用次数大于 insert才有意义的，一个只有insert调用的测试数据，任何实现方案都能 AC。</p><p>因此我设定了 10^5为行数估算，当然直接开到 10^6也没有问题。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 这个放在外层，空间能重复利用，能大大减少算法所用空间</span><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>idx<span class="token punctuation">;</span>            k <span class="token operator">=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>cnt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> k <span class="token operator">=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> k <span class="token operator">=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="211-220"><a href="#211-220" class="headerlink" title="211-220"></a>211-220</h2><h2 id="221-230"><a href="#221-230" class="headerlink" title="221-230"></a>221-230</h2><h2 id="231-240"><a href="#231-240" class="headerlink" title="231-240"></a>231-240</h2><h4 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231.2 的幂"></a><a href="https://leetcode-cn.com/problems/power-of-two/">231.2 的幂</a></h4><p>符合2的幂的数在二进制中表示为首位为1，其余位为0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="241-250"><a href="#241-250" class="headerlink" title="241-250"></a>241-250</h2><h2 id="251-260"><a href="#251-260" class="headerlink" title="251-260"></a>251-260</h2><h2 id="261-270"><a href="#261-270" class="headerlink" title="261-270"></a>261-270</h2><h2 id="271-280"><a href="#271-280" class="headerlink" title="271-280"></a>271-280</h2><h2 id="281-290"><a href="#281-290" class="headerlink" title="281-290"></a>281-290</h2><h2 id="291-300"><a href="#291-300" class="headerlink" title="291-300"></a>291-300</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题101-200</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-101-200/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-101-200/</url>
      
        <content type="html"><![CDATA[<h2 id="101-110"><a href="#101-110" class="headerlink" title="101-110"></a>101-110</h2><h2 id="111-120"><a href="#111-120" class="headerlink" title="111-120"></a>111-120</h2><h2 id="121-130"><a href="#121-130" class="headerlink" title="121-130"></a>121-130</h2><h2 id="131-140"><a href="#131-140" class="headerlink" title="131-140"></a>131-140</h2><h4 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">136. 只出现一次的数字</a></h4><p>本题利用位运算中异或的性质。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>item<span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">^=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="141-150"><a href="#141-150" class="headerlink" title="141-150"></a>141-150</h2><h2 id="151-160"><a href="#151-160" class="headerlink" title="151-160"></a>151-160</h2><h2 id="161-170"><a href="#161-170" class="headerlink" title="161-170"></a>161-170</h2><h2 id="171-180"><a href="#171-180" class="headerlink" title="171-180"></a>171-180</h2><h4 id="173-二叉搜索树迭代器"><a href="#173-二叉搜索树迭代器" class="headerlink" title="173. 二叉搜索树迭代器"></a><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/">173. 二叉搜索树迭代器</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BSTIterator</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//构造栈，将根节点的左节点循环加入栈中，以此寻找相应子树的节点</span>    <span class="token function">BSTIterator</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token operator">=</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取当前节点的信息。如果该节点存在右节点将右节点下的左节点压入栈中</span>    <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> p<span class="token operator">=</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val<span class="token operator">=</span>p<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//检测是否还有元素没有遍历只需检测栈中是否还有节点</span>    <span class="token keyword">bool</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stk<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//使用栈存储节点信息</span>    stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> stk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="181-190"><a href="#181-190" class="headerlink" title="181-190"></a>181-190</h2><h4 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/">190. 颠倒二进制位</a></h4><p>这题最好的解法是分治算法，但是局限性很大。故本题给出基于循环处理位运算的解法。</p><p>本题可以分解为两个部分：</p><ol><li>首先获取当前位二进制值，n&gt;&gt;i&amp;1</li><li>将二进制数组装进结果，res&lt;&lt;1+当前位二进制值</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">uint32_t</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">uint32_t</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="191-200"><a href="#191-200" class="headerlink" title="191-200"></a>191-200</h2><h4 id="191-位1的个数"><a href="#191-位1的个数" class="headerlink" title="191. 位1的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位1的个数</a></h4><p> 函数<code>lowbit(x)</code>可以返回当前数字x二进制下最后1位1在第几位，实现方法为x&amp;-x，在Cpp中-x=~x+1。本题解法就是这样的思路。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            n<span class="token operator">-=</span>n<span class="token operator">&amp;</span><span class="token operator">-</span>n<span class="token punctuation">;</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode算法题1-100</title>
      <link href="/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1-100/"/>
      <url>/2022/01/16/suan-fa/leetcode-he-ji/leetcode-suan-fa-ti-1-100/</url>
      
        <content type="html"><![CDATA[<h2 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a>1-10</h2><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//heap中的键存放数组元素，值存放数组元素的索引</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> heap<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> re<span class="token operator">=</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//count函数中的值对应键值对中的key,检查是否有符合的key存在</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>heap<span class="token punctuation">[</span>re<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>            heap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//防止报错</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a><a href="https://leetcode-cn.com/problems/add-two-numbers">2.两数相加</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>l1<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//dummy节点表示结果链表。用-1作为虚拟头节点，cur表示运算过程中的执行节点</span>        <span class="token keyword">auto</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token comment">//t存储当前位相加的值</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2 <span class="token operator">||</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> t<span class="token operator">+=</span>l1<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span>l1<span class="token operator">=</span>l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> t<span class="token operator">+=</span>l2<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span>l2<span class="token operator">=</span>l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//记得在更新cur-&gt;next的同时，更新cur已进行下一轮运算</span>            cur<span class="token operator">=</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">3.无重复字符的最长子串</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 双指针算法的主要优化点就是寻找题目中的单调性。假设变量i,j,i与j之间就是非重复元素的子串。 * 则当i向后时，j最前的位置只能是当前位置或朝后的位置。可以采用反证法证明。 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> heap<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//注意这里不能写成i,j=0会出错</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            heap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> heap<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays">4.寻找两个正序数组的中位数</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//注意这里是totle/2+1</span>            <span class="token keyword">return</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**保证nums1数组的长度小于nums2,如果不是则反转过来。         * 这样操作的原因在于可以减少考虑的情况。         * 如果不约定nums1的长度小于nums2,需要考虑三种情况：         * 1. n,m&gt;=k/2         * 2. m&lt;k/2         * 3. n&lt;k/2         * 约定后只需要考虑两种情况         * 1. n,m&gt;=k/2         * 2. m&lt;k/2         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">&gt;</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> j<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个判断需要放在k==1之前操作，因为i可能会在nums1中越界。这里判断的是nums1中没有数字的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//因为这里保证了nums1小于nums2中需要考虑元素的数量，因此存在nums2中的数字远多于nums1中的数字，直接使用i+k/2会导致超过nums1中元素的数量。</span>        <span class="token comment">//因此需要使用min()保证不越界,这里与nums1.size()比较是因为i在不断增大，不能使用nums1.size()-k/2</span>        <span class="token comment">//这里的si和sj分别表示在nums1和nums2数组中第k/2位置的后一位。因此在后面比较的时候需要-1。</span>        <span class="token comment">//另外vector.size()返回的是无符号整形，因此需要强转int,而不能直接比较</span>        <span class="token keyword">int</span> si <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sj <span class="token operator">=</span> j <span class="token operator">+</span> k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//舍去无用子数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>si <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>sj <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> sj<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>sj <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> si<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>si <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring">5.最长回文子串</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的回文串存在两种可能： * 1. 数量为奇数，两边对称 * 2. 数量为偶数。从中向外，两两配对 * * 解题的思路是选定一个i点，左边L点和R点分别是其回文串的左端点和右端点，则整个长度为(R-1)-(L+1)+1=R-L-1 * 复杂度分析:枚举所有点作为i点为O(n)，枚举i点的LR点也是O(n)，因此整体为O(n^2) * 上述的解法较为通用，若是想追求更好的时间复杂度可以采用马拉车(Manacher)算法，将时间复杂度降至O(n)，但不具备通用性。 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//最长回文串</span>        string res<span class="token punctuation">;</span>        <span class="token comment">//将字符串的每一个点作为i点进行分析</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//假设此时i点的回文串字符数为奇数个</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">--</span><span class="token punctuation">,</span> r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//假设此时i点的回文串字符数为偶数个</span>            l <span class="token operator">=</span> i<span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">--</span><span class="token punctuation">,</span> r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-Z字变换"><a href="#6-Z字变换" class="headerlink" title="6.Z字变换"></a><a href="https://leetcode-cn.com/problems/zigzag-conversion/">6.Z字变换</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 这道题本质上是一个找规律的题目，Z字变换指的是字符串的打印不是横着，而是横着的Z的结构进行打印 * 本题共有三种情况进行分别考虑，n表示Z字变换的行数： * 1. 观察第一行与最后一行可知，其都是以2n-2为公差的等差数列 * 2. 观察中间的行数可知，可以将打印的字符分为垂直和倾斜的两种数组的交替数组，且这两个数组依旧是以2n-2为公差的等差数组， *    而垂直与倾斜的二者之间存在这这样的约束关系：两两之间其和为2n-2 * 3. 当2n-2中的n为1是，2n-2==0,会陷入死循环，因此将n==1的情况进行特判 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//避免出现n==1导致的2n-2==0的出现进行特判</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//首行或末行的情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> numRows <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//中间行的情况</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> numRows <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> numRows <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> k <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> numRows <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7.整数反转"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7.整数反转</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Tip： * Cpp中取余运算不同于数学中的取模，整数取余为整数，负数取余为负数 * 这题使用long long就不需要考虑数据越界问题，直接比较生成数字是否越界即可 * 但如果使用int，需要先判断给定的数是否越界。如果越界直接返回为0 * 假定r是返回的反转数字，x是传入的原数字 * 举例： 如果是正数越界，此时10*r+x%10&gt;INT_MAX,进行不等式变换，可以得到r&gt;(INT_MAX-x%10)/10 * 即满足上述条件时，获得的反转数越界，可以直接返回0 * 负数借助Cpp中取余的特性同理可得。 * * long long的写法如下： */</span><span class="token comment">// class Solution {</span><span class="token comment">//public:</span><span class="token comment">//    int reverse(int x) {</span><span class="token comment">//        long long r=0;</span><span class="token comment">//        while(x){</span><span class="token comment">//            r=r*10+x%10;</span><span class="token comment">//            x/=10;</span><span class="token comment">//        }</span><span class="token comment">//        if(r&gt;INT_MAX) return 0;</span><span class="token comment">//        if(r&lt;INT_MIN) return 0;</span><span class="token comment">//        return r;</span><span class="token comment">//    }</span><span class="token comment">//};</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&gt;</span> <span class="token punctuation">(</span>INT_MAX <span class="token operator">-</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> <span class="token punctuation">(</span>INT_MIN <span class="token operator">-</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8.字符串转换整数 (atoi)"></a><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">8.字符串转换整数 (atoi)</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 1. 去掉字符串前面的空格字符 * 2. 该字符串全是空格，直接返回0 * 3. 判断是否有符号位,设置结果的符号位 * 4. 将字符串转化为数字 * 5. 判断是否越界 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//整个字符串的索引位置</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//去掉字符串前面的空格字符</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token comment">//该字符串全是空格，直接返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//设置结果的符号位</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token comment">//防止出现'-+'等情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//将字符串转化为数字</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token comment">//避免出现过长字符串</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> INT_MAX<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res <span class="token operator">*=</span> flag<span class="token punctuation">;</span>        <span class="token comment">//判断是否越界</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> INT_MAX<span class="token punctuation">)</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> INT_MIN<span class="token punctuation">)</span> res <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9.回文数</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//这是将x转化为string,并比较二者</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果是负数，因为符号的存在，必然不是回文数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//to_string函数为C++11引入</span>        string s <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用反向迭代器将生成的字符串与与其相反的字符串对比其是否一致</span>        <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果是负数，因为符号的存在，必然不是回文数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//因为后面修改了x的值，所以这里需要将x的值进行保存以便进行比较y</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10.正则表达式匹配"></a><a href="https://leetcode-cn.com/problems/regular-expression-matching/">10.正则表达式匹配</a></h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Leetcode%E5%90%88%E9%9B%86/Leetcode%E7%AE%97%E6%B3%95%E9%A2%981-100/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95_10.png" alt="Leetcode刷题记录_10.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 本题是一个动态规划问题,思路详见笔记 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取匹配串与模式串的字符长度以便于计算</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将第一位空出便于后面从下标1开始运算</span>        s <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> s<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token char">' '</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>        <span class="token comment">//创建状态转移矩阵</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化第一个状态,即什么都没有</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//这里从0开始是因为即使匹配串为空也可能符合模式串的要求</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//遇到下一位是*的此位直接跳过，将此位与后面的*一起处理</span>                <span class="token comment">//防止越界，需要多加一个判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//因为这里需要看下标为i-1的值因此需要i不为零</span>                    <span class="token comment">//因为这里的j下标指向的是*，所以需要与j-1下标的进行匹配</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> i <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-20"><a href="#11-20" class="headerlink" title="11-20"></a>11-20</h2><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><p>本题优化在用一个双指针优化了两层循环，将其从$O(n^2)$降低到$O(2n)$，因此整体时间复杂度为$O(n^2)$。</p><p>基于单调性，可以使用试探法，先判断下一个是否满足，满足直接去下一个数，不然用上一个数检验。</p><p>针对重复情况，使用形如<code>j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]</code>这样的方式，避免相同位上相同的元素。    </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果起始为就大于0，则之后的数字必然超过0，非题目解</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 排除重复情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 排除重复情况</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">// 试探法，如果下一个数满足就用下一个数</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>k<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h4><p>另外需要注意虽然排序完成后整体为单调递增，但是target为负数时，不能通过<code>nums[i]&gt;target</code>进行常数级优化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>l<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> target <span class="token operator">==</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-30"><a href="#21-30" class="headerlink" title="21-30"></a>21-30</h2><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21.合并两个有序链表</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 本题就是简单的二路归并问题 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>l1<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//结果链表的头节点设置为虚拟节点避免</span>        <span class="token keyword">auto</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-&gt;</span>val <span class="token operator">&lt;</span> l2<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22.括号生成"></a><a href="https://leetcode-cn.com/problems/generate-parentheses/">22.括号生成</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 满足要求的小括号集合必然满足以下两个性质： * 1. 任意前缀中'('数量必然&gt;=')'的数量 * 2. 左右括号数量相等 * 如果本题不是需要输出所有方案，而是只求数量的话，可以通过卡特兰数进行计算 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> lc<span class="token punctuation">,</span> <span class="token keyword">int</span> rc<span class="token punctuation">,</span> string seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> rc <span class="token operator">==</span> n<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> lc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rc<span class="token punctuation">,</span> seq <span class="token operator">+</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> lc <span class="token operator">&gt;</span> rc<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> lc<span class="token punctuation">,</span> rc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> seq <span class="token operator">+</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存整个链表的头指针</span>        <span class="token keyword">auto</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummy<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> dummy<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 检查是否存在k个元素，不存在则退出循环</span>            <span class="token keyword">auto</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment">// 交换中间元素的next</span>            <span class="token keyword">auto</span> a <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">auto</span> c <span class="token operator">=</span> b<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>                b<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>                a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 前后元素旋转</span>            <span class="token keyword">auto</span> c <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> a<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ne<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里最后多出来的元素用来标记匹配成功的情况</span>        ne<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> ne<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// ~j表示j为-1的情况</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>j <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">=</span> i <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token comment">// 如果是查找多个</span>                <span class="token comment">// 只需要j=ne[j];即可，ne[n]==0，即从匹配串的第0位开始重新匹配</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="31-40"><a href="#31-40" class="headerlink" title="31-40"></a>31-40</h2><h2 id="41-50"><a href="#41-50" class="headerlink" title="41-50"></a>41-50</h2><h4 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43. 字符串相乘"></a><a href="https://leetcode-cn.com/problems/multiply-strings/">43. 字符串相乘</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">multiply</span><span class="token punctuation">(</span>string num1<span class="token punctuation">,</span> string num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">C</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 注意这里的是+=，因为这里C[i+j]的值可能需要被多次计算</span>                C<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//将结果集中数据进行进位与取模</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//去前导0</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>C<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> k<span class="token operator">--</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> C<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="51-60"><a href="#51-60" class="headerlink" title="51-60"></a>51-60</h2><h4 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51.N皇后"></a><a href="https://leetcode-cn.com/problems/n-queens">51.N皇后</a></h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Leetcode%E5%90%88%E9%9B%86/Leetcode%E7%AE%97%E6%B3%95%E9%A2%981-100/n%E7%9A%87%E5%90%8E%E6%88%AA%E8%B7%9D%E8%AE%A1%E7%AE%97.jpg" alt="n皇后截距计算.jpg"></p><p>由图可知，当y=x+b是存在截距为负数的情况，而数组下表不存在负数。因此+n，保证其为正数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> col<span class="token punctuation">,</span> dg<span class="token punctuation">,</span> udg<span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> path<span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> _n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> _n<span class="token punctuation">;</span>        col <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        dg <span class="token operator">=</span> udg <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    path<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span>                    col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="52-N皇后II"><a href="#52-N皇后II" class="headerlink" title="52.N皇后II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii">52.N皇后II</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> col<span class="token punctuation">,</span> dg<span class="token punctuation">,</span> udg<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> _n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> _n<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        col <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        dg <span class="token operator">=</span> udg <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">-</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="53"><a href="#53" class="headerlink" title="53."></a><a href="https://leetcode-cn.com/problems/maximum-subarray">53.</a></h4><h4 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode-cn.com/problems/merge-intervals/">56. 合并区间</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token operator">&amp;</span>intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span>        <span class="token comment">// 所有区间按照左端点排序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> st <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 排序完之后，之后出现三种情况</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 1. 起始点就与上一个区间没有重叠</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> end<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                end <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 2. 区间结束点在当前区间之外</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> end <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 3. 区间结束点在当前区间内，不用处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 将最后的区间压入ans队列</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> end<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="61-70"><a href="#61-70" class="headerlink" title="61-70"></a>61-70</h2><h4 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61. 旋转链表"></a><a href="https://leetcode-cn.com/problems/rotate-list/">61. 旋转链表</a></h4><p>本题的移动位置k会给的很大，需要进行取余操作。</p><p>本题的解题步骤分为四步：</p><ol><li>将n-k-1处的节点的next指向NULL</li><li>将整个链表的尾部指向头节点</li><li>返回原本n-k处的节点</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token comment">//获取链表长度</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> len<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        k<span class="token operator">%=</span>len<span class="token punctuation">;</span>        <span class="token comment">//判断取余后的k是否为0,如果是直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//找到第n-k-1节点</span>            <span class="token keyword">auto</span> p<span class="token operator">=</span>head<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//找到尾节点</span>            <span class="token keyword">auto</span> tail<span class="token operator">=</span>head<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tail<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> tail<span class="token operator">=</span>tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token comment">//链接</span>            tail<span class="token operator">-&gt;</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>            head<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            p<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="69-Sqrt-x"><a href="#69-Sqrt-x" class="headerlink" title="69. Sqrt(x)"></a><a href="https://leetcode-cn.com/problems/sqrtx/">69. Sqrt(x)</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里直接写l+r可能会越界，但是这里将1替换成1ll会变成long long类型，避免越界</span>            <span class="token comment">// 或者写成l+(r-l)/2</span>            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1ll</span> <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 这里之所以写成这样是为了防止越界</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> x <span class="token operator">/</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="71-80"><a href="#71-80" class="headerlink" title="71-80"></a>71-80</h2><h2 id="81-90"><a href="#81-90" class="headerlink" title="81-90"></a>81-90</h2><h4 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token operator">||</span><span class="token operator">!</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummy<span class="token operator">-&gt;</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">auto</span> pre<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> cur<span class="token operator">=</span>pre<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-&gt;</span>val<span class="token operator">==</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token operator">==</span>cur<span class="token punctuation">)</span> pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token keyword">else</span> pre<span class="token operator">-&gt;</span>next<span class="token operator">=</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> dummy<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">&amp;&amp;</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val<span class="token operator">==</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">=</span>cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> cur<span class="token operator">=</span>cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode-cn.com/problems/subsets-ii/">90. 子集 II</a></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">//key为数字，value为出现次数</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> cnt<span class="token punctuation">;</span>    <span class="token comment">//结果集合</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ans<span class="token punctuation">;</span>    <span class="token comment">//路径</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> path<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果只有一个数字，直接返回一个空集与当前数字</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> itor<span class="token operator">:</span>nums<span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>itor<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//这题范围较小，直接枚举</span>            <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//超过边界将结果保存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//这里处理数字出现的次数，从0到cnk[n]次</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//清理现场</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="91-100"><a href="#91-100" class="headerlink" title="91-100"></a>91-100</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQL</title>
      <link href="/2022/01/14/cheng-xu-she-ji/hql-xue-xi/"/>
      <url>/2022/01/14/cheng-xu-she-ji/hql-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>HQL（Hibernate Query Language）是面向对象的查询语言。，它与SQL查询语言类似。 在 Hibernate 提供的各种检索方式中, HQL 是使用最广的一种检索方式. 它有如下功能:</p><ol><li>在查询语句中设定各种查询条件；</li><li>支持投影查询, 即仅检索出对象的部分属性；</li><li>支持分页查询；</li><li>支持连接查询；</li><li>支持分组查询, 允许使用 HAVING 和 GROUP BY 关键字；</li><li>提供内置聚集函数, 如 sum(), min() 和 max()；</li><li>支持子查询；</li><li>支持动态绑定参数；</li><li>能够调用 用户定义的 SQL 函数或标准的 SQL 函数。</li></ol><p>HQL 查询包括以下步骤:</p><ol><li>获取Hibernate Session对象。</li><li>编写HQL语句</li><li>以HQL语句作为参数，调用Session的createQuery方法创建查询对象。</li><li>如果HQL语句包含参数，则调用Query的setXxx方法为参数赋值。</li><li>调用Query对象的list()或uniqueResult()方法返回查询结果列表（持久化实体集）</li></ol><p>Qurey 接口支持方法链编程风格, 它的 setXxx() 方法返回自身实例, 而不是 void 类型，因此可以写类似于<code>.setXxx().setXxx().setXxx()...</code>样式的语句。</p><h2 id="HQL-VS-SQL"><a href="#HQL-VS-SQL" class="headerlink" title="HQL VS SQL"></a>HQL VS SQL</h2><p>HQL 查询语句是面向对象的, Hibernate 负责解析 HQL 查询语句, 然后根据对象-关系映射文件中的映射信息, 把 HQL 查询语句翻译成相应的 SQL 语句。HQL 查询语句中的主体是域模型中的类及类的属性。</p><p>SQL 查询语句是与关系数据库绑定在一起的。SQL 查询语句中的主体是数据库表及表的字段。</p><p>HQL与SQL基本一致，在用法上：</p><ol><li>HQL不支持行级别的增删改，所有数据在加载时就已经确定好了，不可更改，只能整个分区覆盖写</li><li>不支持事务</li><li>支持分区存储</li></ol><p>HQL有以下特点：</p><ol><li>不支持等值连接，一般使用left join、right join、或者inner join替代</li><li>不能智能识别<code>concat(';',key')</code>，只会将分号作为SQL结束符</li><li>不支持insert into、update、delete等操作</li><li>HQL中String类型的字段若是空(empty)字符串, 即长度为0, 那么对它进行IS NULL的判断结果是False，使用left join可以进行筛选行</li><li>不支持 ‘&lt; dt &lt;’这种格式的范围查找，可以用dt in(”,”)或者between替代</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>CSDN，<a href="https://blog.csdn.net/qq_28633249/article/details/77884062">深入HQL学习以及HQL和SQL的区别</a>，2017</li><li>简书，<a href="https://www.jianshu.com/p/0696a52226bb">【数据库】HIVE SQL与SQL的区别</a>，2019</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求二进制中1的个数</title>
      <link href="/2021/12/27/suan-fa/qiu-er-jin-zhi-zhong-1-de-ge-shu/"/>
      <url>/2021/12/27/suan-fa/qiu-er-jin-zhi-zhong-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>任意给定一个32位无符号整数n，求n的二进制表示中1的个数。</p><h2 id="普通法"><a href="#普通法" class="headerlink" title="普通法"></a>普通法</h2><p>原理：移位+计数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BitCount</span><span class="token punctuation">(</span>a <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>num <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>num <span class="token operator">+=</span> a <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：这样会循环整个byte数组，运行较慢</p><h2 id="快速法"><a href="#快速法" class="headerlink" title="快速法"></a>快速法</h2><p>原理：不断清除n的二进制表示中最右边的1，同时进行累加，直到n为0。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BitCount</span><span class="token punctuation">(</span>a <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>num <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> num<span class="token operator">++</span> <span class="token punctuation">{</span>a <span class="token operator">&amp;=</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：其运算次数与输入n的大小无关，只与n中1的个数有关。</p><h2 id="查表法"><a href="#查表法" class="headerlink" title="查表法"></a>查表法</h2><h3 id="动态建表"><a href="#动态建表" class="headerlink" title="动态建表"></a>动态建表</h3><p>由于表示在程序运行时动态创建的，所以速度上肯定会慢一些，把这个版本放在这里，有两个原因</p><ol><li> 介绍填表的方法，因为这个方法的确很巧妙。</li><li> 类型转换，这里使用移位的方式实现切分uint32变成[]byte</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BitCount1</span><span class="token punctuation">(</span>a <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>num <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//建表</span>BitSetTable <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//init</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>BitSetTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">byte</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> BitSetTable<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//拆分uint32为4个uint8的字段</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//查表</span>num <span class="token operator">=</span> BitSetTable<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> BitSetTable<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> BitSetTable<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> BitSetTable<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先说一下填表的原理，根据奇偶性来分析，对于任意一个正整数n</p><ol><li><p>如果它是偶数，那么n的二进制中1的个数与n/2中1的个数是相同的，比如4和2的二进制中都有一个1，6和3的二进制中都有两个1。为啥？因为n是由n/2左移一位而来，而移位并不会增加1的个数。</p></li><li><p>如果n是奇数，那么n的二进制中1的个数是n/2中1的个数+1，比如7的二进制中有三个1，7/2 = 3的二进制中有两个1。为啥？因为当n是奇数时，n相当于n/2左移一位再加1。</p></li></ol><p>再说一下查表的原理</p><p>对于任意一个32位无符号整数，将其分割为4部分，每部分8bit，对于这四个部分分别求出1的个数，再累加起来即可。而8bit对应$2^8 = 256$种01组合方式，这也是为什么表的大小为256的原因。</p><p>所谓的 静态表-4bit和静态表-8bit就是在动态建表的基础之上，手动的给出动态建表过程中的表信息，从而实现相较于动态建表更快的时间复杂度。原理与动态建表一致。</p><h2 id="平行算法"><a href="#平行算法" class="headerlink" title="平行算法"></a>平行算法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BitCount2</span><span class="token punctuation">(</span>n <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0f0f0f0f</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x00ff00ff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff00ff</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">0x0000ffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0000ffff</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/%E5%B9%B3%E8%A1%8C%E7%AE%97%E6%B3%95.jpeg" alt="平行算法.jpeg"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>博客园，<a href="https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html">算法-求二进制数中1的个数 </a>，2010</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL之CASE WHEN</title>
      <link href="/2021/12/24/cheng-xu-she-ji/sql-zhi-case-when/"/>
      <url>/2021/12/24/cheng-xu-she-ji/sql-zhi-case-when/</url>
      
        <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><strong>case函数只返回第一个符合条件的值，剩下的case部分将会被自动忽略。如果省略了ELSE子句，则返回NULL。</strong></p><h3 id="简单case函数"><a href="#简单case函数" class="headerlink" title="简单case函数"></a>简单case函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--简单case函数</span><span class="token keyword">case</span> sex  <span class="token keyword">when</span> <span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token string">'男'</span>  <span class="token keyword">when</span> <span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token string">'女’  else '</span>其他' <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case搜索函数"><a href="#case搜索函数" class="headerlink" title="case搜索函数"></a>case搜索函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span> <span class="token keyword">when</span> sex <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token keyword">then</span> <span class="token string">'男'</span>     <span class="token keyword">when</span> sex <span class="token operator">=</span> <span class="token string">'2'</span> <span class="token keyword">then</span> <span class="token string">'女'</span>     <span class="token keyword">else</span> <span class="token string">'其他'</span> <span class="token keyword">end</span>       <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> score <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token string">'缺席考试'</span> <span class="token keyword">ELSE</span> <span class="token string">'正常'</span> <span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sum和case结合使用"><a href="#sum和case结合使用" class="headerlink" title="sum和case结合使用"></a>sum和case结合使用</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token number">2</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> u<span class="token punctuation">.</span>sex <span class="token keyword">when</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span>男性<span class="token punctuation">,</span>  <span class="token number">3</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> u<span class="token punctuation">.</span>sex <span class="token keyword">when</span> <span class="token number">2</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span>女性<span class="token punctuation">,</span>  <span class="token number">4</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">case</span> <span class="token keyword">when</span> u<span class="token punctuation">.</span>sex <span class="token operator">&lt;&gt;</span><span class="token number">1</span> <span class="token operator">and</span> u<span class="token punctuation">.</span>sex<span class="token operator">&lt;&gt;</span><span class="token number">2</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span>性别为空  <span class="token number">5</span>  <span class="token keyword">from</span> users u<span class="token punctuation">;</span>         男性         女性       性别为空<span class="token comment">---------- ---------- ----------</span>         <span class="token number">3</span>          <span class="token number">2</span>          <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>博客园，<a href="https://www.cnblogs.com/Richardzhu/p/3571670.html">SQL之case when then用法</a>，2014</li><li>知乎，<a href="https://zhuanlan.zhihu.com/p/63333847">SQL之CASE WHEN用法详解</a>，2019</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL之窗口函数</title>
      <link href="/2021/12/21/cheng-xu-she-ji/sql-zhi-chuang-kou-han-shu/"/>
      <url>/2021/12/21/cheng-xu-she-ji/sql-zhi-chuang-kou-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是窗口函数"><a href="#什么是窗口函数" class="headerlink" title="什么是窗口函数"></a>什么是窗口函数</h2><p>窗口函数，也叫OLAP函数（Online Anallytical Processing，联机分析处理），可以对数据库数据进行实时分析。</p><p>窗口函数的基本用法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>窗口函数<span class="token operator">&gt;</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用户分组的列名<span class="token operator">&gt;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>用于排序的列名<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>窗口函数可以放两种函数：</p><ol><li>专用窗口函数</li><li>聚合函数</li></ol><p>因为窗口函数是对where或者group by子句进行处理后的操作，所以<strong>窗口函数原则上只能写在select子句中</strong></p><h2 id="窗口函数的好处"><a href="#窗口函数的好处" class="headerlink" title="窗口函数的好处"></a>窗口函数的好处</h2><p>窗口函数中的窗口表示的是范围的意思。</p><p>窗口函数实现的功能类似group by和order by。但是group by分组汇总会改变了表的行数，一行只有一个类别。而partition by和rank函数不会减少原表中的行数。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/group_by%E4%B8%8Epartition_by%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="group_by与partition_by的区别.jpg"></p><p>窗口函数中的order by只是决定窗口内的数据按什么顺序进行排序或计算，对最后返回结果的排列顺序并没有影响。</p><h2 id="专业窗口函数"><a href="#专业窗口函数" class="headerlink" title="专业窗口函数"></a>专业窗口函数</h2><p>专业窗口函数主要为<code>rank,dense_rank,row_number</code>，其区别如下case所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>   rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> 成绩 <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ranking<span class="token punctuation">,</span>   dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> 成绩 <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dese_rank<span class="token punctuation">,</span>   row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> 成绩 <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> row_num<span class="token keyword">from</span> 班级表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/%E4%B8%93%E4%B8%9A%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0.jpg" alt="专业窗口函数.jpg"></p><p>总结一下：</p><ul><li>rank函数：如果有并列名次的行，会占用下一名次的位置。</li><li>dense_rank函数：如果有并列名次的行，不占用下一名次的位置。</li><li>row_number函数：不考虑并列名次的情况。</li></ul><p><strong>在上述的这三个专用窗口函数中，函数后面的括号不需要任何参数，保持()空着就可以。</strong></p><h2 id="聚合函数作为窗口函数"><a href="#聚合函数作为窗口函数" class="headerlink" title="聚合函数作为窗口函数"></a>聚合函数作为窗口函数</h2><p>聚和窗口函数和上面提到的专用窗口函数用法完全相同，只需要把聚合函数写在窗口函数的位置即可，<strong>但是函数后面括号里面不能为空，需要指定聚合的列名。</strong></p><p>不仅是sum求和，平均、计数、最大最小值，也是同理，<strong>都是针对自身记录、以及自身记录之上的所有数据进行计算。</strong></p><p>用处：聚合函数作为窗口函数，可以在每一行的数据里直观的看到，截止到本行数据，统计数据是多少（最大值、最小值等）。同时可以看出每一行数据，对整体统计数据的影响。</p><p>另外，在聚合窗口可以指定汇总范围，这个功能称之为框架。</p><p>自身+上1条记录：<code>SUM(sale_price) over(order by product_id rows 1 preceding)</code></p><p>自身+下1条记录：<code>SUM(sale_price) over(order by product_id rows 1 following) </code></p><p>自身+上1条记录+下2条记录：<code>SUM(sale_price) over(order by product_id rows between 1 preceding and 2 following) </code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>知乎，<a href="https://zhuanlan.zhihu.com/p/92654574">通俗易懂的学会：SQL窗口函数</a>，2021</li><li>知乎，<a href="https://zhuanlan.zhihu.com/p/60226935">精益SQL —— “窗口函数”的正确食用方式</a>，2019</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据存储与检索</title>
      <link href="/2021/11/13/kv-cun-chu/shu-ju-cun-chu-yu-jian-suo/"/>
      <url>/2021/11/13/kv-cun-chu/shu-ju-cun-chu-yu-jian-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在主流的数据存储与检索引擎可以大致分为两种:OLTP和OLAP.</p><p>OLTP指的是online transaction processing.</p><p>OLAP指的是online analysis processing.</p><table><thead><tr><th align="center">维度</th><th align="center">OLTP</th><th align="center">OLAP</th></tr></thead><tbody><tr><td align="center">设计思路</td><td align="center">面向行</td><td align="center">面向列</td></tr><tr><td align="center">系统功能</td><td align="center">日常交易数据/<strong>在线事务处理</strong></td><td align="center">统计\分析\报表/<strong>在线分析处理</strong></td></tr><tr><td align="center">设计目标</td><td align="center">面向试试交易类应用</td><td align="center">面向统计分析类应用</td></tr><tr><td align="center">数据处理</td><td align="center">当前的,最新的</td><td align="center">历史的,聚集的</td></tr><tr><td align="center">实时性</td><td align="center">实时性读写要求高</td><td align="center">实时性读写要求低</td></tr><tr><td align="center">事务</td><td align="center">强事务</td><td align="center">弱事务</td></tr><tr><td align="center">分析要求</td><td align="center">低,简单</td><td align="center">高,复杂</td></tr></tbody></table><p>OLAP主要应用在hive,spark,hbase等.本文重点研究OLTP,并将侧重点放在<strong>面向页(b+ tree)的存储引擎</strong>以及<strong>日志结构(lsm tree)的存储引擎</strong>.</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B8%8E%E6%A3%80%E7%B4%A2/%E7%A0%94%E7%A9%B6%E5%A4%A7%E7%BA%B2.png" alt="研究大纲.png"></p><h2 id="为什么选择B-树作为基于页的存储引擎"><a href="#为什么选择B-树作为基于页的存储引擎" class="headerlink" title="为什么选择B+树作为基于页的存储引擎"></a>为什么选择B+树作为基于页的存储引擎</h2><h3 id="现状分析"><a href="#现状分析" class="headerlink" title="现状分析"></a>现状分析</h3><ul><li>读多写少的场景居多</li><li>数据按行组织</li><li>需要存储的数据量级增加到千万级量级</li><li>存储时选择的存储介质需要满足成本较低\容量较大的特点</li></ul><h3 id="磁盘IO-VS-内存IO"><a href="#磁盘IO-VS-内存IO" class="headerlink" title="磁盘IO VS 内存IO"></a>磁盘IO VS 内存IO</h3><p>磁盘访问时间=寻道时间+旋转时间+传输时间:</p><ul><li>寻道时间: 8ms-12ms</li><li>旋转时间: 7200转/min:半周 4ms</li><li>传输时间: 50M/s,约0.3ms</li></ul><p>磁盘随机IO&lt;&lt;磁盘顺序IO≈内存随机IO&lt;&lt;内存顺序IO</p>]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LSM Tree整理与总结</title>
      <link href="/2021/11/13/kv-cun-chu/lsm-tree-zheng-li-yu-zong-jie/"/>
      <url>/2021/11/13/kv-cun-chu/lsm-tree-zheng-li-yu-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用整理</title>
      <link href="/2021/11/06/jing-yan-zong-jie/mac-shi-yong-zheng-li/"/>
      <url>/2021/11/06/jing-yan-zong-jie/mac-shi-yong-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文旨在记录和汇总自己在工作以及学习过程中所使用的软件及其所遇问题的解决方案,以便日后所需.</p><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><ul><li>Cloud Battery</li><li>Charles</li><li>Viusal Studio Code</li><li>QQ音乐</li><li>微信</li><li>网易云音乐</li><li>Chrome</li><li>飞书</li><li>XMind</li><li>Dash</li><li>Navicat</li><li>Wireshark</li><li>Postman</li><li>Telegram</li><li>百度网盘</li><li>阿里云盘</li><li>Trello</li><li>Termius</li><li>Motrix</li><li>Downie</li><li>EasyConnect</li><li>Logi Options</li><li>滴答清单</li><li>PDF Expert</li><li>IINA</li><li>Jetbrains家族</li><li>Office家族</li><li>Sensei</li><li>iTerm2</li><li>Pock</li><li>Bandizip</li><li>Barrier</li><li>fing</li><li>Typora</li><li>OpenInTerminal</li><li>Countdown Timer Plus</li><li>Mos</li><li>HHKB Keymap Tool</li><li>Alfred</li><li>Kronos Time Tra</li><li>Karabiner-Elements</li><li>Karabiner-EventViewer</li><li>Karabiner-VirtualHIDDevice-Manager</li><li>Magnet</li><li>iShot</li><li>Alacritty</li><li><a href="https://github.com/exelban/stats">stats</a></li><li>One Switch </li><li>Dash</li><li>BetterTouchTool</li><li>Transmit</li><li>Mountain Duck</li><li>Moment</li><li>Progressive Downloader</li><li>Pika</li><li><a href="https://github.com/qishibo/AnotherRedisDesktopManager">another-redis-desktop-manager</a></li><li>OmniGraffle</li><li>MonitorControl</li><li>NeatDownloadManager</li><li>Swish</li><li>App Cleaner &amp; Uninstaller Pro</li><li>licecap</li><li>Clearview X</li><li><a href="https://github.com/balena-io/etcher">balenaEtcher</a></li></ul><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><ul><li>brew</li><li>ranger</li><li>fzf</li><li>htop</li><li>git</li><li>fd</li><li>ripgrep</li><li>htop</li><li>glances(M1暂时没有适配)</li><li>ctop</li><li>lazydocker</li><li>colordiff</li><li>bat</li><li>httpie</li><li>ncdu</li><li>axel</li><li>glow或mdv，终端markdown文本阅读器</li><li>ipython</li></ul><h2 id="zsh配置"><a href="#zsh配置" class="headerlink" title="zsh配置"></a>zsh配置</h2><h3 id="安装zsh插件"><a href="#安装zsh插件" class="headerlink" title="安装zsh插件"></a>安装zsh插件</h3><ul><li>git-open: git clone <a href="https://github.com/paulirish/git-open.git">https://github.com/paulirish/git-open.git</a> $ZSH_CUSTOM/plugins/git-open</li><li>zsh-syntax-highlighting: git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</li><li>zsh-autosuggestions: git clone <a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</li></ul><h3 id="zshrc"><a href="#zshrc" class="headerlink" title=".zshrc"></a>.zshrc</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.# Initialization code that may require console input (password prompts, [y/n]# confirmations, etc.) must go above this block; everything else may go below.if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"fi# If you come from bash you might have to change your $PATH.# export PATH=$HOME/bin:/usr/local/bin:$PATH# Path to your oh-my-zsh installation.export ZSH="/Users/robertwang/.oh-my-zsh"# Set name of the theme to load --- if set to "random", it will# load a random theme each time oh-my-zsh is loaded, in which case,# to know which specific one was loaded, run: echo $RANDOM_THEME# See https://github.com/ohmyzsh/ohmyzsh/wiki/ThemesZSH_THEME="powerlevel10k/powerlevel10k"# Set list of themes to pick from when loading at random# Setting this variable when ZSH_THEME=random will cause zsh to load# a theme from this variable instead of looking in $ZSH/themes/# If set to an empty array, this variable will have no effect.# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )# Uncomment the following line to use case-sensitive completion.# CASE_SENSITIVE="true"# Uncomment the following line to use hyphen-insensitive completion.# Case-sensitive completion must be off. _ and - will be interchangeable.# HYPHEN_INSENSITIVE="true"# Uncomment one of the following lines to change the auto-update behavior# zstyle ':omz:update' mode disabled  # disable automatic updates# zstyle ':omz:update' mode auto      # update automatically without asking# zstyle ':omz:update' mode reminder  # just remind me to update when it's time# Uncomment the following line to change how often to auto-update (in days).# zstyle ':omz:update' frequency 13# Uncomment the following line if pasting URLs and other text is messed up.# DISABLE_MAGIC_FUNCTIONS="true"# Uncomment the following line to disable colors in ls.# DISABLE_LS_COLORS="true"# Uncomment the following line to disable auto-setting terminal title.# DISABLE_AUTO_TITLE="true"# Uncomment the following line to enable command auto-correction.# ENABLE_CORRECTION="true"# Uncomment the following line to display red dots whilst waiting for completion.# You can also set it to another string to have that shown instead of the default red dots.# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"# Caution: this setting can cause issues with multiline prompts in zsh &lt; 5.7.1 (see #5765)# COMPLETION_WAITING_DOTS="true"# Uncomment the following line if you want to disable marking untracked files# under VCS as dirty. This makes repository status check for large repositories# much, much faster.# DISABLE_UNTRACKED_FILES_DIRTY="true"# Uncomment the following line if you want to change the command execution time# stamp shown in the history command output.# You can set one of the optional three formats:# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"# or set a custom format using the strftime function format specifications,# see 'man strftime' for details.# HIST_STAMPS="mm/dd/yyyy"# Would you like to use another custom folder than $ZSH/custom?# ZSH_CUSTOM=/path/to/new-custom-folder# Which plugins would you like to load?# Standard plugins can be found in $ZSH/plugins/# Custom plugins may be added to $ZSH_CUSTOM/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=(git    z    extract    hitokoto    gitignore    cp    git-open    #safe-paste    sudo    zsh-syntax-highlighting    zsh-autosuggestions    history    tmuxinator    tmux    )source $ZSH/oh-my-zsh.sh# User configuration# export MANPATH="/usr/local/man:$MANPATH"# You may need to manually set your language environment# export LANG=en_US.UTF-8# Preferred editor for local and remote sessions# if [[ -n $SSH_CONNECTION ]]; then#   export EDITOR='vim'# else#   export EDITOR='mvim'# fi# Compilation flags# export ARCHFLAGS="-arch x86_64"# Set personal aliases, overriding those provided by oh-my-zsh libs,# plugins, and themes. Aliases can be placed here, though oh-my-zsh# users are encouraged to define aliases within the ZSH_CUSTOM folder.# For a full list of active aliases, run `alias`.## Example aliases# alias zshconfig="mate ~/.zshrc"# alias ohmyzsh="mate ~/.oh-my-zsh"# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zshexport FZF_COMPLETION_TRIGGER='\'[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zshexport FZF_DEFAULT_OPTS="--height 80% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2&gt; /dev/null | head -500'"alias setproxy='export https_proxy=http://192.168.50.77:20171 http_proxy=http://192.168.50.77:20171 all_proxy=socks5://192.168.50.77:20170'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ohmyzsh本地化"><a href="#ohmyzsh本地化" class="headerlink" title="ohmyzsh本地化"></a>ohmyzsh本地化</h3><h4 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h4><p>下载 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># Default settingsZSH=$<span class="token punctuation">{</span>ZSH<span class="token operator">:</span>-~/.oh-my-zsh<span class="token punctuation">}</span>REPO=$<span class="token punctuation">{</span>REPO<span class="token operator">:</span>-mirrors/oh-my-zsh<span class="token punctuation">}</span>REMOTE=$<span class="token punctuation">{</span>REMOTE<span class="token operator">:</span>-https<span class="token operator">:</span><span class="token comment">//gitee.com/${REPO}.git}</span>BRANCH=$<span class="token punctuation">{</span>BRANCH<span class="token operator">:</span>-master<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改仓库地址"><a href="#修改仓库地址" class="headerlink" title="修改仓库地址"></a>修改仓库地址</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json">d ~/.oh-my-zshgit remote set-url origin https<span class="token operator">:</span><span class="token comment">//gitee.com/mirrors/oh-my-zsh.git</span>git pullomz update <span class="token comment">//oh my zsh 更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="powerline10k"><a href="#powerline10k" class="headerlink" title="powerline10k"></a>powerline10k</h3><h2 id="修改iTerm样式"><a href="#修改iTerm样式" class="headerlink" title="修改iTerm样式"></a>修改iTerm样式</h2><p><code>iterm-&gt;preferences-&gt;Profiles-&gt;Session-&gt;Status bar enabled-&gt;Configure Status Bar</code>可以设置Iterm上方展示系统信息等内容。</p><h2 id="Mac内置键盘屏蔽"><a href="#Mac内置键盘屏蔽" class="headerlink" title="Mac内置键盘屏蔽"></a>Mac内置键盘屏蔽</h2><p>借助Karabiner可以实现在检测到外置键盘或鼠标存在的时候，底层屏蔽内置键盘的输入。</p><h2 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h2><p>同样是借助Karabiner实现键盘映射的功能，单个按键简单映射直接在软件本身设置即可。针对组合键的映射，可以通过在<code>.config/karabiner/assets/complex_modifications</code>文件中编写任意文件名的json文件来实现。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"vim"</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+hjkl;"</span><span class="token punctuation">,</span>      <span class="token property">"manipulators"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+h"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>          <span class="token property">"from"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span>            <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"mandatory"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"left_option"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"left_arrow"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+j"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>          <span class="token property">"from"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"j"</span><span class="token punctuation">,</span>            <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"mandatory"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"left_option"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"down_arrow"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+k"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>          <span class="token property">"from"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"k"</span><span class="token punctuation">,</span>            <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"mandatory"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"left_option"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"up_arrow"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+l"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>          <span class="token property">"from"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span>            <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"mandatory"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"left_option"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"right_arrow"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"option+;"</span><span class="token punctuation">,</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"basic"</span><span class="token punctuation">,</span>          <span class="token property">"from"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"semicolon"</span><span class="token punctuation">,</span>            <span class="token property">"modifiers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"mandatory"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"left_option"</span>              <span class="token punctuation">]</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token property">"to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token property">"key_code"</span><span class="token operator">:</span> <span class="token string">"return_or_enter"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>为了保持会话的长久链接可以在本地通过新增 <code>.ssh/config</code>文件中如下字段：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Host *  ServerAliveInterval 60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>安装 <code>vimplus</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/chxuan/vimplus.git ~/.vimpluscd ~/.vimplus./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接安装完成直接会因为apple自研芯片的原因导致安装YouCompleteMe的过程中其实安装失败.可以使用 <code>python3 install.py --all --system-libclang</code>在YouCompleteMe文件夹中安装.</p><p>安装YouCompleteMe中可能出现<code>Python headers are missing in /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.7/Headers.</code>的错误，只需要执行<code>echo 'export PATH="/usr/local/bin:$PATH"' &gt;&gt; ~/.zshrc</code>即可。这个问题的原因可以通过执行<code>brew doctor</code>发现。</p><h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>brew install ranger</code></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><p>ranger图标</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_deviconsecho "default_linemode devicons" &gt;&gt; $HOME/.config/ranger/rc.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>图片预览</p></li></ul><p>Add the following lines to your ~/.config/ranger/rc.conf:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set preview_images trueset preview_images_method iterm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>highlight</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install highlight<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install fzf#安装按键绑定与模糊补全$(brew --prefix)/opt/fzf/install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改<code>.zshrc</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改fzf的触发符号export FZF_COMPLETION_TRIGGER='\'# 修改fzf默认展示export FZF_DEFAULT_OPTS="--height 80% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2&gt; /dev/null | head -500'"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">brew install lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装执行脚本"><a href="#安装执行脚本" class="headerlink" title="安装执行脚本"></a>安装执行脚本</h3><p>将<a href="https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-send-zmodem.sh">iterm2-send-zmodem.sh</a>和<a href="https://raw.githubusercontent.com/RobberPhex/iterm2-zmodem/master/iterm2-recv-zmodem.sh">iterm2-recv-zmodem.sh</a>保存到<code>/usr/local/bin</code>目录下。</p><p><code>iterm2-send-zmodem.sh</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required# Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then    FILE=$(osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicodeelse    FILE=$(osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose file with prompt "Choose a file to send"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX path of thefile as Unicofiif [[ $FILE = "" ]]; then    echo Cancelled.    # Send ZModem cancel    echo -e \\x18\\x18\\x18\\x18\\x18    sleep 1    echo    echo \# Cancelled transferelse    /opt/homebrew/bin/sz "$FILE" --escape --binary --bufsize 4096    sleep 1    echo    echo \# Received "$FILE"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>iterm2-recv-zmodem.sh</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required# Remainder of script public domainosascript -e 'tell application "iTerm2" to version' &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = "iTerm" ]]; then    FILE=$(osascript -e 'tell application "iTerm" to activate' -e 'tell application "iTerm" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX patelse    FILE=$(osascript -e 'tell application "iTerm2" to activate' -e 'tell application "iTerm2" to set thefile to choose folder with prompt "Choose a folder to place received files in"' -e "do shell script (\"echo \"&amp;(quoted form of POSIX pfiif [[ $FILE = "" ]]; then    echo Cancelled.    # Send ZModem cancel    echo -e \\x18\\x18\\x18\\x18\\x18    sleep 1    echo    echo \# Cancelled transferelse    cd "$FILE"    /opt/homebrew/bin/rz --rename --escape --binary --bufsize 4096    sleep 1    echo    echo    echo \# Sent \-\&gt; $FILEfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="授予执行权限"><a href="#授予执行权限" class="headerlink" title="授予执行权限"></a>授予执行权限</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo chmod +x /usr/local/bin/iterm2-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置iterm的trigger"><a href="#设置iterm的trigger" class="headerlink" title="设置iterm的trigger"></a>设置iterm的trigger</h3><p>设置Iterm2的Tirgger特性，<code>Preferences-&gt;Profiles-&gt;Default-&gt;Advanced-&gt;Trigged-&gt;Edit</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Regular expression: rz waiting to receive.\*\*B0100Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-send-zmodem.shInstant: checkedRegular expression: \*\*B00000000000000Action: Run Silent CoprocessParameters: /usr/local/bin/iterm2-recv-zmodem.shInstant: checked<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Mac%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/lrzsz%E8%AE%BE%E7%BD%AEiterm%E7%9A%84trigger.png" alt="lrzsz设置iterm的trigger.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>上传文件：rz</li><li>下载文件：sz + filename</li></ul><h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h2><p><a href="https://github.com/wensonsmith/YoudaoTranslator">YoudaoTranslate</a></p><p><a href="https://github.com/codezm/Alfred-codezm-workflows-timestamp-convert">Alfred-codezm-workflows-timestamp-convert</a></p><p><a href="https://github.com/LeEnno/alfred-terminalfinder">alfred-terminalfinder</a></p><p><a href="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Mac%E4%BD%BF%E7%94%A8%E6%95%B4%E7%90%86/coversion.alfredworkflow">coversion</a></p><p><a href="https://github.com/zenorocha/alfred-workflows/raw/master/ip-address/ip-address.alfredworkflow">IP Address</a></p><p><a href="https://github.com/weiyouwozuiku/ToolBox/blob/main/Alfred-BaseConversion/Base%20Conversion.alfredworkflow">Alfred-BaseConversion</a></p><p><a href="https://github.com/noogel/Alfred-Workflow">Alfred-Workflow</a></p><h2 id="查看Mac整体信息"><a href="#查看Mac整体信息" class="headerlink" title="查看Mac整体信息"></a>查看Mac整体信息</h2><p>打开<code>系统信息.app</code>就可以查看具体信息以及电脑中安装的所有软件的版本。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://keelii.com/2018/08/12/fuzzy-finder-full-guide/">Fuzzy finder(fzf+vim) 使用全指南</a>,2018</li><li><a href="https://www.huweihuang.com/linux-notes/keymap/iterm2-rzsz.html">iterm2 rz与sz的功能</a>,2019</li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云原生学习整理</title>
      <link href="/2021/11/02/yun-ji-suan/yun-yuan-sheng-xue-xi-zheng-li/"/>
      <url>/2021/11/02/yun-ji-suan/yun-yuan-sheng-xue-xi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h2><ul><li>应用容器化封装</li><li>服务网格</li><li>不可变基础架构</li><li>声明式API</li></ul><h3 id="云原生意义"><a href="#云原生意义" class="headerlink" title="云原生意义"></a>云原生意义</h3><ul><li>提升系统的适应性\可管理性\可观察性;</li><li>使工程师能以最小成本进行频繁和可预测的系统变更</li><li>提升速度和效率,助力业务成长,缩短I2M(Idea TO Market)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Docker </tag>
            
            <tag> 云原生 </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce论文整理</title>
      <link href="/2021/10/30/fen-bu-shi/mapreduce-lun-wen-zheng-li/"/>
      <url>/2021/10/30/fen-bu-shi/mapreduce-lun-wen-zheng-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QUIC协议整理</title>
      <link href="/2021/10/29/cheng-xu-she-ji/quic-xie-yi-zheng-li/"/>
      <url>/2021/10/29/cheng-xu-she-ji/quic-xie-yi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>众所周知，QUIC（Quick UDP Internet Connection）是谷歌制定的一种互联网传输层协议，它基于UDP传输层协议，同时兼具TCP、TLS、HTTP/2等协议的可靠性与安全性，可以有效减少连接与传输延迟，更好地应对当前传输层与应用层的挑战。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QUIC </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC理解回顾</title>
      <link href="/2021/10/26/cheng-xu-she-ji/rpc-li-jie-hui-gu/"/>
      <url>/2021/10/26/cheng-xu-she-ji/rpc-li-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单体服务在面对越来越多的流量显得力不从心，因此微服务应运而生。一个完整的大型服务会被打散成很多很多独立的小服务，每个小服务会由独立的进程去管理来对外提供服务，这就是「微服务」。</p><p>当用户的请求到来时，我们需要将用户的请求分散到多个服务去各自处理，然后又需要将这些子服务的结果汇总起来呈现给用户。那么服务之间该使用何种方式进行交互就是需要解决的核心问题。RPC 就是为解决服务之间信息交互而发明和存在的。</p><h2 id="RPC含义"><a href="#RPC含义" class="headerlink" title="RPC含义"></a>RPC含义</h2><p>RPC（Remote Procedure Call）,即远程过程调用，是一种分布式系统常用的通信方式。常见的多系统数据交互方式还包括：分布式消息队列、HTTP请求调用、数据库和分布式缓存等。</p><p>其中，RPC和HTTP调用都<strong>没有经过中间件</strong>，它们都是端对端系统之间直接数据交互。HTTP调用可以看做是一场特殊的RPC。只不过传统意义上的 RPC 是指长连接数据交互，而 HTTP 一般是指即用即走的短链接。</p><h2 id="RPC场景"><a href="#RPC场景" class="headerlink" title="RPC场景"></a>RPC场景</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx 是互联网企业使用最为广泛的代理服务器。它可以为后端分布式服务提供负载均衡的功能，它可以将后端多个服务地址聚合为单个地址来对外提供服务。</p><p>Nginx默认与后端服务走的HTTP协议，但它还支持其他协议，如uWSGI（Python），fastcgi（PHP-fpm）等协议。这两种协议都是采用了比HTTP协议更加节省流量的二进制协议。</p><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><p>最常见的 Hadoop 文件系统 hdfs，一般包括一个 NameNode 和多个 DataNode，NameNode 和 DataNode 之间就是通过一种称为 Hadoop RPC 的二进制协议进行通讯。</p><h3 id="HTTP与RPC"><a href="#HTTP与RPC" class="headerlink" title="HTTP与RPC"></a>HTTP与RPC</h3><p>HTTP1.0 协议时，HTTP 调用还只能是短链接调用，一个请求来回之后连接就会关闭。HTTP1.1 在 HTTP1.0 协议的基础上进行了改进，引入了 KeepAlive 特性可以保持 HTTP 连接长时间不断开，以便在同一个连接之上进行多次连续的请求，进一步拉近了 HTTP 和 RPC 之间的距离。</p><p>当 HTTP 协议进化到 2.0 之后，Google 开源了一个建立在 HTTP2.0 协议之上的通信框架直接取名为 gRPC，也就是 Google RPC，这时 HTTP 和 RPC 之间已经没有非常明显的界限了。所以在后文我们不再明确强调 RPC 和 HTTP 请求调用之间的细微区别了，直接统一称之为 RPC。</p><h2 id="RPC交互流程"><a href="#RPC交互流程" class="headerlink" title="RPC交互流程"></a>RPC交互流程</h2><p>左边的客户端进程写 RPC 指令消息到内核的发送缓存中，内核将发送缓存中的数据传送到物理硬件 NIC，也就是网络接口芯片 (Network Interface Circuit)。NIC 负责将翻译出来的模拟信号通过网络硬件传递到服务器硬件的 NIC。服务器的 NIC 再将模拟信号转成字节数据存放到内核为套接字分配的接收缓存中，最终服务器进程从接收缓存中读取数据即为源客户端进程传递过来的 RPC 指令消息。</p><p>消息从用户进程流向物理硬件，又从物理硬件流向用户进程，中间还经过了一系列的路由网关节点。</p><p>上图呈现的只是 RPC 一次消息交互的上半场，下半场是一个逆向的过程，从服务器进程向客户端进程返回响应数据。完整的一次 RPC 过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/RPC%E5%9B%9E%E9%A1%BE%E7%90%86%E8%A7%A3/RPC%E8%BF%87%E7%A8%8B.png" alt="RPC过程.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>掘金小册，<a href="https://juejin.cn/book/6844733722936377351">深入理解 RPC : 基于 Python 自建分布式高并发 RPC 服务</a>，2019</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 分布式 </tag>
            
            <tag> gRPC </tag>
            
            <tag> Thrift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术面试整理</title>
      <link href="/2021/10/23/jing-yan-zong-jie/ji-zhu-mian-shi-zheng-li/"/>
      <url>/2021/10/23/jing-yan-zong-jie/ji-zhu-mian-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>首先作为一个有技术追求的人来说，面试绝对不等于跳槽。面试本身对于我们来说应该是一个自我检验与学习的方向性的指南。面试在刨除其找工作的原始目的之后，它更像是一个对于自身的考试与回顾。既然面试如此的重要，那我们如何全面的准备面试就显得尤为重要了。本文针对的都是技术性面试，其他类型的面试本文意义不大。另外本文主要关注技术，至于面试找工作中的一些面试技巧不会进行过多阐述。</p><h2 id="面试时间的选择"><a href="#面试时间的选择" class="headerlink" title="面试时间的选择"></a>面试时间的选择</h2><ol><li>永远把自己暴露在招聘市场上</li><li>入职时就要开始面试</li></ol><p>这不是为了跳槽，而是为了了解现在公司需要什么样的人才以及现在行业发展趋势以及对自己技术的检验。再加上现在越来越多倒挂现象的出现，我们需要更多的面试来让自己在真正跳槽的时候实现利益最大化。在入职时就准备面试是基于将面试作为自己学习目标制定与检验的环节。那么自然而然的就引入面试的第一步，如何写一个简历。</p><h2 id="如何写简历"><a href="#如何写简历" class="headerlink" title="如何写简历"></a>如何写简历</h2><blockquote><p>简历对于 自己是一份学习计划，对于HR是一份筛选条件，对于面试官是一个引导提问的工具。<br>本质上是对你职业生涯的发展规划！<br>简历是面向未来的，而不仅仅是复盘的！</p></blockquote><p>自己：在入职的时候就可以写一份简历作为自己的OKR。采用一种<strong>以终为始</strong>的思想，明确自己在工作中需要学到什么，用到什么，做到什么成效，有什么产出，是否便于知识迁移，以此产生一个学习计划，并一步步<strong>落地</strong>。</p><p>HR：在简历中需要有HR对应岗位的关键词。</p><p>面试官：突出自己的优势或者实现上的困难点，让面试官对此感兴趣。</p><h3 id="基本注意点"><a href="#基本注意点" class="headerlink" title="基本注意点"></a>基本注意点</h3><ol><li>不要造假。</li><li>使用PDF，避免文件格式导致的问题，简洁工整即可。</li><li>简历要倒叙，最新的经历放在前面。</li><li>姓名，手机号，邮箱，博客，开源贡献，技术分享等放在最前面。</li><li>工作十年以下不要超过两页，最多做多两页半。</li></ol><h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><ol><li>准确，简单，通过博客与code展示自己</li><li>符合职业的一句话自我评价会让人印象深刻，这个远比放一个头像重要</li></ol><p>没人在乎你长什么样子，做技术主要考虑的只是这个人以后想不想一起共事。<strong>有一个明确的自我介绍非常重要，突出自己在职场上的价值</strong>。可以显示一个心理暗示的作用。</p><h3 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h3><h4 id="挖掘项目亮点"><a href="#挖掘项目亮点" class="headerlink" title="挖掘项目亮点"></a>挖掘项目亮点</h4><ol><li>思考和积累<ol><li>领域定位：明确自己的定位，并将视野放开，不要局限于现在自己所处的模块或者单一的工作性质，而是以一个更高维度的角度思考自己工作的意义，并以此思考和解决问题。<strong>提高自己的视野与格局</strong>。</li><li>请教牛人：在明确自己的领域定位之后，去主动了解前沿的知识与技术，请教牛人。</li><li>技术分享：参与一些技术分享与技术论坛，不要寄希望于其有很多细节或者价值，但是依旧能有一些收获。多看一些大厂的技术分享。推荐一下大厂技术分享途径：<ul><li><a href="https://tech.meituan.com/">美团技术团队</a></li><li>阿里技术（公众号）</li><li>阿里巴巴中间件（公众号）</li><li><a href="http://mysql.taobao.org/monthly/">阿里数据库内核月报</a></li><li><a href="https://insights.thoughtworks.cn/">ThoughtWorks 洞见</a></li><li><a href="https://xiaomi-info.github.io/">小米信息部技术团队</a></li><li><a href="https://blogs.360.cn/">360 核心安全技术博客</a></li><li><a href="https://tech.ipalfish.com/blog/">伴鱼技术团队</a></li><li><a href="https://juejin.cn/user/1838039172387262/posts">字节跳动技术团队</a></li><li>滴滴技术（公众号）</li></ul></li></ol></li><li>以终为始<ol><li>从<strong>效率，效果，质量，成本</strong>四个方向反推技术亮点</li><li>如果系统最终的演进是这个样子，那么<strong>我做了什么可以使其推进？</strong>，反向push自己持续进化。或者自己想要转型，将自己想学的知识落地到项目中或者工作中，优化某个环节或者实现某种功能。</li></ol></li><li>融合目标岗位的招聘要求<ol><li>对招聘JD分析，从中找到与自身项目结合点</li><li><strong>不是简历去找匹配的JD，而是让简历匹配JD</strong></li></ol></li></ol><h4 id="使用STAR原则描述项目"><a href="#使用STAR原则描述项目" class="headerlink" title="使用STAR原则描述项目"></a>使用STAR原则描述项目</h4><table><thead><tr><th align="center">背景</th><th align="center">任务</th><th align="center">行动</th><th align="center">结果（效率，效果，质量，成本）</th></tr></thead><tbody><tr><td align="center">简练描述(几个字说明这是什么业务)</td><td align="center">在这个业务中主要负责什么，不要写自己没做过的，因为简历是引导面试官提问的工具</td><td align="center">做了什么事，适当写一些技术点，不要写怎么做和为什么做，适当留白给面试官</td><td align="center">先有基数后有比例，用绝对值而不是相对值，将数值转化为钱</td></tr><tr><td align="center">直播系统</td><td align="center">营收接口开发</td><td align="center">优化接口性能</td><td align="center">延迟从400ms降低到200ms，单位时间内可以刷更多礼物，增加约一倍收入</td></tr><tr><td align="center">测试平台</td><td align="center">测试效率工程</td><td align="center">编写测试用例</td><td align="center">编写500个测试用例，自动化测试比例从20%提高到80%，节省800测试人日</td></tr><tr><td align="center">信息流推荐</td><td align="center">算法工程</td><td align="center">XXX策略上线</td><td align="center">升了用户留存率，每月200w新用户留存率从20%提高到35%，相当于节省推广费580w</td></tr><tr><td align="center">存储系统</td><td align="center">redis集群运维开发</td><td align="center">空间压缩算法优化</td><td align="center">每日写入1亿条数据，占用内存1T缩减到800G，减少20%</td></tr></tbody></table><h2 id="面向简历工作"><a href="#面向简历工作" class="headerlink" title="面向简历工作"></a>面向简历工作</h2><blockquote><p>积极主动的去做事，带领团队推进架构演进成为 tech leader</p></blockquote><p>面试的根本目的不是跳槽，其主要作用是晋升。面试只是一种晋升的手段，检验能力的一个手段。使用晋升来解决倒挂，只要我晋升的足够快，倒挂就追不上我。</p><p>管理的晋升是有限的，而技术的晋升是无限的。但是<strong>技术的晋升必须要做到把技术引进入，做到真正的突破才行</strong>。技术本身具有创新性。</p><p>不要投当前等级的面试，例如现在是D5，那就去投对应D6的岗位，而不要找D5对应的职级岗位。</p><p>使用面向简历工作，推进架构的演进，实现自驱进步。最终的目标是将自己变成一个技术领导者的身份，带领团队去解决技术问题，<strong>成为团队的核心人物</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/%E9%9D%A2%E8%AF%95%E5%B7%A5%E4%BD%9C%E6%B5%81.png" alt="面试工作流.png"></p><h2 id="如何投递简历"><a href="#如何投递简历" class="headerlink" title="如何投递简历"></a>如何投递简历</h2><p>现在我们已经有了一份像样的简历，那么如何投递就成了最直接的问题。以下给出表格进行分析：</p><table><thead><tr><th align="center"></th><th align="center">熟人内推</th><th align="center">半熟人内推</th><th align="center">猎头</th><th align="center">招聘网站</th></tr></thead><tbody><tr><td align="center">机会</td><td align="center">少</td><td align="center">中</td><td align="center">多</td><td align="center">最多</td></tr><tr><td align="center">信息</td><td align="center">多</td><td align="center">中</td><td align="center">少</td><td align="center">最少</td></tr></tbody></table><p>在对以上表格建立共识的基础之上，给出一些相应的建议：<strong>扩大半熟人交友圈，交流群水群，技术论坛，开源社区，参加公司社团</strong>。</p><h2 id="如何准备后端技术面试"><a href="#如何准备后端技术面试" class="headerlink" title="如何准备后端技术面试"></a>如何准备后端技术面试</h2><p>在知道了所有面试的前置知识之后，自然而然的就诞生了一个新的问题。那就是，如何准备后端技术面试。以下分点进行阐述：</p><h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p>首先计算机不能简单的理解为一个工程，而应该是一门科学。虽然大家戏称计算机科学家，但是基础的计算机科学都不了解万万不行。</p><p>首先<strong>写在书上的知识都属于常识</strong>，不要认为看了书就万事大吉。这才是学习的第一步，构建我们学习的基础而已。</p><p>以下两本书帮助我们构建对计算机世界的基本世界观，列出的章节可以作为面试时应急看的章节，这只是鉴于书本内容较多。<strong>有时间的时候，必须读完</strong>。</p><ul><li>深入理解计算机系统（原书第三版）<ul><li>第一章：计算机系统漫游</li><li>第二章：信息的表达和处理</li><li>第四章：处理器的体系结构</li><li>第五章：优化程序性能</li><li>第六章：存储器层次结构</li><li>第九章：虚拟内存</li><li>第十二章：并发编程</li></ul></li><li>计算机程序的构造与解释（原书第二版）<ul><li>全书</li></ul></li><li>计算机网络自顶向下（原书第七版）<ul><li>第一章：计算机网络和因特网</li><li>第二章：应用层</li><li>第三章：运输层</li><li>第四章：网络层</li><li>第五章：链路层</li></ul></li><li>理解了实现在谈网络性能（全书）</li><li><a href="https://cs144.github.io/">CS144-LAB</a> 实现一个TCP协议栈</li><li>现代操作系统：原理与实现（银杏书）（全书）</li><li><a href="https://pdos.csail.mit.edu/6.S081/2020/">6.S081-LAB</a></li><li>数据库系统实现（全书）</li><li><a href="https://15445.courses.cs.cmu.edu/fall2021/">15445-LAB</a></li><li><a href="https://pdos.csail.mit.edu/6.824/">MIT6824课程</a></li></ul><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><blockquote><p>面试的时间有限，因此不会考察过难的算法。<br>主要针对编码能力的考察，主要是看思路与预编是否正确，代码风格是否良好等。<br>就算遇到了自己刷过的题目，也要假装思考一下，不然可以让面试官觉得你是背过得，需要重新换一题。</p></blockquote><ol><li>先看 leetcode 简单和中等难度的前500题的最优解，能用自然语言描述清楚。</li><li>在大脑中训练出一个决策树。</li><li>训练自己估算空间和时间复杂度的能力。</li><li>对每类题随机抽取两道题，限时编写(要求15分钟AC)，统计成绩。</li><li>反复上述练习，直到所有类型题目都可以在15分钟内AC通过。</li></ol><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>多关注和积累一些大厂的设计分享。比如IM系统设计，秒杀系统。怎么做思考，怎么去权衡。</p><h3 id="开源技术"><a href="#开源技术" class="headerlink" title="开源技术"></a>开源技术</h3><blockquote><p>编程语言，redis，mysql，kafka，zookeeper/etcd，rpc，HBase，es等等</p></blockquote><ol><li>深入语言的底层源码，看sdk</li><li><a href="http://redisbook.com/">Redis 设计与实现</a></li><li>MySQL是怎样运行的</li><li>深入理解Kafka：核心设计与实践原理</li><li><a href="https://juejin.cn/book/6844733722936377351">深入理解 RPC : 基于 Python 自建分布式高并发 RPC 服务</a></li><li><a href="https://www.bilibili.com/video/BV1CK4y127Lj/">Raft 分布式一致性(共识)算法 论文精读与ETCD源码分析</a></li><li><a href="https://zookeeper.apache.org/">Zookeeper/etcd 官方文档</a></li></ol><h3 id="专业领域"><a href="#专业领域" class="headerlink" title="专业领域"></a>专业领域</h3><ol><li>深挖项目经历中所运用的技术（开源组件，理论知识），绘制思维导图的方式，逐步深入。</li><li>融合目标岗位中的招聘要求</li><li>逐一完成知识的学习，制定计划（书，视频，源码，论文）。</li><li>输出博客 -&gt; <strong>展示你在本专业领域的权威性</strong></li></ol><h2 id="面试表现"><a href="#面试表现" class="headerlink" title="面试表现"></a>面试表现</h2><h3 id="简历挖掘"><a href="#简历挖掘" class="headerlink" title="简历挖掘"></a>简历挖掘</h3><ol><li>对涉及的知识点深度学习，录音进行模拟面试。</li><li>绘制思维导图，对简历中可能被问的知识点建立一个DFS遍历的知识点树。</li><li>想象面试官可能关心的问题，并向自己提问，回放自己的录音，找到改进点。</li></ol><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><blockquote><p>好的面试是涉及出来的。</p></blockquote><h4 id="编码考察"><a href="#编码考察" class="headerlink" title="编码考察"></a>编码考察</h4><ol><li>提前沟通思路，<strong>题意不明及时询问</strong>，不要上来就写代码</li><li>写代码要仔细，自己没有推敲完善时，不要着急邀请面试官review，<strong>自己需要加入一些bad case进行边界判断</strong>。一旦请面试官review代码，发现bug会严重影响面试。</li><li>自己的代码要能讲明白，也要经得住挑战</li><li>如果不能写出代码，也至少明确给出思路或合理猜测，<strong>甚至可以请面试官换一个题目</strong></li></ol><p>最简单的bad case比如输入int，考虑负数，0，1是不是都可以；如果是字符串，空字符串可不可以，特别长的字符串可不可以。</p><h4 id="专业领域-1"><a href="#专业领域-1" class="headerlink" title="专业领域"></a>专业领域</h4><ol><li>速不要太快，讲明白技术亮点(<strong>为什么，有什么价值，怎么做，原理是什么，还能怎么改进</strong>)</li><li>遵循金字塔结构，采用总-分结构，<strong>先讲业务背景，再说技术架构，再说组件接口交互，再细化到具体数据结构和算法</strong>。</li><li>业务背景，和技术架构如果面试官没有多问，应该快速介绍完毕，并重点突出你自己在这个项目中的技术亮点与成长(<strong>性能优化，排查问题，架构决策能力</strong>)，<strong>用一些技术指标来衡量自己的实现效果</strong></li><li>如果是资深研发面试，可以将更多精力放在，前沿技术的落地过程讲解(<strong>如何推进架构升级</strong>)</li></ol><h4 id="系统设计-1"><a href="#系统设计-1" class="headerlink" title="系统设计"></a>系统设计</h4><p>注意平时积累，观察日常使用的app，去思考这些app是如何设计的？然后去找资料印证。</p><ol><li>描述题目，确定问题边界，问题的约束条件。</li><li>容量预估，DAU * 每人平均使用接口次数 / 86400 -&gt; qps ，ptc99，存储空间，cdn消耗，平均值，峰值预估等等。</li><li><strong>寻找一般解</strong>， 一台服务器，一台数据库，实现基本功能的逻辑交互</li><li><strong>寻找更优解</strong>，逐步考虑约束条件，改进设计方案。注意具体问题具体分析，不要上来给一个庞大的系统架构设计。根据约束条件进行特性化分析。</li></ol><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ol><li>适当扩展，而不是问一句说一句。</li><li>说的<strong>越深越好</strong>，越多越好，直到面试官打断。</li><li><strong>认识到，基础知识的考察，是对程序员综合素质的考察，会说明一个人的潜力</strong>。</li></ol><h4 id="品质考察"><a href="#品质考察" class="headerlink" title="品质考察"></a>品质考察</h4><ol><li><strong>抗压</strong>  非自己一点也不会，否则绝对不能放弃，要努力给出方案，识别出这是压力测试。至少想十分钟，尽量想的全面，<strong>不要想到那里说到那里，给出的方案一定要靠谱</strong></li><li><strong>沟通</strong>  准确的表达出观点，需要不断练习，在准备阶段想清楚所有可能的提问</li><li><strong>情绪</strong>  编码，设计方案时一定要想清楚，不要反复找面试官review，<strong>避免做事急躁</strong></li><li><strong>稳定性</strong> 提前准备好，为什么跳槽，以及未来职业发展规划的说辞</li><li><strong>积极性</strong>  对这份职业的看法与态度，一定要有一个积极乐观的说辞。</li></ol><h2 id="如何谈薪"><a href="#如何谈薪" class="headerlink" title="如何谈薪"></a>如何谈薪</h2><ol><li>你这次跳槽是为了啥？ <strong>钱不到位 OR （工作没有挑战，换城市，职业发展）</strong>。立足于要么钱没到位要么职级没到位。涨薪超过百分之50才算突破。</li><li>手里有哪些offer? 不要交出offer，只是口头沟通。<strong>不要交薪资截图，因为offer的法律效益就是你泄露出去就失效了。</strong></li><li>期望薪资是多少？ 利用锚定效应，超出JD上限30%。不然就被倒挂。</li></ol><h2 id="如何养鱼与拒绝offer"><a href="#如何养鱼与拒绝offer" class="headerlink" title="如何养鱼与拒绝offer"></a>如何养鱼与拒绝offer</h2><ol><li>不要说太多offer，只说几个关键竞品公司offer。</li><li>不要截图等任何形式交出offer原件，这样才有回旋余地。</li><li>在没有offer的时候，可以空手套白狼。</li><li>管理预期，那就是我很热爱技术，但是现实情况必须要向钱看</li></ol><h2 id="结束也是开始"><a href="#结束也是开始" class="headerlink" title="结束也是开始"></a>结束也是开始</h2><ol><li>开始写更高职级的简历</li><li>在当前岗位，把简历上的规划一一实现</li><li>结合业务发展不断调整</li><li>去面更高级别的岗位</li><li>做上一职级的事情，可能会让你在本岗位晋升，那就直接把简历改成晋升PPT</li><li>时刻让自己暴露在招聘市场中，只有晋升才是王道。</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95.jpg" alt="费曼学习法.jpg"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>飞书，<a href="https://nxwz51a5wp.feishu.cn/docs/doccnRKVA5WoHZTlxNH5BcXO2og">如何准备一场服务端的技术面试</a>，2021</li><li>MBA智库百科，<a href="https://wiki.mbalib.com/wiki/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95">费曼学习法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LevelDB源码分析</title>
      <link href="/2021/10/19/kv-cun-chu/leveldb-yuan-ma-fen-xi/"/>
      <url>/2021/10/19/kv-cun-chu/leveldb-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LevelDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《软技能》总结</title>
      <link href="/2021/10/19/si-wei-jin-hua/ruan-ji-neng-zong-jie/"/>
      <url>/2021/10/19/si-wei-jin-hua/ruan-ji-neng-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="自学"><a href="#自学" class="headerlink" title="自学"></a>自学</h2><p>理解不是0或1的，而是复杂有多层次，不同的人看完一本书，他们的理解范围和深度都是不同的。可能“自以为理解了，其实是错的”，或者“本身有10层，只理解了5层”；比如在第1，2，3，4次看到FreeMonad，和之后也许会有的第5，6，7，8次，如果别人提到，我都可以说“哦， FreeMonad，我知道哪个”，然而“知道”和“知道”天差地远。</p><p>如果没有一个超理解力的大脑，或者有老师带路，对于无法理解的东西，那么可能增加新的数据，让更多更新的数据来调整自己的理解，通过多角度审视问题，特别是在这个知识数据爆炸的年代，或许是我们最有效率的学习方式。</p><h2 id="职业"><a href="#职业" class="headerlink" title="职业"></a>职业</h2><blockquote><p>你所能犯下的最大的错误就是相信自己是在为别人工作，这样依赖你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。            –厄尔·南丁格尔</p></blockquote><p><strong>绝不做他人都在做的事情</strong></p><p>首先需要明确的是，仅仅为了谋生写代码，这就和任何一份出卖体力的工作来说没有本质区别。必须要把自己当作一个<strong>公司</strong>来思考，这样才有可能做出良好的商业决策。事实上，你的工资不是取决于你的表现。虽然现在是打工人，但是绝对不能以某个角色固化自己和自己的职业生涯。<strong>可以将公司当作自己面对的一个大主顾</strong>，从而学会自我治理和自我引导。</p><p>作为一家成功的公司，需要明白自己的定位，可以卖什么？有什么产品或者服务。明确自己产品的有型价值与竞争力。<strong>做到非同凡响，而非同质化</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 思维进化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器学习</title>
      <link href="/2021/10/04/cheng-xu-she-ji/bu-long-guo-lu-qi-xue-xi/"/>
      <url>/2021/10/04/cheng-xu-she-ji/bu-long-guo-lu-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平时查询一个value是否存在，通常会创建一个hashmap进行存储所有元素。它的好处是快速准确，缺点是浪费空间。因此，引入布隆过滤器。</p><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是由一个很长的bit数组和一系列哈希函数组成的。布隆过滤器可以用于检索一个元素是否在一个集合中。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>数组的每个元素都只占1bit空间，并且每个元素只能为0或1。</p><p>布隆过滤器拥有k个哈希函数，当一个元素加入布隆过滤器时，会使用k个哈希函数对其进行k次计算,得到k个哈希值，并且根据得到的哈希值，在一维数组中把对应下标的值置位1。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="结构图.png"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>飞书，</li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬盘IO总结</title>
      <link href="/2021/10/03/kv-cun-chu/ying-pan-io-zong-jie/"/>
      <url>/2021/10/03/kv-cun-chu/ying-pan-io-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着计算机硬件在过去10年中遵循摩尔定律的发展，通用计算机的CPU主频早已超过了4GHz，内存已早已进入了DDR4的时代。但是传统机械磁盘的读写性能并没有明显提升，而SSD的价格又过高。因此，探究传统机械硬盘的物理结构与性能优化方式具有重大学术与工程意义。</p><h2 id="磁盘的物理结构"><a href="#磁盘的物理结构" class="headerlink" title="磁盘的物理结构"></a>磁盘的物理结构</h2><p>由于单一盘片容量有限，一般硬盘都有两张以上的盘片，每个盘片有两面，都可记录信息，所以一张盘片对应着两个磁头。盘片被分为许多扇形的区域，每个区域叫一个扇区，硬盘中每个扇区的大小固定为512字节。盘片表面上以盘片中心为圆心，不同半径的同心圆称为磁道，不同盘片相同半径的磁道所组成的圆柱称为柱面。磁道与柱面都是表示不同半径的圆，在许多场合，磁道和柱面可以互换使用。磁盘盘片垂直视角如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/%E7%A3%81%E7%9B%98%E7%9B%98%E7%89%87%E5%9E%82%E7%9B%B4%E8%A7%86%E8%A7%92.png" alt="磁盘盘片垂直视角.png"></p><p>盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。</p><p><strong>扇区是硬盘的最小存储单元</strong>。早期的硬盘每磁道扇区数相同，此时由磁盘基本参数可以计算出硬盘的容量：存储容量=磁头数<em>磁道（柱面）数</em>每道扇区数*每扇区字节数。由于每磁道扇区数相同，外圈磁道半径大，里圈磁道半径小，外圈和里圈扇区面积自然会不一样。同时，为了更好的读取数据，即使外圈扇区面积再大也只能和内圈扇区一样存放相同的字节数（512字节）。这样一来，外圈的记录密度就要比内圈小，会浪费大量的存储空间。</p><p>在现代磁盘驱动器中，<strong>每个物理扇区都由两个基本部分组成，即扇区头区域（通常称为“ ID”）和数据区域</strong>。扇区头包含驱动器和控制器使用的信息。该信息包括同步字节，地址标识，缺陷标志以及错误检测和纠正信息。如果数据区域不可靠，则标头还可以包含要使用的备用地址。地址标识用于确保驱动器的机械手已将读/写头定位在正确的位置上。数据区域包含同步字节，用户数据和纠错码（ECC），用于检查并可能纠正可能已引入数据中的错误。</p><h3 id="磁盘扇区划分方式"><a href="#磁盘扇区划分方式" class="headerlink" title="磁盘扇区划分方式"></a>磁盘扇区划分方式</h3><h4 id="CLV技术"><a href="#CLV技术" class="headerlink" title="CLV技术"></a>CLV技术</h4><p>一开始的技术叫做CLV，称为恒定线速度，这个技术要求无论在哪个圈上，线速度都要一样，所以对马达的要求非常高，寿命非常短，在低于12倍速的光驱中使用的技术。光碟片和硬碟不同，光碟片上每个部分的密度都是一样的，在同样旋转一圈的情况下，圆周较长的外圈部分在读取资料时会比内圈部分快，所谓的恒定线速度是指从内到外都是同样的读取速度，而为了保持一开始速度，读到外圈时会降低光碟片的转速来配合读取速度，读到内圈时会提高转速。</p><h4 id="CAV技术"><a href="#CAV技术" class="headerlink" title="CAV技术"></a>CAV技术</h4><p>CLV因为不停的更改马达的转速，会对机器的寿命造成一定的影响，而且磁盘转速也不能无限制的加快。后来又有了一种磁盘技术叫做CAV，叫做恒定角速度，马达的转速恒定，寿命有了很大提高，光盘上的内沿数据比外沿数据传输速度要低，越往外越能体现光驱的速度，倍速指的是最高数据传输率。但是也有缺点，浪费会很大，因为磁头读盘片的扫描频率基本是恒定的，外圈的有效磁介质单元会很稀疏。这时候，各个磁道的扇区数应该是一样的。</p><h4 id="ZBR技术"><a href="#ZBR技术" class="headerlink" title="ZBR技术"></a>ZBR技术</h4><p>在计算机存储中，区域位记录（ZBR）是磁盘驱动器用来优化磁道以增加数据容量的一种方法。它通过在外部磁道上每个区域放置比内部磁道更多的扇区来实现此目的。这与其他方法相反，例如恒定角速度（CAV）驱动器，其中每个磁道的扇区数相同。在由大致同心的轨道组成的磁盘上（无论是实现为单独的圆形轨道还是实现为单个螺旋轨道），物理轨道的长度（周长）随着距中心轮毂的距离增加而增加。</p><p>如下图片所示，可以看到粉红色、绿色、灰色部分的扇区数量不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/ZBR.png" alt="ZBR.png"></p><p>如今的硬盘都使用ZBR（Zoned Bit Recording，区位记录）技术，盘片表面由里向外划分为数个区域，不同区域的磁道扇区数目不同，同一区域内各磁道扇区数相同，盘片外圈区域磁道长扇区数目较多，内圈区域磁道短扇区数目较少，大体实现了等密度，从而获得了更多的存储空间。此时，由于每磁道扇区数各不相同，所以传统的容量计算公式就不再适用。实际上如今的硬盘大多使用LBA（Logical Block Addressing）逻辑块寻址模式，知道LBA后即可计算出硬盘容量。</p><p>设置多少个区域，每个区域的扇区数设定也都是有讲究的。否则会在向内跨区域读写时造成传输率下降过大而影响整体性能。大多数产品划分了16个区域，最外圈的每磁道扇区数正好是最内圈的一倍，与最大的持续传输率的参数基本成比例。比如0到100磁道采用每小时120码的速度，101到200磁道采用每小时100码的速度，201到300采用每小时80码的速度。</p><h3 id="物理扇区与逻辑扇区"><a href="#物理扇区与逻辑扇区" class="headerlink" title="物理扇区与逻辑扇区"></a>物理扇区与逻辑扇区</h3><p>关于物理扇区（physical setctor）与逻辑扇区，这个还得扯上扇区大小，由于近年来，随着对硬盘容量的要求不断增加，为了提高数据记录密度，硬盘厂商往往采用增大扇区大小的方法，于是出现了扇区大小为4096字节的硬盘。我们将这样的扇区称之为“物理扇区”。但是这样的大扇区会有兼容性问题，有的系统或软件无法适应。为了解决这个问题，硬盘内部将物理扇区在逻辑上划分为多个扇区片段并将其作为普通的扇区（一般为512字节大小）报告给操作系统及应用软件。这样的扇区片段我们称之为“逻辑扇区”。实际读写时由硬盘内的程序（固件）负责在逻辑扇区与物理扇区之间进行转换，上层程序“感觉”不到物理扇区的存在。</p><p><strong>逻辑扇区是硬盘可以接受读写指令的最小操作单元，是操作系统及应用程序可以访问的扇区</strong>，多数情况下其大小为512字节。我们通常所说的扇区一般就是指的逻辑扇区。<strong>物理扇区是硬盘底层硬件意义上的扇区，是实际执行读写操作的最小单元。是只能由硬盘直接访问的扇区，操作系统及应用程序一般无法直接访问物理扇区</strong>。一个物理扇区可以包含一个或多个逻辑扇区（比如多数硬盘的物理扇区包含了8个逻辑扇区）。当要读写某个逻辑扇区时，硬盘底层在实际操作时都会读写逻辑扇区所在的整个物理扇区。</p><p><strong>同一块硬盘上的扇区大小一定是一致的</strong>，不可能存在多种不同大小的扇区。</p><h2 id="Block-Cluster"><a href="#Block-Cluster" class="headerlink" title="Block/Cluster"></a>Block/Cluster</h2><p>块（Block）/簇（Cluster）是逻辑上的概念，或者说是虚拟出来的概念。 分别对应Linux与Windows操作系统中的概念。注意：有些文章或资料叫做磁盘块/磁盘簇。</p><p>Unix与Linux系统中，块（Block）是操作系统中最小的逻辑存储单位。操作系统与磁盘打交道的最小单位是块（Block）。在Windows下如NTFS等文件系统中叫做簇。</p><p>每个簇或者块可以包括2、4、8、16、32、64…2的n次方个扇区。现在电脑一般都是4096大小。</p><p>之所以不直接使用扇区的概念是因为，扇区size太小，数量众多时寻址困难。OS将相邻的扇区进行整合，再进行整体的操作。</p><h2 id="影响硬盘性能的因素"><a href="#影响硬盘性能的因素" class="headerlink" title="影响硬盘性能的因素"></a>影响硬盘性能的因素</h2><p>影响磁盘的关键因素是磁盘服务时间，即磁盘完成一个I/O请求所花的时间。</p><p>磁盘服务时间=寻道时间+旋转延迟+数据传输时间</p><h3 id="寻道时间"><a href="#寻道时间" class="headerlink" title="寻道时间"></a>寻道时间</h3><p>$T_{seek}$是指将读写磁头移动至正确的磁道上所需要的时间。寻道时间越短，I/O操作越快，目前磁盘的平均寻道时间一般在3-15ms。</p><h3 id="旋转延迟"><a href="#旋转延迟" class="headerlink" title="旋转延迟"></a>旋转延迟</h3><p>$T_{rotation}$是指盘片旋转将请求数据所在的扇区移动到读写磁盘下方所需要的时间。旋转延迟取决于磁盘转速，通常用磁盘旋转一周所需时间的1/2表示。比如：7200rpm的磁盘平均旋转延迟大约为60*1000/7200/2 = 4.17ms，而转速为15000rpm的磁盘其平均旋转延迟为2ms。</p><h3 id="数据传输时间"><a href="#数据传输时间" class="headerlink" title="数据传输时间"></a>数据传输时间</h3><p>$T_{transfer}$是指完成传输所请求的数据所需要的时间，它取决于数据传输率，其值等于数据大小除以数据传输率。目前IDE/ATA能达到133MB/s，SATA II可达到300MB/s的接口数据传输率，数据传输时间通常远小于前两部分消耗时间。简单计算时可忽略。</p><h2 id="衡量性能指标"><a href="#衡量性能指标" class="headerlink" title="衡量性能指标"></a>衡量性能指标</h2><p>机械硬盘的连续读写性能很好，但随机读写性能很差，这主要是因为磁头移动到正确的磁道上需要时间，随机读写时，磁头需要不停的移动，时间都浪费在了磁头寻址上，所以性能不高。衡量磁盘的重要主要指标是IOPS和吞吐量。</p><h3 id="IOPS"><a href="#IOPS" class="headerlink" title="IOPS"></a>IOPS</h3><p>IOPS（Input/Output Per Second）即每秒的输入输出量（或读写次数），即指每秒内系统能处理的I/O请求数量。随机读写频繁的应用，如小文件存储等，关注随机读写性能，IOPS是关键衡量指标。可以推算出磁盘的IOPS = 1000ms / (Tseek + Trotation + Transfer)，如果忽略数据传输时间，理论上可以计算出随机读写最大的IOPS。常见磁盘的随机读写最大IOPS为：</p><ul><li>7200rpm的磁盘 IOPS = 76 IOPS</li><li>10000rpm的磁盘IOPS = 111 IOPS</li><li>15000rpm的磁盘IOPS = 166 IOPS</li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>吞吐量（Throughput），指单位时间内可以成功传输的数据数量。顺序读写频繁的应用，如视频点播，关注连续读写性能、数据吞吐量是关键衡量指标。它主要取决于磁盘阵列的架构，通道的大小以及磁盘的个数。不同的磁盘阵列存在不同的架构，但他们都有自己的内部带宽，一般情况下，内部带宽都设计足够充足，不会存在瓶颈。磁盘阵列与服务器之间的数据通道对吞吐量影响很大，比如一个2Gbps的光纤通道，其所能支撑的最大流量仅为250MB/s。最后，当前面的瓶颈都不再存在时，硬盘越多的情况下吞吐量越大。</p><h2 id="OS层面的磁盘"><a href="#OS层面的磁盘" class="headerlink" title="OS层面的磁盘"></a>OS层面的磁盘</h2><p>虽然15000rpm的磁盘计算出的理论最大IOPS仅为166，但在实际运行环境中，实际磁盘的IOPS往往能够突破200甚至更高。这其实就是在系统调用过程中，操作系统进行了一系列的优化。</p><p>那么操作系统是如何操作硬盘的呢？类似于网络的分层结构，下图显示了Linux系统中对于磁盘的一次读请求在核心空间中所要经历的层次模型。从图中看出：对于磁盘的一次读请求，首先经过虚拟文件系统层（VFS Layer），其次是具体的文件系统层（例如Ext2），接下来是Cache层（Page Cache Layer）、通用块层（Generic Block Layer）、I/O调度层（I/O Scheduler Layer）、块设备驱动层（Block Device Driver Layer），最后是物理块设备层（Block Device Layer）。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/OS%E8%A7%92%E5%BA%A6%E4%B8%8B%E7%9A%84%E7%A3%81%E7%9B%98.png" alt="OS角度下的磁盘.png"></p><h3 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h3><p>VFS（Virtual File System）虚拟文件系统是一种软件机制，更确切的说扮演着文件系统管理者的角色，与它相关的数据结构只存在于物理内存当中。它的作用是：屏蔽下层具体文件系统操作的差异，为上层的操作提供一个统一的接口。正是因为有了这个层次，Linux中允许众多不同的文件系统共存并且对文件的操作可以跨文件系统而执行。</p><p>VFS中包含着向物理文件系统转换的一系列数据结构，如VFS超级块、VFS的Inode、各种操作函数的转换入口等。Linux中VFS依靠四个主要的数据结构来描述其结构信息，分别为超级块、索引结点、目录项和文件对象。</p><p>超级块（Super Block）：超级块对象表示一个文件系统。它存储一个已安装的文件系统的控制信息，包括文件系统名称（比如Ext2）、文件系统的大小和状态、块设备的引用和元数据信息（比如空闲列表等等）。VFS超级块存在于内存中，它在文件系统安装时建立，并且在文件系统卸载时自动删除。同时需要注意的是对于每个具体的文件系统来说，也有各自的超级块，它们存放于磁盘。</p><p>索引结点（Inode）：索引结点对象存储了文件的相关元数据信息，例如：文件大小、设备标识符、用户标识符、用户组标识符等等。Inode分为两种：一种是VFS的Inode，一种是具体文件系统的Inode。前者在内存中，后者在磁盘中。所以每次其实是将磁盘中的Inode调进填充内存中的Inode，这样才是算使用了磁盘文件Inode。当创建一个文件的时候，就给文件分配了一个Inode。一个Inode只对应一个实际文件，一个文件也会只有一个Inode。</p><p>目录项（Dentry）：引入目录项对象的概念主要是出于方便查找文件的目的。不同于前面的两个对象，目录项对象没有对应的磁盘数据结构，只存在于内存中。一个路径的各个组成部分，不管是目录还是普通的文件，都是一个目录项对象。如，在路径/home/source/test.java中，目录 /, home, source和文件 test.java都对应一个目录项对象。VFS在查找的时候，根据一层一层的目录项找到对应的每个目录项的Inode，那么沿着目录项进行操作就可以找到最终的文件。</p><p>文件对象（File）：文件对象描述的是进程已经打开的文件。因为一个文件可以被多个进程打开，所以一个文件可以存在多个文件对象。一个文件对应的文件对象可能不是惟一的，但是其对应的索引节点和目录项对象肯定是惟一的。</p><h3 id="Ext2"><a href="#Ext2" class="headerlink" title="Ext2"></a>Ext2</h3><p>VFS的下一层即是具体的文件系统，本节简要介绍下Linux的Ext2文件系统。</p><p>一个文件系统一般使用块设备上一个独立的逻辑分区。对于Ext2文件系统来说，硬盘分区首先被划分为一个个的Block，一个Ext2文件系统上的每个Block都是一样大小的。但是不同Ext2文件系统，Block大小可能不同，这是在创建Ext2系统决定的，一般为1k或者4k。由于Block数量很多，为了方便管理，Ext2将这些Block聚集在一起分为几个大的块组（Block Group），每个块组包含的等量的物理块，在块组的数据块中存储文件或目录。Ext2文件系统存储结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/ext2.png" alt="ext2.png"></p><p>Ext2中的Super Block和Inode Table分别对应VFS中的超级块和索引结点，存放在磁盘。每个块组都有一个块组描述符GDT（Group Descriptor Table），存储一个块组的描述信息，例如在这个块组中从哪里开始是Inode表，从哪里开始是数据块等等。Block Bitmap和Inode Bitmap分别表示Block和Inode是否空闲可用。Data Block数据块是用来真正存储文件内容数据的地方，下面我们看一下具体的存储规则。</p><p>在Ext2文件系统中所支持的Block大小有1K、2K、4K三种。在格式化时Block的大小就固定了，且每个Block都有编号，方便Inode的记录。每个Block内最多只能够放置一个文件的数据，如果文件大于Block的大小，则一个文件会占用多个Block；如果文件小于Block，则该Block的剩余容量就不能够再被使用了，即磁盘空间会浪费。下面看看Inode和Block的对应关系。</p><p>Inode要记录的数据非常多，但大小仅为固定的128字节，同时记录一个Block号码就需要4字节，假设一个文件有400MB且每个Block为4K时，那么至少也要十万笔Block号码的记录。Inode不可能有这么多的记录信息，因此Ext2将Inode记录Block号码的区域定义为12个直接、一个间接、一个双间接与一个三间接记录区。Inode存储结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/Inode%E7%BB%93%E6%9E%84.png" alt="Inode结构.png"></p><p>最左边为Inode本身（128 bytes），里面有12个直接指向Block号码的对照，这12笔记录能够直接取得Block号码。至于所谓的间接就是再拿一个Block来当作记录Block号码的记录区，如果文件太大时，就会使用间接的Block来记录编号。如上图，当中间接只是拿一个Block来记录额外的号码而已。 同理，如果文件持续长大，那么就会利用所谓的双间接，第一个Block仅再指出下一个记录编号的Block在哪里，实际记录的在第二个Block当中。依此类推，三间接就是利用第三层Block来记录编号。</p><h3 id="Page-Cache"><a href="#Page-Cache" class="headerlink" title="Page Cache"></a>Page Cache</h3><p>引入Cache层的目的是为了提高Linux操作系统对磁盘访问的性能。<strong>Cache层在内存中缓存了磁盘上的部分数据。当数据的请求到达时，如果在Cache中存在该数据且是最新的，则直接将数据传递给用户程序，免除了对底层磁盘的操作，提高了性能。Cache层也正是磁盘IOPS为什么能突破200的主要原因之一</strong>。</p><p>在Linux的实现中，文件Cache分为两个层面，<strong>一是Page Cache，另一个Buffer Cache</strong>，每一个Page Cache包含若干Buffer Cache。Page Cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read/write操作的时候。Buffer Cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。</p><p>磁盘Cache有两大功能：<strong>预读和回写</strong>。预读其实就是利用了局部性原理，具体过程是：对于每个文件的第一个读请求，系统读入所请求的页面并读入紧随其后的少数几个页面（通常是三个页面），这时的预读称为<strong>同步预读</strong>。对于第二次读请求，如果所读页面不在Cache中，即不在前次预读的页中，则表明文件访问不是顺序访问，系统继续采用同步预读；如果所读页面在Cache中，则表明前次预读命中，操作系统把预读页的大小扩大一倍，此时预读过程是异步的，应用程序可以不等预读完成即可返回，只要后台慢慢读页面即可，这时的预读称为<strong>异步预读</strong>。任何接下来的读请求都会处于两种情况之一：第一种情况是所请求的页面处于预读的页面中，这时继续进行异步预读；第二种情况是所请求的页面处于预读页面之外，这时系统就要进行同步预读。</p><p><strong>回写是通过暂时将数据存在Cache里，然后统一异步写到磁盘中</strong>。通过这种异步的数据I/O模式解决了程序中的计算速度和数据存储速度不匹配的鸿沟，减少了访问底层存储介质的次数，使存储系统的性能大大提高。Linux 2.6.32内核之前，采用pdflush机制来将脏页真正写到磁盘中，什么时候开始回写呢？下面两种情况下，脏页会被写回到磁盘：</p><ol><li>在空闲内存低于一个特定的阈值时，内核必须将脏页写回磁盘，以便释放内存。</li><li>当脏页在内存中驻留超过一定的阈值时，内核必须将超时的脏页写会磁盘，以确保脏页不会无限期地驻留在内存中。</li></ol><p>回写开始后，pdflush会持续写数据，直到满足以下两个条件：</p><ol><li>已经有指定的最小数目的页被写回到磁盘。</li><li>空闲内存页已经回升，超过了阈值。</li></ol><p>Linux 2.6.32内核之后，放弃了原有的pdflush机制，改成了bdi_writeback机制。bdi_writeback机制主要解决了原有fdflush机制存在的一个问题：在多磁盘的系统中，pdflush管理了所有磁盘的Cache，从而导致一定程度的I/O瓶颈。bdi_writeback机制为每个磁盘都创建了一个线程，专门负责这个磁盘的Page Cache的刷新工作，从而实现了每个磁盘的数据刷新在线程级的分离，提高了I/O性能。</p><p>回写机制存在的问题是回写不及时引发数据丢失（可由sync|fsync解决），回写期间读I/O性能很差。</p><h3 id="通用块层"><a href="#通用块层" class="headerlink" title="通用块层"></a>通用块层</h3><p>通用块层的主要工作是：接收上层发出的磁盘请求，并最终发出I/O请求。该层隐藏了底层硬件块设备的特性，为块设备提供了一个通用的抽象视图。</p><p>对于VFS和具体的文件系统来说，块（Block）是基本的数据传输单元，当内核访问文件的数据时，它首先从磁盘上读取一个块。但是对于磁盘来说，扇区是最小的可寻址单元，块设备无法对比它还小的单元进行寻址和操作。由于扇区是磁盘的最小可寻址单元，所以块不能比扇区还小，只能整数倍于扇区大小，即一个块对应磁盘上的一个或多个扇区。一般来说，块大小是2的整数倍，而且由于Page Cache层的最小单元是页（Page），所以块大小不能超过一页的长度。</p><p>大多情况下，数据的传输通过DMA方式。旧的磁盘控制器，仅仅支持简单的DMA操作：每次数据传输，只能传输磁盘上相邻的扇区，即数据在内存中也是连续的。这是因为如果传输非连续的扇区，会导致磁盘花费更多的时间在寻址操作上。而现在的磁盘控制器支持“分散/聚合”DMA操作，这种模式下，数据传输可以在多个非连续的内存区域中进行。<strong>为了利用“分散/聚合”DMA操作，块设备驱动必须能处理被称为段（segments）的数据单元。一个段就是一个内存页面或一个页面的部分，它包含磁盘上相邻扇区的数据</strong>。</p><p>通用块层是粘合所有上层和底层的部分，一个页的磁盘数据布局如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/%E9%A1%B5%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83.png" alt="页数据分布.png"></p><h3 id="I-O调度层"><a href="#I-O调度层" class="headerlink" title="I/O调度层"></a>I/O调度层</h3><p>I/O调度层的功能是管理块设备的请求队列。即接收通用块层发出的I/O请求，缓存请求并试图合并相邻的请求。并根据设置好的调度算法，回调驱动层提供的请求处理函数，以处理具体的I/O请求。</p><p>如果简单地以内核产生请求的次序直接将请求发给块设备的话，那么块设备性能肯定让人难以接受，因为磁盘寻址是整个计算机中最慢的操作之一。为了优化寻址操作，内核不会一旦接收到I/O请求后，就按照请求的次序发起块I/O请求。为此Linux实现了几种I/O调度算法，算法基本思想就是通过合并和排序I/O请求队列中的请求，以此大大降低所需的磁盘寻道时间，从而提高整体I/O性能。</p><p>常见的I/O调度算法包括Noop调度算法（No Operation）、CFQ（完全公正排队I/O调度算法）、DeadLine（截止时间调度算法）、AS预测调度算法等。</p><ul><li>Noop算法：最简单的I/O调度算法。<strong>该算法仅适当合并用户请求，并不排序请求。新的请求通常被插在调度队列的开头或末尾，下一个要处理的请求总是队列中的第一个请求。这种算法是为不需要寻道的块设备设计的，如SSD</strong>。因为其他三个算法的优化是基于缩短寻道时间的，而SSD硬盘没有所谓的寻道时间且I/O响应时间非常短。</li><li>CFQ算法：算法的主要目标是在触发I/O请求的所有进程中确保磁盘I/O带宽的公平分配。算法使用许多个排序队列，存放了不同进程发出的请求。通过散列将同一个进程发出的请求插入同一个队列中。采用轮询方式扫描队列，从第一个非空队列开始，依次调度不同队列中特定个数（公平）的请求，然后将这些请求移动到调度队列的末尾。</li><li>Deadline算法：算法引入了两个排队队列分别包含读请求和写请求，两个最后期限队列包含相同的读和写请求。本质就是一个超时定时器，当请求被传给电梯算法时开始计时。一旦最后期限队列中的超时时间已到，就请求移至调度队列末尾。Deadline算法避免了电梯调度策略（为了减少寻道时间，会优先处理与上一个请求相近的请求）带来的对某个请求忽略很长一段时间的可能。</li><li>AS算法：AS算法本质上依据局部性原理，预测进程发出的读请求与刚被调度的请求在磁盘上可能是“近邻”。算法统计每个进程I/O操作信息，当刚刚调度了由某个进程的一个读请求之后，算法马上检查排序队列中的下一个请求是否来自同一个进程。如果是，立即调度下一个请求。否则，查看关于该进程的统计信息，如果确定进程可能很快发出另一个读请求，那么就延迟一小段时间。</li></ul><p>前文中计算出的IOPS是理论上的随机读写的最大IOPS，在随机读写中，每次I/O操作的寻址和旋转延时都不能忽略不计，有了这两个时间的存在也就限制了IOPS的大小。现在如果我们考虑在读取一个很大的存储连续分布在磁盘的文件，因为文件的存储的分布是连续的，磁头在完成一个读I/O操作之后，不需要重新寻址，也不需要旋转延时，在这种情况下我们能到一个很大的IOPS值。这时由于不再考虑寻址和旋转延时，则性能瓶颈仅是数据传输时延，假设数据传输时延为0.4ms，那么IOPS=1000 / 0.4 = 2500 IOPS。</p><p>在许多的开源框架如Kafka、HBase中，都通过追加写的方式来尽可能的将随机I/O转换为顺序I/O，以此来降低寻址时间和旋转延时，从而最大限度的提高IOPS。</p><h3 id="块设备驱动层"><a href="#块设备驱动层" class="headerlink" title="块设备驱动层"></a>块设备驱动层</h3><p>驱动层中的驱动程序对应具体的物理块设备。它从上层中取出I/O请求，并根据该I/O请求中指定的信息，通过向具体块设备的设备控制器发送命令的方式，来操纵设备传输数据。</p><h2 id="基于磁盘特性的设计"><a href="#基于磁盘特性的设计" class="headerlink" title="基于磁盘特性的设计"></a>基于磁盘特性的设计</h2><p>在了解Linux系统中请求到达磁盘的一次完整过程，期间Linux通过Cache以及排序合并I/O请求来提高系统的性能。其本质就是由于磁盘随机读写慢、顺序读写快。本节针对常见开源系统阐述一些基于磁盘I/O特性的设计技巧。</p><h3 id="采用追加写"><a href="#采用追加写" class="headerlink" title="采用追加写"></a>采用追加写</h3><p>在进行系统设计时，良好的读性能和写性能往往不可兼得。<strong>在许多常见的开源系统中都是优先在保证写性能的前提下来优化读性能</strong>。那么如何设计能让一个系统拥有良好的写性能呢？一个好的办法就是采用追加写，每次将数据添加到文件。由于完全是顺序的，所以可以具有非常好的写操作性能。但是这种方式也存在一些缺点：从文件中读一些数据时将会需要更多的时间：需要倒序扫描，直到找到所需要的内容。当然在一些简单的场景下也能够保证读操作的性能：</p><h4 id="数据是被整体访问的"><a href="#数据是被整体访问的" class="headerlink" title="数据是被整体访问的"></a>数据是被整体访问的</h4><p>HDFS建立在一次写多次读的模型之上。在HDFS中就是采用了追加写并且设计为高数据吞吐量；高吞吐量必然以高延迟为代价，所以HDFS并不适用于对数据访问要求低延迟的场景；由于采用是的追加写，也并不适用于任意修改文件的场景。HDFS设计为流式访问大文件，使用大数据块并且采用流式数据访问来保证数据被整体访问，同时最小化硬盘的寻址开销，只需要一次寻址即可，这时寻址时间相比于传输时延可忽略，从而也拥有良好的读性能。HDFS不适合存储小文件，原因之一是由于NameNode内存不足问题，还有就是因为访问大量小文件需要执行大量的寻址操作，并且需要不断的从一个datanode跳到另一个datanode，这样会大大降低数据访问性能。</p><h4 id="知道文件明确的偏移量"><a href="#知道文件明确的偏移量" class="headerlink" title="知道文件明确的偏移量"></a>知道文件明确的偏移量</h4><p>在Kafka中，采用消息追加的方式来写入每个消息，每个消息读写时都会利用Page Cache的预读和回写特性，同时partition中都使用顺序读写，以此来提高I/O性能。虽然Kafka能够根据偏移量查找到具体的某个消息，但是查找过程是顺序查找，因此如果数据很大的话，查找效率就很低。所以Kafka中采用了分段和索引的方式来解决查找效率问题。Kafka把一个patition大文件又分成了多个小文件段，每个小文件段以偏移量命名，通过多个小文件段，不仅可以使用二分搜索法很快定位消息，同时也容易定期清除或删除已经消费完的文件，减少磁盘占用。为了进一步提高查找效率，Kafka为每个分段后的数据建立了索引文件，并通过索引文件稀疏存储来降低元数据占用大小。一个段中数据对应结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/kafka%E6%AE%B5%E7%BB%93%E6%9E%84.png" alt="kafka段结构.png"></p><p>在面对更复杂的读场景（比如按key）时，如何来保证读操作的性能呢？简单的方式是像Kafka那样，将文件数据有序保存，使用二分查找来优化效率；或者通过建索引的方式来进行优化；也可以采用hash的方式将数据分割为不同的桶。以上的方法都能增加读操作的性能，但是由于在数据上强加了数据结构，又会降低写操作的性能。比如如果采用索引的方式来优化读操作，那么在更新索引时就需要更新B-tree中的特定部分，这时候的写操作就是随机写。那么有没有一种办法在保证写性能不损失的同时也提供较好的读性能呢？一个好的选择就是使用LSM-tree。LSM-tree与B-tree相比，LSM-tree牺牲了部分读操作，以此大幅提高写性能。</p><p>日志结构的合并树LSM（The Log-Structured Merge-Tree）是HBase，LevelDB等NoSQL数据库的存储引擎。Log-Structured的思想是将整个磁盘看做一个日志，在日志中存放永久性数据及其索引，每次都添加到日志的末尾。并且通过将很多小文件的存取转换为连续的大批量传输，使得对于文件系统的大多数存取都是顺序的，从而提高磁盘I/O。<strong>LSM-tree就是这样一种采用追加写、数据有序以及将随机I/O转换为顺序I/O的延迟更新，批量写入硬盘的数据结构</strong>。LSM-tree将数据的修改增量先保存在内存中，达到指定的大小限制后再将这些修改操作批量写入磁盘。因此比较旧的文件不会被更新，重复的纪录只会通过创建新的纪录来覆盖，这也就产生了一些冗余的数据。所以系统会周期性的合并一些数据，移除重复的更新或者删除纪录，同时也会删除上述的冗余。在进行读操作时，如果内存中没有找到相应的key，那么就是倒序从一个个磁盘文件中查找。如果文件越来越多那么读性能就会越来越低，目前的解决方案是采用页缓存来减少查询次数，周期合并文件也有助于提高读性能。在文件越来越多时，可通过布隆过滤器来避免大量的读文件操作。LSM-tree牺牲了部分读性能，以此来换取写入的最大化性能，特别适用于<strong>读需求低，会产生大量插入操作的应用环境</strong>。</p><h3 id="文件合并与元数据优化"><a href="#文件合并与元数据优化" class="headerlink" title="文件合并与元数据优化"></a>文件合并与元数据优化</h3><p>目前的大多数文件系统，如XFS/Ext4、GFS、HDFS，在元数据管理、缓存管理等实现策略上都侧重大文件。上述基于磁盘I/O特性设计的系统都有一个共性特点就是都运行在这些文件系统之上。这些文件系统在面临海量小文件时在性能和存储效率方面都大幅降低，本节来探讨下海量小文件下的系统设计。</p><p><strong>常见文件系统在海量小文件应用下性能表现不佳的根本原因是磁盘最适合顺序的大文件I/O读写模式，而非常不适合随机的小文件I/O读写模式</strong>。主要原因体现在元数据管理低效和数据布局低效：</p><ul><li><p>元数据管理低效：由于小文件数据内容较少，因此元数据的访问性能对小文件访问性能影响巨大。Ext2文件系统中Inode和Data Block分别保存在不同的物理位置上，一次读操作需要至少经过两次的独立访问。在海量小文件应用下，Inode的频繁访问，使得原本的并发访问转变为了海量的随机访问，大大降低了性能。另外，大量的小文件会快速耗尽Inode资源，导致磁盘尽管有大量Data Block剩余也无法存储文件，会浪费磁盘空间。</p></li><li><p>数据布局低效：Ext2在Inode中使用多级指针来索引数据块。对于大文件，数据块的分配会尽量连续，这样会具有比较好的空间局部性。但是对于小文件，数据块可能零散分布在磁盘上的不同位置，并且会造成大量的磁盘碎片，不仅造成访问性能下降，还大量浪费了磁盘空间。数据块一般为1KB、2KB或4KB，对于小于4KB的小文件，Inode与数据的分开存储破坏了空间局部性，同时也造成了大量的随机I/O。</p></li></ul><p>对于海量小文件应用，常见的I/O流程复杂也是造成磁盘性能不佳的原因。对于小文件，磁盘的读写所占用的时间较少，而用于文件的open()操作占用了绝大部分系统时间，导致磁盘有效服务时间非常低，磁盘性能低下。针对于问题的根源，优化的思路大体上分为：</p><ol><li>针对元数据管理低效，优化元数据的存储和管理。针对这两种优化方式，业内也出现了许多优秀的开源软件。</li><li>针对数据布局低效，采用小文件合并策略，将小文件合并为大文件。</li></ol><h4 id="元数据管理优化"><a href="#元数据管理优化" class="headerlink" title="元数据管理优化"></a>元数据管理优化</h4><p>一般来说元数据信息包括名称、文件大小、设备标识符、用户标识符、用户组标识符等等，<strong>在小文件系统中可以对元数据信息进行精简，仅保存足够的信息即可</strong>。元数据精简可以减少元数据通信延时，同时相同容量的Cache能存储更多的元数据，从而提高元数据使用效率。另外可以<strong>在文件名中就包含元数据信息，从而减少一个元数据的查询操作</strong>。最后<strong>针对特别小的一些文件，可以采取元数据和数据并存的策略，将数据直接存储在元数据之中，通过减少一次寻址操作从而大大提高性能</strong>。</p><ul><li>TFS中文件命名就隐含了位置信息等部分元数据，从而减少了一个元数据的查询操作。</li><li>在Rerserfs中，对于小于1KB的小文件，Rerserfs可以将数据直接存储在Inode中。</li></ul><h4 id="小文件合并"><a href="#小文件合并" class="headerlink" title="小文件合并"></a>小文件合并</h4><p>小文件合并为大文件后，首先减少了大量元数据，提高了元数据的检索和查询效率，降低了文件读写的I/O操作延时。其次将可能连续访问的小文件一同合并存储，增加了文件之间的局部性，将原本小文件间的随机访问变为了顺序访问，大大提高了性能。同时，合并存储能够有效的减少小文件存储时所产生的磁盘碎片问题，提高了磁盘的利用率。最后，合并之后小文件的访问流程也有了很大的变化，由原来许多的open操作转变为了seek操作，定位到大文件具体的位置即可。如何寻址这个大文件中的小文件呢？其实就是利用一个旁路数据库来记录每个小文件在这个大文件中的偏移量和长度等信息。其实小文件合并的策略本质上就是通过分层的思想来存储元数据。中控节点存储一级元数据，也就是大文件与底层块的对应关系；数据节点存放二级元数据，也就是最终的用户文件在这些一级大块中的存储位置对应关系，经过两级寻址来读写数据。</p><p>淘宝的TFS就采用了小文件合并存储的策略。TFS中默认Block大小为64M，每个块中会存储许多不同的小文件，但是这个块只占用一个Inode。假设一个Block为64M，数量级为1PB。那么NameServer上会有 1 * 1024 * 1024 * 1024 / 64 = 16.7M个Block。假设每个Block的元数据大小为0.1K，则占用内存不到2G。在TFS中，文件名中包含了Block ID和File ID，通过Block ID定位到具体的DataServer上，然后DataServer会根据本地记录的信息来得到File ID所在Block的偏移量，从而读取到正确的文件内容。TFS一次读过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/%E7%A3%81%E7%9B%98IO%E6%80%BB%E7%BB%93/TFS.png" alt="TFS.png"></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="电梯调度算法"><a href="#电梯调度算法" class="headerlink" title="电梯调度算法"></a>电梯调度算法</h3><p>如果电梯到了你这个楼层，方向正好和你的需求一致，那么电梯就会停止，否则电梯会继续运行。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>IBM developerWorks，<a href="https://www.ibm.com/developerworks/cn/aix/library/1203_weixy_aixio/">AIX 下磁盘 I/O 性能分析</a>，2012。</li><li>CSDN博客频道，<a href="https://blog.csdn.net/hanchengxi/article/details/19089589">磁盘性能评价指标—IOPS和吞吐量</a>，2014。</li><li>IBM developerWorks，<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-read/">read 系统调用剖析</a>，2008。</li><li>IBM developerWorks，<a href="https://developer.ibm.com/alert-zh/">从文件 I/O 看 Linux 的虚拟文件系统</a>，2007。</li><li>CSDN博客频道，<a href="http://blog.csdn.net/kai_ding/article/details/17322787">Linux文件系统预读</a>，2013。</li><li>Linux Kernel Exploration，<a href="http://www.ilinuxkernel.com/files/Linux.Generic.Block.Layer.pdf">Linux通用块设备层</a>。</li><li>CSDN博客频道，<a href="http://blog.csdn.net/hustyangju/article/details/40507647">Linux块设备的IO调度算法和回写机制</a>，2014。</li><li>Apache，<a href="http://kafka.apache.org/">Kafka</a>。</li><li>Taobao，<a href="http://tfs.taobao.org/">Taobao File System</a>。</li><li>美团技术团队，<a href="https://tech.meituan.com/2017/05/19/about-desk-io.html">磁盘I/O那些事</a>，2017。</li><li>CSDN博客频道，<a href="https://www.cnblogs.com/kerrycode/p/12701772.html">存储基础知识：扇区与块/簇</a>，2020。</li></ol>]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式一致性算法学习总结</title>
      <link href="/2021/09/30/fen-bu-shi/fen-bu-shi-yi-zhi-xing-suan-fa-xue-xi-zong-jie/"/>
      <url>/2021/09/30/fen-bu-shi/fen-bu-shi-yi-zhi-xing-suan-fa-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h2><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>CAP本身是三个单词的缩写：</p><ul><li>Consistency：一致性</li><li>Availability：可用性</li><li>Partition-tolerance：分区容错性</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/CAP%E5%AE%9A%E7%90%86.png" alt="CAP定理"></p><p>CAP定理指出，在异步网络模型中，不存在一个系统同时满足上述三种属性，即分布式系统必须舍弃其中一个属性。</p><h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><p>共识的意思就是指所有的参与者都有相同的认识（可以理解为强一致性）。共识算法可以依据是否有恶意节点分为两类，即是否有恶意节点。</p><h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h4><p>Paxos算法是Leslie Lamport在1998年《The Part-Time Parliament》中所提出。</p><p>Paxos算法中存在三种角色：</p><ul><li>Proposer：参与提案，并向Acceptor发送提案</li><li>Acceptor：参与决策，回应提案。如果提案获得多数（过半）Acceptor接受，则认为提案被批准</li><li>Learner：不参与决策，只学习最新达成一致的提案</li></ul><p>Paxos算法的决议过程分为两种：</p><ul><li>Basic Paxos:针对单个value的决议过程</li><li>Multi Paxos：针对连续多个value的决议过程</li></ul><h5 id="Basic-Paxos"><a href="#Basic-Paxos" class="headerlink" title="Basic Paxos"></a>Basic Paxos</h5><h5 id="Multi-Paxos"><a href="#Multi-Paxos" class="headerlink" title="Multi Paxos"></a>Multi Paxos</h5>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala学习笔记</title>
      <link href="/2021/09/24/cheng-xu-she-ji/scala-xue-xi-bi-ji/"/>
      <url>/2021/09/24/cheng-xu-she-ji/scala-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Scala是一个多范式语言，其支持面向对象与函数式编程。</p><p>Scala具有一些特性：</p><ul><li>同时支持命令式风格和类型推断</li><li>纯面向对象</li><li>强制合理的静态类型和类型推断</li><li>简洁而富有表现力</li><li>能和Java无缝的交互</li><li>基于精小的内核构建</li><li>高度的伸缩性，仅用少量代码就可以创建高性能的应用程序</li><li>具有强大、易用的并发模型</li></ul><h2 id="1-探索Scala"><a href="#1-探索Scala" class="headerlink" title="1. 探索Scala"></a>1. 探索Scala</h2><p>Scala不要求以<code>;</code>结尾。</p><pre class="line-numbers language-Scala" data-language="Scala"><code class="language-Scala">object HelloWorld{  def main(args: Array[String]){    println("Hello World...")  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的HelloWorld代码与Java最大的不同在于：Scala版的HelloWorld程序不通过static关键字把main方法标记成静态方法，而是使用object关键字创建了单件。</p><p><code>&lt;10&gt;.asInstanceOf[Double]</code>：Int类型的10转换成Double类型</p><p><code>10.isInstanceOf[Int]</code>：返回10是否为Int类型</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>本博客为《Scala实用指南》一书的整理与总结，仅供个人学习复习使用。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习笔记</title>
      <link href="/2021/09/22/cheng-xu-she-ji/django-xue-xi-bi-ji/"/>
      <url>/2021/09/22/cheng-xu-she-ji/django-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Django是一个开放源代码的Web应用框架。</p><p>检测是否安装Django模块：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python -m django --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>初始化项目：<code>django-admin startproject mysite</code>。这样会在当前目录上生成名字为mysite的文件夹，并初始化整个项目。</p><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>此时生成的文件夹下有以下内容：</p><ul><li>最外层的 mysite/ 根目录只是你项目的容器， 根目录名称对 Django 没有影响，你可以将它重命名为任何你喜欢的名称。</li><li>manage.py: 一个让你用各种方式管理 Django 项目的命令行工具。你可以阅读 django-admin 和 manage.py 获取所有 manage.py 的细节。</li><li>里面一层的 mysite/ 目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 mysite.urls).</li><li>mysite/__init__.py：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。如果你是 Python 初学者，阅读官方文档中的 更多关于包的知识。</li><li>mysite/settings.py：Django 项目的配置文件。如果你想知道这个文件是如何工作的，请查看 Django 配置 了解细节。</li><li>mysite/urls.py：Django 项目的 URL 声明，就像你网站的“目录”。阅读 URL调度器 文档来获取更多关于 URL 的内容。</li><li>mysite/asgi.py：作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口。阅读 如何使用 ASGI 来部署 了解更多细节。</li><li>mysite/wsgi.py：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。阅读 如何使用 WSGI 进行部署 了解更多细节。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健身理论整理</title>
      <link href="/2021/09/20/jing-yan-zong-jie/jian-shen-li-lun-zheng-li/"/>
      <url>/2021/09/20/jing-yan-zong-jie/jian-shen-li-lun-zheng-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 健身 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《认知天性》读后感</title>
      <link href="/2021/09/10/si-wei-jin-hua/ren-zhi-tian-xing-du-hou-gan/"/>
      <url>/2021/09/10/si-wei-jin-hua/ren-zhi-tian-xing-du-hou-gan/</url>
      
        <content type="html"><![CDATA[<p>首先，要想学以致用，就必须记忆。只有这样，已经学会的内容才不会在将来被需要的时候消失。</p><p>其次，我们需要坚持不懈的学习与记忆，终身不懈。</p><p>学习是耗费心血的，这样效果才能持久。</p><p>与反复阅读的复习方式相比，回想事实、概念或事件会更加有效。————即检索式学习</p><p>在初次阅读后，隔一段时间再阅读是有意义的。但是连续多次阅读只是空耗时间，好处少的可以忽略不计。</p>]]></content>
      
      
      <categories>
          
          <category> 思维进化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KV存储引擎学习笔记</title>
      <link href="/2021/09/09/kv-cun-chu/kv-cun-chu-yin-qing-xue-xi-bi-ji/"/>
      <url>/2021/09/09/kv-cun-chu/kv-cun-chu-yin-qing-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="SkipList"><a href="#SkipList" class="headerlink" title="SkipList"></a>SkipList</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>跳表全称叫做跳跃表，简称跳表。跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表。跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能。</p></blockquote><p>Skip List(跳跃列表)这种随机的数据结构，可以看做是一个二叉树的变种，它在性能上与红黑树、AVL树很相近；但是Skip List(跳跃列表)的实现相比前两者要简单很多，目前Redis的zset实现采用了Skip List(跳跃列表)（其它还有LevelDB等也使用了跳跃列表）。</p><p>RBT红黑树与Skip List(跳跃列表)简单对比：</p><table><thead><tr><th></th><th>RBT红黑树</th><th>SkipList跳表</th></tr></thead><tbody><tr><td>时间复杂度</td><td>$O(logn)$</td><td>$O(logn)$</td></tr><tr><td>实现复杂度</td><td>实现复杂，设计变色、左旋右旋平衡等操作</td><td>实现简单，链表结构</td></tr><tr><td>数据顺序</td><td>天然有序</td><td>天然有序</td></tr><tr><td>锁机制</td><td>需要加锁</td><td>无需加锁</td></tr></tbody></table><h3 id="跳表的优势"><a href="#跳表的优势" class="headerlink" title="跳表的优势"></a>跳表的优势</h3><p>跳表的结构总的来说就是在原本链表不支持二分查找的基础上，利用空间换时间的方式，实现更快的插入与查找。</p><p>Search: $O(logn)$ time complexity on average.</p><p>Insertion: $O(logn)$ time complexity on average.</p><p>常见的链表结构如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Node <span class="token keyword">struct</span> <span class="token punctuation">{</span>  data <span class="token builtin">int</span>  next <span class="token operator">*</span>Node<span class="token punctuation">}</span>NodeA<span class="token punctuation">.</span>next<span class="token operator">=</span>NodeB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有序单链表的查找需要进行遍历。如下图。</p><pre class="mermaid">graph LR    A(2)--&gt;B(4)--&gt;C(9)--&gt;D(11)--&gt;E(26)</pre><p>想要找到上图中的26这个元素，只能从头到尾遍历一遍整个链表。</p><p>那么有没有更加快速的查找方法？</p><p>一个朴素的想法就是借鉴数组查找中的二分查找的思想。用空间换时间。提取链表中的相应节点作为索引。通过检查索引的方式，优化查询过程。形成的跳表结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/KV%E5%AD%98%E5%82%A8/KV%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/skipList%E7%BB%93%E6%9E%84.png" alt="skipList结构.png"></p><p>这样减少了查找需要的次数，尤其在数据量很大的时候效果明显。但是数据量大的同时也会带来新的问题，就是索引的数量及其层数的选择尤为重要。</p><p>通常的做法是按照每两个节点之间选择一个节点作为索引的原则。每个子链表及其原始链表以一个哨兵节点作为开始。只有L0层的链表才是全部数据。在具体实现的时候，并不拘泥于必须要每两个节点之间生成一个索引节点，而是<strong>按照二分之一的概念生成索引节点</strong>。可以视为随机抛硬币，如果是正面（或者反面）则作为索引节点，并以$L_{n-1}$层作为基础，生成$L_n$层的索引节点。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>SkipList的时间复杂度受制于两个方面：查找过程中所经历的层高以及每层查找的次数。</p><p>假设严格按照每两个节点就回抽出一个节点作为上一级索引的节点。原始链表有n个节点，则一级索引有$n/2$个元素，二级索引有$n/4$个元素，则k级索引就有$n/{2^k}$个元素。最高层索引一般有两个元素，即最高级索引h满足$2=n/{2^h}$，即$h=log2n-1$。因此，总的层高就是$log2n$。</p><p>每层最多遍历节点个数为3个。</p><p>因此，整体的时间复杂度为$O(logn)$。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Node <span class="token keyword">struct</span><span class="token punctuation">{</span>  data <span class="token builtin">int</span>  next <span class="token operator">*</span>Node<span class="token punctuation">}</span><span class="token keyword">type</span> Element <span class="token keyword">struct</span><span class="token punctuation">{</span>  data KV <span class="token comment">// 真正的数据</span>  levels <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Element <span class="token comment">// 存放节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BoltDB"><a href="#BoltDB" class="headerlink" title="BoltDB"></a>BoltDB</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>掘金社区，<a href="https://juejin.cn/post/7015396092351086622?utm_source=gold_browser_extension">动图带你深入了解——跳跃列表</a>，2021。</li><li>YouTube，<a href="https://www.youtube.com/watch?v=m6m0pnsOzN4">2-3: 跳跃列表 Skip List</a>，2021。</li><li>GitHub，<a href="https://github.com/wangshusen/AdvancedAlgorithms/blob/master/Slides/02_Basic_3.pdf">2_Basic_3.pdf</a>，2021。</li></ol>]]></content>
      
      
      <categories>
          
          <category> KV存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客与画家</title>
      <link href="/2021/08/28/si-wei-jin-hua/hei-ke-yu-hua-jia/"/>
      <url>/2021/08/28/si-wei-jin-hua/hei-ke-yu-hua-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="Hacker-ethic"><a href="#Hacker-ethic" class="headerlink" title="Hacker ethic"></a>Hacker ethic</h2><ol><li>使用计算机以及所有有助于了解这个世界本质的事物都不应该受到任何限制。任何事情都应该亲手尝试。（Access to computers and anything that might teach you something about the way the world works should be unlimited ant total. Always yield to the Hands On Imperative!）</li><li>所有信息应该都是自由的。（All information should be free）</li><li>不信任权威，提倡去中心化。（Mistrust Authority-Promote Decentralization）</li><li>判断一名黑客的水平应该是看他的技术能力，而不是他的学历、年龄或地位等其他标准（Hackers should be judged by their hacking, not bogus criteria such as degrees, age, race, or position）</li><li>你可以使用计算机创造美和艺术（You can create art and beauty on a computer）</li><li>计算机使生活更美好（Computers can change your life for the better）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 思维进化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机安全</title>
      <link href="/2021/08/07/cybersecurity/ji-suan-ji-an-quan/"/>
      <url>/2021/08/07/cybersecurity/ji-suan-ji-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希洪水攻击"><a href="#哈希洪水攻击" class="headerlink" title="哈希洪水攻击"></a>哈希洪水攻击</h2><p><strong>哈希洪水攻击（Hash-Flooding Attack）</strong>是一种<strong>拒绝服务攻击（Denial of Service）</strong>，一旦后端接口存在合适的攻击面，攻击者就能轻松让整台服务器陷入瘫痪。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在各种常用的数据结构里，有些数据结构的“平均运行时间”和“最差运行时间”会差很远，比如<strong>哈希表（Hash Table）</strong>。假设我们想要连续插入n个元素到哈希表中：</p><ul><li>如果这些元素的键（Key）极少出现相同哈希值，这项任务就只需$O(n)$的时间。</li><li>如果这些键频繁出现相同的哈希值（频繁发生<strong>碰撞</strong>），这项任务就需要$O(n^2)$的时间。</li></ul><p>2003年，Scott A. Crosby 和 Dan S. Wallach 两位研究人员发表了一篇论文：<a href="https://link.zhihu.com/?target=https://www.usenix.org/legacy/events/sec03/tech/full_papers/crosby/crosby.pdf">Denial of Service via Algorithmic Complexity Attacks</a>。在这篇论文里他们首次提出：既然有些数据结构的最差运行时间这么废物，我们有没有可能通过算法上的漏洞，强行构造出一个最差情况，让服务器把全部的资源都浪费在处理这个最差情况上？</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/Cybersecurity/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/DJBX33A.jpg" alt="DJBX33A.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/Cybersecurity/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/DJBX33A_2.jpg" alt="DJBX33A_2.jpg"></p><p>这样一来，只要构造出几万个同样哈希的字符串，把它们提交给服务器做哈希表， 就能用很低的成本将服务器打瘫了。</p><p>这个成本具体有多低呢？依2011年的实验数据，攻击一台基于Java（Tomcat）的服务器时，仅仅需要6KB/s的流量就能打瘫一颗 Intel i7 处理器，1GB/s的流量可以打瘫 100000 颗 Intel i7 处理器，性价比远超TCP半开连接等传统的拒绝服务攻击。</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>首先介绍一个数学悖论，其之所以被称为悖论。不是因为其矛盾，而是因为其违背了大多数人的尝试。</p><hr><h4 id="生日悖论"><a href="#生日悖论" class="headerlink" title="生日悖论"></a>生日悖论</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/Cybersecurity/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/%E7%94%9F%E6%97%A5%E6%82%96%E8%AE%BA.png" alt="生日悖论"></p><p>通过上图可以得知，大概在23个人的全体里就有两个人的生日完全相同，并随着人数越多，发生重复的概率越大。通过简单的公式可以看出这点：</p><p>$1-P= \frac{365}{365} * \frac{364}{365} * … * \frac{365-n+1}{365} = \frac{365!}{365^n(365-n)!}$​​​​</p><p>其结果如表：</p><table><thead><tr><th>n</th><th>23</th><th>30</th><th>40</th><th>50</th><th>60</th><th>100</th></tr></thead><tbody><tr><td>P</td><td>50.7%</td><td>70.6%</td><td>89.1%</td><td>97.0%</td><td>99.4%</td><td>1-3.07*10^-7</td></tr></tbody></table><p>可以看到 n = 100 远小于 N = 365 时，就已经几乎必然有一对同一天生日，所有人生日两两不同的概率仅一千万分之三。</p><hr><p><strong>由生日悖论可知，通过设计更优秀的哈希算法不能让哈希值不发生碰撞。</strong>因为一个哈希表的长度一般也就是几千个元素，根据生日悖论我们可以证明：不管你的算法设计得多么精妙，只要黑客掌握算法的所有细节，那就总能算出一组频繁碰撞的键来。</p><p>如果黑客<strong>不能掌握算法的所有细节</strong>，是不是就<strong>不能算出一组频繁碰撞的键</strong>，也就<strong>没法发动哈希洪水攻击</strong>？</p><p>换句话说，我们能不能在算法中加入一个黑客不知道的秘密参数？每建一张哈希表，我们就随机生成一个新的秘密参数。这样一来，即使是同样的内容，放在不同的表里也会产生完全不同的内存分配。这整个过程黑客完全无法预测，即使发生碰撞，也是小概率的巧合，而不是黑客在主动控制，攻击也就不可能成立了。</p><p>这个黑客不知道的秘密参数，我们现在称之为<strong>哈希种子（Hash Seed）</strong>。而这类使用哈希种子的哈希算法，我们称之为<strong>带密钥哈希算法（Keyed Hash Function）</strong>。</p><p>黑客一方的攻击目标，是想办法刺探出种子的值，或者在不知道种子的情况下构造出一组会碰撞的键来。而安全研究人员的目标，就是设计出更安全的带密钥哈希算法，保护好种子的安全，避免种子被黑客绕过。</p><p>这些年来，攻守双方在这个领域展开了激烈的攻防，来自Google、UIC等机构的众多研究人员设计了许多新的哈希函数：SipHash、MurmurHash、CityHash等等。这些算法不停地被推翻，不停地更新版本，到现在已经形成了一套稳定的算法标准，被众多编程语言和开源项目所采纳。</p><p>下面这张表来自SipHash官网，里面列举了众多采用SipHash-2-4算法的知名项目。其中Rust、Python、Ruby等语言更是把SipHash-2-4作为默认的哈希表实现方法，用这些语言编写的项目天生免疫哈希洪水攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/Cybersecurity/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8/SipHash.jpg" alt="SipHash"></p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>很遗憾，Java并没有使用带密钥哈希算法。而是采用在JDK1.8之后，HashMap、LinkedHashMap和ConcurrentHashMap三个类引入了一套新的策略来处理哈希碰撞。</p><ul><li>当一个位置存储的元素个数小于8个时，仍然使用链表存储。</li><li>当一个位置存储的元素个数大于等于8个时，改为使用平衡树来存储。</li></ul><p>这样一来，就能保证最差的运行时间是$O(nlogn)$了。</p><p>为什么要设立“8个元素”（TREEIFY threshold）这样一个限制呢？因为平衡树相比链表而言有着更高的开销，以及更散乱的内存布局（影响缓存命中率）。在正常情况下，哈希表的一个位置大约只会存储1~4个左右的元素，所以没有必要专门开一个平衡树来存储冲突的元素，对一些性能敏感的应用来说会造成显著的负面影响。</p><p>实际应用中究竟选用平衡树还是SipHash，完全是一件见仁见智的事情，两边没有哪个有显著的优势，实现起来也都不是很困难。</p>]]></content>
      
      
      <categories>
          
          <category> Cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统概念</title>
      <link href="/2021/08/05/fen-bu-shi/fen-bu-shi-xi-tong-gai-nian/"/>
      <url>/2021/08/05/fen-bu-shi/fen-bu-shi-xi-tong-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><h3 id="Up-and-down-the-level-of-abstraction"><a href="#Up-and-down-the-level-of-abstraction" class="headerlink" title="Up and down the level of abstraction"></a>Up and down the level of abstraction</h3><h3 id="Time-and-order"><a href="#Time-and-order" class="headerlink" title="Time and order"></a>Time and order</h3><h3 id="Replication-preventing-divergence"><a href="#Replication-preventing-divergence" class="headerlink" title="Replication: preventing divergence"></a>Replication: preventing divergence</h3><h3 id="Replication-accepting-divergence"><a href="#Replication-accepting-divergence" class="headerlink" title="Replication: accepting divergence"></a>Replication: accepting divergence</h3><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>本文基于<a href="http://book.mixu.net/distsys/intro.html">《Distributed systems for fun &amp; profit》</a>与《分布式系统概念与设计》进行整理，旨在帮助本人进行知识复习使用。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据密集型应用系统设计》学习</title>
      <link href="/2021/08/05/cheng-xu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-xue-xi/"/>
      <url>/2021/08/05/cheng-xu-she-ji/shu-ju-mi-ji-xing-ying-yong-xi-tong-she-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="数据系统基础"><a href="#数据系统基础" class="headerlink" title="数据系统基础"></a>数据系统基础</h2><h3 id="第1章-可靠、可扩展与可维护的应用系统"><a href="#第1章-可靠、可扩展与可维护的应用系统" class="headerlink" title="第1章 可靠、可扩展与可维护的应用系统"></a>第1章 可靠、可扩展与可维护的应用系统</h3><h3 id="第2章-数据模型与查询语言"><a href="#第2章-数据模型与查询语言" class="headerlink" title="第2章 数据模型与查询语言"></a>第2章 数据模型与查询语言</h3><h3 id="第3章-数据存储与检索"><a href="#第3章-数据存储与检索" class="headerlink" title="第3章 数据存储与检索"></a>第3章 数据存储与检索</h3><h3 id="第4章-数据编码与演化"><a href="#第4章-数据编码与演化" class="headerlink" title="第4章 数据编码与演化"></a>第4章 数据编码与演化</h3><h2 id="分布式数据系统"><a href="#分布式数据系统" class="headerlink" title="分布式数据系统"></a>分布式数据系统</h2><h3 id="第5章-数据复制"><a href="#第5章-数据复制" class="headerlink" title="第5章 数据复制"></a>第5章 数据复制</h3><h3 id="第6章-数据分区"><a href="#第6章-数据分区" class="headerlink" title="第6章 数据分区"></a>第6章 数据分区</h3><h3 id="第7章-事务"><a href="#第7章-事务" class="headerlink" title="第7章 事务"></a>第7章 事务</h3><h3 id="第8章-分布式系统的挑战"><a href="#第8章-分布式系统的挑战" class="headerlink" title="第8章 分布式系统的挑战"></a>第8章 分布式系统的挑战</h3><h3 id="第9章-一致性与公识"><a href="#第9章-一致性与公识" class="headerlink" title="第9章 一致性与公识"></a>第9章 一致性与公识</h3><h2 id="派生数据"><a href="#派生数据" class="headerlink" title="派生数据"></a>派生数据</h2><h3 id="第10章-批处理系统"><a href="#第10章-批处理系统" class="headerlink" title="第10章 批处理系统"></a>第10章 批处理系统</h3><h3 id="第11章-流处理系统"><a href="#第11章-流处理系统" class="headerlink" title="第11章 流处理系统"></a>第11章 流处理系统</h3><h3 id="第12章-数据系统的未来"><a href="#第12章-数据系统的未来" class="headerlink" title="第12章 数据系统的未来"></a>第12章 数据系统的未来</h3>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Assistant</title>
      <link href="/2021/07/07/jing-yan-zong-jie/home-assistant/"/>
      <url>/2021/07/07/jing-yan-zong-jie/home-assistant/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Home Assistant是一款用于家庭自动化的免费开源软件，旨在成为智能家居设备的中央控制系统，重点关注本地控制和隐私。可以通过基于Web的用户界面，Android和iOS的配套应用程序或通过受支持的虚拟助手（如Google Assistant或Amazon Alexa）使用语音命令来访问它。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我选择安装的平台是树莓派，而不是选择NAS作为容器的宿主，因为树莓派上可以使用<code>NPS</code>进行内网穿透。采用了Docker的安装方式，直接使用Python的方式pip安装的话会失败。因为Home Assistant需要Python3.8以上的版本。而RaspberryOS默认apt源中最新只有Python3.7。</p><ol><li><p>首先给树莓派安装上一个系统，我这里为了方便以后做硬件的扩展性，采用官方的raspberryOS。<strong>记得安装完毕后，不要先更新系统，先扩展系统使用整个SD空间。</strong></p></li><li><p>安装Docker,这里使用的是Docker的一键化安装脚本<code>sudo curl -sSL https://get.docker.com | sh</code>。</p></li><li><p>安装容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --init -d \  --name homeassistant \  --privileged \  --restart=unless-stopped \  -v /etc/localtime:/etc/localtime:ro \  -v /PATH_TO_YOUR_CONFIG:/config \  --network=host \  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># if this returns "Image is up to date" then you can stop heredocker pull ghcr.io/home-assistant/raspberrypi3-homeassistant<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># stop the running containerdocker stop homeassistant<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># finally, start a new onedocker run --init -d \  --name homeassistant \  --restart=unless-stopped \  --privileged \  -v /PATH_TO_YOUR_CONFIG:/config \  -v /etc/localtime:/etc/localtime:ro \  --network=host \  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>此时本机上已经安装好了装有Home Assistant的容器，并且已经运行。访问该设备的<code>IP:8123</code>即可访问。</p></li><li><p>为了能在离家后控制设备，需要做内网穿透。这里我采用闲置的云服务器，借助<code>NPS</code>实现TCP映射。</p></li><li><p>APP端的Home Assistant的设置中可以设置内网访问地址和外部访问地址。</p></li></ol><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>Home assistant中的小米设备需要安装HACS中的集合<code>Miot Auto</code>和<code>Miot</code>。</p><p>由于HACS中许多插件都是从github进行下载，又因为国内的网络环境。可以通过进入docker中修改<code>/etc/hosts</code>中的域名加ip进行访问。</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HomeAssistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志</title>
      <link href="/2021/06/10/cheng-xu-she-ji/java-ri-zhi/"/>
      <url>/2021/06/10/cheng-xu-she-ji/java-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li>slf4j是日志的规范/接口</li><li>日志实现工具：log4j/logback/common-logging</li></ul><h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><p>logback是log4j创始人开发的新一款日志组件。SpringBoot默认采用logback作为日志组件。logback框架会默认加载classpath下命名为<code>logback-spring</code>或<code>logback</code>的配置文件。</p><p>日志加载顺序:logback.xml-&gt;application.properties-&gt;logback-spring.xml</p><p>logback主要由以下三个模块组成：</p><ol><li>logback-core，是整个logback的核心模块</li><li>logback-classic，支持了slf4j facade</li><li>logback-access，集成了servlet容器来提供HTTP日志功能，适用于web应用</li></ol><p>将所有日志都存储在一个文件中文件大小也随着应用的运行越来越大并且不好排查问题，正确的做法应该是将error日志和其他日志分开，并且不同级别的日志根据时间段进行记录存储。</p><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li><p>通过配置xml文件直接引入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引入spring-boot-starter，会自动引入spring-boot-starter-logging</p></li><li><p>引入spring-boot-starter-web,会自动引入spring-boot-starter</p></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>因为<code>logback-classic</code>实现了SLF4J FACADE，所以上层应用只需要面向SLF4J的调用语法即可。使用语法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StatusPrinter</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld2</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这里的Logger和LoggerFactory均为SLF4J的类，真正调用时会使用Logback的日志能力</span>    <span class="token comment">//getLogger方法中传入的是Logger的名称，这个名称在后面讲解配置文件中的&lt;logger&gt;时会继续提到</span>    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"chapters.introduction.HelloWorld2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印一条Debug级别的日志</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Hello world."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取根Logger，使用场景比较少</span>    <span class="token class-name">Logger</span> rootLogger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Logger</span><span class="token punctuation">.</span>ROOT_LOGGER_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>Logback中每一个Logger都有对应的日志级别，该日志级别可以是Logger自己定义的，也可以是从父Logger上继承下来的。Logback一共支持5个日志级别，从高到低分别是ERROR，WARN，INFO，DEBUG，TRACE。Logger的日志级别决定了哪些级别的日志可以被输出。只有大于等于该Logger级别的日志才会被打印出来。比如假设上文中获取的名为”chapters.introduction.HelloWorld2”的Logger日志级别为INFO，则调用logger.debug(“xxx”)不会输出日志内容，因为DEBUG日志级别低于INFO日志级别。</p><p>日志级别可以帮助我们控制日志打印的粒度，比如在开发环境可以将日志级别设置到DEBUG帮助排查问题，而在生产环境则可以将日志级别设置到INFO，从而减少不必要的打印日志带来的性能影响。</p><h3 id="参数化输出"><a href="#参数化输出" class="headerlink" title="参数化输出"></a>参数化输出</h3><p>有时候我们往往并不只是打印出一条完整的日志，而是希望在日志中附带一些运行中参数。这就会带来字符串拼接的问题。虽然JVM对String字符串的拼接已经进行了优化，但是假如当前的日志级别为INFO，那么这段代码所执行字符串拼接操作就是完全不必要的。因此，建议在代码加上一行日志级别的判断进行优化，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非debug级别不会执行字符串拼接操作，但是debug级别会执行两次isDebugEnabled操作，性能影响不大</span><span class="token keyword">if</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Hello World To "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是，logback并不推荐在系统中使用字符串拼接的方式来输出日志，而是提倡使用参数传递的方式，由logback自己来执行日志的序列化。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//logger方法会判断是否为debug级别，再决定将entry序列化拼接如字符串</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"The entry is {}."</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种日志输出方式就无需额外包一层日志级别的判断，因为logger.debug方法内部自己会判断一次日志级别，再去执行日志内容转码的操作。注意，<strong>传入的参数必须实现了toString方法</strong>，不然日志在对对象进行转码时，只会打印出对象的内存地址，而不是对象中的具体内容。</p><h3 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h3><p>配置文件以<code>&lt;configuration&gt;</code>作为根元素，其下包含1个<code>&lt;root&gt;</code>元素用于定义根日志的配置信息，还有0到多个<code>&lt;logger&gt;</code>元素以及0到多个<code>&lt;appender&gt;</code>元素。其中<code>&lt;logger&gt;</code>元素对应了应用中通过LoggerFactory.getLogger()获取到的日志工具，<code>&lt;appender&gt;</code>元素定义了日志的输出目的地，一个<code>&lt;logger&gt;</code>可以关联多个<code>&lt;appender&gt;</code>，即允许将同样的一行日志输出到多个目的地。</p><h4 id="configuration标签"><a href="#configuration标签" class="headerlink" title="configuration标签"></a>configuration标签</h4><p>作为配置文件的根标签，configuration更多的是对整个Logback配置读取的模式进行定义，configuration标签汇中可以定义的属性如下：</p><ol><li><p>debug: 默认debug值为false，如果debug设置为true的话，则无论配置读取成功与否，都会将日志框架的状态打印出来，为false的话则只有在读取配置出错时才会打印状态日志。</p></li><li><p>scan：默认为false，将scan设为true的话，则logback会自动的定期扫描配置文件，如果配置文件发生变更，则logback能够快速识别并重新配置。可以通过scanPeriod来覆盖默认的扫描间隔。这个功能在生产环境建议不要开启，因为基本上生产环境的日志框架的配置都是稳定的。只有在开发环境需要调试日志框架的行为时，可以将该功能开启，减少因为修改配置进行调试而重启应用的麻烦。</p></li></ol><h4 id="logger标签"><a href="#logger标签" class="headerlink" title="logger标签"></a>logger标签</h4><p>logger是日志流隔离的基本单位，每个logger都会绑定到一个LoggerContext。Logger之间存在树状层级关系，即A Logger可以是B Logger的父Logger。而它们之间的层级关系则是根据logger的名称来决定的。假如logger A的name为<code>com.moduleA</code>，而logger B的name为<code>com.moduleA.packageA</code>，则可以说A是B的父logger。这种树状结构的作用在于，假如B并没有定义自己的日志级别，则会继承A的日志级别。其它的如appender也会根据继承关系计算得出。</p><p><strong>logger只有一个name属性是必填的</strong>。通常来说，除了需要特殊定义的几个logger name之外，其它的基本都会以module的维度进行定义，从而确保模块下的每一个类在以自己的类名获取Logger时，能够向上找到对应的Logger。</p><p>举个例子，假如现在定义了一个name为<code>com.rale.service的logger</code>，则位于<code>com.rale.service.HelloService.java</code>类中使用<code>LoggerFactory.getLogger(HelloService.class)</code>获取到的Logger，虽然在配置文件中并没有声明，但是会以该类的全路径作为logger的名称，按照Logger的层级不断向上找到最近的父Logger，并最终返回name为<code>com.rale.service</code>的logger。</p><p>logger还有一个标签为level，可以为该logger分配对应的日志级别，只有高于该级别的日志会输出。<strong>如果没有显示定义level的值，则会从最近的显式声明了日志级别的父节点继承其日志级别</strong>。</p><p>一个基础的logger配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>integration<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>integration<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common-error<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一个logger下可以包含多个appender-ref标签，该标签声明了该logger的日志会打印到这些输出流中。这里还有一个比较特殊的属性additivity，它是用来约束appender继承行为的</strong>。在默认情况下，aditicity的值为true，即logger除了会打印到当前显式声明的appender-ref中，还会打印到所有从父Logger中继承的appender中。例如假设root中声明了<code>&lt;appender-ref ref="common"&gt;</code>，则integration会同时向这三个输出流中打印日志。如果父logger和子logger中存在相同的appender，该日志也会向该appender打印两遍。因此，通过additivity设置为false，可以减少因为意料之外的appender继承导致日志的过量输出。</p><h4 id="appender标签"><a href="#appender标签" class="headerlink" title="appender标签"></a>appender标签</h4><p>一个appender对应一个日志输出流。同一个appender可以绑定在多个logger上，即多个logger均可以向该appender输出日志。因此appender的实现内部进行了并发控制，防止日志乱码。</p><p>appender支持的输出端很多，包括控制台，文件，远程Socket服务器，MySQL，PostgreSQL等数据库，远程UNIX日志进程，JMS等。</p><p><code>&lt;appender&gt;</code>有两个强制属性name和class（Appender类的全路径），包含0到多个<code>&lt;layout class=""&gt;</code>标签，0到多个<code>&lt;encoder class=""&gt;</code>标签，0到多个<code>&lt;filter&gt;</code>标签。它还可以包含任意多个Appender Bean类的成员变量属性值。</p><p>其中layout和encoder标签用来对appender中的日志进行格式化，filter标签则支持对appender中传来的日志信息进行过滤，来决定哪些日志打印哪些不打印，因此可以通过filter来定义appender维度的日志级别。</p><p>常用的appender类有<code>ConsoleAppender</code>和<code>RollingFileAppender</code>。前者用来在控制台上打印日志，后者将日志输出到文件中。</p><p>一个典型的appender如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common-error<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${LOG_PATH}/sls-common-error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${LOCAL_FILE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里声明了一个文件输出流，并且用file标签定义了输出文件的位置，用encoder定义了日志打印的格式。这里通过引用变量的形式来定义，变量将在后面property标签中详细介绍。接着绑定了一个filter，并且使用该filter定义了appender只会打印出日志级别大于等于ERROR级别的日志。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- info级别日志会输出到test-info.log日志文件中 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info-log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>/logback/log/test-info.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>【logbck】%blue([requestId:%X{requestId:-syslogId}]) %d{yyyy-MM-dd HH:mm:ss.SSS} %red([%thread]) %5level - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- filter过滤器，INFO级别 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- error级别日志会输出到test-error.log日志文件中 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info-error<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>/logback/log/test-error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>【logbck】%blue([requestId:%X{requestId:-syslogId}]) %d{yyyy-MM-dd HH:mm:ss.SSS} %red([%thread]) %5level - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- filter过滤器，ERROR级别 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="root标签"><a href="#root标签" class="headerlink" title="root标签"></a>root标签</h4><p>root标签要求在配置中必须声明一次，root标签其实定义的是root logger的配置信息，它的默认的日志级别为debug。所有的logger的最终的父logger一定是root logger。可以多个root标签来分别声明不同级别的日志等级输出的日志输出流。</p><h4 id="property标签"><a href="#property标签" class="headerlink" title="property标签"></a>property标签</h4><p>property标签支持在配置文件中声明变量。配置文件的变量有四种来源，分别是通过JVM COMMAND，JAVA COMMAND，Classpth以及当前的配置文件。举个例子，JAVA命令传入变量的格式如下<code>java -DUSER_HOME="/home/sebastien" MyApp2</code>。<code>&lt;property&gt;</code>标签支持configuration文件中声明成员变量，它支持三种类型：KV，文件相对路径，Classpth下的文件。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--键值型声明--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USER_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/sebastien<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--配置文件声明--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java/chapters/configuration/variables1.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--Classpath资源--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resource1.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这些变量的引用采用标准Linux变量引用方法，通过<code>${变量名称}</code>即可以引用变量的值。同样也支持为这些变量声明默认值，通过<code>${变量名称:-默认值}</code>的语法结构。</p><p>一个简单的声明配置并使用的例子如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USER_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/sebastien<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>${USER_HOME}/myApp.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="define标签"><a href="#define标签" class="headerlink" title="define标签"></a>define标签</h4><p><strong>define标签也是用来声明变量的，但是和上面的property的不同点在于，define声明的是动态变量</strong>，即这些变量的值是在程序运行起来后才能得到的。比如配置文件中默认存在的<code>${HOSTNAME}</code>变量，就是通过define标签实现的，它会在程序运行后动态的获取当前所处容器的主机名，并且赋值给HOSTNAME变量。</p><p>一个典型的define标签用法如下，要求define的class中填入的类必须是PropertyDefiner接口的实现。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>define</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rootLevel<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a.class.implementing.PropertyDefiner<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span><span class="token punctuation">&gt;</span></span>round<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span><span class="token punctuation">&gt;</span></span>brown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">&gt;</span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>size</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>define</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${rootLevel}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>logback提供了几个基础的Definer的实现，如<code>FileExistsPropertyDefiner</code>就是用来判断path中声明的文件是否存在的一个definer。</p><h4 id="include标签"><a href="#include标签" class="headerlink" title="include标签"></a>include标签</h4><p>include标签允许引入另一个路径下存储的logback配置，示例如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java/chapters/configuration/includedConfig.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>includedConsole<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/main/java/chapters/configuration/includedConfig.xml</code>文件的内容如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>included</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>includedConsole<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>"%d - %m%n"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>included</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求被include进来的文件的内容必须包含在included标签内，且语法满足logback配置文件的语法。这里就是引入了includeConfig.xml中声明的一个appender。</p><h4 id="rollingPolicy标签"><a href="#rollingPolicy标签" class="headerlink" title="rollingPolicy标签"></a>rollingPolicy标签</h4><p>用来设置日志的滚动策略。当达到条件后会自动将条件前的日志生成一份备份日志文件，条件后的日志输出到最新的日志文件中。常用的是按照时间来滚动（使用类<code>TimeBaseRollingPolicy</code>）还有一种就是基于索引来实现的（使用类<code>FixedWindowRollingPolicy</code>）。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 通过rollingPolicy设置日志滚动的策略，这是使用按照时间滚动fileNamePattern属性设置滚动生成文件的格式,这里设置的精确到天，也就是按照天滚动，如果时间设置精确到秒，就按秒来滚动maxHistory属性设定最大的文件数，比如按天滚动，这里设置了30天，在第31天日志生成的时候，第一天的日志就会被删掉--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>/logback/log/test-%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：<code>fileNamePattern</code>是要格外说明的。如上我设置按天来滚动，前一天日志打印到23点59分，然后就一直没有请求日志，直到次日的1点才有新的日志进入。在0点到1点这个时间段，日志文件是不会滚动生成新的日志文件。因为<strong>滚动的动作是需要日志写入动作来触发</strong>。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 设置为按照索引的方式滚动，定义文件名称的时候使用%i作为占位符，滚动后会会用角标替换 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.FixedWindowRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>/logback/log/test-%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>minIndex</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>minIndex</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxIndex</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxIndex</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 指定文件最大尺寸，达到该尺寸，就触发rollingPolicy对应的策略，maxFileSize属性指定文件大小 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>maxIndex不可设置为过大，过大后会自动被置为默认值12，这个过大的值具体是多少没测试过。</li><li>第一次滚动，生成test-1.log，第二次滚动时会将之前的test-1.log文件修改成test-2.log，将最新生成的日志文件命名为test-1.log，依此类推，直到索引达到设置的最大值。当超过最大值的时候，会将索引最大的文件直接删除，用前一个文件移到最后一位。就像传送带，最先放上的物品会最先掉出传送带。</li><li>在时间滚动的方式里面，可以用时间作为触发机制。但是在使用索引方式的时候，需要定义一个triggeringPolicy作为触发机制。</li></ul><p><strong><code>rollingPolicy</code>对应的是时间策略并配合文件大小触发器来实现日志文件定义：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用按照时间滚动策略，内嵌按照文件大小来分隔日志的触发器策略 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>/logback/log/test-%d{yyyy-MM-dd}-%i.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用SizeAndTimeBasedFNATP实现，可以看一下TimeBasedRollingPolicy源码中对应timeBasedFileNamingAndTriggeringPolicy的类型，根据类型确定需要使用的class类 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：按照时间滚动的单位是天，按照文件大小的滚动是1M，当今天产生的日志大小是5M，就会生成5个日志文件，每个文件对应的大小是1M，对应生成日期是一天，对应的编号不同，也就是<code>%i</code>占位符替换后的编号(从0开始)。</p><h4 id="triggerPolicy标签"><a href="#triggerPolicy标签" class="headerlink" title="triggerPolicy标签"></a>triggerPolicy标签</h4><p>该标签用来设置日志触发器策略，常用的是日志大小的控制。当日志达到对应的大小的时候，就会触发。进而生成新的日志文件。日志大小的控制配合<code>rollingPolicy</code>使用的时候，不同的<code>rollingPolicy</code>会有所不同。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/2021/05/19/jing-yan-zong-jie/git-xue-xi/"/>
      <url>/2021/05/19/jing-yan-zong-jie/git-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Git区别于其他版本控制系统的主要差别在于<strong>Git对待数据的方式</strong>。</p><p>其他版本控制系统以文件变更列表的方式存储信息，它们将存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异，因此它们往往也叫做基于差异（delta-based）的版本控制。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Git%E5%AD%A6%E4%B9%A0/deltas.png" alt="其他版本控制系统"></p><p>Git 不按照以上方式对待或保存数据。反之，Git 更像是把数据看作是对小型文件系统的一系列快照。 在 Git 中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git对待数据更像是一个<strong>快照流</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Git%E5%AD%A6%E4%B9%A0/snapshots.png" alt="Git"></p><p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算出来。</p><p>Git存放文件的方式如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Git%E5%AD%A6%E4%B9%A0/Git%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86.png" alt="Git存储原理.png"></p><h3 id="git解密"><a href="#git解密" class="headerlink" title=".git解密"></a>.git解密</h3><p><code>.git</code>文件夹中存放着实现git的根本文件。以下来介绍其中主要的文件及其功能。</p><h4 id="HEAD文件"><a href="#HEAD文件" class="headerlink" title="HEAD文件"></a>HEAD文件</h4><p>这个文本文件中存放着当前指向的分支信息。</p><h4 id="refs文件夹"><a href="#refs文件夹" class="headerlink" title="refs文件夹"></a>refs文件夹</h4><p>refs文件夹中主要存放三个文件夹：heads、remotes、tags，分别标记本地的分支heads、远端分支remotes以及tags标记。</p><p>其中存放着相应分支的哈希值。</p><p>针对每个文件中的哈希值可以使用命令<code>git cat-file -t &lt;哈希值&gt;</code>来查看对应哈希类型。</p><h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><p>config文件中存放的是当前git仓库的基础信息。</p><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><p>object文件夹中存放提交的记录，文件夹名称加上文件夹中文本的名称即为完成的哈希值。</p><p>查看哈希对应的文件使用命令<code>git cat-file -p &lt;哈希值&gt;</code>。</p><h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><ul><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ul><h2 id="常见的传输协议"><a href="#常见的传输协议" class="headerlink" title="常见的传输协议"></a>常见的传输协议</h2><table><thead><tr><th>常用协议</th><th>语法格式</th><th>说明</th></tr></thead><tbody><tr><td>本地协议</td><td>/path/to/repo.git</td><td>哑协议</td></tr><tr><td>本地协议</td><td>file:///path/to/repo.git</td><td>智能协议</td></tr><tr><td>http/https协议</td><td><a href="https://git-server.com:port/path/to/repo.git">https://git-server.com:port/path/to/repo.git</a></td><td>智能协议</td></tr><tr><td>ssh协议</td><td><a href="mailto:user@git-server.com">user@git-server.com</a>:path/to/repo.git</td><td>智能协议</td></tr></tbody></table><p>哑协议传输速度不可见；智能协议传输可见。</p><p>智能协议比哑协议传输速度快。</p><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>Git使用配置工具实现控制Git外观与行为。一共有三种配置位置：</p><ul><li>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 git config 时带上 –system 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）</li><li>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 你可以传递 –global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效。</li><li>当前使用仓库的 Git 目录中的 config 文件（即 .git/config）：针对该仓库。 你可以传递 –local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）</li></ul><h2 id="分离头指针"><a href="#分离头指针" class="headerlink" title="分离头指针"></a>分离头指针</h2><p>Git允许将头指针移动到非head的节点，此时即为分离头指针的状态。在此之上的修改若是不绑定到某一分支上Git会默认理解为这是不重要的修改，Git本身并不会去记录。换句话说就是当进行切换分支的操作时，将会导致之前的修改丢失。因此，<strong>当进行分离头指针的修改时需要记得绑定某一分支</strong>。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h3><p>配置用户信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global user.name "Your name"# github设置了email隐藏的话，需要将这里的邮箱设置成github的邮箱git cinfug --globel user.email "email@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的命令还可以使用<code>--local</code>和<code>--global</code>参数以区分不同的作用域。</p><p><code>--local</code>表示只对某个仓库有效</p><p><code>--global</code>表示对当前用户所有仓库有效</p><p><code>--system</code>表示对系统所有登录的用户有效</p><p>查看当前所有配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --list [--local]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令同样可以设置上述三种不同的作用域。</p><p>设置常用的文本编辑器：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global core.editor {编辑器名字}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>避免中文乱码：</p><p>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p><p>将git配置文件 <code>core.quotepath</code>项设置为<code>false</code>。<code>quotepath</code>表示引用路径，加上<code>--global</code>表示全局配置。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global core.quotepath false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git默认忽略大小写，可以使用命令修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config core.ignorecase false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><ul><li><p>已有的项目代码纳入Git管理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd 项目路径git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新建的项目直接用Git管理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git init 项目名 #会在当前路径下创建和项目名称相同的文件夹cd 项目名 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>添加文件到Git仓库：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git add &lt;file&gt;git commit -m "message"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <strong><code>git add</code>即为精确的将内容添加到下一次提交中</strong></p><p>针对之前就Git跟踪过的文件直接使用<code>git add -u</code>即可。</p><p>工作区状态：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> git status # 状态简浏览 git status -s # git status --short  M README # 在工作区已修改但尚未暂存MM Rakefile # 文件已修，暂存后又作了修改A  lib/git.rb # 新添加到暂存区中的文件前面有 A 标记M  lib/simplegit.rb # 已修改且已暂存?? LICENSE.txt # 新添加到暂存区中的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改过的文件前面有 M 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。</strong></p><p>查看修改：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看工作目录中当前文件和暂存区域快照之间的差异git diff &lt;file&gt;# 查看已暂存的将要添加到下次提交里的内容git diff --staged# 下面的命令效果同上git diff --cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>git diff 本身只显示尚未暂存的改动，而不是自上次提交以来所做的所有改动.</strong></p><p>修改最近一次commit messgae：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改指定的commit message：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 首先rabase到需要修改commit的上一个版本git rebase -i &lt;需修改的commit上一次提交的哈希值&gt;# 在跳出的界面中将需要修改的commit记录前面的pick之类的命令修改成r# r 即reword 表示使用原本的提交，但修改commit message# 在再一次弹出的界面中修改commit message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改完成之后原本的commit id 会发生改变</strong>，因为messgae也是git结构体中的一员。</p><p>合并多次连续commit到一次commit中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git rebase -i &lt;需合并commit的前一次commit哈希&gt;# 在跳出的界面中将多次需要合并的commit前面的命令更改为s# s 即squash 表示使用commit，但注册到上一次commit中# 在再一次弹出的界面中修改总体的commit message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>合并多次非连续commit到一次commit中：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git rebase -i &lt;需合并commit的前一次commit哈希&gt;# 在跳出的界面中将多次需要合并的commit前面的命令更改为s# s 即squash 表示使用commit，但注册到上一次commit中# 修改commit之间的顺序，将被合并的commit挂在第一行commit之下# 第一行的commit需要是一次被合并进的commit# 如果是需要合并进第一次commit，可以自己写一行commit，拿第一次提交的commit的哈希作为标记# 在再一次弹出的界面中修改总体的commit message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从暂存区和工作区删除文件:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git rm &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本回退：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset --hard commit_id(可以用HEAD~选择前第几个版本)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将存入暂存区中的指定文件撤销暂存：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset HEAD &lt;-- file1 file2&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动或重命名一个文件、目录或软连接：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git mv [file] [newfile]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看现在的提交历史：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git log [--pretty=oneline] [--all] [--graph]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用<code>-n 2</code>查看前两条log，比如：<code>git log -n2 --oneline</code></p><p>查看以往的所有提交历史：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看工作区与暂存区的不同：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff [-- 文件名 ] # 不写指定的文件默认查看所有不同的文件，指定的话可以写多个文件名，用空格做分割<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看暂存区与HEAD之间的差异：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff --cached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看工作区与版本库中版本之间的区别：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff HEAD -- &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看不同版本之间的diff：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff &lt;commit哈希&gt; &lt;commit哈希&gt; #这里可以使用HEAD进行标识，HEAD^1或者HEAD~1表示上一次提交 HEAD^^可以表示倒数第二次提交<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看不同分支之间的diff：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff &lt;分支1&gt; &lt;分支2&gt; [-- &lt;文件名&gt;]# 可以通过指定文件名来查看不同分支两个文件的区别<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将工作区文件恢复成最近一次git commit或者git add的状态:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git checkout -- &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将暂存区的修改撤销：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset HEAD [-- &lt;file&gt;] # 不指定文件默认撤销所有文件在暂存区的修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除之前的commit内容：（<strong>危险，小心使用！暂存区和工作区都丢失</strong>）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset --hard &lt;需要恢复到的commit哈希值&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>checkout影响工作区，reset影响暂存区</strong></p><p>创建ssh key：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa -C "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看远端地址：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关联仓库：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git remote add origin git@server-name:path/repo-name.git # 这里的origin只是给后面的地址起别名，但origin是默认名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次推送分支内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push -u origin master(以后不用加-u参数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆一个本地库：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来git clone &lt;git仓库名&gt; 自定义仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git checkout -b &lt;branch-name&gt;(可以拆分为 git branch &lt;branch-name&gt; 和 git checkout &lt;branch-name&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用指定分支创建分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git checkout -b &lt;分支名&gt; &lt;指定分支名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git branch(当前分支前会有*作为标记)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换分支：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git checkout &lt;file&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并指定分支到当前分支：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git merge &lt;branch-name&gt;#如果分支是none fast-forward的commit，使用--allow-unrelated-histories，即git merge --allow-unrelated-histories 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除分支（强制删除使用-D）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git branch -d &lt;branch-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看分支情况：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git log --graph --pretty=oneline --abbrev-commit(有分支合并图)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制禁用Fast forward模式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git merge --no-ff -m "merge with no-ff" &lt;branch-name&gt;(会创建一个新的commit)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现场存储：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看现场存储列表：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复现场：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git stash apply 和 git stash drop或 git stash pop # 使用apply还会在stash中记录，但是使用pop会将这次修改直接从stash中清除<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定恢复现场：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git stash apply stash@{&lt;stash_list&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>丢弃未合并的分支：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git branch -D &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看远程库信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git remote &lt;-v&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>抓取版本库：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git pull #这个命令包含了两步1. git fetch拉取代码 2. git merge将有上下游关系的分支做合并<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地分支与远程分支链接：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git branch --set-upstream branch-name origin/branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送修改：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push origin branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建标签：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git tag &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看标签：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看标签信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git show &lt;tagname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用私钥给标签签名：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git tag -s tag-name -m "message" commit-id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除标签：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git tag -d tag-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送某个标签到远程：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push origin &lt;tagname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送所有标签：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程删除标签：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git push origin :refs/tags/&lt;tagname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git 显示颜色：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global color.ui true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不想提交的文件放在文件夹下面的.gitignore目录中</p><p><code>.gitignore</code>文件中可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</p><p>其中glob的模式匹配是指shell所用的简化了的正则表达式。</p><ul><li><code>*</code>匹配零个或多个人一字符。</li><li><code>[abc]</code>匹配任何一个列在方括号中的字符</li><li><code>?</code>只匹配任意一个字符</li><li><code>[0-9]</code> 表示匹配所有 0 到 9 的数字</li><li><code>**</code>匹配任意中中间目录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 忽略所有的 .a 文件*.a# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件!lib.a# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO/TODO# 忽略任何目录下名为 build 的文件夹build/# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件doc/**/*.pdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在最简单的情况下，一个仓库可能只根目录下有一个 .gitignore 文件，它递归地应用到整个仓库中。 然而，子目录下也可以有额外的 .gitignore 文件。子目录中的 .gitignore 文件中的规则只作用于它所在的目录中。</p><p>强制添加文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git add -f &lt;file-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看.gitignore的问题：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git check-ignore -v &lt;file-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命名别名：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global alias.&lt;缩写&gt; &lt;全称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看提交信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git log -stat -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查提交散列值：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git fsck<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 将文件移出暂存区</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset head &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无敌配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习</title>
      <link href="/2021/05/19/cheng-xu-she-ji/rust-xue-xi/"/>
      <url>/2021/05/19/cheng-xu-she-ji/rust-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP常用STL</title>
      <link href="/2021/05/19/cheng-xu-she-ji/cpp-chang-yong-stl/"/>
      <url>/2021/05/19/cheng-xu-she-ji/cpp-chang-yong-stl/</url>
      
        <content type="html"><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><h3 id="max-、min-和abs"><a href="#max-、min-和abs" class="headerlink" title="max()、min()和abs()"></a>max()、min()和abs()</h3><h3 id="swap"><a href="#swap" class="headerlink" title="swap()"></a>swap()</h3><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><h3 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation()"></a>next_permutation()</h3><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><h3 id="lower-bound-和upper-bound"><a href="#lower-bound-和upper-bound" class="headerlink" title="lower_bound()和upper_bound()"></a>lower_bound()和upper_bound()</h3>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入分析Java Web技术内幕笔记</title>
      <link href="/2021/05/09/cheng-xu-she-ji/shen-ru-fen-xi-java-web-ji-zhu-nei-mu-bi-ji/"/>
      <url>/2021/05/09/cheng-xu-she-ji/shen-ru-fen-xi-java-web-ji-zhu-nei-mu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-深入Web请求过程"><a href="#第一章-深入Web请求过程" class="headerlink" title="第一章 深入Web请求过程"></a>第一章 深入Web请求过程</h2><h3 id="HTTP、Socket、TCP三者的区别"><a href="#HTTP、Socket、TCP三者的区别" class="headerlink" title="HTTP、Socket、TCP三者的区别"></a>HTTP、Socket、TCP三者的区别</h3><pre class="mermaid">graph TD;    应用层[HTTP TELNET DNS]--&gt;Socket[Socket]--&gt;传输层[TCP UDP]</pre><p>HTTP是传输层的协议，更加贴近用户端；TCP是传输层的协议；socket是从传输层上抽象出来的一个抽象层，<strong>本质是接口</strong>。</p><p>相应的，发起一个HTTP请求与建立一个Socket连接的区别不大，只不过是<code>outputStream.write</code>写的二进制字节数据格式要符合HTTP。Java可以使用HttpClient发起http请求。</p><p>使用<code>Ctrl+F5</code>请求非缓存页面，其会直接发起http请求，并添加两个属性在请求头中<code>Pragma:no-cache和Cache-Control:no-cache</code></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP 15-213</title>
      <link href="/2021/04/09/ji-suan-ji-ji-chu/csapp-15-213/"/>
      <url>/2021/04/09/ji-suan-ji-ji-chu/csapp-15-213/</url>
      
        <content type="html"><![CDATA[<h2 id="1-计算机系统漫游"><a href="#1-计算机系统漫游" class="headerlink" title="1. 计算机系统漫游"></a>1. 计算机系统漫游</h2><h2 id="2-信息的表示与处理"><a href="#2-信息的表示与处理" class="headerlink" title="2. 信息的表示与处理"></a>2. 信息的表示与处理</h2><h2 id="3-程序的机器级表示"><a href="#3-程序的机器级表示" class="headerlink" title="3. 程序的机器级表示"></a>3. 程序的机器级表示</h2><h2 id="4-处理器体系结构"><a href="#4-处理器体系结构" class="headerlink" title="4. 处理器体系结构"></a>4. 处理器体系结构</h2><h2 id="5-优化程序性能"><a href="#5-优化程序性能" class="headerlink" title="5. 优化程序性能"></a>5. 优化程序性能</h2><h2 id="6-存储器层次结构"><a href="#6-存储器层次结构" class="headerlink" title="6. 存储器层次结构"></a>6. 存储器层次结构</h2><h2 id="7-链接"><a href="#7-链接" class="headerlink" title="7. 链接"></a>7. 链接</h2><h2 id="8-异常控制流"><a href="#8-异常控制流" class="headerlink" title="8. 异常控制流"></a>8. 异常控制流</h2><h2 id="9-虚拟内存"><a href="#9-虚拟内存" class="headerlink" title="9. 虚拟内存"></a>9. 虚拟内存</h2><h2 id="10-系统级I-O"><a href="#10-系统级I-O" class="headerlink" title="10. 系统级I/O"></a>10. 系统级I/O</h2><h2 id="11-网络编程"><a href="#11-网络编程" class="headerlink" title="11. 网络编程"></a>11. 网络编程</h2><h2 id="12-并发编程"><a href="#12-并发编程" class="headerlink" title="12. 并发编程"></a>12. 并发编程</h2><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>本博客旨在记录学习CSAPP一书中的知识点。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统6.824</title>
      <link href="/2021/04/06/fen-bu-shi/fen-bu-shi-xi-tong-6-824/"/>
      <url>/2021/04/06/fen-bu-shi/fen-bu-shi-xi-tong-6-824/</url>
      
        <content type="html"><![CDATA[<h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><p>为了更好的理解分布式系统，对分布式系统有有一定的了解。在此推荐<a href="http://book.mixu.net/distsys/">在线书籍</a>以及对应的<a href="https://buerlog.top/2021/08/05/fen-bu-shi-xi-tong-gai-nian/">阅读分享博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker与K8s</title>
      <link href="/2021/04/02/yun-ji-suan/docker-yu-k8s/"/>
      <url>/2021/04/02/yun-ji-suan/docker-yu-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h2><p>docker相较于别的paas技术核心优势在于镜像，其是一套操作系统+应用程序，保证了环境的Ç一致性，无需根据不同的开发语言选择不同打包方式。</p><p>在Docker中打包镜像使用Dockerfile技术，即编写dockerfile即可。这其中有几个重要的参数：</p><ul><li>From：选择操作系统镜像</li><li>COPY：表示将本地的可执行文件拷贝进镜像中</li><li>EXPOSE：设置端口</li><li>USER：设置用户</li><li>ENTRYPOINT：设置应用启动入口</li></ul><p>启动docker <code>service docker start</code>或 <code>systemctl start docker.service</code>。</p><p>如果使用rpm下载安装，需要下载 <code>containerd</code>和 <code>docker-ce-cli</code>和 <code>docker-ce</code>，其中前两项为 <code>docker-ce</code>的前置条件，且 <code>docker-ce</code>和 <code>docker-ce-cli</code>版本一致，<code>containerd</code>尽可能新就行。</p><p>docker与虚拟机的不同主要在于：</p><ul><li>所有dcoker应用共享一个宿主机操作系统，每个虚拟机有自己的操作系统</li><li>每个dcoker应用通过Docker层和宿主层的操作系统交互，而虚拟机直接与操作系统交互</li><li>对环境负责的只是宿主机的操作系统本身，而虚拟机的Hypervisor对应用进程的隔离环境负责，docker自己不会创建任何实体的容器</li></ul><p>通过Docker启动的容器本质上和操作系统中运行的进程本质上没有区别。</p><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>Docker的主要组成部分可以大致分为：</p><ul><li><p>Docker Client：与Docker daemon 进行交互，与用户交互的客户端</p></li><li><p>Docker Daemon：docker后台运行的守护进程</p><ul><li>启用：<code>service docker start</code>或 <code>systemctl start docker.service</code></li><li>通过 <code>/var/run/docker.sock</code>与client之间连接</li></ul></li><li><p>Docker Registry：用来存储Docker镜像</p><ul><li>拉取镜像：docker pull <code>&lt;image-name&gt;</code></li><li>最底层的镜像为scratch镜像</li><li>镜像的构建通过DSL编写，叫dockerfile。</li><li>容器是镜像的运行实例</li></ul><p>容器默认与其他容器与其宿主机相隔离开。具体的隔离策略可以进行自定义设置。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/Docker%E4%B8%8EK8s/Docker%E4%B8%8EK8s_Docker%E6%9E%B6%E6%9E%84.png" alt="Docker与K8s_Docker架构.png"></p><p>docker本身是在多层的只读层上添加了一个read-write层，即container layer。</p><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>镜像中包含的操作系统文件最好之后一个精简版的，而非全量。在启动容器之后，容器进程还是去和宿主机的操作系统进行交互。</p><p>对于多个应用使用同一基础镜像，推荐使用官方的镜像或将基础环境配置为镜像，复用基础镜像。</p><h4 id="镜像介绍"><a href="#镜像介绍" class="headerlink" title="镜像介绍"></a>镜像介绍</h4><h5 id="Alpine镜像"><a href="#Alpine镜像" class="headerlink" title="Alpine镜像"></a>Alpine镜像</h5><p>apline linux借助fs的文件格式将整个镜像包的大小压缩到很小，但是存在诸多坑，例如alphine使用的是musl libc,而一般程序使用的都是glibc,会导致找不到运行的动态链接库等问题。且因为使用musl libc使用的人较少，产生的问题也相对难以解决。</p><h5 id="Busybox"><a href="#Busybox" class="headerlink" title="Busybox"></a>Busybox</h5><p>简单来说，busybox是一个集成了一百多个最常用的Linux命令和工具的软件工具箱。</p><h5 id="OpenJDK"><a href="#OpenJDK" class="headerlink" title="OpenJDK"></a>OpenJDK</h5><p>Docker官方提供的openjdk镜像。</p><h4 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h4><p>镜像构建是基于Dockerfile来构建的，具体来说就是只需要按照容器便准写好Dockerfile文件，然后通过创建命令就可以构建出所需镜像了。</p><ol><li>先将源代码文件编译成可执行文件</li><li>编写Dockerfile</li><li>镜像build：<code>docker build -t &lt;镜像名称&gt;:&lt;版本名称&gt;</code></li><li>启动镜像：<code>docker run -p 8080:8080 &lt;镜像名称&gt;:&lt;版本名称&gt;</code></li></ol><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>FROM</td><td>表示构建镜像所基于的镜像</td></tr><tr><td>COPY</td><td>拷贝文件</td></tr><tr><td>EXPOSE</td><td>暴露端口</td></tr><tr><td>ENTRYPOINT</td><td>用来指定镜像的默认启动脚本</td></tr></tbody></table><h4 id="容器操作命令"><a href="#容器操作命令" class="headerlink" title="容器操作命令"></a>容器操作命令</h4><h5 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h5><p>例如：<code>docker run -ti centos:latest /bin/bash</code></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>–interactive</td><td>等同于-i，接受stdin的输入</td></tr><tr><td>–tty</td><td>等同于-t，分配一个tty,一般和i一起使用</td></tr><tr><td>–name</td><td>给容器设置名字</td></tr><tr><td>–add-host</td><td>给容器设置hosts文件，格式 host:ip</td></tr><tr><td>–env</td><td>环境变量设置</td></tr><tr><td>–expose</td><td>暴露端口</td></tr><tr><td>–hostname</td><td>设置容器的主机名</td></tr><tr><td>–link</td><td>容器网络相关，和其他的container连接</td></tr><tr><td>–cpu-quota</td><td>设置CPU限制</td></tr><tr><td>–memory</td><td>设置容器可以使用的内存限制</td></tr><tr><td>–detach(-d)</td><td>后台运行docker                     ｜</td></tr></tbody></table><h5 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h5><p>通过给一个正在运行的容器分配一个stdin、stdout、stderr，从而使得我们可以进入一个运行着的容器内部。</p><p><strong>注意：使用 <code>docker attach</code>进入之后，如果使用exit会导致原容器也退出。推荐使用 <code>Ctrl+C</code>退出。</strong></p><h5 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h5><p>该命令使得一个运行着的容器里面执行一个命令。其原理是在Linux内核层面，相当于fork了一个进程，然后这个进程设置和容器相同的NameSpace。如果在OPTIONS中指定 <code>-ti</code>，则会进入到容器内。因为这是fork出来的进程，可以exit。</p><h5 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h5><p>用来列出所有在运行容器的信息。使用 <code>-a</code>参数展示所有容器包括停止运行的。</p><h5 id="docker-kill"><a href="#docker-kill" class="headerlink" title="docker kill"></a>docker kill</h5><p>杀死一个或一组container。</p><h5 id="docker-log"><a href="#docker-log" class="headerlink" title="docker log"></a>docker log</h5><p>用来获取docker的log信息。</p><h5 id="docker-top"><a href="#docker-top" class="headerlink" title="docker top"></a>docker top</h5><p>查看这个容器在宿主机上的进程，毕竟本质上container只是一个进程。</p><p>docker container stop id/name</p><p>一次性关闭所有容器：<code>docker container stop $(docker container ps -aq)</code></p><h4 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h4><h5 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h5><p>显示本地所有非隐藏镜像，默认会将中间依赖镜像隐藏</p><h5 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h5><h5 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h5><h5 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h5><h5 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h5><h5 id="docker-import"><a href="#docker-import" class="headerlink" title="docker import"></a>docker import</h5><h5 id="docker-load"><a href="#docker-load" class="headerlink" title="docker load"></a>docker load</h5><h5 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h5><h5 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h5><p>docker container run 执行步骤</p><p>当输入 <code>docker cintainer run -d --pulish 80:80 --name webhost nginx</code></p><ol><li>在本地查找是否有nginx的镜像。如果没有去远程拉取nginx镜像（默认从Docker Hub）</li><li>基于nginx镜像创建一个新的容器，并准备执行</li><li>docker engine分配这个容器一个虚拟ip地址</li><li>在宿主机上打来80端口并将容器的80端口转发到宿主机上</li><li>启动容器，运行指定的命令</li></ol><h2 id="Docker核心技术"><a href="#Docker核心技术" class="headerlink" title="Docker核心技术"></a>Docker核心技术</h2><h2 id="Docker最佳实践"><a href="#Docker最佳实践" class="headerlink" title="Docker最佳实践"></a>Docker最佳实践</h2><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>pod是一组容器的集合，类似进程组，是K8s中一个最小调度单位。属于同一个pod的不同容器一定会被调度至同一台机器上，共享NameSpace。</p><p>K8s采用声明式API,而不是命令式API。SQL就是典型的声明式API，其不关心具体实现如何，只在乎我们所需的状态或结果。而命令式API就是告诉他每一步怎么做。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/Docker%E4%B8%8EK8s/Docker%E4%B8%8EK8s_k8s%E6%9E%B6%E6%9E%84.png" alt="Docker与K8s_k8s架构.png"></p><h2 id="云原生监控方案"><a href="#云原生监控方案" class="headerlink" title="云原生监控方案"></a>云原生监控方案</h2>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing刷题记录</title>
      <link href="/2021/03/23/suan-fa/acwing-shua-ti-ji-lu/"/>
      <url>/2021/03/23/suan-fa/acwing-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录本人刷Acwing过程的收获和代码。语言选择C++。</p><h2 id="1～1000"><a href="#1～1000" class="headerlink" title="1～1000"></a>1～1000</h2><h3 id="1～500"><a href="#1～500" class="headerlink" title="1～500"></a>1～500</h3><h4 id="1～100"><a href="#1～100" class="headerlink" title="1～100"></a>1～100</h4><p><a href="https://www.acwing.com/problem/content/31/">19. 二叉树的下一个节点</a></p><p>这题主要想法就是判断当前节点是否拥有右节点。如果拥有右节点，则中序遍历的后一个节点为右节点子树的最左的节点。即，通过右节点循环找到子树的最左的节点；如果没有右节点，则中序遍历的后一个节点为该节点父节点的拐点。即上一次子树的根节点。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">inorderSuccessor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token comment">//有右节点的情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>                p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//没有右节点的情况</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>father<span class="token operator">&amp;&amp;</span>p<span class="token operator">-&gt;</span>father<span class="token operator">-&gt;</span>right<span class="token operator">==</span>p<span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>father<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>father<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/25/">26. 二进制中1的个数</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">NumberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> n<span class="token operator">-=</span>n<span class="token operator">&amp;</span><span class="token operator">-</span>n<span class="token punctuation">,</span>res<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/32/">33. 链表中倒数第k个节点</a></p><p>本题解题分为两步：</p><ol><li>计算当前链表长度</li><li>通过n-k循环找到返回的节点</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">findKthToTail</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pListHead<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pListHead<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> p<span class="token operator">=</span>pListHead<span class="token punctuation">;</span>p<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> len<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span>len<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> p<span class="token operator">=</span>pListHead<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/33/">35. 反转链表</a></p><p>此题有两个版本，一个迭代，一个递归。</p><p>迭代版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//如果没有节点或者只有一个节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token keyword">auto</span> current<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> next<span class="token operator">=</span>current<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            current<span class="token operator">-&gt;</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            <span class="token comment">//为下一l</span>            pre<span class="token operator">=</span>current<span class="token punctuation">;</span>            current<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/73/">77.翻转单词顺序</a></p><p>本题分为二步：</p><ol><li>首先将整个字符串进行翻转</li><li>将每个字母进行翻转。此处用双指针算法，设置j获取当前字母长度，进行翻转</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">' '</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="101-200"><a href="#101-200" class="headerlink" title="101~200"></a>101~200</h4><p><a href="https://www.acwing.com/problem/content/156/">154.滑动窗口</a></p><p>本题利用了结果本身的单调性。因为滑动窗口的长度限制，所以使用单调队列而非单调栈。当新元素入队的时候，元素从队尾移除。当新入队元素小于(或大于)等于队尾元素时，将相应元素从队尾出队。生成的单调队列具有单调性，其最值即为队尾或队首元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//q数组负责记录提供的数据，s数组负责记录q数组对应元素的索引</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//hh表示单调队列的头部，tt表示单调队列的尾部</span><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查队头是否出队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>hh<span class="token punctuation">;</span>        <span class="token comment">//检查单调队列队尾元素是否大于等于新入队元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>tt<span class="token punctuation">;</span>        <span class="token comment">//新元素入队</span>        s<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>s<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重新初始化</span>    hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//检查队头是否出队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>hh<span class="token punctuation">;</span>        <span class="token comment">//检查单调队列队尾元素是否小于等于新入队元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>s<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>tt<span class="token punctuation">;</span>        <span class="token comment">//新元素入队</span>        s<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>s<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/199/">197. 阶乘分解</a></p><p>质数定理：不超过x的质数的个数近似为$\frac{x}{ln(x)}$。</p><p>底数为10时，对数可简写为$lg(x)$。</p><p>底数为e时，对数可简写为$ln(x)$。</p><h4 id="201-300"><a href="#201-300" class="headerlink" title="201~300"></a>201~300</h4><h4 id="301-400"><a href="#301-400" class="headerlink" title="301~400"></a>301~400</h4><h4 id="401-500"><a href="#401-500" class="headerlink" title="401~500"></a>401~500</h4><h3 id="501～1000"><a href="#501～1000" class="headerlink" title="501～1000"></a>501～1000</h3><h4 id="501-600"><a href="#501-600" class="headerlink" title="501~600"></a>501~600</h4><h4 id="601-700"><a href="#601-700" class="headerlink" title="601~700"></a>601~700</h4><h4 id="701-800"><a href="#701-800" class="headerlink" title="701~800"></a>701~800</h4><p><a href="https://www.acwing.com/problem/content/787/">785. 快速排序</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/788/">786.第k个数</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * 本题的解题思路： * 直接使用快排的时间复杂度是O(nlogn) * 这题可以结合二分与快排的思想，将时间复杂度优化到O(n) * 重点在于进行一次快排后，如果第k个数在快排的小于x的部分时，相应的缩小快排空间。同理，另一个区间也是一样 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">quick_select</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//如果当前区间只有一个元素，则其必然是答案</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> q<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sl <span class="token operator">=</span> j <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> sl<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">quick_select</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">quick_select</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">-</span> sl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">quick_select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/789/">787. 归并排序</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/790/">788.逆序对的数量</a></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Acwing%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/788%E9%80%86%E5%BA%8F%E5%AF%B9%E7%9A%84%E6%95%B0%E9%87%8F.png" alt="788逆序对的数量.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">```<span class="token punctuation">[</span><span class="token number">789.</span> 数的范围<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token comment">//www.acwing.com/problem/content/791/)</span>```cpp<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt; iostream &gt;</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1 -1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/792/">790. 数的三次方根</a></p><p>本题需要主要三次方的时候，当数字是0.001之类的小于1的数时，寻找范围需要扩大。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;=</span> <span class="token number">1e-8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">*</span> mid <span class="token operator">&gt;</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/793/">791. 高精度加法</a></p><p>这里的选择使用数组存储大整数，这里第0位存个位数，最高位放在数组最后面。这样当发生进位的时候，容易处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/794/">792. 高精度减法</a></p><p>记得去掉结果中多余的0.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">-=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//A&gt;=B</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span> B<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/795/">793. 高精度乘法</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/796/">794. 高精度除法</a></p><p>除法这里需要注意，运算从高位开始处理。所以需要反过来进行处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">%=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//r为余数</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/797/">795. 前缀和</a></p><p>本题使用的是一维前缀和。注意这里的s数组存放前缀和，相减的时候需要将左边界-1。s[0],a[0]处放0，以便后续操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/798/">796. 子矩阵的和</a></p><p>本题依旧是前缀和，不过是二维前缀和，重点就两个公式。此处假设S为前缀和数组，q为相应的差分数组。</p><p>更新前缀和数组：$S[x-1,y]+S[x,y-1]-S[x-1,y-1]+q[x,y]$</p><p>计算前缀和之差：$S[x_2,y_2]-S[x_1-1,y_2]-S[x_2,y_1-1]+S[x_1-1,y_1-1]$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/799/">797. 差分</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// q数组为原数组,b数组为差分数组</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//step1 构造差分数组</span>        <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//step2 更新差分数组信息</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//step3 更新前缀和,需要注意这里是在差分数组的基础上进行前缀和的计算，所以都是+=操作</span>    <span class="token comment">//此处的b数组成为前缀和数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/800/">798. 差分矩阵</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//不同于一维差分数组，二维差分数组中[x1,y1]之后的正方形区域都会+c。</span><span class="token comment">//因此需要将[x1,y2+1]和[x2+1,y1]之后的区域-c,还要给[x2+1,y2+1]+c</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>    s<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    s<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    s<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//需要注意这里是在差分数组的基础上进行前缀和的计算，所以都是+=操作</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/801/">799. 最长连续不重复子序列</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//数组q记录题目信息，数组s记录下标数字出现的次数</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//j在前，i在后</span>    <span class="token comment">//当s[q[i]]&gt;1时说明有重复数字，此时，j向后移动至q[i]第一次出现的位置的后一个，此过程中将所有j经过的数字对应的s[q[j]]--</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">--</span>s<span class="token punctuation">[</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> res <span class="token operator">?</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="801-900"><a href="#801-900" class="headerlink" title="801~900"></a>801~900</h4><p><a href="https://www.acwing.com/problem/content/803/">801. 二进制中1的个数</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/804/">802. 区间和</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PAIR<span class="token punctuation">;</span><span class="token comment">//存放插入与查询信息</span>vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span> add<span class="token punctuation">,</span> query<span class="token punctuation">;</span><span class="token comment">//存放计算区间和的差分数组和前缀和数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//alls存放对应索引信息</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> alls<span class="token punctuation">;</span><span class="token comment">//unique的自己实现</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">unique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//要么是第一个数要么不重复</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token operator">||</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> index<span class="token punctuation">,</span> data<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//step1 将所有用到的位置索引存入alls容器中,将相应的插入信息与查询信息存入add和query中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>index<span class="token punctuation">,</span> data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//step2 索引位置去重,此时alls下标就是相应索引映射后的位置</span>    <span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//step3 插入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span> add<span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token comment">//step4 计算前缀和</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//step5 返回结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/805/">803. 区间合并</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PAIR<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span> all<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> itor<span class="token operator">:</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ed <span class="token operator">&lt;</span> itor<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st <span class="token operator">=</span> itor<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            ed <span class="token operator">=</span> itor<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ed <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span> itor<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将最后一组加入结果集，需要判断st!=-2e9避免传入空数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        all<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">merge</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/830/">823.模拟栈</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"YES"</span> <span class="token operator">:</span> <span class="token string">"NO"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> stk<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/828/">826.单链表</a></p><p>本题注意当删除头节点时，需要特判。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insertFromHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">[</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">char</span> method<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token char">'H'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insertFromHead</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> head <span class="token operator">=</span> ne<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">pop</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> k<span class="token punctuation">,</span> x<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/829/">827.双链表</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//0代表起始端点，1代表结束端点</span>    <span class="token comment">//真实数字从idx==2开始存放</span>    idx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//此函数的逻辑是插入k的右侧节点</span><span class="token comment">//若需要实现插入k的左侧节点只需传入l[k]即可</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token operator">++</span>idx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">[</span>l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"IL"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"IR"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/831/">829.模拟队列</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tail <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> e<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> tail <span class="token operator">&gt;</span> head <span class="token operator">?</span> <span class="token string">"NO"</span> <span class="token operator">:</span> <span class="token string">"YES"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/832/">830.单调栈</a></p><p>本题利用栈的性质</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token operator">--</span>top<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注意，需要将当前数字压入栈中</span>        stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/833/">831.KMP字符串</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span>#include <span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ne<span class="token punctuation">;</span><span class="token comment">// brute force暴力枚举算法</span><span class="token comment">// 复杂度为O(n*m)。当n和m为1e5数量级时，算法完全不可用。</span><span class="token keyword">void</span> <span class="token function">bruteForce</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> lens <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span> lenp <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lens <span class="token operator">-</span> lenp<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// KMP算法</span><span class="token comment">// 复杂度为O(m+n)</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    ne<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> ne<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>j <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> lenp <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">,</span> lent <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lent<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> lenp<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">-</span> lenp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> res <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> itor<span class="token operator">:</span>res<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> itor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/837/">835.Trie字符串统计</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">char</span> op<span class="token punctuation">,</span> str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>idx<span class="token punctuation">;</span>        p <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'Q'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/838/">836.合并集合</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 返回idx的根节点+路径压缩</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/839/">837.连通块中点的数量</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sizeTable<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">!=</span> idx<span class="token punctuation">)</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        sizeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注意这里可能会同一个数内节点合并，这会导致sizeTable被多加节点，需要特判这种情况</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sizeTable<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> sizeTable<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sizeTable<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/840/">838.堆排序</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token comment">// 建堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/841/">839. 模拟堆</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span><span class="token comment">// Created by king on 2022/2/14.</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// h: 堆数据</span><span class="token comment">// ph[i]: 第k数的堆索引</span><span class="token comment">// hp[i]: 索引i是第hp[i]个插入的数</span><span class="token comment">// len: 堆索引</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token comment">// 这里的ab都是堆中的索引</span><span class="token keyword">void</span> <span class="token function">heapSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        idx <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> idx<span class="token punctuation">)</span> <span class="token function">heapSwap</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> h<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heapSwap</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> idx <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idx <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// n: 操作数量</span>    <span class="token comment">// x: 操作数</span>    <span class="token comment">// m: 第m个数</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            ph<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>len<span class="token punctuation">;</span>            hp<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            h<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"DM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">heapSwap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">heapSwap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            h<span class="token punctuation">[</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/842/">840. 模拟散列表</a></p><p>拉链法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开放寻址法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">// h是存放数据对应的key</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 保证获取的余数是整数，如果直接计算或者直接+N计算都会导致余数为负数</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> Max <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> N<span class="token punctuation">)</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> Max<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/description/843/">841. 字符串哈希</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> P <span class="token operator">=</span> <span class="token number">131</span><span class="token punctuation">;</span><span class="token comment">// unsigned long long 天然维护了一个64位的2进制数组</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span><span class="token comment">// p数组表示的是p进制每一位对应的数</span><span class="token comment">// h数组表示对应子串的ASCII码在p进制下对应的数值</span><span class="token comment">// op存放字符串</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> op<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ULL <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token comment">// 这里存op+1的位置存放字符串</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> op <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 表示p进制的0次方</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P<span class="token punctuation">;</span>        h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P <span class="token operator">+</span> op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/845/">843. n-皇后问题</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> dg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> udg<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 查找列上没有皇后、正对角线和反对角线没有皇后</span>            <span class="token comment">// i表示列,u表述行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span><span class="token punctuation">;</span>                col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 回复现场</span>                col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dg<span class="token punctuation">[</span>u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> udg<span class="token punctuation">[</span>n <span class="token operator">-</span> u <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化结果队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/problem/content/846/">844.走迷宫</a></p><h5 id="851-900"><a href="#851-900" class="headerlink" title="851~900"></a>851~900</h5><h4 id="901-1000"><a href="#901-1000" class="headerlink" title="901~1000"></a>901~1000</h4><h2 id="1001～2000"><a href="#1001～2000" class="headerlink" title="1001～2000"></a>1001～2000</h2><h3 id="1001～1500"><a href="#1001～1500" class="headerlink" title="1001～1500"></a>1001～1500</h3><h4 id="1001～1100"><a href="#1001～1100" class="headerlink" title="1001～1100"></a>1001～1100</h4><h4 id="1101～1200"><a href="#1101～1200" class="headerlink" title="1101～1200"></a>1101～1200</h4><h4 id="1201～1300"><a href="#1201～1300" class="headerlink" title="1201～1300"></a>1201～1300</h4><h4 id="1301～1400"><a href="#1301～1400" class="headerlink" title="1301～1400"></a>1301～1400</h4><p><a href="https://www.acwing.com/problem/content/1383/">1381. 阶乘</a></p><p>本题重点在于如何获取最后一个非零的数。通过分解质因数可知，这里计算出来的阶乘可以拆分为$n!=2^{\alpha-k}*5^{\beta-k}<em>10^k</em>C$ ,阶乘中的0就来源于这里的2和5之积，也就是k的数量。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的d2表示因数中2的个数，d5表示5的个数</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d5<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">,</span>d2<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">/=</span><span class="token number">5</span><span class="token punctuation">,</span>d5<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//这里取余可以有效的减小数字的大小，对于结果没有影响</span>        res<span class="token operator">=</span>res<span class="token operator">*</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//将多扣除的2或者5乘回去</span>    <span class="token keyword">int</span> k<span class="token operator">=</span>d2<span class="token operator">&lt;</span>d5<span class="token operator">?</span>d2<span class="token operator">:</span>d5<span class="token punctuation">;</span>    <span class="token comment">//这里取余可以有效的减小数字的大小，对于结果没有影响</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d2<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">2</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d5<span class="token operator">-</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token operator">=</span>res<span class="token operator">*</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>res<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2001～3000"><a href="#2001～3000" class="headerlink" title="2001～3000"></a>2001～3000</h2><h2 id="3001～4000"><a href="#3001～4000" class="headerlink" title="3001～4000"></a>3001～4000</h2><h3 id="3001～3500"><a href="#3001～3500" class="headerlink" title="3001～3500"></a>3001～3500</h3><h4 id="3001～3100"><a href="#3001～3100" class="headerlink" title="3001～3100"></a>3001～3100</h4><h4 id="3100～3200"><a href="#3100～3200" class="headerlink" title="3100～3200"></a>3100～3200</h4><p><a href="https://www.acwing.com/problem/content/3195/">3192. 出现次数最多的数</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与数据库</title>
      <link href="/2021/03/21/cheng-xu-she-ji/python-yu-shu-ju-ku/"/>
      <url>/2021/03/21/cheng-xu-she-ji/python-yu-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>安装mysql-connect的包</li></ul><p>代码如下：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import mysql.connectorconfig={'host':'','port':3306,'user':"",'password':'','database':''}try:    con=mysql.connector.connect(**config)cursor=con.cursor()cursor.execute(sql)或cursor.executemany()反复执行一条sql语句cursor.fetchone()或cursor.fetchall()except Exception as e:    print(e)finally:    if "con" in dir():        con.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><p><code>Connector</code>提供了简单的事务控制函数</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">con.start_transaction([事务隔离级别])#事务的提交需要手动提交，不会自动触发con.commit()con.rollback()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import mysql.connector.poolingconfig={....}pool=mysql.connector.pooling.MySQLConnetcionPool(**config,pool_size=10)con=pool.get_connection()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>当大量数据需要插入时，可以使用<code>executemany()</code>方法。其效果可以有效的优化自己每次使用<code>execute()</code>方法所带来的性能损耗，尤其是当数据库中有10万条以上的数据后。</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>由于SQL是解释型语言，存在SQL注入问题。</p><p>此时可以利用SQL预编译机制抵御注入攻击。</p><p>SQL预编译机制：数据库提前将SQL语句编译成二进制，避免了词法分析，这样反复执行同一条SQL效率提升。</p><p>SQL语句编译的过程中，关键字已经被解析过了，所以向编译后的SQL语句传入参数，都被当作字符串处理，数据库不会解析其中注入的SQL语句。</p><p>使用方式如下：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">sql="select * from user where username=%s and password=%s"cursor.execute(sql,(username,password))#此时两个数作为参数传入已经编译好了的sql语句中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇奇怪怪的知识</title>
      <link href="/2021/03/21/jing-yan-zong-jie/qi-qi-guai-guai-de-zhi-shi/"/>
      <url>/2021/03/21/jing-yan-zong-jie/qi-qi-guai-guai-de-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="JETBRAINS"><a href="#JETBRAINS" class="headerlink" title="JETBRAINS"></a>JETBRAINS</h2><p>使用ToolBox安装IDE,其软件默认安装在<code>C:\Users\&lt;用户名&gt;\AppData\Local\JetBrains\</code>文件夹中。</p><p>其中软件的使用证书受到注册表影响，需要将注册表<code>regedit</code>中的相关信息配置在云内电脑中，具体路径为<code>计算机\HKEY_CURRENT_USER\Software\JavaSoft</code>和<code>计算机\HKEY_CURRENT_USER\Software\JetBrains</code>中。</p><p><code>C:\Users\&lt;用户名&gt;\AppData\Roaming\JetBrains</code>中放置的是IDE的配置与下载的插件。</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><h3 id="限制用户SSH登陆"><a href="#限制用户SSH登陆" class="headerlink" title="限制用户SSH登陆"></a>限制用户SSH登陆</h3><p>只允许指定用户通过指定ip进行登陆（白名单）。</p><p>修改<code>/etc/ssh/sshd_config</code>文件中设置<code>AllowUsers</code>选项。<strong>配置完成需要重启 SSHD 服务。</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">AllowUsers root@<span class="token operator">&lt;</span>指定ip<span class="token operator">&gt;</span> king<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只拒绝指定用户进行登陆（黑名单）。</p><p>修改<code>/etc/ssh/sshd_config</code>文件中设置<code>DenyUsers</code>选项。<strong>配置完成需要重启 SSHD 服务。</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">DenyUsers    root aliyun    <span class="token comment">#Linux系统账户        </span><span class="token comment"># 拒绝 root aliyun 帐户通过 SSH 登录系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="重启SSH服务"><a href="#重启SSH服务" class="headerlink" title="重启SSH服务"></a>重启SSH服务</h3><p><code>sudo service sshd restart</code></p><h2 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h2><h3 id="堡垒机跳转"><a href="#堡垒机跳转" class="headerlink" title="堡垒机跳转"></a>堡垒机跳转</h3><p>当我们使用堡垒机连接服务器的时候，需要在vscode的ssh配置环境中加上如下格式的字段以保证能跳转到相应服务器上。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Host centos7  HostName <span class="token punctuation">{</span>服务器ip<span class="token punctuation">}</span>  User <span class="token punctuation">{</span>登陆用户名<span class="token punctuation">}</span>  ForwardAgent <span class="token function">yes</span>  ProxyCommand <span class="token function">ssh</span> -W <span class="token punctuation">{</span>服务器的内网地址<span class="token punctuation">}</span>:%p <span class="token punctuation">{</span>堡垒机ip<span class="token punctuation">}</span> Host centos8  HostName <span class="token punctuation">{</span>堡垒机ip<span class="token punctuation">}</span>  User <span class="token punctuation">{</span>登陆用户名<span class="token punctuation">}</span>  ForwardAgent <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行文件显示"><a href="#多行文件显示" class="headerlink" title="多行文件显示"></a>多行文件显示</h3><p>vscode默认文件是一行显示，左右滑动。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E5%8D%95%E8%A1%8C.png" alt="文件单行.png"></p><p>可以通过设置进行更改，设置中勾选<code>workbench.editor.wrapTabs</code>标签即可实现如下效果。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E5%A4%9A%E8%A1%8C.png" alt="文件多行.png"></p><h2 id="获取B站支链"><a href="#获取B站支链" class="headerlink" title="获取B站支链"></a>获取B站支链</h2><p>在终端输入下面的代码就可以获取到B站直链。等开源研究下实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token operator">=</span><span class="token string">"https://video-direct-link.vercel.app/bili.mp4?aid="</span><span class="token operator">+</span>aid<span class="token operator">+</span><span class="token string">"&amp;bvid="</span><span class="token operator">+</span>bvid<span class="token operator">+</span><span class="token string">"&amp;cid="</span><span class="token operator">+</span>cid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="gh-md-toc"><a href="#gh-md-toc" class="headerlink" title="gh-md-toc"></a>gh-md-toc</h2><p>这是一个生成README文件目录的工具，<a href="https://github.com/ekalinin/github-markdown-toc%E3%80%82">https://github.com/ekalinin/github-markdown-toc。</a></p><p>在想要增加目录的地方加上如下标志符</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--ts--&gt;&lt;!--te--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用命令<code>gh-md-toc --insert &lt;文件名&gt;</code>即可。</p><h2 id="Git乱码"><a href="#Git乱码" class="headerlink" title="Git乱码"></a>Git乱码</h2><p>避免中文乱码：</p><p>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p><p>将git配置文件 <code>core.quotepath</code>项设置为<code>false</code>。<code>quotepath</code>表示引用路径，加上<code>--global</code>表示全局配置。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查找相应文件数量"><a href="#查找相应文件数量" class="headerlink" title="查找相应文件数量"></a>查找相应文件数量</h2><p>获取当前文件夹及其子文件夹中md文件的数量。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> -lR <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">".md"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="统计相应文件中代码行数之和"><a href="#统计相应文件中代码行数之和" class="headerlink" title="统计相应文件中代码行数之和"></a>统计相应文件中代码行数之和</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">find</span> ./* -name <span class="token string">"*.md"</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">cat</span><span class="token operator">|</span><span class="token function">grep</span> -v ^$<span class="token operator">|</span><span class="token function">wc</span> -l <span class="token comment">#这里过滤掉了空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试知识</title>
      <link href="/2021/03/02/ce-shi/dan-yuan-ce-shi-zhi-shi/"/>
      <url>/2021/03/02/ce-shi/dan-yuan-ce-shi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>单元测试是指对软件中的最小可测试单元 进行检查和验证。通常而言，一个单元测试是用于判断每个特定条件（或场景）下某个特定函数的行为，单元测试是由<strong>开发</strong>写的。执行单元测试是为了证明编写的功能代码与我们期望的一致。</p><h3 id="引申概念"><a href="#引申概念" class="headerlink" title="引申概念"></a>引申概念</h3><p>针对每个单独的小方法，在于程序其他部分相隔离的情况下进行测试，输入参数，校验出参是否合乎预期。因此，不测数据库操作、不测网络连接、不测依赖调用。以上的场景全部mock掉。</p><h2 id="测试方向"><a href="#测试方向" class="headerlink" title="测试方向"></a>测试方向</h2><h3 id="自顶向下"><a href="#自顶向下" class="headerlink" title="自顶向下"></a>自顶向下</h3><p>此种方式不推荐，其为接口-&gt;接口实现类-&gt;原子实现类-&gt;Dao层。</p><h3 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h3><p>自底向上就是先测试下一层的方法，再测较高一层的方法，较高一层的方法在调用下一层方法的时候，也是mock掉的。方向为Dao层-&gt;原子实现类-&gt;接口实现类。</p><p>具体实现：框架级代码-&gt;工具类代码-&gt;原子实现类代码-&gt;接口实现类代码</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="测试更充分"><a href="#测试更充分" class="headerlink" title="测试更充分"></a>测试更充分</h3><p>单元测试是最底层的测试，是白盒测试，能够测试所有正流程分支和异常分支，是最容易发现BUG的阶段，也能够发现其他测试环节发现不了的BUG，是接口测试和ui自动化测试无法代替的，是不同层次的覆盖。</p><h3 id="BUG修复代价最少"><a href="#BUG修复代价最少" class="headerlink" title="BUG修复代价最少"></a>BUG修复代价最少</h3><p>单元测试的后继阶段（功能继承测试 UAT测试 上线后的阶段）发现BUG修复的周期很长，修复的代价也更大。</p><h3 id="代码自REVIEW"><a href="#代码自REVIEW" class="headerlink" title="代码自REVIEW"></a>代码自REVIEW</h3><p>写单元测试的过程，也是一次代码REVIEW的过程。单元测试能促进开发者进行代码审查与优化，并能提高代码可读性。同时还能发现如下一系列问题：返回码错误、分支不可达、冗余的参数和方法、对象转换错误、空指针异常、死循环、日至记录错误、判断逻辑不严密等，并能给出代码健壮性建议。</p><h3 id="代码功能更具易用性"><a href="#代码功能更具易用性" class="headerlink" title="代码功能更具易用性"></a>代码功能更具易用性</h3><p>编写单元测试将使我们从调用者角度观察、思考，审查功能是否易于调用和可测试的，可降低软件中的耦合性。</p><h3 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h3><p>如果核心功能的代码，单元测试行覆盖率和分支覆盖率足够高，重构后跑一遍单元测试，相关功能都能测试到，就不必担心代码重构时，影响其他功能。</p><h3 id="快速定位BUG"><a href="#快速定位BUG" class="headerlink" title="快速定位BUG"></a>快速定位BUG</h3><p>如果程序中有BUG,我们运行一次全部单元测试，找到不通过的测试，可以很快的定位对应的执行代码。修复代码后，运行对应的单元测试；如还不通过，继续修改，运行测试，直至测试通过。</p><h2 id="白盒测试技术"><a href="#白盒测试技术" class="headerlink" title="白盒测试技术"></a>白盒测试技术</h2><p>其中有六种相关技术：语句覆盖-&gt;判定覆盖-&gt;条件覆盖-&gt;判断条件覆盖-&gt;组合覆盖-&gt;路径覆盖，其测试强度从弱到强，相应的单侧工作量也越来越大。</p><h3 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h3><p>程序中每条语句至少执行一次，这样可以很直观的从源代码得到测试用例，无须细分每条判定表达式。但是隐式逻辑分支无法测试。</p><h3 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h3><p>每次判定至少一次为真值，有一次为假值，即：程序中每个分支至少执行一次。每次判断的取真、取假至少执行一次。覆盖强度几乎增加一倍，测试用例简单。但是关注焦点是表达式逻辑值，可能会遗漏部分测试路径。</p><h3 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h3><p>设计足够多的测试用例，使得判定中的每个条件获得各种可能的结果，即每个条件至少一次为真值，有一次为假值。相对判定覆盖，增加了对符合判定情况的测试，增加了测试路径。需要足够多的测试用例，条件覆盖并不能保证判定覆盖。</p><h3 id="判断条件覆盖"><a href="#判断条件覆盖" class="headerlink" title="判断条件覆盖"></a>判断条件覆盖</h3><p>设计足够多的测试用例，使得判定中每个天骄爱你的所有可能结果至少出现一次，每个判定本身所有可能结果也至少出现一次。满足判定覆盖准则和田间覆盖准则，弥补了二者的不足。但未考虑条件的组合情况，容易漏、会忽略田间中取或（or）的情况。</p><h3 id="组合覆盖"><a href="#组合覆盖" class="headerlink" title="组合覆盖"></a>组合覆盖</h3><p>使得每个判定中条件结果的所有可能组合至少出现一次。多重条件覆盖准则满足判定覆盖、条件覆盖和判定/田间覆盖准则。线性的增加了测试用例的数量，也不能不着所有路径被测试。</p><h3 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h3><p>覆盖程序中所有可能的路径。可以对程序进行彻底的测试，比前面的五种的覆盖面都广。但是需要设计大量、复杂的测试用例，使得工作量呈指数级增长，特殊路径无法测试。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>单元测试应该是全自动执行的，并且非交互式的。</li><li>保持单元测试的独立性。</li><li>淡雅u你策划四是可以重复执行的，不能受到外界环境的影响。</li><li>对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单侧粒度一般是方法级别的，至多是类级别。</li><li>核心业务、核心应用、核心模块的增量代码确保单元测试通过。</li><li>单元测试的代码必须写在<code>src/test/java</code>，不允许写在业务代码目录下。</li><li>单元测试的基本目标：语句覆盖率达到80%，核心模块的语句覆盖率和分支覆盖率都要达到100%。</li><li>对于不可测的代码必须做必要的重构，使代码可测，避免为了达到测试要求而写不规范测试代码。</li><li>在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例。</li><li>单元测试作为一种质量保障手段，不建议项目发表后补充淡雅u你测试用例，建议在项目提前完成单元测试。</li><li>为了更方便的进行单元测试，业务代码应避免一下情况：构造方法中做的事情过多。存在过多的全局变量和静态方法。存在过多的外部依赖。存在过多的条件语句。</li><li>单元测试与开发强相关；单元测试需要维护；</li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>数据大致分为三类：正常数据、边界数据、异常数据</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul><li>为系统运行起来而设计用例</li><li>为正向测试而设计用例</li><li>为逆向测试而设计用例</li><li>为代码覆盖率而设计用例</li><li>为满足非功能质量要求而设计用例</li></ul><h2 id="Junit4"><a href="#Junit4" class="headerlink" title="Junit4"></a>Junit4</h2><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><ul><li>@Before：初始化方法</li><li>@After：释放资源</li><li>@Test：测试方法，在这里可以测试期望异常和超过时间</li><li>@Ignore：忽略的测试方法</li><li>@BeforeClass：针对所有测试，只执行一次，且必须为static void</li><li>@AfterClass：针对所有测试，只执行一次，且必须为static void</li></ul><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ul><li>一个Junit4的的单元测试用例执行顺序为：@BeforeClass-&gt;@Before-&gt;@Test-&gt;@After-&gt;@AfterClass</li><li>每一个测试方法的调用顺序：@Before-&gt;@Test-&gt;@After</li></ul><h2 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h2><h3 id="常见的Mock场景"><a href="#常见的Mock场景" class="headerlink" title="常见的Mock场景"></a>常见的Mock场景</h3><ul><li>对象：模拟一些在应用中不容易构造或者比较复杂的对象</li><li>接口：调用别的接口方法必须mock,达到隔离的效果</li><li>静态方法：工具类中的静态方法建议mock,单独测试</li><li>Dao层方法：Dao层操作数据库的方法必须mock,隔离数据库</li><li>私有方法：建议通过共有方法直接覆盖私有方法的方式来测试，也可以将私有方法mock,之后用反射的方式单独测试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记</title>
      <link href="/2021/01/25/cheng-xu-she-ji/nginx-xue-xi-bi-ji/"/>
      <url>/2021/01/25/cheng-xu-she-ji/nginx-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端。简单来说就是真实的服务器不能直接被外部网络访问，想要访问必须通过代理。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>运用Nginx的反向代理功能分发请求：所有动态资源的请求交给应用服务器，而静态资源的请求（例如图片、视频、CSS、JavaScript文件等）则直接由Nginx返回到浏览器，这样能大大减轻应用服务器的压力。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>当一台服务器的单位时间内的访问量越大时，服务器压力就越大，大到超过自身承受能力时，服务器就会崩溃。为了避免服务器崩溃，让用户有更好的体验，我们通过负载均衡的方式来分担服务器压力。我们可以建立很多很多服务器，组成一个服务器集群，当用户访问网站时，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入该服务器。如此以来，用户的每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况。负载均衡配置一般都需要同时配置反向代理，通过反向代理跳转到负载均衡。</p><h2 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Nginx的负载均衡策略可以划分为两大类：内置策略和扩展策略。内置策略包含加权轮询和ip hash，在默认情况下这两种策略会编译进nginx内核，只需在nginx配置中指明参数即可。扩展策略有很多，如fair、通用hash、consistent hash等，默认不编译进nginx内核。</p><p>Nginx主要支持四种方式的分配：轮询、weight、ip_hash、fair（第三方）、url_hash（第三方）。</p><h3 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器。如果后端服务器down掉，能自动剔除。</p><pre class="mermaid">graph TD开始--&gt; 按权重排序 --&gt; 接收请求 --&gt; 建立连接 --是--&gt; 权重减一重新排序 --2xx--&gt; 结束建立连接 --否--&gt; 相应标志置位 --&gt; down[all down] --是--&gt; 恢复初始状态 --5xx--&gt; 结束down --否--&gt; 接收请求</pre><ul><li>如果可以把加权轮询算法分为先深搜索和先广搜索，那么Nginx采用的是先深搜索算法，即将首先将请求都分给高权重的机器，直到该机器的权值降到了比其他机器低，才开始将请求分给下一个高权重的机器。</li><li>当所有后端机器都down掉时，nginx会立即将所有机器的标志位清成初始状态，以避免造成所有的机器都处在timeout的状态，从而导致整个前端被夯住。</li></ul><h3 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h3><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><pre class="mermaid">graph TD开始 --&gt; 初始化轮询 --&gt; ip[ip hash] --&gt; 建立连接 --2xx--&gt; 结束建立连接 --否--&gt; 相应标志置位 --&gt; 20[&gt;20次] --是--&gt; 退化成轮询 --5xx--&gt; 结束20 --否--&gt; ip</pre><p>可以看到，hash值既与ip有关又与后端机器的数量有关。经测试，上述算法可以连续产生1045个互异的value，这是此算法硬限制。nginx使用了保护机制，当经过20次hash仍然找不到可用的机器时，算法退化成轮询。</p><p>因此，从本质上说，ip hash算法是一种变相的轮询算法，如果两个ip的初始hash值恰好相同，那么来自这两个ip的请求将永远落在同一台服务器上，这为均衡性埋下了较深隐患。</p><h3 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p>fair策略是扩展策略，默认不被编译进nginx内核。它根据后端服务器的响应时间判断负载情况，从中选出负载最轻的机器进行分流。这种策略具有很强的自适应性，但是实际的网络环境往往不是那么简单，因此须慎用。</p><h3 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h3>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux复习笔记</title>
      <link href="/2021/01/25/cheng-xu-she-ji/linux-fu-xi-bi-ji/"/>
      <url>/2021/01/25/cheng-xu-she-ji/linux-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux的体系结构"><a href="#Linux的体系结构" class="headerlink" title="Linux的体系结构"></a>Linux的体系结构</h2><ul><li>体系结构主要分为用户态（用户上层活动）和内核态</li><li>内核：本质是一段管理计算机硬件设备的程序</li><li>系统调用：内核的访问接口，是一种能再简化的操作</li><li>公用库函数：系统调用的组合拳</li><li>Shell：命令解释器，可编程</li></ul><p>在Linux中使用<code>man</code>命令能查询到系统调用的接口，<code>man 2 syscalls</code>。其中2表示系统调用，3表示公共库函数。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>语法：<code>find path [options] params</code></p><p>作用：在指定目录下查找文件</p><p><code>-name</code>表示通过名称查找文件，其支持通配符</p><p><code>-iname</code>表示忽略大小写</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>语法：<code>grep [options] pattern file</code></p><p>全称：Global Regular Expression Print</p><p>作用：查找文件里符合条件的字符串</p><h3 id="管道操作符"><a href="#管道操作符" class="headerlink" title="|管道操作符"></a><code>|</code>管道操作符</h3><p>可将指令连接起来，前一个指令的输出作为后一个指令的输入</p><p>使用管道主要的要点：</p><ul><li>只处理前一个命令正确输出，不处理错误输出</li><li>右边的命令必须能够接收标准输入流，否则传递过程中数据会被抛弃</li><li>sed,awk,grep,cat,head,top,less,more,wc,join,sort,split等</li></ul><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>语法<code>awk [options] 'cmd' file</code></p><p>作用：一次读取一行文件，按输入分隔符进行切片，切成多个组成部分。将切片直接保存在内建的变量中，<code>$1,$2...</code>（$0表示行的全部）。支持对单个切片的判断，支持循环判断，默认分隔符为空格。</p><p>例如：<code>awk '{print $1,$4}' netstat.txt</code> 或<code>awk '($1=="tcp" &amp;&amp; $2==1)||NR==1 {print $0}' netstat.txt</code>或<code>awk -F "," '{print $2}' test.txt</code>或<code>grep 'patial\[true\]' a.info | grep -o 'engine\[[0-9a-z]*\]' | awk '{engineaar[$1]++END{for(i in enginearr) print i "\t" enginearr[i]}'</code></p><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>语法：<code>sed [options] 'sed command' filename</code></p><p>全称：stream editor，流编辑器</p><p>适合用于对文本的行内容进行处理</p><p>例如：<code>sed -i 's/^Str/String/' a.txt</code>默认不加<code>-i</code>则只是将替换后的内容打印出来，并不修改文件</p><p><code>sed -i 's/Jack/me/g a.txt</code>sed命令默认只处理一行中第一个符合条件的字符，只有在其后加上<code>g</code>才能将一行中所有符合的字符进行替换  </p><p><code>sed -i '/^ *$/d' a.txt</code>表示删除多余的空行</p><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>nohup 英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。</p><p>nohup 命令，在默认情况下（非重定向时），会输出一个名叫 nohup.out 的文件到当前目录下，如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nohup Command [ Arg … ] [　&amp; ]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 参数说明：</p><ul><li><p>Command：要执行的命令。</p></li><li><p>Arg：一些参数，可以指定输出文件。</p></li><li><p>&amp;：让命令在后台执行，终端退出后命令仍旧执行。</p></li></ul><p>如果要停止运行，你需要使用以下命令查找到 nohup 运行脚本到 PID，然后使用 kill 命令来删除：<code>ps -aux | grep "&lt;执行脚本名称&gt;"</code>。</p><p>参数说明：</p><ul><li>a : 显示所有程序</li><li>u : 以用户为主的格式来显示</li><li>x : 显示所有程序，不区分终端机</li></ul><p>2&gt;&amp;1 解释：</p><p>将标准错误 2 重定向到标准输出 &amp;1 ，标准输出 &amp;1 再被重定向输入到 runoob.log 文件中。</p><ul><li>0 – stdin (standard input，标准输入)</li><li>1 – stdout (standard output，标准输出)</li><li>2 – stderr (standard error，标准错误输出)</li></ul><h3 id="查看文件夹之间的不同文件"><a href="#查看文件夹之间的不同文件" class="headerlink" title="查看文件夹之间的不同文件"></a>查看文件夹之间的不同文件</h3><p>直接使用过diff可能会导致差异文件过多，导致的不可查。可以使用<code>vimdiff &lt;(cd 文件夹1; find . | sort) &lt;(cd 文件夹2; find . | sort)</code></p><h3 id="多行输入到文件"><a href="#多行输入到文件" class="headerlink" title="多行输入到文件"></a>多行输入到文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &gt;&gt;demo &lt;&lt;EOF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行命令的执行方式是从尾到首再到中间。即&lt;&lt;EOF表示标准输入来自命令行的分隔符之间的内容，这里的分隔符被设置为EOF，这个可以人为给定。再将获取的输入传给cat命令，相当于是多行版本的echo，最后&gt;&gt;将内容写入至中间的demo文件。</p><h2 id="Shell编写"><a href="#Shell编写" class="headerlink" title="Shell编写"></a>Shell编写</h2>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识</title>
      <link href="/2021/01/05/ji-suan-ji-ji-chu/shu-ju-ku-zhi-shi/"/>
      <url>/2021/01/05/ji-suan-ji-ji-chu/shu-ju-ku-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>一个数据库的组成主要可以分为以下几个模块：</p><ul><li>存储（文件系统）</li><li>程序实例<ul><li>存储管理</li><li>缓存机制（淘汰机制）</li><li>SQL解析</li><li>日志管理</li><li>权限划分</li><li>容灾机制</li><li>索引管理</li><li>锁管理</li></ul></li></ul><h2 id="ACID四原则"><a href="#ACID四原则" class="headerlink" title="ACID四原则"></a>ACID四原则</h2><p>事务具有四个特性：原子性、一致性、隔离性和持久性。</p><ul><li>原子性：事务是数据库的逻辑工作单位，不可分割，事务中包含的各操作要么都做，要么都不做。</li><li>一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li><li>隔离性：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性：指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的，不能回滚。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>$DBMS种类 \begin{cases} 层次数据库(HDB):使用树形结构进行表示 \ 关系数据库(RDB):由行列组成的二维表 \ 面向对象数据库(OODB):把数据以及对数据操作集合起来以对象为单位进行管理 \  XML数据库 \ 键值存储系统(KVS):单纯保存使用的主键和值 \end{cases}$</p><p>$SQl种类 \begin{cases} DDL 数据定义语言 \ DML 数据操纵语言 \ DCL数据控制语言 \end{cases}$</p><p>SQL书写规则：</p><ul><li>以分号结尾</li><li>SQL不区分关键词的大小写，插入到表中的数据区分大小写</li><li>推荐关键字大写，表名的首字母大写，其余(列名等)小写</li><li>常数用单引号进行包裹</li><li>单词之间需要使用半角空格或者换行符进行分隔</li></ul><h3 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h3><p>创建数据库：<code>CREATE DATABASE &lt;数据库名称&gt;;</code></p><p>创建表：<code>CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt; &lt;该类所需约束&gt;,...,&lt;该表的约束1&gt;，&lt;该表的约束2&gt;);</code></p><p>删除表：<code>DROP TABLE &lt;表名&gt;;</code></p><p>表定义的更新：</p><ul><li>添加列：<code>ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列名&gt; &lt;列类型&gt;;</code> Oracle和SQL Server中不用写COLUMN。，Oracle可以<code>ALTER TABLE &lt;表名&gt; ADD （ &lt;列名&gt;， &lt;列名&gt;，……）；</code></li><li>删除列：<code>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;;</code>Oracle的特殊同上。</li></ul><p>只能使用半角英文字母（开头）、数字、下划线作为数据库、表、列的名称。</p><p>同一数据库表不能重名，同一个表里列也不能重名。</p><p>$数据类型 \begin{cases} INTEGER:整数，非小数 \ CHAR（在括号中指定存储的字符串的最大长度，不同的<br>RDBSM中可能长度单位是字符个数也可能是字节长度）\ VARCHAR：同CHAR，但是不是定长，需要给定长度,不会用半角的空格进行补位(Oracle中使用VARCHAR2) \ DATE:存储日期 \end{cases}$</p><p>对于<code>Mysql</code>来说，时间类型如下：</p><table><thead><tr><th align="center">时间类型</th><th align="center">占用空间</th><th align="center">日期格式</th><th align="center">最小值</th><th align="center">最大值</th><th align="center">零值表示</th></tr></thead><tbody><tr><td align="center">DATETIME</td><td align="center">8 bytes</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">1000-01-01 00:00:00</td><td align="center">9999-12-31 23:59:59</td><td align="center">0000-00-00 00:00:00</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4 bytes</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">19700101080001</td><td align="center">2038 年的某个时刻</td><td align="center">00000000000000</td></tr><tr><td align="center">DATE</td><td align="center">4 bytes</td><td align="center">YYYY-MM-DD</td><td align="center">1000-01-01</td><td align="center">9999-12-31</td><td align="center">0000-00-00</td></tr><tr><td align="center">TIME</td><td align="center">3 bytes</td><td align="center">HH:MM:SS</td><td align="center">-838:59:59</td><td align="center">838:59:59</td><td align="center">00:00:00</td></tr><tr><td align="center">YEAR</td><td align="center">1 bytes</td><td align="center">YYYY</td><td align="center">1901</td><td align="center">2155</td><td align="center">0000</td></tr></tbody></table><p>一般建表时候，创建时间用datetime，更新时间用timestamp。</p><p>数据表重命名：</p><ul><li>Oracle、PostgreSQL：<code>ALTER TABLE &lt;表名&gt; RENAME TO &lt;新的表名&gt;</code></li><li>DB2：<code>RENAME TABLE &lt;表名&gt; TO &lt;新的表名&gt;</code></li><li>SQL SERVER:<code>sp_rename '表名','新的表名'</code></li><li>Mysql:<code>RENAME TABLE &lt;表名&gt; TO &lt;新的表名&gt;</code></li></ul><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>基本语法：<code>SELECT &lt;列名&gt;,... FROM &lt;表名&gt;</code>。列名之间用逗号分割。</p><p>使用<code>*</code>进行select无法设定列的显示顺序，按照CREATE TABLE语句的定义顺序。</p><p>插入空行会导致执行错误。</p><p>使用<code>AS</code>为列设置别名，格式如下：<code>SELECT &lt;列名&gt; AS &lt;别名&gt;...</code>。<strong>别名可以使用中文，但是要用双引号包裹。</strong></p><p>可以在<code>SELECT</code>语句中书写常量，如下所示。这些常量会显示在每条查询出的结果的前面。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'商品'</span> <span class="token keyword">AS</span> string<span class="token punctuation">,</span> <span class="token number">38</span> <span class="token keyword">AS</span> number<span class="token punctuation">,</span> <span class="token string">'2009-02-24'</span> <span class="token keyword">AS</span> <span class="token keyword">date</span><span class="token punctuation">,</span>product_id<span class="token punctuation">,</span> product_name<span class="token keyword">FROM</span> Product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>SELECT</code>语句中删除重复行时，使用关键词<code>DISTINCT</code>。DISTINCT 关键字只能用在第一个列名之前。<code>SELECT DISTINCT &lt;列名&gt; FROM &lt;表名&gt;</code>。<code>NULL</code>也会被合并。</p><p><code>SELECT</code>语句通过<code>WHERE</code>子句指定查询条件。WHERE子句要紧跟在FROM子句之后。</p><p>单行注释<code>--</code>，<strong>Mysql需要在<code>--</code>之后加上一个半角空格</strong>。多行注释使用<code>/* */</code>。</p><p><strong>所有包含NULL的运算，其结果都是NULL。</strong>即使除零也还是NULL。</p><p>FROM子句在SELECT中并不是必不可少，例如<code>SELECT (100 + 200) * 3 AS calculation;</code>Oracle不允许省略FROM。可以使用<code>DUAL</code>临时表。</p><p>不等于<code>&lt;&gt;</code>，<code>!=</code>不被标准SQL承认。</p><p>比较运算符可以对字符、数值和日期等几乎所有数据类型的列和值进行比较。</p><p>使用比较运算符时一定要注意不等号和等号的位置。</p><p>对字符串类型的数据进行大小比较时，规则是按照字典顺序。<strong>以相同字符开头的单词比不同字符开头的单词更相近</strong>。该规则对定长字符串和可变长字<br>符串都适用。</p><p><strong>不能对NULL使用比较运算符。</strong>专门用来判断是否为 NULL 的 IS NULL或 IS NOT NULL  运算符。</p><p>NOT运算符用来否定某一条件，但是不能滥用。</p><p>多个查询条件进行组合时，需要使用AND运算符或者OR运算符。</p><p>AND 运算符优先于 OR 运算符，可以使用<code>()</code>，改变优先级。</p><p>使用 AND 运算符进行的逻辑运算称为逻辑积，使用 OR 运算符进行的逻辑运算称为逻辑和。</p><p>SQL中除了真值和假值以外，存在第三种，即不确定NULL。即三值逻辑。</p><h3 id="聚合和排序"><a href="#聚合和排序" class="headerlink" title="聚合和排序"></a>聚合和排序</h3><p>通常，聚合函数会对NULL以外的对象进行汇总。但是只有COUNT函数例外，使用COUNT（*）可以查出包含NULL在内的全部数据的行数。</p><table><thead><tr><th align="center">函数</th><th align="center">用处</th></tr></thead><tbody><tr><td align="center">COUNT</td><td align="center">计算表中的记录数(行数)</td></tr><tr><td align="center">SUM</td><td align="center">计算表中数值列中数据的合计值</td></tr><tr><td align="center">AVG</td><td align="center">计算表中数值列中数据的平均值</td></tr><tr><td align="center">MAX</td><td align="center">计算表中数值列中数据的最大值</td></tr><tr><td align="center">MIN</td><td align="center">计算表中数值列中数据的最小值</td></tr></tbody></table><p><code>*</code>是COUNT函数特有的参数，其它函数不能使用其作为参数。COUNT(*)返回包含NULL的数据行数，COUNT(列名)则返回不包含NULL的数据行数。</p><p><strong>使用聚合函数时，NULL的数据会被排除在外，不能简单的理解为等价于0。</strong></p><p>SUM和AVG函数只对数值类型的列使用，MAX和MIN函数适用于任何数据类型的列。</p><p>去掉重复值的聚合函数，格式形如<code>SELECT COUNT (DISTINCT product_type) FROM Product</code>。</p><p>DISTINCT关键字必须写在括号中。写在外面会优先执行聚合函数，然后才是DISTINCT。</p><p>使用GROUP BY子句进行汇总：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在GROUP BY子句中指定的列称为聚合键或分组列。</p><p>GROUP BY子句必须写在FROM子句之后。如果有WHERE子句，需要卸载WHERE子句之后。</p><p>聚合键中包含NULL时，在结果中会以“不确定”行（空行）的形式表现出来。</p><p>使用 WHERE 子句进行汇总处理时，会先根据 WHERE 子句指定的条件进行过滤，然后再进行汇总处理。</p><p><strong>子句书写顺序：SELECT -&gt; FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; OREDER BY</strong></p><p><strong>子句执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; OREDER BY</strong></p><p>与聚合函数和GROUP BY子句有关的常见错误：</p><ul><li>在SELECT子句中书写了多余的列。使用聚合函数时，SELECT子句只能存在以下三种元素：**常数，聚合函数，GROUP BY子句中指定的列名(也就是聚合键)**，MYSQL支持在多列候补中只要有一列满足要求就可以，其他RDBMS都不支持。因为聚合键和另外的列名不一定是一对一关系。</li><li>在GROUP BY子句中写了列的别名。在MYSQL中不算错误，但是不标准，因为标准SQL的执行顺序的影响，GROUP BY 时还未执行SELECT，系统也就不知道列的别名。</li><li>GROUP BY子句结果的显示是无序的。</li><li>只有在SELECT子句、HAVING子句和ORDER BY子句中能够使用COUNT等聚合函数。</li></ul><p>使用COUNT函数等对表中数据进行汇总操作时，为其指定条件的不是WHERE子句，而是HAVING子句。</p><p> HAVING子句要写在GROUP BY子句之后。</p><p><strong>WHERE子句用来指定数据行的条件， HAVING子句用来指定分组的条件。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ……<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ……<span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>分组结果对应的条件<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>HAVING 子句中能够使用的 3 种要素:<strong>常数、聚合函数、GROUP BY子句中指定的列名</strong>。</p><p>在 WHERE 子句和 HAVING 子句中都可以使用的条件，最好写在 WHERE 子句中。WHERE在排序之前就删去了部分数据，且便于建立索引，执行速度也会更快。</p><p>若查询没有指定顺序，则返回的结果往往是随机的。</p><p>OREDER BY：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ……<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序基准列<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>排序基准列<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不论何种情况， ORDER BY 子句都需要写在 SELECT 语句的末尾。这是因为对数据行进行排序的操作必须在结果即将返回时执行。</p><p>OREDER BY默认是升序，也可以显式声明<code>ASC</code>，使用关键词<code>DESC</code>降序。</p><p><code>OREDER BY</code>指定多个排序键时，优先使用左侧的键，相同情况下在参考右侧的键。</p><p><strong>排序键中包含NULL时，会在开头或末尾进行汇总。</strong></p><p>在ORDER BY子句中可以使用SELECT子句中定义的别名。但是GROUP BY不可以。<strong>因为 SELECT 子句的执行顺序在 GROUP BY 子句之后， ORDER BY 子句之前</strong>。</p><p>在ORDER BY子句中可以使用SELECT子句中未使用的列和聚合函数。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>当数据量巨大时，通过索引可以大幅提升查询数据的速度。而数据量很少的时候，直接读入内存进行全表扫描会更快。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>主键、唯一键以及普通键等。</p><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><ul><li>建立二叉查找树进行二分查找</li><li>建立B-Tree结构进行查找</li><li>建立B+-Tree结构进行查找（MYSQl）</li><li>建立Hash结构进行查找。</li></ul><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>二叉查找数，是在二叉树的基础之上，约束其根节点的左节点小于根节点，右节点大于根节点。这样查找的时间复杂度为$O(logn)$。但是由于这样每个节点至多只能有两个节点，在面对大量数据时，整个树的层级会很深且由于数据变动可能变成线性的导致查询效果变差。因此，引入B-Tree。</p><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p>m阶B-Tree即子节点最多m个的B-Tree。</p><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><ul><li>根节点至少包含两个子节点</li><li>树中每个节点最多含有m个子节点（m&gt;=2），m取决与节点的容量与相关配置。</li><li>除根节点和叶节点外，其他每个节点至少有ceil(m/2)个子节点（ceil为取上限）</li><li>所有叶子节点都在同一层</li><li>假设每个非终端节点中包含有n个关键字信息，其中<ul><li>$k_i(i=1,,,n)$为关键字，且关键字按顺序升序排序$k_{i-1}&lt;k_i$。</li><li>关键字的个数n必须满足：$[ceil(m/2)-1]\le n \le m-1$。</li><li>非叶子节点的指针：p[1],p[2],…,p[M]；其中p[1]指向关键字小于k[1]的子树，p[M]指向关键字大于k[M-1]的子树，其中p[i]指向关键字属于$(k_{i-1},k_i)$的子树。</li></ul></li></ul><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+-Tree"></a>B+-Tree</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>B+-Tree是B-Tree的变体，其定义基本与B树相同，除了</p><ul><li>非叶子节点的子树指针与关键字个数相同</li><li>非叶子节点的子树指针p[i]，指向关键字值[k[i],k[i+1]]的子树</li><li>非叶子节点仅用来索引，数据都保存在叶子节点中</li><li>所有叶子节点均有一个链指针指向下一个叶子节点，这样便于进行范围计算。例如大于某一个数的记录</li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>B+树的磁盘读写代价更低，其非叶子节点因其不存储信息相较于B树大小更小，一次性读入内存的节点数更多，可以减少读写</li><li>B+树的查询效率更加稳定，都是从根节点到叶子节点</li><li>B+树更有利于对数据库的扫描，其叶子节点之间有着链指针，遍历链指针就能实现对全部数据的扫描，范围查询效果更好</li></ul><h4 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h4><p>hash索引也能可以作为索引，但是有以下缺陷，主要体现为SQL查询指令上的范围查找：</p><ul><li>仅仅能满足“=”，“in”，不能使用范围查询</li><li>无法被用来避免数据的排序操作</li><li>不能利用部分索引键查询</li><li>不能避免表扫描</li><li>遇到大量hash值相等的情况后性能并不一定就会比B-Tree索引高</li></ul><h4 id="BitMap索引"><a href="#BitMap索引" class="headerlink" title="BitMap索引"></a>BitMap索引</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>位图索引可以看作是存储了大量bit位的bit序列，并且通过这些bit序列上的按位操作来响应查询请求，同时每个bit序列中的位数与数据表中的行数是一致的。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86_%E4%BD%8D%E5%9B%BE%E7%B4%A2%E5%BC%95.png" alt="数据库知识_位图索引.png"></p><h3 id="索引模块"><a href="#索引模块" class="headerlink" title="索引模块"></a>索引模块</h3><h4 id="密集索引与稀疏索引"><a href="#密集索引与稀疏索引" class="headerlink" title="密集索引与稀疏索引"></a>密集索引与稀疏索引</h4><ul><li><p>密集索引文件中的每个搜索码值都对应一个索引值</p></li><li><p>稀疏索引文件只为索引码的某些值建立索引项</p></li><li><p>MylSAM引擎：主键索引、唯一键索引、普通索引其索引都属于稀疏索引</p></li><li><p>InnoDB引擎：有且仅有一个密集索引</p><ul><li><p>若一个主键被定义，该主键则作为密集索引</p></li><li><p>若没有主键被定义，该表的第一个唯一非空索引则作为密集索引</p></li><li><p>若不满足以上条件，InnoDB内部会生成一个隐藏主键（密集索引），该列是一个6字节的列</p></li><li><p>非主键索引存储相关键位和其对应的主键值，包括两次查找</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86_%E4%B8%8D%E5%90%8C%E5%BC%95%E6%93%8E%E7%B4%A2%E5%BC%95.png" alt="数据库知识_不同引擎索引.png"></p></li></ul></li></ul><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86_%E8%BF%9E%E6%8E%A5.png" alt="数据库知识_连接.png"></p><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>在SQL在数据库中执行花费很长时间的时候需要考虑相应的性能优化问题。</p><p>在优化的过程中大致可以分成两个部分：即程序在执行sql的过程中可否优化以及sql语句本身可否优化。针对第一点明显的就是在大量数据需要插入的时候，能否将多条数据整合进入一条sql中，以此加快执行的速度。或给表加上索引，mysql可以使用explain查看sql执行计划来检查查询是否命中索引。</p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>explain执行计划中包含的信息如下：</p><ul><li><p>id:  查询序列号</p><p>select查询的序列号(一组数字)，表示查询中执行select子句或者操作表的顺序。</p><p>id列分为三种情况：</p><ul><li>如果id相同，那么执行顺序从上到下</li><li>如果id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li><li>id相同和不同的，同时存在：相同的可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高，越先执行</li></ul></li><li><p>select_type: 查询类型</p><p>主要用来分辨查询的类型，是普通查询还是联合查询还是子查询</p><ul><li><strong>simple</strong>: 简单的查询，不包含子查询和union</li><li><strong>primary</strong>: 查询中若包含任何复杂的子查询，最外层查询则被标记为Primary</li><li><strong>union</strong>: 在union，union all和子查询中的第二个和随后的select被标记为union</li><li><strong>dependent union</strong>: 在包含UNION或者UNION ALL的大查询中，如果各个小查询都依赖于外层查询的话，那除了最左边的那个小查询之外，其余的小查询的select_type的值就是DEPENDENT UNION。</li><li><strong>union result</strong>: 从union表获取结果的select。</li><li><strong>subquery</strong>: 在select或者where列表中包含子查询（不在from子句中）</li><li><strong>dependent subquery</strong>: 子查询中的第一个select（不在from子句中），而且取决于外面的查询。</li><li><strong>derived</strong>: 在FROM列表中包含的子查询被标记为DERIVED，也叫做派生类</li><li><strong>UNCACHEABLE SUBQUERY</strong>：一个子查询的结果不能被缓存，必须重新评估外链接的第一行对于外层的主表，子查询不可被物化，每次都需要计算（耗时操作）</li><li><strong>uncacheable union</strong>: 表示union的查询结果不能被缓存</li></ul></li><li><p>table: 表名或者别名</p><p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者union合并结果集.</p><ul><li>如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名.</li><li>表名是derivedN的形式，表示使用了id为N的查询产生的衍生表.</li><li>当有union result的时候，表名是union n1,n2等的形式，n1,n2表示参与union的id.</li></ul></li><li><p>partitions: 匹配的分区</p></li><li><p>type: 访问类型</p><p>type显示的是访问类型，访问类型表示我是以何种方式去访问我们的数据，最容易想的是全表扫描，直接暴力的遍历一张表去寻找需要的数据，效率非常低下。</p><p>访问的类型有很多，效率从最好到最坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; <strong>ref</strong> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <strong>range</strong> &gt; <strong>index</strong> &gt; ALL</p><p><strong>一般情况下，要保证查询至少达到range级别，最好能达到ref</strong></p><ul><li><strong>all</strong>: 全表扫描，需要扫描整张表，从头到尾找到需要的数据行。一般情况下出现这样的sql语句而且数据量比较大的话那么就需要进行优化。</li><li><strong>index</strong>：全索引扫描这个比all的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</li><li><strong>range</strong>：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了index的全索引扫描，适用的操作符：=, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN() </li><li><strong>index_subquery</strong>：利用索引来关联子查询，不再扫描全表</li><li></li></ul></li><li><p>possible_keys: 可能用到的索引</p></li><li><p>key: 实际用到的索引</p></li><li><p>key_len: 索引长度</p></li><li><p>ref: 与索引比较的列</p></li><li><p>rows: 估算的行数</p></li><li><p>filtered: 按表条件筛选的行百分比</p></li><li><p>Extra: 额外信息</p></li></ul><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>mysql中的sql语句中表名、列名可以用`进行包裹。comment之后的文字用单引号进行包裹。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2021/01/05/ji-suan-ji-ji-chu/ji-suan-ji-wang-luo/"/>
      <url>/2021/01/05/ji-suan-ji-ji-chu/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE2020%E7%89%88.png" alt="计算机网络_网络通讯协议关系图2020版"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_TCP-IP%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="计算机网络_TCP-IP协议关系图.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png" alt="计算机网络_数据格式.png"></p><h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a>TCP与UDP</h2><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>特点：</p><ul><li>面向连接的、可靠的、基于字节流的传输层通信协议</li><li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li><li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li><li>使用校验和来校验数据在传输过程中是否有误</li></ul><p>无论是TCP还是UDP都是不包含IP地址的（由TCP/IP负责），包含双方的端口号（标识进程）。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_TCP%E6%8A%A5%E5%A4%B4.jpg" alt="计算机网络_TCP报头.jpg"></p><ul><li>16位源端口号和16位目的端口号；</li><li>32位序号：一次TCP通信过程中某一个传输方向上的字节流的每个字节的编号，通过这个来确认发送的数据有序，比如现在序列号为500，发送了200，下一个序列号就是700；</li><li>32位确认号：用来响应TCP报文段，给收到的TCP报文段的序号加1，三握时还要携带自己的序号；</li><li>4位头部长度：标识该TCP头部有多少个4字节，共表示最长15*4=60字节。同IP头部；</li><li>6位保留。6位标志。URG（紧急指针是否有效）ACK（表示确认号是否有效）PSH（提示接收端应用程序应该立即从TCP接收缓冲区读走数据）RST（表示要求对方重新建立连接）SYN（同步序号，表示请求建立一个连接）FIN（表示通知对方本端要关闭连接，用于释放连接）；</li><li>16位窗口大小：TCP流量控制的一个手段，用来告诉对端TCP缓冲区还能容纳多少字节；</li><li>16位校验和：由发送端填充，接收端对报文段执行CRC算法以检验TCP报文段在传输中是否损坏；</li><li>16位紧急指针：一个正的偏移量，它和序号段的值相加表示最后一个紧急数据的下一字节的序号；</li></ul><h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5.png" alt="三次握手连接.png"></p><p>三次握手的必要性：</p><ul><li>为了初始化Seq，用于之后的传输；</li></ul><p>SYN Flood攻击：在首次握手时SYN超时，此时，Server不断重试直到超时，Linux默认重试五次，每次时间翻倍，起始时间从1秒开始，等待1+2+4+8+16+32=63秒才断开连接。使得服务器可能遭到SYN Flood攻击。<strong>针对这种情况，SYN队列满了，通过tcp_syncookies参数回发SYN cookie。若为正常连接则Client会回发SYN cookie,直接建立连接。</strong></p><p>在建立连接之后，Client故障，采用<strong>保活机制</strong>。此时向对方发送保活机制探测报文，如果未收到响应则继续发送，直至尝试次数达到保活探测数的上限。此时认定该Client不可达，中断连接。</p><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E5%9B%9B%E6%AC%A1%E5%9B%9E%E6%94%B6%E5%85%B3%E9%97%AD.png" alt="四次回收关闭.png"></p><p>TIME_WAIT状态的含义：</p><ul><li>确保有足够的时间让对方收到ACK包，避免发生重传；</li><li>避免新旧连接混淆；</li></ul><p>服务端大量出现CLOSE_WAIT状态的原因：对方关闭socket连接，我方忙于读写，没有及时关闭连接。此时，<strong>检查代码，特别是释放资源的代码。检查配置，特别是处理请求的线程配置。</strong></p><p>Linux查看CLOSE_WAIT命令：<code>netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'</code>。</p><h5 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h5><p>RTT：发送一个数据包到收到对应的ACK所花费的时间</p><p>RTO：重传时间间隔</p><p>TCP使用滑动窗口做流量控制与乱序重排，保证TCP的可靠性与流控特性。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_TCP%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3.jpg" alt="计算机网络_TCP发送窗口.jpg"></p><p>滑动窗口的数据由两部分构成：已发送但是没有收到ACK的和允许发送还没发送的。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_TCP%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3.png" alt="计算机网络_TCP接收窗口.png"></p><p>接收窗口：已接受到没发ACK的</p><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>无论是TCP还是UDP都是不包含IP地址的（有TCP/IP负责），包含双方的端口号（标识进程）。</p><p>特点：</p><ul><li>面向非连接</li><li>不维护连接状态，支持同时向多个客户端传输相同的信息</li><li>数据包报头只有8字节，额外开销小</li><li>吞吐量只受限于数据生成速率、传输速率与机器性能</li><li>尽最大努力交付，不保证可靠交付，不需要维护复杂的链接状态表</li><li>面向报文，不对应用程序提交的报文信息进行拆分或者合并</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_TCP%E6%8A%A5%E5%A4%B4.jpg" alt="计算机网络_UDP报文.png"></p><h3 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h3><table><thead><tr><th>tcp</th><th>udp</th></tr></thead><tbody><tr><td>连接</td><td>无连接</td></tr><tr><td>可靠</td><td>不可靠</td></tr><tr><td>有序</td><td>无序</td></tr><tr><td>速度慢</td><td>速度快</td></tr><tr><td>重量</td><td>轻量</td></tr></tbody></table><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>特点：</p><ul><li>支持客户端/服务器模式</li><li>简单灵活快速</li><li>灵活</li><li>无连接，长连接是由下层实现的对HTTP透明</li><li>无状态</li></ul><p>HTTP1.1相较于HTTP1.0最大的区别就是引入长连接。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_HTTP%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%84.png" alt="HTTP请求结构.png"></p><p> 在浏览器输入url后经历的流程：</p><ol><li>DNS解析url对应的IP地址，由近到远的DNS解析为浏览器缓存、系统缓存、路由器缓存、ISP缓存、域名服务器缓存、顶级域名服务器缓存；</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>五种可能的取值：</p><ul><li>1xx：只是信息——表示请求已接收，继续处理</li><li>2xx：成功——表示请求已经被成功接收、理解</li><li>3xx：重定向——要完成请求必须进行进一步的操作</li><li>4xx：客户端错误——请求有语法错误或请求无法实现</li><li>5XX：服务端错误——服务器未能实现合法的请求</li></ul><h5 id="常见HTTP请求头"><a href="#常见HTTP请求头" class="headerlink" title="常见HTTP请求头"></a>常见HTTP请求头</h5><table><thead><tr><th>请求头</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Charset</td><td>用于指定客户端接受的字符集</td></tr><tr><td>Accept-Encoding</td><td>用于指定可接受的内容编码，如Accept-Encoding:gzip.deflate</td></tr><tr><td>Accept-Language</td><td>用于指定一种自然语言，如Accept-Language:zh-cn</td></tr><tr><td>Host</td><td>用于指定被请求资源的Internet主机和端口号，如Host:buerlog.top</td></tr><tr><td>User-Agent</td><td>客户端的操作系统、浏览器、等其他属性</td></tr><tr><td>Connection</td><td>当前连接是否保持，如Connection:Keep-Alive</td></tr></tbody></table><h5 id="常见HTTP响应头"><a href="#常见HTTP响应头" class="headerlink" title="常见HTTP响应头"></a>常见HTTP响应头</h5><table><thead><tr><th>响应头</th><th>说明</th></tr></thead><tbody><tr><td>Server</td><td>使用的服务器名称：如Server:nginx/1.10.3 (Ubuntu)</td></tr><tr><td>Content-Type</td><td>用来指明发送给客户端的实体正文的媒体类型，如text/html; charset=utf-8</td></tr><tr><td>Content-Encoding</td><td>与请求抱头Accept-Encoding对应，告诉浏览器服务端采用什么压缩格式</td></tr><tr><td>Content-Language</td><td>描述了资源所用的自然语言</td></tr><tr><td>Content-length</td><td>指明实体正文的长度，用以字节方式存储的十进制数字来表示</td></tr><tr><td>Keep-Alive</td><td>保持连接的时间，如Keep-Alive:timeout:5,max=120</td></tr></tbody></table><h5 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h5><table><thead><tr><th>状态码</th><th>英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>302</td><td></td><td>临时跳转，跳转地址通过location指定</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr></tbody></table><h3 id="GET与POST区别"><a href="#GET与POST区别" class="headerlink" title="GET与POST区别"></a>GET与POST区别</h3><ul><li>Http报文层面：GET将请求信息放在URL，有长度限制，相对不安全。POST放报文体中，无长度限制，相对安全，但是也是明文，还是要依靠HTTPS。</li><li>数据库层面：GET符合幂等性和安全性，POST不符合。</li><li>其他层面：GET可以被缓存、被存储，而POST不行。</li></ul><h3 id="Cookie与Session区别"><a href="#Cookie与Session区别" class="headerlink" title="Cookie与Session区别"></a>Cookie与Session区别</h3><p><strong>HTTP是无状态的。</strong></p><p>Cookie：是由服务器发送给客户端的特殊信息。以文本的形式存放在客户端，通过响应头传输。客户端再次发送的时候会将cookie回发。服务端收到后，会解析cookie生成与客户端相对应的内容。</p><p>Session：服务器端的机制，在服务器上保存信息。解析客户端请求并操作session id,按需保存状态信息。两种实现方式：使用cookie或使用url回写。</p><p>Tomcat同时使用两种实现方式，如果客户端支持使用cookie的方式，则使用cookie。否则使用url回写的方式。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_HTTPS.png" alt="计算机网络_HTTPS.png"></p><h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><p>Security Sockets Layer，安全套接层。为网络通信提供安全及数据完整性的一种安全协议。对操作系统对外的API,SSL3.0后更名为TLS。采用身份验证和数据加密保证网络通信的安全和数据的完整性。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><h5 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h5><p>加密解密使用同一个密钥。</p><h5 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h5><p>加密使用的密钥和解密使用的密钥是不相同的。</p><h5 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h5><p>将任意长度的信息转换为固定长度的值，算法不可逆，比如md5算法。</p><h5 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h5><p>证明某个信息或者文件是某人发出或认同的。</p><h4 id="HTTPS数据传输流程"><a href="#HTTPS数据传输流程" class="headerlink" title="HTTPS数据传输流程"></a>HTTPS数据传输流程</h4><ol><li>浏览器将支持的加密算法信息发送给服务器</li><li>服务器选择一套浏览器支持的加密算法，已证书的形式回发浏览器</li><li>浏览器验证证书合法性，并结合证书公钥加密信息发送给浏览器</li><li>服务器使用私钥解密信息，验证哈希，加密响应信息回发浏览器</li><li>浏览器解密响应信息，并对消息进行验证，之后进行加密交互数据</li></ol><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>HTTPS需要CA申请证书，HTTP不需要</li><li>HTTPS密文传输，HTTP明文传输</li><li>HTTPS默认443，HTTP默认80</li><li>HTTPS=HTTP+加密+认证+完整性保护，较HTTP安全</li></ul><p>用户还有使用HTTP的，网站大多进行跳转。但在跳转过程中可能出现劫持。可以使用HSTS优化。</p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>本地中每个进程用PID进行唯一标识。</p><p>IP地址+协议+端口号标识网络中的进程。</p><p>Socket是对TCP/IP的抽象，是操作系统对外开放的接口。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_Socket.png" alt="计算机网络_Socket.png"></p><h3 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a>Socket通信流程</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_Socket%E9%80%9A%E4%BF%A1.png" alt="计算机网络_Socket通信.png"></p><p>以下是JAVA实现分别基于TCP和UDP的Socket</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//TCPClient.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建socket，并指定连接的是本机的端口号为65000的服务器socket</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">65000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取输出流</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取输入流</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将要传递给server的字符串参数转换成byte数组，并将数组写入到输出流中</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//buff主要用来读取输入的内容，存成byte数组，ch主要用来获取读取数组的长度</span>        ch <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将接收流的byte数组转换成字符串，这里是从服务端回发回来的字符串参数的长度</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不要忘记关闭输入输出流以及socket</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//TCPServer.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建socket,并将socket绑定到65000端口</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">65000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//死循环，使得socket一直等待并处理客户端发送过来的请求</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//监听65000端口，直到客户端返回连接信息后才返回</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取客户端的请求信息后，执行相关业务逻辑</span>            <span class="token keyword">new</span> <span class="token class-name">LengthCalculator</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//UDPClient.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 客户端发数据报给服务端</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 要发送给服务端的数据</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将IP地址封装成InetAddress对象</span>        <span class="token class-name">InetAddress</span> address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将要发送给服务端的数据封装成DatagramPacket对象 需要填写上ip地址与端口号</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span> address<span class="token punctuation">,</span>                <span class="token number">65001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送数据给服务端</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 客户端接受服务端发送过来的数据报</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 创建DatagramPacket对象用来存储服务端发送过来的数据</span>        <span class="token class-name">DatagramPacket</span> receivedPacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将接受到的数据存储到DatagramPacket对象中</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>receivedPacket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将服务器端发送过来的数据取出来并打印到控制台</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>receivedPacket<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                receivedPacket<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//UDPServer.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 服务端接受客户端发送的数据报</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">65001</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//监听的端口号</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存储从客户端接受到的内容</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> buff<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接受客户端发送过来的内容，并将内容封装进DatagramPacket对象中</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从DatagramPacket对象中获取到真正存储的数据</span>        <span class="token comment">//将数据从二进制转换成字符串形式</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将要发送给客户端的数据转换成二进制</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sendedContent <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 服务端给客户端发送数据报</span>        <span class="token comment">//从DatagramPacket对象中获取到数据的来源地址与端口号</span>        <span class="token class-name">DatagramPacket</span> packetToClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>sendedContent<span class="token punctuation">,</span>                sendedContent<span class="token punctuation">.</span>length<span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packetToClient<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送数据给客户端</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//LengthCalculator.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LengthCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment">//以socket为成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LengthCalculator</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//获取socket的输出流</span>            <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取socket的输入流</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//buff主要用来读取输入的内容，存成byte数组，ch主要用来获取读取数组的长度</span>            ch <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将接收流的byte数组转换成字符串，这里获取的内容是客户端发送过来的字符串参数</span>            <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//往输出流里写入获得的字符串的长度，回发给客户端</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不要忘记关闭输入输出流以及socket</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><h3 id="127-0-0-1-amp-0-0-0-0-0"><a href="#127-0-0-1-amp-0-0-0-0-0" class="headerlink" title="127.0.0.1&amp;0.0.0.0.0"></a>127.0.0.1&amp;0.0.0.0.0</h3><p>众所周知，$IP=<network-id>,<host-id>$。IP地址一共分为5位。</host-id></network-id></p><p>大致分类如下：</p><ol><li>A类地址：网络号占1个字节，网络号的第一位固定为0;</li><li>B类地址：网络号占2个字节，网络号的前两位固定为10；</li><li>C类地址：网络号占3个字节，网络号的前三位固定位110；</li><li>D类地址：前四位是1110，用于多播(multicast)，即一对多通信；</li><li>E类地址：前四位是1111，保留为以后使用。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_IP%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB.png" alt="计算机网络_IP地址分类.png"></p><p>其中，ABC三类地址为单播地址（unicast),用于一对一通信，是最常用的。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_IP%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86.jpg" alt="计算机网络_IP地址划分.jpg"></p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>命令参数：</p><ul><li>-a或–all 显示所有连线中的Socket。</li><li>-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</li><li>-c或–continuous 持续列出网络状态。</li><li>-C或–cache 显示路由器配置的快取信息。</li><li>-e或–extend 显示网络其他相关信息。</li><li>-F或–fib 显示FIB。</li><li>-g或–groups 显示多重广播功能群组组员名单。</li><li>-h或–help 在线帮助。</li><li>-i或–interfaces 显示网络界面信息表单。</li><li>-l或–listening 显示监控中的服务器的Socket。</li><li>-M或–masquerade 显示伪装的网络连线。</li><li>-n或–numeric 直接使用IP地址，而不通过域名服务器。</li><li>-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。</li><li>-o或–timers 显示计时器。</li><li>-p或–programs 显示正在使用Socket的程序识别码和程序名称。</li><li>-r或–route 显示Routing Table。</li><li>-s或–statistice 显示网络工作信息统计表。</li><li>-t或–tcp 显示TCP传输协议的连线状况。</li><li>-u或–udp 显示UDP传输协议的连线状况。</li><li>-v或–verbose 显示指令执行过程。</li><li>-V或–version 显示版本信息。</li><li>-w或–raw 显示RAW传输协议的连线状况。</li><li>-x或–unix 此参数的效果和指定”-A unix”参数相同。</li><li>–ip或–inet 此参数的效果和指定”-A inet”参数相同。</li></ul><p>ESTABLISHED 表示正在通信，TIME_WAIT 表示主动关闭，CLOSE_WAIT 表示被动关闭。</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>行匹配语句 awk ‘’ 只能用单引号。</p><p>log.txt文本内容如下：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">2 this is a test3 Are you like awkThis's a test10 There are orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 每行按空格或TAB分割，输出文本中的1、4项，每项之间用空格分开 $ awk '{print $1,$4}' log.txt --------------------------------------------- 2 a 3 like This's 10 orange,apple,mongo # 格式化输出 $ awk '{printf "%-8s %-10s\n",$1,$4}' log.txt --------------------------------------------- 2        a 3        like This's 10       orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-F &lt;可以指定标识符&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组成原理</title>
      <link href="/2021/01/05/ji-suan-ji-ji-chu/zu-cheng-yuan-li/"/>
      <url>/2021/01/05/ji-suan-ji-ji-chu/zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><h3 id="发展简史"><a href="#发展简史" class="headerlink" title="发展简史"></a>发展简史</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2.png" alt="组成原理_发展简史.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB.png" alt="组成原理_冯诺依曼体系.png"></p><p>冯洛伊曼瓶颈：CPU和存储器速率之间的问题无法调和。CPU经常空转等待数据传输。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB.png" alt="组成原理_现代计算机体系.png"></p><p>一条机器指令对应一个微程序，一个微程序对应一组微指令。</p><p>8bit=1Byte</p><p>硬盘商一般用10进位标记容量。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>$总线分类\begin{cases}片内总线 \ 系统总线 \end{cases}$</p><h4 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h4><p>高集成度芯片内部的信息传输线</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E7%89%87%E5%86%85%E6%80%BB%E7%BA%BF.png" alt="组成原理_片内总线.png"></p><h4 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h4><p>CPU、主内存、IO设备、各组件之间的信息传输线。</p><ul><li>数据总线：双向传输各个部件的数据信息，一般与CPU位数相同(32位,64位)，数据总线的位数(总线宽度)是数据总线的重要参数。</li><li>地址总线：地址总线位数=n，寻址范围：0~$2^n$。指定源数据或目的数据在内存中的地址。地址总线的位数与存储单元有关。</li><li>控制总线：用来发出各种控制信号的传输线，控制信号经由控制总线从一个组件发给另一个组件。控制总线可以监控不同组件之间的状态。(就绪/未就绪)</li></ul><p>总线仲裁是为了解决总线使用权的冲突问题。</p><p>总线的仲裁方法：</p><ul><li><p>链式查询</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E9%93%BE%E5%BC%8F%E6%9F%A5%E8%AF%A2.png" alt="组成原理_链式查询.png"></p><p>好处：电路复杂度低，仲裁方式简单</p><p>缺点：优先级低的设备难以获取总线使用权，对电路故障敏感。</p></li><li><p>计时器定时查询</p><ul><li>仲裁控制器对设备编号使用计数器累计计数</li><li>接收到仲裁信号后，往所有设备发出计数值</li><li>计数值与设备编号一致则获得总线使用权</li></ul></li><li><p>独立请求</p><ul><li>每个设备均有总线独立连接仲裁器</li><li>设备可单独想仲裁器发送请求和接收请求</li><li>当同时收到多个请求信号，仲裁器有权按优先级分配使用权</li></ul><p>好处：响应速度快，优先顺序可动态改变</p><p>缺点：设备连线多，总线控制复杂</p></li></ul><h4 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h4><pre class="mermaid">graph TB按存取方式分类--&gt;随机存储器RAM &amp; 串行存储器 &amp; 只读存储器ROM随机存储器RAM--&gt;随机读取 &amp; 与位置无关串行存储器--&gt;按顺序查找 &amp; 与位置有关只读存储器ROM--&gt;只读不写</pre><p>RAM通过电容存储数据，必须隔一段时间刷新一次。如果掉电，一段时间后将丢失所有数据。</p><h5 id="磁盘算法"><a href="#磁盘算法" class="headerlink" title="磁盘算法"></a>磁盘算法</h5><ul><li>先来先服务算法</li><li>最短寻道时间算法</li><li>扫描算法（电梯算法）：每次只往一个方向移动，到达一个方向需要服务的尽头再反方向移动。</li><li>循环扫描算法：区别于扫描算法在于扫描算法可以向两个方法移动，循环扫描算法只能一个方法。</li></ul><p>字：指存放在一个存储单元中的二进制代码组合</p><p>字块：存储在连续的存储单元中而被看作是一个单元的一组字</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86_%E5%AD%97%E5%92%8C%E5%AD%97%E5%9D%97.png" alt="组成原理_字和字块.png"></p><p>字的地址=前m位指定字块的地址+后b位指定字在字块中的地址</p><p>$高速缓存的命中率=\frac{访问Cache次数}{访问Cache次数+访问主存次数}$</p><p>$访问Cache-主存系统平均时间t_a=ht_c+(1-h)t_m,t_m:访问主存时间,t_c:访问缓存时间$</p><p>$高速缓存的访问效率e=\frac{t_c}{t_a}=\frac{t_c}{ht_c+(1-h)t_m}$</p><h5 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h5><ul><li>随机算法</li><li>先进先出算法(FIFO)</li><li>最不经常使用算法(LFU)</li><li>最近最少使用算法(LRU)</li></ul><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><h4 id="机器指令"><a href="#机器指令" class="headerlink" title="机器指令"></a>机器指令</h4><p>机器指令=操作码字段+地址码字段</p><p>操作码指令指明所要完成的操作，操作码的位数反映了机器的操作类型。</p><p>地址码给出操作数或者操作数的地址。</p><h5 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h5><h6 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h6><ul><li>顺序寻址</li><li>跳跃寻址</li></ul><h6 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h6><ul><li>立即寻址：指令直接获得操作数，无需访问存储器</li><li>直接寻址：直接给出操作数的地址</li><li>间接寻址：给出的是操作数的地址的地址</li></ul><h4 id="数值的表现形式"><a href="#数值的表现形式" class="headerlink" title="数值的表现形式"></a>数值的表现形式</h4><p>小数的十进制转二进制采用重复相乘法。将小数换成分数形式，乘上2,看是否可以取出1,能则取1,不能取0,一直累成2,直至最后变成1。最后逆序。</p><h5 id="原码表示法"><a href="#原码表示法" class="headerlink" title="原码表示法"></a>原码表示法</h5><ul><li>使用0表示正数，1表示负数</li><li>规定符号位位于数值第一位</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2021/01/05/ji-suan-ji-ji-chu/cao-zuo-xi-tong/"/>
      <url>/2021/01/05/ji-suan-ji-ji-chu/cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ol><li><p>并发</p><p> 并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p><p> 并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。</p><p> 操作系统通过引入进程和线程，使得程序能够并发运行。</p></li><li><p>共享</p><p> 系统中的资源可以被多个并发进程共同使用。两种方式：互斥共享(同步机制来实现临界资源的互斥访问)和同时共享。</p></li><li><p>虚拟</p><p> 将一个物理实体转换为多个逻辑实体。</p><p> 主要为时分复用(多个进程在同一处理器上并发执行)和空分复用(虚拟内存的页面置换)。</p></li><li><p>异步</p><p> 不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p></li></ol><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ol><li><p>进程管理</p><p> 进程控制、进程通信、进程同步、处理机调度、死锁处理等</p></li><li><p>内存管理</p><p> 内存分配、地址映射、内存保护和共享、虚拟内存等</p></li><li><p>文件管理</p><p> 存储空间的管理、文件读写管理和保护、目录管理等</p></li><li><p>设备管理</p><p> 完成IO请求，方便用户使用各种设备。</p><p> 主要包括缓冲管理、虚拟设备、设备分配、设备处理等</p></li></ol><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>如果一个进程在用户态需要使用内核态的功能，通过系统调用陷入内核态，由操作系统代为完成。</p><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><ul><li><p>外中断</p><p>  由CPU执行以外的事件引起。</p></li><li><p>异常</p><p>  由CPU执行指令的内部事件引起。</p></li><li><p>陷入</p><p>  在用户程序使用系统调用。</p></li></ul><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程是资源分配的基本单位，线程不拥有资源，只能访问隶属于进程的资源。</p><p>进程控制块(PCB)描述进程的基本信息与运行状态。创建进程和撤销进程都是对PCB的操作。</p><p>线程是独立调度的基本单位。同一进程中的线程切换不会引起进程切换。不同进程之间的线程切换会导致进程切换。</p><p>一个进程可以有多个线程，共享进程资源。</p><p>进程的系统开销远大于线程的系统开销。</p><p>线程之间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助IPC。</p><p>进程状态的切换中，主要有三种情况：就绪状态、运行状态、阻塞状态。只有就绪和运行之间可以相互切换（CPU时间片的切换），其他都是单向转换。</p><p>阻塞状态是缺少需要的资源由运行状态转换来的，但是其中的缺少的资源不包括CPU时间。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>调度算法的目标是保证吞吐量和周转时间(从提交到终止的时间)。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建记录</title>
      <link href="/2020/12/27/jing-yan-zong-jie/hexo-bo-ke-da-jian-ji-lu/"/>
      <url>/2020/12/27/jing-yan-zong-jie/hexo-bo-ke-da-jian-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>本文记录博客搭建的过程，以便以后进行查阅和分享经验。</p><h2 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h2><h3 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h3><p>Manjaro：<code>sudo pacman -S nodejs</code></p><p>Windows：下载安装一直下一步</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h5 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h5><p><code> npm install packageName</code>这个命令会将包安装在当前目录下<code>node_modules</code>目录内，可执行命令（如果有）安装在<code>node_modules/.bin</code>目录下。</p><p>作为系统级的全局安装使用 -g 选项:<code>npm -g install packageName</code>，默认情形下这个命令会将包安装至 <code>/usr/lib/node_modules/npm</code>，需要管理员权限。</p><h5 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h5><p>更新包只需要执行<code> npm update packageName</code>。</p><p>对于全局环境安装的包 ( -g )<code>npm update -g packageName</code>。</p><p>更新所有包，去掉包名将试图更新所有包：<code>npm update</code>。</p><p>添加 -g 标记更新全局环境安装的包：<code>npm update -g</code>。</p><h5 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h5><p>删除使用 -g 标记安装的包只须：<code>npm -g uninstall packageName</code>。</p><p>若删除个人用户目录下的包去掉标记执行：<code>npm uninstall packageName</code>。</p><h5 id="列出所有包"><a href="#列出所有包" class="headerlink" title="列出所有包"></a>列出所有包</h5><p>若要显示已安装的包的树形视图执行：<code>npm -g list</code>。</p><p>仅显示顶层树：<code>npm list --depth=0</code>。</p><p>要显示需要更新的过期软件包：<code>npm outdated</code>。</p><h5 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h5><p>安装npm-check(全局安装)：<code>npm install -g npm-check</code>。</p><p>npm全局更新包 (全局目录)：<code>npm-check -u -g</code>。</p><p>npm更新某个项目的包 (项目目录)：<code>npm-check -u</code>。</p><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hexo-site"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"5.3.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^5.3.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-deployer-git"</span><span class="token operator">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-filter-github-emojis"</span><span class="token operator">:</span> <span class="token string">"^3.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-filter-mermaid-diagrams"</span><span class="token operator">:</span> <span class="token string">"^1.0.5"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-archive"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-baidu-sitemap"</span><span class="token operator">:</span> <span class="token string">"^0.1.9"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-category"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-index"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-search"</span><span class="token operator">:</span> <span class="token string">"^2.4.1"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-sitemap"</span><span class="token operator">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-tag"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-permalink-pinyin"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-ejs"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-marked"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-stylus"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-server"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-wordcount"</span><span class="token operator">:</span> <span class="token string">"^6.0.1"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>Manjaro：<code>sudo pacman -S git</code></p><p>Windows：下载安装一直下一步</p><h5 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"$ ssh-keygen -t rsa -C "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将<code>id_rsa.pub</code>文件中的信息添加到Github-&gt;Account settings-&gt;SSH Keys页面。</p><p>如果想同时长传至coding,也是去coding添加上述信息。</p><p>测试是否成功使用<code>ssh -T git@github.com</code>。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>npm install -g hexo-cli </code>，安装Hexo主程序。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><code>hexo init &lt;博客文件夹名称&gt;</code>，创建博客所在的文件夹并生成最基本的框架文件。</p><p>进入该目录，使用<code>npm install</code>安装所需的node包。</p><p>在本地启动hexo：<code>hexo server</code>或<code>hexo s</code>。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客hexo n "我的博客" == hexo new "我的博客" #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="部署至Github"><a href="#部署至Github" class="headerlink" title="部署至Github"></a>部署至Github</h4><ol><li><p>创建一个公开项目，名称是自己用户名+.github.io。</p></li><li><p>选择项目的Settings,选择Github pages，点击Choose a theme选择一个主题。</p></li><li><p>使用网址<code>用户名.github.io</code>查看是否能正常打开。</p></li><li><p>安装node包<code>hexo-deployer-git</code>。</p></li><li><p>在博客根目录下的<code>_config.yml</code>中添加字段：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>&lt;用户名<span class="token punctuation">&gt;</span>/&lt;用户名<span class="token punctuation">&gt;</span>.github.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master      <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repository</span><span class="token punctuation">:</span> &lt;另选的项目地址<span class="token punctuation">&gt;</span>    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里注意，必须是master分支，Github page只能是master分支。</strong></p></li><li><p>使用<code>hexo d -g</code>将渲染好的网页上传至Github。此时就可以使用<code>&lt;用户名&gt;.github.io</code>进行访问了。</p></li></ol><h4 id="博客基本信息"><a href="#博客基本信息" class="headerlink" title="博客基本信息"></a>博客基本信息</h4><p>博客的基本信息存储在博客根目录下的<code>_config.yml</code>文件中。</p><h4 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h4><h4 id="文章排序自定义"><a href="#文章排序自定义" class="headerlink" title="文章排序自定义"></a>文章排序自定义</h4><p>hexo中默认是按照文章的创建时间显示，但是博客不是日记，好多步骤或者笔记需要进行更新记录，所以单纯的按照创建时间会导致自己较早创建但一直更新的笔记被放在最后。</p><p>hexo的<code>db.json</code>文件中包含了每篇博客的更新时间，字段是<code>db.json</code>，只需修改博客顶层文件夹中的<code>_config.yml</code>中的如下字段：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">index_generator</span><span class="token punctuation">:</span><span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token comment">#默认是-date 符号表示顺序还是逆序</span><span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>updated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主题选择与优化"><a href="#主题选择与优化" class="headerlink" title="主题选择与优化"></a>主题选择与优化</h2><p>我使用的主题是</p><h3 id="首页添加Github状态"><a href="#首页添加Github状态" class="headerlink" title="首页添加Github状态"></a>首页添加Github状态</h3><h3 id="可选插件"><a href="#可选插件" class="headerlink" title="可选插件"></a>可选插件</h3><h3 id="主题的个性化"><a href="#主题的个性化" class="headerlink" title="主题的个性化"></a>主题的个性化</h3><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>借助<code>Github Action</code>可以实现当我们在本地向Github提交代码的时候，自动创建并生成相应的静态网页代码，进而联动后面的<code>vercel</code>的部署任务。</p><p>目录结构如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.github└── workflows    └── deploy.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建Action所需的环境变量"><a href="#创建Action所需的环境变量" class="headerlink" title="创建Action所需的环境变量"></a>创建Action所需的环境变量</h3><p>创建Action提交代码的秘钥。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -f hexo-deploy-key -C "&lt;博客网址&gt;" #仅作为区分<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令会在当前文件夹下生成名为<code>hexo-deploy-key</code>的私钥和<code>hexo-deploy-key.pub</code>的公钥。</p><p>将公钥设置进对应仓库的<code>setting-&gt;Deploy keys</code>，同时赋予写权限。</p><p>将私钥设置进对应仓库的<code>setting-&gt;Secrets-&gt;Actions</code>，对应的key名设置为<code>DEPLOY_KEY</code>，value就是私钥。</p><h3 id="编写Action脚本"><a href="#编写Action脚本" class="headerlink" title="编写Action脚本"></a>编写Action脚本</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Generate And Deploy<span class="token comment"># 只监听 source 分支的改动</span><span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> src<span class="token comment"># 自定义环境变量</span><span class="token key atrule">env</span><span class="token punctuation">:</span>  <span class="token key atrule">GIT_USER</span><span class="token punctuation">:</span> weiyouwozuiku  <span class="token key atrule">GIT_EMAIL</span><span class="token punctuation">:</span> 19681022+weiyouwozuiku@users.noreply.github.com   <span class="token key atrule">DEPLOY_REPO</span><span class="token punctuation">:</span> weiyouwozuiku/weiyouwozuiku.github.io  <span class="token key atrule">DEPLOY_BRANCH</span><span class="token punctuation">:</span> master  <span class="token key atrule">NODE_VERSION</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">Hexo-Generate-And-Deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout deploy branch        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">repository</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.DEPLOY_REPO <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.DEPLOY_BRANCH <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> .deploy_git          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Restore file modification time        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          find source/_posts -name '*.md' | while read file; do touch -d "$(git log -1 --format="@%ct" "$file")" "$file"; done</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Node.js        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.NODE_VERSION <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache node modules        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v2        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">cache-name</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>node<span class="token punctuation">-</span>modules        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token comment"># npm cache files are stored in `~/.npm` on Linux/macOS</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> ~/node_modules          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.os <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>build<span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> env.cache<span class="token punctuation">-</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> hashFiles('<span class="token important">**/package-lock.json')</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">            ${{ runner.os }}-build-${{ env.cache-name }}-            ${{ runner.os }}-build-            ${{ runner.os }}-</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up environment        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.DEPLOY_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          sudo timedatectl set-timezone "Asia/Shanghai"          mkdir -p ~/.ssh          echo "$DEPLOY_KEY" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install -g hexo-cli          npm install</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          hexo deploy --generate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Github-Action过程中的一些坑"><a href="#Github-Action过程中的一些坑" class="headerlink" title="Github Action过程中的一些坑"></a>Github Action过程中的一些坑</h3><p>直接使用<code>Github Action</code>部署代码的时候，Github会在容器中拉下该仓库的代码。此时文件的创建时间和修改时间都是拉取时的时间。这会导致按照<code>updated</code>字段排序的博客在读取不到<code>.md</code>文件中的<code>updated</code>字段从而读取文件的修改时间变成统一的代码拉取时间。博客的文章展示就会变得混乱无章。</p><p>因此，需要在<code>Github Action</code>中单独进行一步操作，即修改文件的修改时间。</p><p>代码实现在上一节yaml文件的第35-37行。</p><p>实际上，<code>clone</code> 下来的文件的时间还是克隆时的时间，然后通过上面的命令，它将 <code>clone</code> 下来的文件的时间改成了该文件最近一次变动的推送时间（也即文件最后一次修改的 <code>push</code> 时间）。</p><blockquote><p><strong>注</strong>：如果<code>github actions</code>中使用<code>actions/checkout@v2</code>，请设定它的参数<code>fetch-depth: 0</code>，因为<code>0</code>表示获取所有分支和标签的所有历史记录。默认值为<code>1</code></p></blockquote><p>小知识：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取 git 仓库中所有文件的最新修改时间git ls-tree -r --name-only HEAD | while read filename; do  echo "$(git log -1 --format="%ad" -- $filename) $filename"done# 获取 git 仓库中所有文件的最初创建时间git ls-tree -r --name-only HEAD | while read filename; doecho "$(git log --format="%ad" -- $filename | tail -1) $filename"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问加速"><a href="#访问加速" class="headerlink" title="访问加速"></a>访问加速</h2><h2 id="分支存储源码"><a href="#分支存储源码" class="headerlink" title="分支存储源码"></a>分支存储源码</h2><p>首先在Github的仓库中创建一个新的分支，因为Github Page默认是master分支，所以随便创建一个分支名即可。</p><p>在Hexo博客的顶层文件夹中执行如下命令：</p><ol><li><p>克隆Github中的当前项目，将克隆下载的文件夹中的.git文件夹移动到hexo博客的顶层目录。</p></li><li><p>编写.gitignore：</p><pre class="line-numbers language-wiki" data-language="wiki"><code class="language-wiki">.DS_StoreThumbs.dbdb.json<span class="token punctuation">*</span>.lognode_modules/public/.deploy*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建本地分支并切换到该分支：<code>git checkout -b 分支名</code></p></li><li><p>添加文件：<code>git add .</code></p></li><li><p>添加注释信息：<code>git commit -m "hexo src update"</code></p></li><li><p>提交本地代码：<code>git push --set-upstream origin src</code></p></li><li><p>以后的上传代码则为：<code>git add . &amp;&amp; git commit -m "hexo src update" &amp;&amp; git push origin src &amp;&amp; hexo d -g</code></p></li></ol><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p>站点地图即 sitemap，是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在<code>_config.yml</code>中添加如下字段：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 自动生成sitemapsitemap<span class="token operator">:</span>  path<span class="token operator">:</span> sitemap.xmlbaidusitemap<span class="token operator">:</span>  path<span class="token operator">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>执行<code>hexo g</code>。该命令会在public目录中生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>，这是生成的站点地图，里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p><ul><li>sitemap.xml — 用来提交给 Google</li><li>baidusitemap.xml — 用来提交给Baidu</li></ul><h3 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h3><ul><li>注册并登录百度站长平台：<a href="https://ziyuan.baidu.com/">https://ziyuan.baidu.com/</a></li><li>验证网站所有权，有三种方式：文件验证、html标签、cname解析验证。推荐使用cname，感觉是最方便的。</li><li>添加sitemap</li></ul><h3 id="Google站长平台"><a href="#Google站长平台" class="headerlink" title="Google站长平台"></a>Google站长平台</h3><ul><li>注册并登录Google站长平台：<a href="https://www.google.com/webmasters/verification/home">https://www.google.com/webmasters/verification/home</a></li><li>验证网站所有权，还是采用cname。默认是txt,需要选择备用方案。</li><li>添加sitemap</li></ul><p>成功截图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95_Google%E6%94%B6%E5%BD%95%E6%88%90%E5%8A%9F.png" alt="Hexo博客搭建记录_Google收录成功.png"></p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言网关开发</title>
      <link href="/2020/12/18/cheng-xu-she-ji/go-yu-yan-wang-guan-kai-fa/"/>
      <url>/2020/12/18/cheng-xu-she-ji/go-yu-yan-wang-guan-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="协议模型"><a href="#协议模型" class="headerlink" title="协议模型"></a>协议模型</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE.png" alt="OSI七层网络协议.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E7%BB%8F%E5%85%B8%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt="经典协议与数据包.png"></p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP的三次握手最主要目的是保证连接是双工的，可靠更多的是通过重传机制来保证。因为连接是全双工的，双方必须都收到对方的FIN包及确认才可关闭。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%9E%E6%8E%A5.png" alt="三次握手连接.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E5%9B%9B%E6%AC%A1%E5%9B%9E%E6%94%B6%E5%85%B3%E9%97%AD.png" alt="四次回收关闭.png"></p><p>MSL：Maximum Segment Lifetime,30秒到1分钟。</p><p>TIME-WAIT等待2MSL是保证TCP协议的全双工连接能够可靠关闭。保证这次连接的重复数据段从网络中消失。</p><p>大量出现close_wait的原因：</p><ol><li>一般出现在被动关闭方</li><li>并发请求太多导致</li><li>被动关闭方未及时释放端口资源导致</li></ol><h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><p>由于通讯双方，网速不同。通讯方任一方发送过快都会导致对方消息处理不过来，所以就需要把数据放在缓冲区中。如果缓冲区满了，发送方还在发送，那接收方只能把数据包丢弃。因此需要控制发送速率。</p><p>缓冲区大小称之为接收端口，用变量win表示。如果win=0，则发送方停止发送。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.png" alt="TCP流量控制.png"></p><h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>拥塞控制是调节网络的负载。接收方网络资源繁忙，因未及时响应ACK导致发送方重传大量数据，这样将会导致网络更加拥堵。<strong>拥塞控制是动态调整win大小，不知是依赖缓冲区大小确定窗口大小</strong>。</p><h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E6%85%A2%E5%BC%80%E5%A7%8B%E4%B8%8E%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.png" alt="慢开始与拥塞避免.png"></p><h4 id="快速重传和快速恢复"><a href="#快速重传和快速恢复" class="headerlink" title="快速重传和快速恢复"></a>快速重传和快速恢复</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E8%AF%AD%E8%A8%80%E7%BD%91%E5%85%B3%E5%BC%80%E5%8F%91/%E5%BF%AB%E9%87%8D%E4%BC%A0%E5%92%8C%E5%BF%AB%E6%81%A2%E5%A4%8D.png" alt="快重传和快恢复.png"></p><h3 id="粘包和拆包"><a href="#粘包和拆包" class="headerlink" title="粘包和拆包"></a>粘包和拆包</h3><p>发生的情况：</p><ul><li>应用程序写入的数据大于套接字缓冲区大小，这将会发生拆包。</li><li>应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包。</li><li>进行MSS（最大报文长度）大小的TCP分段，当TCP报文长度-TCP头部长度&gt;MSS的时候将会发生拆包。</li><li>接收方法不及时读取套接字缓冲区数据，这将发生粘包。</li></ul><h3 id="HTTP创建过程"><a href="#HTTP创建过程" class="headerlink" title="HTTP创建过程"></a>HTTP创建过程</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>主要结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ServeMux <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu    sync<span class="token punctuation">.</span>RWMutexm     <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>muxEntryes    <span class="token punctuation">[</span><span class="token punctuation">]</span>muxEntry <span class="token comment">// slice of entries sorted from longest to shortest.</span>hosts <span class="token builtin">bool</span>       <span class="token comment">// whether any patterns contain hostnames</span><span class="token punctuation">}</span><span class="token keyword">type</span> muxEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span>h       Handlerpattern <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤：</p><ol><li>创建路由器 http.NewServeMux</li><li>设置路由规则 http.HandleFunc-&gt;http.Handle</li><li>创建服务器 http.Server</li><li>监听端口并提供服务 http.Server.ListenAndServe-&gt;http.server.Serve-&gt;http.Accept()-&gt;http.newConn-&gt;go c.serve-&gt;mux.ServeHTTP0&gt;mux.Handler(r)-&gt;mux.handler(r.host,r.URL.Path)-&gt;mux.match(path)-&gt;v,ok:=mux.m[path]</li></ol><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>主要结构体：<br>http.Client-&gt;Timeout &amp;&amp; Transport<br>type RoundTripper interface</p><p>步骤：</p><ol><li>创建连接池 http.Transport</li><li>创建客户端 http.Client</li><li>请求数据 func(c *Client) Get(url string)-&gt;c.DO(req)-&gt;c.do(req)-&gt;c.send(req,deadline)-&gt;send(req,c.transport(),deadline)-&gt;resq,err=rt.RoundTrip(req)&amp;&amp;func(t *Transport)roundTrip(req *Request)</li><li>读取数据</li></ol><h5 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Transport <span class="token keyword">struct</span> <span class="token punctuation">{</span>idleMu       sync<span class="token punctuation">.</span>MutexcloseIdle    <span class="token builtin">bool</span>                                <span class="token comment">// user has requested to close all idle conns</span>idleConn     <span class="token keyword">map</span><span class="token punctuation">[</span>connectMethodKey<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>persistConn <span class="token comment">// most recently used at end</span>idleConnWait <span class="token keyword">map</span><span class="token punctuation">[</span>connectMethodKey<span class="token punctuation">]</span>wantConnQueue  <span class="token comment">// waiting getConns</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">type</span> connectMethodKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>proxy<span class="token punctuation">,</span> scheme<span class="token punctuation">,</span> addr <span class="token builtin">string</span>onlyH1              <span class="token builtin">bool</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="persistConn"><a href="#persistConn" class="headerlink" title="persistConn"></a>persistConn</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> persistConn <span class="token keyword">struct</span> <span class="token punctuation">{</span>br        <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader       <span class="token comment">// from conn</span>bw        <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Writer       <span class="token comment">// to conn</span>reqch     <span class="token keyword">chan</span> requestAndChan <span class="token comment">// written by roundTrip; read by readLoop</span>writech   <span class="token keyword">chan</span> writeRequest   <span class="token comment">// written by roundTrip; read by writeLoop</span><span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RoundTrip流程"><a href="#RoundTrip流程" class="headerlink" title="RoundTrip流程"></a>RoundTrip流程</h5><p>func(t *Transport)roundTrip(req * Request)-&gt;pconn, err := t.getConn(treq, cm)</p><ol><li><h3 id="UDP创建过程"><a href="#UDP创建过程" class="headerlink" title="UDP创建过程"></a>UDP创建过程</h3></li></ol><h4 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h4><p>步骤：</p><ol><li>监听服务器</li><li>循环读取消息（不创建socket）</li><li>回复数据</li></ol><h4 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h4><p>步骤：</p><ol><li>连接服务器</li><li>发送数据</li><li>接收数据</li></ol><h3 id="TCP创建过程"><a href="#TCP创建过程" class="headerlink" title="TCP创建过程"></a>TCP创建过程</h3><h4 id="Server-2"><a href="#Server-2" class="headerlink" title="Server"></a>Server</h4><p>步骤：</p><ol><li>监听端口</li><li>接受请求，创建套接字连接</li><li>创建独立协程</li><li>数据解码</li></ol><h4 id="Client-2"><a href="#Client-2" class="headerlink" title="Client"></a>Client</h4><p>步骤：</p><ol><li>连接服务器</li><li>将信息写入套接字，数据编码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10常用软件记录</title>
      <link href="/2020/11/21/jing-yan-zong-jie/windows10-chang-yong-ruan-jian-ji-lu/"/>
      <url>/2020/11/21/jing-yan-zong-jie/windows10-chang-yong-ruan-jian-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>记录Windows10上常用的软件</p><p>TrafficMonitor：监控电脑当前资源使用率</p><p>IDM：多线程下载工具</p><p>Clash：代理工具</p><p>百度网盘：数据存储工具</p><p>Listary：查找文件助手，软件启动器</p><p>Telegram Desktop、Wechat、Tim：聊天工具</p><p>Wallpaper Engine：动态壁纸</p><p>CCleaner：清理工具</p><p>QQ Music、网易云音乐：音乐工具</p><p>Logitech G hub：罗技鼠标应用</p><p>Teamviewer、向日葵：远程控制软件</p><p>PowerToys：微软工具集</p><p>Flameshot：截图工具</p><p>AIDA64 Extreme：实时获取电脑数据</p><p>RaiDrive：网盘映射工具</p><p>Picgo：图片上传工具</p><p>QuickLook：预览工具</p><p>Typora：markdown实时渲染工具</p><p>Idea、Clion、Pycharm、WebStorm、DataGrip、GoLand：Jb家IDE</p><p>Visual Studio 2019、Visual Studio Code：微软家开发工具</p><p>Xmind：思维导图工具</p><p>PotPlayer：视频播放工具</p><p>Adobe Photoshop、Adobe Acrobat DC：Adobe工具集</p><p>Keil uVision5：单片机IDE</p><p>Altium Designer：PCB设计软件</p><p>Arduino：Arduino开发工具</p><p>立创EDA：PCB打板</p><p>STM32CubeMX：STM32开发工具</p><p>PDMan：数据库设计工具</p><p>Postman：API测试工具</p><p>Anaconda：Python科学工具包</p><p>Navicat Premium：多种数据库可视化工具</p><p>Termius：跨平台SSH、SFTP工具</p><p>Wireshark：网络抓包工具</p><p>VooV Meeting：腾讯会议国际版</p><p>Easy Connect：校园VPN</p><p>NoteExpress：论文引用助手</p><p>Frizting：电路连线示意图绘制工具</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Esp32指纹蓝牙键盘开发</title>
      <link href="/2020/11/18/qian-ru-shi/esp32-zhi-wen-lan-ya-jian-pan-kai-fa/"/>
      <url>/2020/11/18/qian-ru-shi/esp32-zhi-wen-lan-ya-jian-pan-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>因为Linux系统每次开机或者执行一些需要权限的命令时要输入密码，但是本身输入密码这件事就不太安全。综合现有情况，windows可以很方便的使用人脸识别，但是linux上指纹都不方便，也怕破坏启动配置。于是决定使用外部硬件的方式实现指纹识别后自动输入密码的功能。相对安全了点。</p><p><a href="https://github.com/weiyouwozuiku/ESP32_BluetoothKeyboard"><strong>项目地址</strong></a></p><h3 id="功能逻辑"><a href="#功能逻辑" class="headerlink" title="功能逻辑"></a>功能逻辑</h3><ol><li>通过蓝牙连接ESP32</li><li>通过AS608校验指纹</li><li>指纹校验通过则模拟成蓝牙键盘发送密码</li></ol><h3 id="硬件方面"><a href="#硬件方面" class="headerlink" title="硬件方面"></a>硬件方面</h3><ul><li>采用的ESP32作为主控，其本身自带WIFI和蓝牙，非常便于之后的功能改善。</li><li>AS608作为指纹传感器，负责指纹的录入和校验。</li><li>OLED SSD1306作为屏幕进行必要的显示，方便了解处理进度。</li></ul><p>ESP32的管脚图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_IO.png" alt="ESP32指纹蓝牙键盘开发_IO.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_IO2.png" alt="ESP32指纹蓝牙键盘开发_IO2.png"></p><p>ESP32原理图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_%E5%8E%9F%E7%90%86%E5%9B%BE1.png" alt="ESP32指纹蓝牙键盘开发_原理图1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_%E5%8E%9F%E7%90%86%E5%9B%BE2.png" alt="ESP32指纹蓝牙键盘开发_原理图2.png"></p><p>IDE图方便选择的是Arduino的环境，在板子管理处添加如下字段，添加Esp32板子信息：</p><p><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code>。</p><p>选择开发版<code>ESP32 Dev Module</code>。</p><p>安装库：<code>ESP8266 and ESP32 OLED driver for SSD1306 displays</code>和<code>Adafruit Fingerprint Senser Library</code>。</p><p>安装第三方库：从<code>https://github.com/T-vK/ESP32-BLE-Keyboard</code>下载并添加。</p><h3 id="电路连接"><a href="#电路连接" class="headerlink" title="电路连接"></a>电路连接</h3><p>OLED：</p><ul><li>VCC-&gt;3.3V</li><li>GND-&gt;GND</li><li>SCL-&gt;接D22</li><li>SDA-&gt;D21</li></ul><p>AS608:</p><ul><li>VCC-&gt;3.3V(5V会烧坏元件)</li><li>GND-&gt;GND</li><li>TX-&gt;RX2</li><li>RX-&gt;TX2</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_%E8%BF%9E%E7%BA%BF%E5%9B%BE.png" alt="ESP32指纹蓝牙键盘开发_连线图.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="指纹注册代码"><a href="#指纹注册代码" class="headerlink" title="指纹注册代码"></a>指纹注册代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_Fingerprint.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mySerial</span> <span class="token expression">Serial2 </span></span>Adafruit_Fingerprint finger <span class="token operator">=</span> <span class="token function">Adafruit_Fingerprint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mySerial<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">uint8_t</span> id<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n\nAdafruit Fingerprint sensor enrollment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set the data rate for the sensor serial port</span>  finger<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">57600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>finger<span class="token punctuation">.</span><span class="token function">verifyPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found fingerprint sensor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Did not find fingerprint sensor :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Reading sensor parameters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  finger<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Status: 0x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>status_reg<span class="token punctuation">,</span> HEX<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Sys ID: 0x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>system_id<span class="token punctuation">,</span> HEX<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Capacity: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Security level: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>security_level<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Device address: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>device_addr<span class="token punctuation">,</span> HEX<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Packet len: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>packet_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">F</span><span class="token punctuation">(</span><span class="token string">"Baud rate: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>baud_rate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">uint8_t</span> <span class="token function">readnumber</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">uint8_t</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// run over and over again</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to enroll a fingerprint!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please type in the ID # (from 1 to 127) you want to save this finger as..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  id <span class="token operator">=</span> <span class="token function">readnumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ID #0 not allowed, try again!</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Enrolling ID #"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>  <span class="token function">getFingerprintEnroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">uint8_t</span> <span class="token function">getFingerprintEnroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for valid finger to enroll as #"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image taken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_NOFINGER<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEFAIL<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Imaging error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// OK success!</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">image2Tz</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image converted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEMESS<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image too messy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_FEATUREFAIL<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not find fingerprint features"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_INVALIDIMAGE<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not find fingerprint features"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Remove finger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> FINGERPRINT_NOFINGER<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Place same finger again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image taken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_NOFINGER<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEFAIL<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Imaging error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// OK success!</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">image2Tz</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image converted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEMESS<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image too messy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_FEATUREFAIL<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not find fingerprint features"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_INVALIDIMAGE<span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not find fingerprint features"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// OK converted!</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Creating model for #"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">createModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Prints matched!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_PACKETRECIEVEERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_ENROLLMISMATCH<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fingerprints did not match"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ID "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">storeModel</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stored!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_PACKETRECIEVEERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_BADLOCATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not store in that location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_FLASHERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error writing to flash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除指纹代码"><a href="#删除指纹代码" class="headerlink" title="删除指纹代码"></a>删除指纹代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mySerial</span> <span class="token expression">Serial2</span></span>Adafruit_Fingerprint finger <span class="token operator">=</span> <span class="token function">Adafruit_Fingerprint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mySerial<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// For Yun/Leo/Micro/Zero/...</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n\nDelete Finger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set the data rate for the sensor serial port</span>  finger<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">57600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>finger<span class="token punctuation">.</span><span class="token function">verifyPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found fingerprint sensor!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Did not find fingerprint sensor :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">uint8_t</span> <span class="token function">readnumber</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">uint8_t</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment">// run over and over again</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please type in the ID # (from 1 to 127) you want to delete..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">uint8_t</span> id <span class="token operator">=</span> <span class="token function">readnumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ID #0 not allowed, try again!</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Deleting ID #"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">deleteFingerprint</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">uint8_t</span> <span class="token function">deleteFingerprint</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">uint8_t</span> p <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">deleteModel</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deleted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_PACKETRECIEVEERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Communication error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_BADLOCATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Could not delete in that location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_FLASHERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error writing to flash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Unknown error: 0x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> HEX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用代码"><a href="#使用代码" class="headerlink" title="使用代码"></a>使用代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"SSD1306Wire.h"</span>        <span class="token comment">// legacy: #include "SSD1306.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span>     </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;BleKeyboard.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_Fingerprint.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mySerial</span> <span class="token expression">Serial2 </span></span>BleKeyboard bleKeyboard<span class="token punctuation">;</span>SSD1306Wire <span class="token function">display</span><span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Adafruit_Fingerprint finger <span class="token operator">=</span> <span class="token function">Adafruit_Fingerprint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mySerial<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ESP32上的蓝色指示灯，GPIO2控制</span><span class="token keyword">const</span> <span class="token keyword">int</span> led<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>TEXT_ALIGN_LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>ArialMT_Plain_16<span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">drawStringMaxWidth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span>      <span class="token string">"Weclome to use King's fingerprint bluetooth keyboard!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">displayMeg</span><span class="token punctuation">(</span>String meg<span class="token punctuation">,</span><span class="token keyword">int</span> showTime<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawStringMaxWidth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span>meg<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>showTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">displayMeg3line</span><span class="token punctuation">(</span>String meg1<span class="token punctuation">,</span>String meg2<span class="token punctuation">,</span>String meg3<span class="token punctuation">,</span><span class="token keyword">int</span> showTime<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>meg1<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span>meg2<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>meg3<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span>showTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">connectFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>finger<span class="token punctuation">.</span><span class="token function">verifyPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">displayMeg</span><span class="token punctuation">(</span><span class="token string">"Found fingerprint sensor! :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Serial.println("Did't find fingerprint sensor :(");</span>    display<span class="token punctuation">.</span><span class="token function">drawStringMaxWidth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">"Did't find fingerprint sensor :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//Serial.println("waiting for fingerprint sensor...");</span>      display<span class="token punctuation">.</span><span class="token function">drawStringMaxWidth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token string">"Waiting for fingerprint sensor..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">displayMeg</span><span class="token punctuation">(</span><span class="token string">"Waiting for valid finger..."</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  finger<span class="token punctuation">.</span><span class="token function">getTemplateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>finger<span class="token punctuation">.</span>templateCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">displayMeg</span><span class="token punctuation">(</span><span class="token string">"Sensor doesn't contain any fingerprint data. Please run the 'enroll'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">displayMeg</span><span class="token punctuation">(</span><span class="token string">"Sensor contains templates!   ._."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sendPassword</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span>HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> stringId<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">itoa</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>stringId<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"Fingerprint id :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span>stringId<span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>bleKeyboard<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      bleKeyboard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义密码</span>      bleKeyboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>KEY_RETURN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">"Key sended by BT!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span>LOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">uint8_t</span> <span class="token function">getFingerprintID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">uint8_t</span> p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      <span class="token comment">//Serial.println("Image taken");</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_NOFINGER<span class="token operator">:</span>      <span class="token comment">//Serial.println("No finger detected");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      <span class="token comment">//Serial.println("Communication error");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEFAIL<span class="token operator">:</span>      <span class="token comment">//Serial.println("Imaging error");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token comment">//Serial.println("Unknown error");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// OK success!</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">image2Tz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> FINGERPRINT_OK<span class="token operator">:</span>      <span class="token comment">//Serial.println("Image converted");</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_IMAGEMESS<span class="token operator">:</span>      <span class="token comment">//Serial.println("Image too messy");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_PACKETRECIEVEERR<span class="token operator">:</span>      <span class="token comment">//Serial.println("Communication error");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_FEATUREFAIL<span class="token operator">:</span>      <span class="token comment">//Serial.println("Could not find fingerprint features");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">case</span> FINGERPRINT_INVALIDIMAGE<span class="token operator">:</span>      <span class="token comment">//Serial.println("Could not find fingerprint features");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token comment">//Serial.println("Unknown error");</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// OK converted!</span>  p <span class="token operator">=</span> finger<span class="token punctuation">.</span><span class="token function">fingerSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//Serial.println("Found a print match!");</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_PACKETRECIEVEERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//Serial.println("Communication error");</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> FINGERPRINT_NOTFOUND<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//Serial.println("Did not find a match");</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">//Serial.println("Unknown error");</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// found a match!</span>  <span class="token comment">//Serial.print("Found ID #"); Serial.print(finger.fingerID);</span>  <span class="token comment">//Serial.print(" with confidence of "); Serial.println(finger.confidence);</span>  <span class="token function">sendPassword</span><span class="token punctuation">(</span>finger<span class="token punctuation">.</span>fingerID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> finger<span class="token punctuation">.</span>fingerID<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">checkBlueTooth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  String bluetoothStatue<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bleKeyboard<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    bluetoothStatue<span class="token operator">=</span><span class="token string">"BT connected!"</span><span class="token punctuation">;</span>    <span class="token function">displayMeg3line</span><span class="token punctuation">(</span>bluetoothStatue<span class="token punctuation">,</span><span class="token string">"Waiting your fing-"</span><span class="token punctuation">,</span><span class="token string">"er,King!"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    bluetoothStatue<span class="token operator">=</span><span class="token string">"BT unconnected!"</span><span class="token punctuation">;</span>    <span class="token function">displayMeg3line</span><span class="token punctuation">(</span>bluetoothStatue<span class="token punctuation">,</span><span class="token string">"Please restart or "</span><span class="token punctuation">,</span><span class="token string">"connect!"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//Serial.begin(115200);</span>  <span class="token comment">//Serial.println("Weclome to use King's fingerprint bluetooth keyboard!");</span>  <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">flipScreenVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">displayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bleKeyboard<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  finger<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">57600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">connectFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  displayMeg("Waiting your finger,king!");</span>  <span class="token function">checkBlueTooth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getFingerprintID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要修改默认的蓝牙名称需要在默认<code>C:\Users\&lt;用户名&gt;\Documents\Arduino\libraries\ESP32-BLE-Keyboard</code>的<code>BleKeyboard.h</code>的第101行进行修改。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在开发过程中，当OLED显示屏没有在和ESP32同时上电，可能导致OLED屏幕无法显示。但是在电脑端未出现此问题。同时采用ESP32的电源进行供电就没有此问题。</p><h3 id="可选升级"><a href="#可选升级" class="headerlink" title="可选升级"></a>可选升级</h3><h4 id="通过树莓派控制供电"><a href="#通过树莓派控制供电" class="headerlink" title="通过树莓派控制供电"></a>通过树莓派控制供电</h4><p>USB 接口的供电并不是通过 GPIO 直接控制的，而是通过 USB 集线器 LAN9514 控制的。CPU 可以通过设置集线器的 PORT_POWER 选项完成 USB 供电电路的开关。</p><p>控制 USB 供电的电路出现在 Raspberry Pi Model B+ 之后的版本。原版的 Raspberry Pi Model B 的 USB 供电电路直接与 5V 相连，不受控制。</p><p>-P 参数用于指定要控制的端口，1 为集成网卡，2 为 4 个 USB 口。网卡的供电可以独立控制，所以开关 USB 口的供电并不会导致 ssh 断开。</p><p>下载并编译 <a href="https://github.com/codazoda/hub-ctrl.c">hub-ctrl.c</a>（这个程序依赖于 libusb，编译时请带上参数 -lusb）。</p><p>调用如下命令控制USB的供电：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">//查看设备lsusb//USB供电sudo /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 1//USB不供电sudo /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置定时任务：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo crontab -e//命令如下//每天7点30供电，21点40停止供电30 7 * * * /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 040 21 * * * /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加触摸传感器"><a href="#添加触摸传感器" class="headerlink" title="添加触摸传感器"></a>添加触摸传感器</h4><p>为了避免长时间供电损坏引脚以及避免烧屏，采用传感器触发开启指纹。</p><p>添加触摸传感器，其只有三个引脚VCC、GND、Sig。</p><p>通过Respeaker上的Grove接口预留的GPIO12采集其信号。当检测到触摸传感器被触摸后返回的高电平信号，树莓派给USB口供电，启动指纹蓝牙键盘。使用树莓派的$I^2C$连接SSD1306的OLED屏幕显示树莓派当前状态，并将每次的log信息保存在项目文件夹中。</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> board <span class="token keyword">import</span> SCL<span class="token punctuation">,</span> SDA<span class="token keyword">import</span> busio<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token keyword">import</span> adafruit_ssd1306<span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> osTouch <span class="token operator">=</span> <span class="token number">12</span>GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>Touch<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span class="token comment"># Create the I2C interface.</span>i2c <span class="token operator">=</span> busio<span class="token punctuation">.</span>I2C<span class="token punctuation">(</span>SCL<span class="token punctuation">,</span> SDA<span class="token punctuation">)</span>disp <span class="token operator">=</span> adafruit_ssd1306<span class="token punctuation">.</span>SSD1306_I2C<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> i2c<span class="token punctuation">)</span>disp<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>disp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>width <span class="token operator">=</span> disp<span class="token punctuation">.</span>widthheight <span class="token operator">=</span> disp<span class="token punctuation">.</span>heightimage <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>image<span class="token punctuation">)</span>draw<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> outline<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>padding <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>top <span class="token operator">=</span> paddingbottom <span class="token operator">=</span> height <span class="token operator">-</span> padding<span class="token comment"># Move left to right keeping track of the current x position for drawing shapes.</span>x <span class="token operator">=</span> <span class="token number">0</span>font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>    <span class="token string">'/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">displayInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    draw<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> outline<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string">"hostname -I | cut -d' ' -f1"</span>    IP <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string">"top -bn1 | grep load | awk '{printf \"CPU Load: %.2f\", $(NF-2)}'"</span>    CPU <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string">"free -m | awk 'NR==2{printf \"Mem:%s/%s %.2f%%\", $3,$2,$3*100/$2 }'"</span>    MemUsage <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string">'df -h | awk \'$NF=="/"{printf "Disk:%d/%d GB  %s", $3,$2,$5}\''</span>    Disk <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token comment"># Write four lines of text.</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"IP: "</span> <span class="token operator">+</span> IP<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CPU<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MemUsage<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Disk<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token comment"># Display image.</span>    disp<span class="token punctuation">.</span>image<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    disp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logToFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token operator">*</span>words<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">checkTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info <span class="token operator">=</span> GPIO<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>Touch<span class="token punctuation">)</span>    <span class="token comment"># print(info)</span>    <span class="token keyword">if</span> info <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        logToFile<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>            <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        logToFile<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>        logToFile<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"FingerPrint Start!"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 1"</span><span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> outline<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> top <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"FingerPrint Start!"</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>        disp<span class="token punctuation">.</span>image<span class="token punctuation">(</span>image<span class="token punctuation">)</span>        disp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>        logToFile<span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"FingerPrint Stop!\n"</span><span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">*</span><span class="token number">30</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 0"</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>filePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>pwd<span class="token punctuation">,</span> <span class="token string">"FingerLog.txt"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    displayInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    checkTouch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的crontab：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># sudo crontab -e 定时任务40 21 * * * /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 0# vim /etc/rc.local 开机自启sudo /home/pi/hub-ctrl.c/hub-ctrl -b 001 -d 002 -P 2 -p 0cd /home/pi &amp;&amp; python3 finger.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最终实物图"><a href="#最终实物图" class="headerlink" title="最终实物图"></a>最终实物图</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91/ESP32%E6%8C%87%E7%BA%B9%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E5%BC%80%E5%8F%91_%E5%AE%9E%E7%89%A9%E5%9B%BE.jpgg" alt="ESP32指纹蓝牙键盘开发_实物图.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++复习笔记</title>
      <link href="/2020/11/10/cheng-xu-she-ji/cpp-fu-xi-bi-ji/"/>
      <url>/2020/11/10/cheng-xu-she-ji/cpp-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>本文为自己复习C++时知识的补充与记录。</p><hr><p>sizeof运算符返回变量的大小。</p><p>逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。</p><p>补码范围：</p><table><thead><tr><th>数</th><th>8</th><th>16</th><th>32</th></tr></thead><tbody><tr><td>$UMax_w$</td><td>0xFF<br>255</td><td>0xFFFF<br>65535</td><td>0xFFFFFFFF<br>4294967295</td></tr><tr><td>$TMin_w$</td><td>0x80<br>-128</td><td>0x8000<br>-32768</td><td>0x80000000<br>-2147483648</td></tr><tr><td>$TMax_w$</td><td>0x7F<br>127</td><td>0x7FFF<br>32767</td><td>0x7FFFFFFF<br>2147483647</td></tr><tr><td>-1<br>0</td><td>0xFF<br>0x00</td><td>0xFFFF<br>0x0000</td><td>0xFFFFFFFF<br>0x00000000</td></tr></tbody></table><p><strong>对有符号数，仅不要使用右移运算，因为到底是逻辑右移还是算术右移取决于编译器。</strong></p><p>对于二维数组的循环，尽管可以按照列进行遍历，但是不推荐。<strong>循环时尽可能满足“空间局部性”</strong>:</p><ol><li>在一个小的时间窗口内，访问的变量地址越接近越好，这样执行速度快。</li><li>一般来说，需要将最长的循环放在最内层，最短的循环放在最外层，以减少CPU跨切循环层的次数。</li></ol><p><code>vector</code>是面向对象方式的动态数组。可以使用<code>capacity</code>和<code>size</code>方法来查看vector当前的容量和已经存储的元素个数。<code>insert</code>方法两个参数，第一个是位置的指针，第二个是插入的值。<code>pop_back()</code>从尾部删除，<code>push_back()</code>从尾部插入元素，<code>erase()</code>一个参数，删除元素的指针位置。**<code>end()</code>返回的是vector最后一个元素之后的位置，操作时注意是否-1。**</p><hr><h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><ul><li>封装：数据和代码捆绑在一起，避免外界干扰和不确定性访问，封装可以使得代码模块化。</li><li>继承：让某种类型对象获得另一个类型对象的属性和方法，继承可以扩展已存在的代码。</li><li>多态：同一事物表现出不同事物的能力，即向不同对象会产生不同的行为，多态的目的是为了接口重用。</li></ul><hr><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>字符常量：括在<code>单引号</code>中。如果常量以L（仅当大写）开头，则表示它是一个宽字符常量(例如L’x’)，此时必须被存储在<code>wchar_t</code>类型的变量中。否则就是一个窄字符变量。</p><p>字符串是以空字符<code>\0</code>结束的字符数组。</p><table><thead><tr><th align="center">二进制</th><th align="center">十进制</th><th align="center">对应字符</th></tr></thead><tbody><tr><td align="center">0x41</td><td align="center">65</td><td align="center">A</td></tr><tr><td align="center">0x61</td><td align="center">97</td><td align="center">a</td></tr><tr><td align="center">0x30</td><td align="center">48</td><td align="center">0</td></tr><tr><td align="center">0x7F</td><td align="center">127</td><td align="center">DEL</td></tr></tbody></table><p>为了表示Unicode字符集，有三种Unicode的编码方式：</p><ul><li>UTF-8：1byte来表示字符，兼容ASCII码。特点存储效率高，变长(不方便内部随机访问)，无字节序问题(可作为外部编码)</li><li>UTF-16：分为UTF-16BE(big endian),UTF-16LE(little endian)。特点定长(方便内部随机访问)，有字节序问题(不可作为外部编码)</li><li>UTF-32：分为UTF-32BE(big endian),UTF-32LE(little endian)。特点定长(方便内部随机访问)，有字节序问题(不可作为外部编码)</li></ul><h4 id="stdio"><a href="#stdio" class="headerlink" title="stdio"></a>stdio</h4><p>字符串常见操作：</p><ul><li>字符串长度:strlen(s)，不包括<code>\0</code>。</li><li>字符串比较:strcmp(s1,s2),相同返回0，s1&lt;s2返回值小于0，s1&gt;s2返回值大于0。按照ASCII码进行比较。</li><li>字符串拷贝:strcpy(s1,s2)，字符串s2复制到s1中。</li><li>复制指定长度字符串:strncpy(s1,s2,n)。将字符串s2中前n个字符拷贝到s1中。</li><li>字符串拼接:strcat(s1,s2)。将字符串s2接到s1后面。</li><li>查找字符串:strchr(s1,ch)。指向字符串s1中字符ch的第一次出现的位置。</li><li>查找字符串strstr(s1,s2)。指向字符串s2的第一次出现的位置。</li></ul><p>推荐使用strnlen_s,strcpy_s,strncpy_s,strcat_s等API函数，更安全。</p><p>在进行底层代码安全性测试的时候需要加上<code>CRT_SECURE_NO_WARNINGS</code>让编译器忽略错误。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>获得字符串长度：<code>s.length</code>或<code>s.size()</code>二者等价。<code>s.capacity()</code>查看字符串总空间。</p><p>转换为C风格的字符串使用如下代码：</p><pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">const char *c_str = s1.c_str();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>c_str()</code>生成一个const char*指针，指向以空字符终止的数组。</p><hr><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><code>const</code>和<code>*</code>修饰的部分：1.先看左侧最近的部分;2.如果左侧没有，则看右侧。</p><p><code>*</code>操作符具有从右往左的结合性。<code>**</code>这个表达式相当于<code>*(*c)</code>，必须从里向外逐层求值。 </p><h4 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h4><p>直接使用未初始化或非法指针，可能发生两种情况：<strong>1.定位到非法地址，程序出错，从而终止。2.定位到一个可以访问的地址，无意修改了它，这样的错误难以捕捉，引发的错误可能与原先用于操作的代码完全不相干！</strong></p><p>用指针进行间接访问之前，一定要非常小心，<strong>确保它已经初始化，并被恰当的赋值。</strong></p><p>对于一个指针，如果已经知道将被初始化为什么地址，那么请赋值给它，否则请将它<strong>设置为NULL</strong>。</p><p>在对一个指针进行间接引用前，请先判断这个指针的值是否为NULL。</p><p>野指针是指向”垃圾”内存的指针。if判断对它们不起作用，因为没有置NULL。一般有三种情况：</p><ol><li>指针变量没有初始化;</li><li>已经释放不用的指针没有置NULL,如delete和free之后的指针；</li><li>指针操作超越了变量的作用范围;</li></ol><p>没有初始化的，不用的或者超出范围的指针请置为NULL。</p><p>编译器程序分解成符号的方法是：一个字符一个字符的读入，一直到读入的字符不再能组成一个有意义的符号。这个处理过程称为”贪心法”。</p><p>栈内分配内存从高地址向低地址分配，堆区分配内存是从低地址到高地址。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Cpp%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="Cpp复习笔记_Cpp存储结构.png"></p><p>主流的编程语言中，C++是唯一一个依赖RAII(Resource Acquisition Is Initialization)来做资源管理的。</p><p>RAII依托栈和析构函数，来对所有资源——包括堆内存在内进行管理。对RAII的使用，使得C++不需要类似于Java那样的垃圾收集方法，也能有效的对内存进行管理。RAII的存在，也是垃圾收集虽然理论上可以在C++使用，但从来没有真正流行的原因。</p><p>RAII有些比较成熟的智能指针代表：如<code>std:auto_ptr</code>和<code>boost:shared_ptr</code>。</p><p>栈和堆中变量对比：</p><table><thead><tr><th></th><th>stack</th><th>heap</th></tr></thead><tbody><tr><td>作用域</td><td>函数体内，语句块{}作用域</td><td>整个程序范围内，由new,malloc开始，delete,free结束</td></tr><tr><td>编译期大小确定</td><td>变量大小范围确定</td><td>变量大小范围不确定，需要在运行期确定</td></tr><tr><td>大小范围</td><td>Windows系统默认栈大小是1M,linux常见的默认的栈大小是8M或10M(通过ulimit -s查看，不同的linux发行版本不保证相同)Manjaro就是8M</td><td>所有系统的堆空间上限是接近内存(虚拟内存)的总大小的(一部分被OS占用)</td></tr><tr><td>内存分配方式</td><td>地址由高到低减少</td><td>地址由低到高增加</td></tr><tr><td>内容是否可变</td><td>可变</td><td>可变</td></tr></tbody></table><p>全局静态存储区和常量存储区的变量对比：</p><table><thead><tr><th></th><th>全局静态存储区</th><th>常量存储区</th></tr></thead><tbody><tr><td>存储内容</td><td>全局变量</td><td>常量</td></tr><tr><td>编译期间大小是否确定</td><td>确定</td><td>确定</td></tr><tr><td>内容是否可变</td><td>可变</td><td>不可变</td></tr></tbody></table><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>内存泄漏指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><h5 id="发生原因和排查方式"><a href="#发生原因和排查方式" class="headerlink" title="发生原因和排查方式"></a>发生原因和排查方式</h5><ol><li>内存泄漏主要发生在堆内存分配方式中，即“配置了内存后，所有指向该内存的指针都遗失了”。若缺乏语言这样的gc机制，这样的内存片就无法归还系统。</li><li>因为内存泄漏属于程序运行中的问题，无法通过编译识别，所以只能在程序运行过程中来识别和诊断。</li></ol><hr><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p> <strong>C++11之后对空指针的判断推荐使用<code>nullter</code>，避免<code>NULL</code>的二义性。</strong></p><p><code>unique_ptr</code>、<code>shared_ptr</code>、<code>weak_ptr</code>和C++11中已经废弃的<code>auto_ptr</code>，在C++17中被正式删除。需要导入头文件<code>&lt;memory&gt;</code></p><h4 id="auto-ptr-不推荐使用"><a href="#auto-ptr-不推荐使用" class="headerlink" title="auto_ptr (不推荐使用)"></a>auto_ptr (不推荐使用)</h4><p>由<code>new expression</code>获得对象，在<code>auto_ptr</code>对象销毁时，他所管理的对象也会自动被delete掉。</p><p>所有权转移：不小心把它传递给另外的智能指针，原本的指针就不再拥有这个对象了。在拷贝/赋值过程中，会直接剥夺指针对原对象对内存的控制权，转交给新对象，然后再将原对象指针置为<code>nullptr</code>。</p><p><strong>当拷贝/赋值时发生所有权转移，再次访问原对象时程序就会报错。</strong></p><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p><code>unique_ptr</code>是专属所有权，所以<code>uniqure_ptr</code>管理的内存，只能被一个对象持有，不支持复制和赋值。</p><p>移动语义：<code>unique_ptr</code>禁止了拷贝语义，但有时我们也需要能够转移所有权，于是提供了移动语义，即可以使用std::move()进行控制所有权的转移。</p><p>语法: <code>std::make_unique&lt;int&gt;(10)</code>或<code>unique_ptr&lt;int&gt;(new int(10))</code></p><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p><code>shared_ptr</code>通过一个引用计数共享一个对象，代表的是共享所有权，即多个<code>shared_ptr</code>可以共享同一块内存。</p><p><code>shared_ptr</code>是为了解决<code>auto_ptr</code>在对象所有权上的局限性，在使用引用计数的机制上提供了可以共享所有权的智能指针，当然这需要额外的开销。当引用计数为0时，该对象没有被使用，可以进行析构。</p><p>但是可能存在一些问题：</p><ul><li><p>循环引用:引用计数会带来循环引用的问题</p><p>循环引用会导致堆里的内存无法被正常回收，造成内存泄漏。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98.png" alt="Cpp复习笔记_智能指针的循环引用问题.png"></p><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p><code>weak_ptr</code>被设计为与<code>shared_ptr</code>共同工作，用一种观察者模式工作。</p><p>作用是协助<code>shared_ptr</code>工作，可获得资源的观测权，像旁观者那样观测资源的使用情况。观察者意味着<code>weak_ptr</code>只对<code>shared_ptr</code>进行引用，而不改变其引用计数，当被观察的<code>shared_ptr</code>失效后，相应的<code>weak_ptr</code>也相应失效。</p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用引用的优点：</p><ol><li>不存在空引用，避免了空指针的出现。</li><li>必须初始化，避免了野指针的出现。</li><li>一个引用必须永远指向它初始化的那个对象</li></ol><p><strong>有了指针为什么还需要引用？</strong>为了支持函数运算符重载。</p><p>**有了引用为什么还需要指针?**为了兼容C语言。</p><p>左值引用：&lt;类型&gt;&amp; &lt;变量名&gt;，定义的时候就需要进行初始化。</p><p>右值引用：&lt;类型&gt;&amp;&amp; &lt;变量名&gt;</p><hr><h3 id="自定义结构"><a href="#自定义结构" class="headerlink" title="自定义结构"></a>自定义结构</h3><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>使用<code>#define</code>和<code>const</code>创建符号变量，使用<code>enum</code>不仅能够创建符号常量，还能定义新的数据类型。</p><p>枚举类型enum(enumeration)的声明和定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">wT</span><span class="token punctuation">{</span>Monday<span class="token punctuation">,</span>Tuesday<span class="token punctuation">,</span>Wednesday<span class="token punctuation">,</span>Thursday<span class="token punctuation">,</span>Friday<span class="token punctuation">,</span>Saturday<span class="token punctuation">,</span>Sunday<span class="token punctuation">}</span><span class="token punctuation">;</span>wT weekday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>使用<code>struct</code>定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">strcut Student<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//让对象实例成为一个callable,能够作为std::function</span><span class="token keyword">struct</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//调用可使用</span>Display<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印1</span><span class="token comment">//或者</span><span class="token function">for_each</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>end<span class="token punctuation">,</span><span class="token function">Display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构体的内存布局需要综合考虑CPU的位数和当前结构体中最大的类型所占空间。不同的结构体中数据的排序也会导致结构体占用空间的不同。结构体所占的空间必然是最大元素所占空间的整数倍。</strong></p><p>结构体中数据——缺省对齐原则</p><p>针对32位CPU：</p><ul><li>char：任何地址</li><li>short：偶数地址</li><li>int：4的整数倍地址</li><li>double ：8的整数倍地址</li></ul><p>修改默认编译选项：</p><ul><li><p>Visual C++:</p><p>#pragma pack(n)</p></li><li><p>g++:</p><p>_attribute_(aligned(n))</p><p>_attribute_(_packed_)</p></li></ul><p><strong>此处的n表示是n的倍数进行分配。</strong></p><p><strong>推荐把小的元素分配在一起！！！！</strong></p><h4 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h4><p>使用<code>union</code>定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">union</span> Score<span class="token punctuation">{</span>    <span class="token keyword">double</span> sc<span class="token punctuation">;</span>    <span class="token keyword">char</span> level<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>联合体的空间按照最大元素所占空间决定。</strong></p><h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><p>宏定义版min函数：<code>#define MIN(a,b) (((a)&gt;=(b))?(b):(a))</code>，这里的a或b可能是式子，所以加上括号。</p><hr><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li>如果说面向对象是一种通过间接层来调用函数，以换取一种抽象，那么泛型编程则是更直接的抽象，因为它不会因为间接层而损失效率；</li><li>不同于面向对象的动态期多态，泛型编程则是一种静态期多态，通过编译器生成最直接的代码；</li><li>泛型编程可以将算法与特定类型，结构相剥离，尽可能复用代码；</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//特化</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//简单的for_each实现</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token keyword">typename</span> <span class="token class-name">Func</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">for_each</span><span class="token punctuation">(</span>T<span class="token operator">*</span> begin<span class="token punctuation">,</span>T<span class="token operator">*</span> end<span class="token punctuation">,</span><span class="token keyword">const</span> Func<span class="token operator">&amp;</span> f<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>begin<span class="token operator">!=</span>end<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>begin<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模板元编程"><a href="#模板元编程" class="headerlink" title="模板元编程"></a>模板元编程</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">int</span> n<span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span>        N <span class="token operator">=</span> Sum<span class="token operator">&lt;</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>N <span class="token operator">+</span> n    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">Sum</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span>        N <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> Sum<span class="token operator">&lt;</span><span class="token number">100</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>N<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数的整个计算过程不是在运行时完成，而是在编译期完成。</p><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数名与参数列表一起构成了函数签名。</p><p>函数的参数默认值必须是最右的有值才行，这取决于代码编译成汇编语言时先操作的是最右的参数进行压栈，之后从右向左进行赋值。</p><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><p>switch分支与if分支比较：</p><p>使用场景：</p><ol><li>switch只支持常量值固定相等的分支判断;</li><li>if还可以判断区间范围;</li><li>用switch能做的，用if都能做，但反过来则不行;</li></ol><p>性能比较：</p><ol><li>分支少时，差别不是很大;分支多时，switch性能较高;</li><li>if开始几个分支效果高，之后效率递减;</li><li>switch所有case的速度几乎一样;</li></ol><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>从汇编的角度来看，<code>do while</code>效率高于<code>while</code>更高于<code>for</code>。</p><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><p>指向函数入口地址的指针就是函数指针。</p><p>一般形式：<code>数据类型 (*指针变量名)(参数表)</code></p><p>区分：</p><p>​    <code>int(*p)int</code>//是指针，指向一个函数入口地址</p><p>​    <code>int* p(int)</code>//是函数，返回的值是一个指针</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>命名空间可作为附加信息来区分不同库中相同名称的函数、类、变量等，命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p><p>用法:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//定义函数时</span><span class="token keyword">namespace</span> <span class="token operator">&lt;</span>自定义空间名<span class="token operator">&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//定义函数</span><span class="token punctuation">}</span><span class="token comment">//函数实现时</span><span class="token keyword">namespace</span> <span class="token operator">&lt;</span>自定义空间名<span class="token operator">&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//实现函数 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><p>内联函数在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。</p><p>引入内联函数的目的是解决程序中函数调用的效率问题。<strong>内联函数内部不能有太复杂的逻辑，编译器有时会有自己的优化策略，所以内联不一定起作用。</strong></p><p>用法：<code>inline &lt;函数定义&gt;</code></p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>缺陷：</p><ul><li>空间上需要开辟大量的栈空间</li><li>时间上可能需要有大量重复运算</li></ul><p>优化：</p><ul><li>尾递归：所有递归形式的调用都出现在函数的末尾</li><li>使用循环代替</li><li>使用动态规划，空间换时间</li></ul><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>C++使用<code>struct</code>、<code>class</code>来定义一个类。struct默认成员权限是public，class默认成员权限是private。</p><p>**析构函数前面需要加上<code>virtual</code>**。</p><p>子类方法实现不一致时，父类的该方法前面需要加上<code>virtual</code>。<strong>这里也是多态的体现</strong>。</p><p>子类继承父类形式：<code>class &lt;子类&gt; :&lt;权限修饰符&gt; &lt;类名&gt;</code>。</p><p>类定义和实现的简单展示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Complex.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ACWING_COMPLEX_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACWING_COMPLEX_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> real<span class="token punctuation">,</span> <span class="token keyword">double</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//析构函数</span>    <span class="token keyword">double</span> <span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setImage</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token comment">//+运算符重载</span>    Complex <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//=运算符重载</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造</span>    <span class="token comment">//前置和后置++</span>    <span class="token comment">//前置++</span>    Complex <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//后置++</span>    Complex <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//前置--</span>    Complex <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//后置--</span>    Complex <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//等于</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//不等于</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token comment">//输入输出运算符</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> _real<span class="token punctuation">;</span>    <span class="token keyword">double</span> _image<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//ACWING_COMPLEX_H</span></span><span class="token comment">//Complex.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Complex.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_real</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_image</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> real<span class="token punctuation">,</span> <span class="token keyword">double</span> image<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_real</span><span class="token punctuation">(</span>real<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_image</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _real<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _image<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">setReal</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _real <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">setImage</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _image <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token comment">//避免临时对象的产生，因为定义一个新的临时对象在返回的时候会触发拷贝构造函数</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> _real<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> _image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token operator">&amp;</span>Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _real <span class="token operator">+=</span> x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _image <span class="token operator">+=</span> x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 上面两行也可以使用如下代码执行     * _real+=x._real;     * _image+=x._image;     * 在编译器遇到_real和_image变量时，将会在其所属对象x所属的类域中查找该符号。     * 既然查找的是类域，由于+=函数属于Complex类，+=函数可以访问Complex类中所有变量，所以可以直接访问私有变量。     */</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token operator">&amp;</span>Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//检查自赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _real <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _image <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Complex</span><span class="token double-colon punctuation">::</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _real <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _image <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token operator">&amp;</span>Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _real<span class="token operator">++</span><span class="token punctuation">;</span>    _image<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>_real<span class="token operator">++</span><span class="token punctuation">,</span> _image<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token operator">&amp;</span>Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    _real<span class="token operator">--</span><span class="token punctuation">;</span>    _image<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>_real<span class="token operator">--</span><span class="token punctuation">,</span> _image<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _real<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> Complex<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getReal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _real<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> _image<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    os <span class="token operator">&lt;&lt;</span> <span class="token string">"real value is "</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>_real <span class="token operator">&lt;&lt;</span> <span class="token string">",image value is "</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span>_image<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Complex <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    is <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">.</span>_real <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">.</span>_image<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员函数的最后加上<code>const</code>表示该函数的权限为只读</strong>。</p><p>当自定义了有参的构造函数时，默认的构造函数会消失，需要自己手动添加。</p><p><strong>尽量减少函数中临时对象的使用。如果可以在函数返回时利用新的数据直接返回对象，这样可以有效的避免系统调用拷贝构造函数。</strong></p><p><strong>前置++的运算符重载的声明为<code>&lt;类型名&gt;&amp; operaotr++ ()</code>，后置++的运算符重载的声明为<code>&lt;类型名&gt; operator++ (int)</code>，</strong>前置–和后置–类似。</p><p><strong>封装是编译期的概念，是针对类型而非对象，在类的成员函数中可以访问同类型实例对象的私有成员变量。</strong></p><h4 id="头文件的重复包含问题"><a href="#头文件的重复包含问题" class="headerlink" title="头文件的重复包含问题"></a>头文件的重复包含问题</h4><p>为了避免同一个文件被include多次，有两种方式：</p><ol><li><p>使用宏来防止同一文件被多次包含；</p><p>优点：可移植性好。</p><p>缺点：无法防止宏名重复，难以派错。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SOMEFILE_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SOMEFILE_H_</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用编译器来防止同一文件被多次包含；</p><p>优点：可以防止宏名重复，易排错。</p><p>缺点：可移植性不好。</p><p><code>#pragma once</code></p></li></ol><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><p>接口描述了类的行为和功能能，而不需要完成类的特定实现。</p><p>C++接口是通过使用抽象类来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关数据分离开的概念。</p><p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用<code>virtual &lt;函数定义&gt;=0</code>来指定。</p><p>抽象类不能被用于实例化对象，它只能作为接口使用，如果试图实例化一个抽象类的对象，会导致编译错误。</p><h5 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h5><p>类的虚函数通过虚表的方式和类的成员变量组合在一起，寄存在类的对象中，但是类的成员函数并不在其中。而是通过this指针与对象相结合。this指针一般存储在<code>ecx</code>寄存器中。</p><hr><h3 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h3><p>传统的C中I/O有<code>printf,scanf,getch,gets</code>等函数，它们的问题是：</p><ul><li>不可编程，仅仅能识别固有的数据类型;</li><li>代码的可移植性差;</li></ul><p>C++中的I/O流<code>istream,ostream</code>等：</p><ul><li>可编程，对于类库的设计者来说很有用;</li><li>简化编程，能使得I/O的风格一致;</li></ul><pre class="mermaid">graph LRios--&gt;istream;ios--&gt;ostream;istream--&gt;ifstream &amp; istrstream &amp; iostreamostream--&gt;iostream &amp; ostrstream &amp; ofstreamiostream--&gt;fstreamstreambuf--&gt;strstreambuf &amp; filebuf</pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_IO%E6%B5%81%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="Cpp复习笔记_IO流类层次结构图.png"></p><h4 id="缓存区"><a href="#缓存区" class="headerlink" title="缓存区"></a>缓存区</h4><p>标准IO提供的三种类型的缓存模式：</p><ul><li>按块缓存：如文件系统</li><li>按行缓存：\n</li><li>不缓存</li></ul><p><strong>使用<code>cin.ignore(&lt;长度&gt;,&lt;作为结束的标识符&gt;)</code>清空输入的脏数据。这里的长度可以设置为<code>std::cin.ignore(std::numeric_limits&lt;std::streamsize&gt;::max(),'\n');</code>，可能需要添加头文件<code>#include &lt;limits&gt;</code>。</strong></p><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>C++把每个文件都看成是一个有序的字节序列，每个文件都以文件结束标志结束。</p><p>按照文件中数据的组织形式可把文件分成为：</p><ul><li><p>文本文件：文件中信息形式为ASCII码文件，每个字符占一个字节。</p></li><li><p>二进制文件：文件中信息的形式与其在内存中的形式相同。</p></li></ul><p>文件操作步骤：</p><ol><li>打开文件用于读和写open;</li><li>检查打开是否成功fail;</li><li>读或者写read,write;</li><li>检查是否读完<code>EOF(end of file)</code>;</li><li>使用完文件后关闭文件close;</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>fstream fout<span class="token punctuation">;</span>    fout<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"&lt;文件路径&gt;"</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>操作模式<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fout<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"failed!"</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fout<span class="token operator">&lt;&lt;</span><span class="token string">"&lt;文字&gt;"</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件的方法方式：</p><table><thead><tr><th>方式</th><th>作用</th></tr></thead><tbody><tr><td>ios::in</td><td>打开文件进行读操作(ifstream默认模式)</td></tr><tr><td>ios::out</td><td>打开文件进行写操作(ofstream默认模式)</td></tr><tr><td>ios::ate</td><td>打开一个已有输入或输出文件并查找到文件尾</td></tr><tr><td>ios::app</td><td>打开文件以便在文件的尾部添加数据</td></tr><tr><td>ios::nocreate</td><td>如果文件不存在，则打开操作失败</td></tr><tr><td>ios::trunc</td><td>如果文件存在，清除文件原有内容（默认）</td></tr><tr><td>ios::binary</td><td>以二进制方式打开</td></tr></tbody></table><p>二进制文件复制函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> BUFFERLEN<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>src<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//打开源文件和目标文件</span>    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">in</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>in <span class="token operator">|</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">out</span><span class="token punctuation">(</span>dst<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>trunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断文件打开是否成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token operator">||</span><span class="token operator">!</span>out<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//从源文件读取数据写入到目标文件中</span>    <span class="token comment">//通过读取源文件的EOF判断读写是否结束</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span>BUFFERLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>BUFFERLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>streamsize count<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">gcount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//关闭源文件与目标文件</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><ul><li>STL(Standard Template Library)算法是泛型的(generic)，不与任何特定的数据结构和对象绑定，不必在环境类似的情况下重写代码；</li><li>STL算法可以量身定做，并且具有很好的效率；</li><li>STL可以进行扩展，你可以编写自己的组件并且能与STL标准的组件进行很好的配合；</li></ul><pre class="mermaid">graph LRSTL标准库六大组件--&gt;空间配置器 &amp; 容器 &amp; 适配器 &amp; 仿函数 &amp; 算法 &amp; 迭代器空间配置器--&gt;allocator容器--&gt;string &amp; vector &amp; list &amp; deque &amp; map &amp; set &amp; multimap &amp; multiset适配器--&gt;stack &amp; queue &amp; priority_queue仿函数--&gt;greater &amp; less算法--&gt;find &amp; swap &amp; reverse &amp; sort &amp; merge迭代器--&gt;iterator &amp; const_iterator &amp; reverse_iterator &amp; const_reverse_iterator</pre><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>容器用来存放数据，STL的容器分为两大类：</p><ul><li>序列式容器(Sequence Containers):其中的元素都是可排序的(ordered)，STL提供了<code>vector(单项开口的连续线性空间),list(环状双向列表),deque(双向开口的连续线性空间，并不是真正的连续线性空间，而是通过node_buffer模拟的)</code>等序列式容器，而<code>stack(栈，先进后出),queue(队列，先进先出),priority_queue(优先队列，按优先权)</code>则是容器适配器；</li><li>关联式容器(Associative Containers):每个数据元素都是由一个键(key)和值(value)组成，当元素被插入到容器时，按其键以某特定规则放入适当位置；常见的STL关联容器如:<code>set,muitiset,map(map.insert(pair&lt;type1,type2&gt;(value1,value2))或map.insert(map&lt;type1,type2&gt;::value_type(value1,value2)),multimap</code>；map中直接插入key一样的键值对会失败，数据不会被更新，但是用键进行修改则可以。</li></ul><h5 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a>unordered_set</h5><p>unodered_set是一种关联式容器，set和map内部实现是基于RB-Tree,有序，unordered_set和unordered_map是基于hashmap的，无序。</p><p><strong>使用时注意迭代器失效的问题。</strong></p><h4 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h4><ul><li>仿函数(functor)一般不会单独使用，主要是为了搭配STL算法使用；</li><li>函数指针不能满足STL对抽象性的要求，不能满足软件积木的要求，无法和STL其他组件搭配；</li><li>本质就是类重载了operator()，创建一个行为类似函数的对象；</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//C++仿函数模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">struct</span> <span class="token class-name">SortF</span><span class="token punctuation">{</span>    <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>STL中的算法大致分为四类：包含<code>&lt;algorithm&gt;,&lt;numeric&gt;,&lt;functional&gt;</code></p><ol><li>非可变排序算法：指不直接修改其所操作的容器内容的算法；</li><li>可变排序算法：指可以修改它们所操作的容器内容的算法；</li><li>排序算法：包括对序列进行排序和合并的算法、搜索算法以及有序序列上的集合操作；</li><li>数值算法：对容器内容进行数值计算；</li></ol><h5 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h5><p>Lambda表达式完整的声明格式如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>capture list<span class="token punctuation">]</span> <span class="token punctuation">(</span>params list<span class="token punctuation">)</span> <span class="token keyword">mutable</span> exception<span class="token operator">-&gt;</span> <span class="token keyword">return</span> type <span class="token punctuation">{</span> function body <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各项具体含义如下：</p><ul><li>capture list：捕获外部变量列表</li><li>params list：形参列表</li><li>mutable指示符：用来说用是否可以修改捕获的变量</li><li>exception：异常设定</li><li>return type：返回类型</li><li>function body：函数体</li></ul><table><thead><tr><th>序号</th><th>格式</th></tr></thead><tbody><tr><td>1</td><td>[capture list] (params list) -&gt; return type {function body}</td></tr><tr><td>2</td><td>[capture list] (params list) {function body}</td></tr><tr><td>3</td><td>[capture list] {function body}</td></tr></tbody></table><p>其中：</p><ul><li>格式1声明了const类型的表达式，这种类型的表达式不能修改捕获列表中的值。</li><li>格式2省略了返回值类型，但编译器可以根据以下规则推断出Lambda表达式的返回类型： （1）：如果function body中存在return语句，则该Lambda表达式的返回类型由return语句的返回类型确定； （2）：如果function body中没有return语句，则返回值为void类型。</li><li>格式3中省略了参数列表，类似普通函数中的无参函数。</li></ul><p><strong>对容器中的数进行操作可以考虑使用transform函数。</strong></p><p><strong>统计容器中有多少个该元素可以使用count函数。需要自己定义函数使用count_if函数，结合bind2nd和bind1st,类似<code>bind2nd(less&lt;int&gt;(),7)</code></strong></p><p>二分查找：<code>binary_search</code></p><p>查找子序列返回位置的地址：<code>search</code></p><hr><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>23种面向对象的设计模式从分类上大致有创建型，结构型和行为型模式；</li><li>设计模式不是万能的，它建立在系统变化点上，哪里有变化哪里就可以用；</li><li>设计模式为了解耦合，为了扩展，它通常是演变过来的，需要演变才能准确定位；</li><li>设计模式是一种软件设计的方法，不是标准，当前大部分的框架中都已经包含了大量设计模式的思想；</li></ul><h4 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h4><p>实现思路：</p><ol><li>Singleton拥有一个私有构造函数，确保用户无法通过new直接实例化。</li><li>包含一个静态私有成员变量instance与静态公有方法Instance()。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Singleton.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ACWING_SINGLETON_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACWING_SINGLETON_H</span></span><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> Singleton <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造函数与析构函数私有化，防止外部访问</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用静态变量帮助解决资源的分配和释放</span>    <span class="token keyword">static</span> Singleton <span class="token operator">*</span>This<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//ACWING_SINGLETON_H</span></span><span class="token comment">//Singleton.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Singleton.h"</span></span>Singleton<span class="token operator">*</span> Singleton<span class="token double-colon punctuation">::</span>This<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Singleton <span class="token operator">*</span><span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h4><p>实现思路：</p><ol><li>将问题的指责解耦合，将Observable和Observer抽象开，分清抽象和实体。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Observer.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ACWING_OBSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACWING_OBSERVER_H</span></span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token comment">//当被观察对象发生变化时，通知被观察者调用这个方法</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pArg<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//ACWING_OBSERVER_H</span></span><span class="token comment">//Observable.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ACWING_OBSERVABLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACWING_OBSERVABLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Observer.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token comment">//注册观察者</span>    <span class="token keyword">void</span> <span class="token function">Attach</span><span class="token punctuation">(</span>Observer <span class="token operator">*</span>pOb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注销观察者</span>    <span class="token keyword">void</span> <span class="token function">Detach</span><span class="token punctuation">(</span>Observer <span class="token operator">*</span>pOb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">GetObserverCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">DetachAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        _Obs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetSomeNews</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">SetChange</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">SetChange</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>Observer <span class="token operator">*</span><span class="token operator">&gt;</span> _Obs<span class="token punctuation">;</span>    <span class="token keyword">bool</span> _bChange<span class="token punctuation">;</span>    <span class="token comment">//通知函数</span>    <span class="token keyword">void</span> <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pArg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//ACWING_OBSERVABLE_H</span></span><span class="token comment">//Observable.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Observable.h"</span></span><span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">Observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_bChange</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">Attach</span><span class="token punctuation">(</span>Observer <span class="token operator">*</span>pOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> _Obs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> _Obs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">==</span> pOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    _Obs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pOb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">Detach</span><span class="token punctuation">(</span>Observer <span class="token operator">*</span>pOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pOb <span class="token operator">||</span> _Obs<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    _Obs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pOb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">GetObserverCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> _Obs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">Notify</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_bChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> _Obs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> _Obs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">Update</span><span class="token punctuation">(</span>pArg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    _bChange <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Observable</span><span class="token double-colon punctuation">::</span><span class="token function">SetChange</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _bChange <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">Notify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Observable.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">News</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Observable</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetSomeNews</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">SetChange</span><span class="token punctuation">(</span><span class="token string">"News: "</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Observer</span></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pArg<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"User1 Got News"</span><span class="token operator">&lt;&lt;</span><span class="token string">", "</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pArg<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Observer</span></span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pArg<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"User2 Got News"</span><span class="token operator">&lt;&lt;</span><span class="token string">", "</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pArg<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User1 user1<span class="token punctuation">;</span>    User2 user2<span class="token punctuation">;</span>    News n1<span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">GetSomeNews</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n1<span class="token punctuation">.</span><span class="token function">GetObserverCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">Detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">GetSomeNews</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n1<span class="token punctuation">.</span><span class="token function">GetObserverCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">DetachAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n1<span class="token punctuation">.</span><span class="token function">GetSomeNews</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>n1<span class="token punctuation">.</span><span class="token function">GetObserverCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="适配器模式-Adapter"><a href="#适配器模式-Adapter" class="headerlink" title="适配器模式(Adapter)"></a>适配器模式(Adapter)</h4><ul><li>适配器将类接口转换为客户端期望的另一个接口</li><li>使用适配器可防止类由于接口不兼容而不工作</li><li>适配器模式的动机是，如果可以更改接口，则可以重用现有软件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//LegacyRectanle.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ACWING_LEGACYRECTANLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ACWING_LEGACYRECTANLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token comment">//原始数据类</span><span class="token keyword">class</span> <span class="token class-name">LegacyRectanle</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LegacyRectanle</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span><span class="token keyword">double</span> y1<span class="token punctuation">,</span><span class="token keyword">double</span> x2<span class="token punctuation">,</span><span class="token keyword">double</span> y2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_x1</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_y1</span><span class="token punctuation">(</span>y1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_x2</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_y2</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">LagacyRectangleDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> _x1<span class="token punctuation">,</span>_y1<span class="token punctuation">,</span>_x2<span class="token punctuation">,</span>_y2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//接口调用类</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//第一种适配方式：使用多重继承</span><span class="token keyword">class</span> <span class="token class-name">RectangleAdapter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">LegacyRectanle</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RectangleAdapter</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">,</span><span class="token keyword">double</span> w<span class="token punctuation">,</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">LegacyRectanle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//第二种适配方式：使用组合</span><span class="token keyword">class</span> <span class="token class-name">RectangleAdapter2</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Rectangle</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">RectangleAdapter2</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span> y<span class="token punctuation">,</span><span class="token keyword">double</span> w<span class="token punctuation">,</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_legacyRectanle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>w<span class="token punctuation">,</span>y<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Draw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    LegacyRectanle _legacyRectanle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">//ACWING_LEGACYRECTANLE_H</span></span><span class="token comment">//LegacyRectanle.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"LegacyRectanle.h"</span></span><span class="token keyword">void</span> <span class="token class-name">LegacyRectanle</span><span class="token double-colon punctuation">::</span><span class="token function">LagacyRectangleDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>_x1<span class="token operator">&lt;&lt;</span>_y1<span class="token operator">&lt;&lt;</span>_x2<span class="token operator">&lt;&lt;</span>_y2<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">RectangleAdapter</span><span class="token double-colon punctuation">::</span><span class="token function">Draw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">LagacyRectangleDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">RectangleAdapter2</span><span class="token double-colon punctuation">::</span><span class="token function">Draw</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _legacyRectanle<span class="token punctuation">.</span><span class="token function">LagacyRectangleDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"LegacyRectanle.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    Rectangle<span class="token operator">*</span> a<span class="token operator">=</span><span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rectangle<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">RectangleAdapter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">-&gt;</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Rectangle<span class="token operator">*</span> b<span class="token operator">=</span><span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Rectangle<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">RectangleAdapter2</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-&gt;</span><span class="token function">Draw</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><p><code>sizeof(char str[])</code>为字面值+1。</p><h4 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h4><p>浅拷贝：只拷贝指针地址，C++默认拷贝构造函数与赋值运算符重载都是浅拷贝；节省空间，但是容易引发多次释放。</p><p>深拷贝：重新分配堆内存，拷贝指针指向内容。浪费空间，但不会导致多次释放。</p><p>为了兼顾着浅拷贝和深拷贝的优点，解决方案有两种：</p><ul><li>引用计数</li><li>C++11的移动语义</li></ul><h4 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h4><p>该关键字告诉编译器，函数中不会发生异常,这有利于编译器对程序做更多的优化。</p><p>如果在运行时，<code>oexecpt</code>函数向外抛出了异常（如果函数内部捕捉了异常并完成处理，这种情况不算抛出异常），程序会直接终止，调用std::terminate()函数，该函数内部会调用std::abort()终止程序。</p><h5 id="C-的异常处理"><a href="#C-的异常处理" class="headerlink" title="C++的异常处理"></a>C++的异常处理</h5><p>C++的异常处理是在运行时而不是编译期检测的。为了实现运行时检测，编译器创建额外的代码，然而这会妨碍程序优化。在实践中，一般两种异常抛出方式是最常用的：</p><ul><li>一个操作或函数可能抛出一个异常；</li><li>一个操作或函数不可能抛出一个异常；</li></ul><p>后面这种情况在以往的C++中常用throw()表示，在C++11中已经被<code>noexcept</code>替代。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//C++11之前</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Type<span class="token operator">&amp;</span> x<span class="token punctuation">,</span>Type<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    x<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//C++11</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Type<span class="token operator">&amp;</span> x<span class="token punctuation">,</span>Type<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">{</span>    x<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更加灵活的使用<code>noexcept</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Type<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> Type<span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">(</span><span class="token keyword">noexcept</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它表示，如果操作<code>x.swap(y)</code>不发生异常，那么函数<code>swap(Type&amp; x, Type&amp; y)</code>一定不发生异常。</p><p>并不是加上<code>noexcept</code>就能提高效率，以下场景鼓励使用<code>noexcept</code>：</p><ul><li>移动构造函数</li><li>移动分配函数</li><li>析构函数(新版本的编译器中，析构函数是默认添加关键字<code>noexcept</code>)</li><li>叶子函数(叶子函数：指在寒回溯内部不分配栈空间，也不调用其他函数，也不存储非易失性寄存器，也不处理异常)</li></ul><p>除此以外，不推荐使用<code>noexcept</code>。</p><h4 id="default和-delete"><a href="#default和-delete" class="headerlink" title="=default和=delete"></a>=default和=delete</h4><p><code>=delete</code>和<code>=default</code>是c++11的新特性，分别是显式删除（告知编译器<strong>不生成</strong>函数默认的缺省版本）和显式缺省（告诉编译器<strong>生成</strong>函数默认的缺省版本），这样可以增强对“类默认函数的控制”。</p><h5 id="类与默认函数"><a href="#类与默认函数" class="headerlink" title="类与默认函数"></a>类与默认函数</h5><p>当我们编写一个类的时候，若不显著写明，则类会默认为我们提供几个函数与全局默认操作符：</p><ul><li>构造函数</li><li>析构函数</li><li>拷贝构造函数</li><li>拷贝赋值函数（operator=）</li><li>移动构造函数</li><li>operator,</li><li>operator&amp;</li><li>operator*</li><li>operator-&gt;</li><li>operator-&gt;*</li><li>operator new</li><li>operator delete</li></ul><p>使用&lt;类&gt;(){}这样的方式来声明无参构造函数会带来一个问题，使得其不再是POD类型。</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>List将元素按顺序存储在链表中，与向量（vectors）相比，它允许快速的插入和删除，但随机访问比较慢。</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>assign()</td><td>给list赋值</td></tr><tr><td>back()</td><td>返回最后一个元素</td></tr><tr><td>begin()</td><td>返回指向第一个元素的迭代器</td></tr><tr><td>clear()</td><td>删除所有元素</td></tr><tr><td>empty()</td><td>如果list是空的返回true</td></tr><tr><td>end()</td><td>返回末尾的迭代器</td></tr><tr><td>erase()</td><td>删除一个元素</td></tr><tr><td>front()</td><td>返回第一个元素</td></tr><tr><td>get_allocator()</td><td>返回list的配置器</td></tr><tr><td>insert()</td><td>插入一个元素到list中</td></tr><tr><td>max_size()</td><td>返回list能容纳的最大元素数量</td></tr><tr><td>merge()</td><td>合并两个list</td></tr><tr><td>pop_back()</td><td>删除最后一个元素</td></tr><tr><td>pop_front()</td><td>删除第一个元素</td></tr><tr><td>push_back()</td><td>在list的末尾添加一个元素</td></tr><tr><td>push_front()</td><td>在list的头部添加一个元素</td></tr><tr><td>rbegin()</td><td>返回指向第一个元素的逆向迭代器</td></tr><tr><td>remove()</td><td>从list中删除元素</td></tr><tr><td>remove_if()</td><td>按指定条件删除元素</td></tr><tr><td>rend()</td><td>指向list末尾的逆向迭代器</td></tr><tr><td>resize()</td><td>改变list的大小</td></tr><tr><td>reverse()</td><td>把list中的元素倒转</td></tr><tr><td>size()</td><td>返回list中的元素个数</td></tr><tr><td>sort()</td><td>给list排序</td></tr><tr><td>splice()</td><td>合并两个list</td></tr><tr><td>swap()</td><td>交换两个list</td></tr><tr><td>unique()</td><td>删除list中的重复元素</td></tr></tbody></table><h4 id="POD"><a href="#POD" class="headerlink" title="POD"></a>POD</h4><p><code>POD</code>是Plain Old Data的缩写，是C++定义的一类数据结构。Plain表示它是一个普通类型，Old表示它是旧的与几十年前的C语言兼容，可以使用memcpy()这种最原始的函数进行操作。两个系统进行交换数据，如果没有办法对数据进行语义检查和解释，那就只能以非常底层的数据形式进行交互，而拥有 POD 特征的类或者结构体通过二进制拷贝后依然能保持数据结构不变。也就是说，<strong>能用 C 的 <code>memcpy() </code>等函数进行操作的类、结构体就是 POD 类型的数据。</strong></p><h5 id="POD特征"><a href="#POD特征" class="headerlink" title="POD特征"></a>POD特征</h5><p>是不是 POD 类型的，可以用 <code>is_pod&lt;T&gt;::value </code>来判断。那什么样的类、结构体是拥有 POD 特性的呢？要求有两个：<strong>一个是它必须很平凡、很普通；另一个是布局有序</strong>。</p><ul><li><p><strong>能平凡就平凡</strong>，<strong>不能写析构函数/构造函数、拷贝/移动构造函数、拷贝/移动运算符，不能有虚函数与虚基类</strong>，而是用编译期自动生成的。那“这个数据就是平凡的”，非要写的话，使用C++11的default关键字。如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>is_trivial<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>is_trivial<span class="token operator">&lt;</span>B<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>is_trivial<span class="token operator">&lt;</span>C<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出</span><span class="token number">0</span><span class="token number">1</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>布局有序，普通成员有相同的访问级别。注意是普通成员。静态成员之类的不在此考虑范围。</strong></p></li><li><p><strong>类中的第一个非静态成员的类型不能与其基类相同，不然就不是标准布局的类型。</strong></p></li><li><p><strong>只要有父类，普通成员只能在其中一个类中，不可分散。</strong></p></li></ul><h5 id="使用POD数据"><a href="#使用POD数据" class="headerlink" title="使用POD数据"></a>使用POD数据</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//初始化a1</span>    A a1<span class="token punctuation">;</span>    a1<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//使用C语言的memcpy()底层函数拷贝数据到p中</span>    <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span>a1<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将p强制转换成A*</span>    A<span class="token operator">*</span> a2<span class="token operator">=</span><span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="void-NULL-nullptr"><a href="#void-NULL-nullptr" class="headerlink" title="void*,NULL,nullptr"></a>void*,NULL,nullptr</h4><p>在C中<code>#define NULL ((void *)0)</code>，其中<code>void *</code>可以表示所有指针。</p><p>在C++中定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression"><span class="token constant">NULL</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++11中，nullptr用来代表(void *)0,NULL则表示为0；</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>提供给开发者用来进行指针和引用的转换。</p><ul><li>const_cast<new_type>(expression):用于转换指针或引用，去掉类型的const属性。但是其原本的数值并不会改变，只是一种处于无奈的情况。或者一个修饰了const属性的指针或引用指向的是一个非const修饰的数据时，才可以修改原数值。</new_type></li><li>static_cast<new_type>(expression):用于基本类型转换，有继承关系类对象和类指针之间转换，由程序员来确保转换是安全的，它不会产生动态转换的类型安全检查的开销。</new_type></li><li>reinterpret_cast<new_type>(expression):<strong>很危险</strong>，重新解释类型，既不检查指向的内容，也不检查指针类型本身，但要求转换前后的类型所占用空间大小一致，否则引发编译时错误。</new_type></li><li>dynamic_cast<new_type>(expression):只能用于含有虚函数的类，必须用在多态体系中，用于类层次间的向上和向下转换；向下转化时，如果是非法的对于指针返回NULL，需要做判空处理。</new_type></li></ul><h4 id="gt-和-区别"><a href="#gt-和-区别" class="headerlink" title="->和.区别"></a>-&gt;和.区别</h4><p>-&gt;左侧是指针，.左侧是实体。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题记录</title>
      <link href="/2020/11/10/suan-fa/leetcode-he-ji/leetcode-shua-ti-ji-lu/"/>
      <url>/2020/11/10/suan-fa/leetcode-he-ji/leetcode-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录本人刷Leetcode过程的收获和代码。</p><h3 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h3><ul><li>算法题：Cpp</li><li>SQL题：MySQL</li><li>面试题：Cpp</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h3><ol><li><del>选择一个文本存储所有笔记</del></li><li>选择细粒度的存储，采用目录和总分的结构存储</li></ol><p>由于Markdown文本编辑器对长文本载入机制的问题以及网页展示效果的综合考虑，采用第二种方案。粒度选择为100题基础粒度进行划分。基于Leetcode现存题量的分析，无需依据题目类型分类来做二级索引。</p><p>文章标题中的题号只表示区间，不同类型的题目会在不同类型的总结笔记区间内。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1-100">Leetcode算法题1-100</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-101-200/">Leetcode算法题101-200</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-201-300/">Leetcode算法题201-300</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-301-400/">Leetcode算法题301-400</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-401-500/">Leetcode算法题401-500</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-501-600/">Leetcode算法题501-600</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-601-700/">Leetcode算法题601-700</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-701-800/">Leetcode算法题701-800</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-801-900/">Leetcode算法题801-900</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-901-1000/">Leetcode算法题901-1000</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1001-1100/">Leetcode算法题1001-1100</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1101-1200/">Leetcode算法题1101-1200</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1201-1300/">Leetcode算法题1201-1300</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1301-1400/">Leetcode算法题1301-1400</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1401-1500/">Leetcode算法题1401-1500</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1501-1600/">Leetcode算法题1501-1600</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1601-1700/">Leetcode算法题1601-1700</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1701-1800/">Leetcode算法题1701-1800</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1801-1900/">Leetcode算法题1801-1900</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-1901-2000/">Leetcode算法题1901-2000</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-2001-2100/">Leetcode算法题2001-2100</a></li><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/01/16/suan-fa/leetcode-suan-fa-ti-2101-2189/">Leetcode算法题2101-2189</a></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li><p><a href="https://buerlog.top/2022/01/16/suan-fa/leetcodesql-ti-175-1369/">LeetcodeSQL题175-1369</a></p></li><li><p><a href="https://buerlog.top/2022/01/16/suan-fa/leetcodesql-ti-1378-2175/">LeetcodeSQL题1378-2175</a></p></li></ul><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/03/04/suan-fa/leetcode-he-ji/leetcodeshell-ti/">LeetcodeShell题</a></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><input disabled="" type="checkbox"> <a href="https://buerlog.top/2022/03/04/suan-fa/leetcode-he-ji/leetcode-duo-xian-cheng-ti/">Leetcode多线程题</a></li></ul><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>Leetcode的评测模式是一个程序，也就是某些变量只会初始化一次，导致该容器（result）会保留上次运行的答案。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习笔记</title>
      <link href="/2020/10/28/cheng-xu-she-ji/java-fu-xi-bi-ji/"/>
      <url>/2020/10/28/cheng-xu-she-ji/java-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B.png" alt="Java复习笔记_编译流程.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_JVM.png" alt="Java复习笔记_JVM.png"></p><ul><li>Class Loader：依据特定格式，加载class文件到内存。</li><li>Execution Engine：对命令进行解析。</li><li>Native Interface：融合不同开发语言的原生库为Java所用。</li><li>Runtime Data Area：JVM内存空间结构模型。</li></ul><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p>ClassLoader在Java中具有非常重要的作用，它主要工作在Class装载的加载阶段，其主要作用是从系统外部获取Class二进制数据流。它是Java的核心组件，所有Class都由ClassLoader进行加载，ClassLoader负责通过将Class文件中的二进制数据流装载进系统，然后交给Java虚拟机进行连接、初始化等操作。</p><h4 id="BootStrapClassLoader"><a href="#BootStrapClassLoader" class="headerlink" title="BootStrapClassLoader"></a>BootStrapClassLoader</h4><p>C++编写，加载核心库java.*</p><h4 id="ExtClassLoader"><a href="#ExtClassLoader" class="headerlink" title="ExtClassLoader"></a>ExtClassLoader</h4><p>Java编写，加载扩展库javax.*</p><h4 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h4><p>Java编写，加载程序所在目录</p><h4 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h4><p>Java编写，关键函数如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> off<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ClassFormatError</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>off<span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyClassLoader.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> classLoaderName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">String</span> classLoaderName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoaderName <span class="token operator">=</span> classLoaderName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//用于寻找类文件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//用于加载类文件</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadClassData</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> path <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//ClassLoaderChecker.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">MyClassLoader</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"/Users/baidu/Desktop/"</span><span class="token punctuation">,</span> <span class="token string">"myClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"Wali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" alt="Java复习笔记_双亲委派.png"></p><p>采用双亲委派机制可以避免多份同样的字节码的加载。</p><h3 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h3><ul><li>隐式加载：new</li><li>显式加载：loadClass，forName等</li></ul><h4 id="loadClass和forName的区别"><a href="#loadClass和forName的区别" class="headerlink" title="loadClass和forName的区别"></a>loadClass和forName的区别</h4><p>类的加载过程</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%B1%BB%E7%9A%84%E8%A3%85%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt="Java复习笔记_类的装载过程.png "></p><ul><li>Class.forName的带的class是已经完成初始化的。如果项目中需要引入Mysql driver就需要使用forName以便执行其中的static块，完成初始化。</li><li>Class.loadClass得到的class时候还没有链接的。利用这个特性spring可以实现延迟加载，加快加载速度。 </li></ul><h3 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="Java复习笔记_JVM内存模型.png "></p><ul><li>线程私有：程序计数器、虚拟机栈、本地方法栈</li><li>线程共享：MetaSpace、Java堆</li></ul><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li>当前线程所执行的字节码号指示器（逻辑，而非物理）</li><li>和线程是一对一的关系及“线程私有”</li><li>改变计数器的值来选取下一条需要执行的字节码指令</li><li>对Java方法计数，如果是native方法则计数器值为Undefined</li><li>不会发生内存泄漏</li></ul><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><ul><li>Java方法执行的内存模型</li><li>包含多个栈帧</li></ul><h5 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h5><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88%E5%B8%A7.png" alt="Java复习笔记_虚拟机栈帧.png"></p><h6 id="局部变量表和操作数栈"><a href="#局部变量表和操作数栈" class="headerlink" title="局部变量表和操作数栈"></a>局部变量表和操作数栈</h6><p>局部变量表：包含方法执行过程中的所有变量</p><p>操作数栈：入栈、出栈、复制、交换、产生消费变量</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_add%E6%89%A7%E8%A1%8C.png" alt="Java复习笔记_add执行.png"></p><p>递归会引发java.lang.StackOverflowError异常就是因为递归过深，栈帧数超过虚拟机栈深度。</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>与虚拟机栈相似，主要作用于标注了native的方法。</p><h4 id="元空间与永久代"><a href="#元空间与永久代" class="headerlink" title="元空间与永久代"></a>元空间与永久代</h4><p>元空间（MateSpace）与永久代（PermGen）是都是用来存储Class信息，都是方法区的实现，只是实现方法不同。<strong>JDK1.8之后用元空间取代了永久代，元空间使用本地内存，而永久代使用的是jvm内存。</strong></p><p>MetaSpace相比PermGen的优势</p><ul><li>字符串常量池存在永久代中，容易出现性能问题和内存溢出</li><li>类和方法的信息大小难以确定，给永久代的大小指定带来了困难</li><li>永久代会为GC带来不必要的复杂性</li><li>方便HotSpot与其他JVM如Jrockit的集成</li></ul><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><ul><li>对象实例的分配区域</li><li>GC管理的主要区域</li></ul><h4 id="内存模型中堆和栈的区别"><a href="#内存模型中堆和栈的区别" class="headerlink" title="内存模型中堆和栈的区别"></a>内存模型中堆和栈的区别</h4><p>此处涉及到内存分配策略。</p><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求。要求代码中不能有可变数据结构也不允许有嵌套和递归的出现。</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定。</li><li>堆式存储：编译时或运行时模块入口都无法确定，动态分配。</li></ul><p>联系：引用对象、数组时，栈里定义变量保存堆中目标的首地址。如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BC%95%E7%94%A8%E5%A0%86%E5%AF%B9%E8%B1%A1.png" alt="Java复习笔记_引用堆对象.png"></p><p>区别：</p><ul><li>管理方式：栈自动释放，编译器就能管理，堆需要GC。</li><li>空间大小：栈比堆小。</li><li>碎片相关：栈产生的碎片远小于堆。</li><li>分配方式：栈支持静态和动态分配，不需要考虑内存回收问题。而堆仅支持动态分配，即使有GC还是要考虑垃圾回收释放的问题。</li><li>效率：栈的效率比堆高。</li></ul><h3 id="JVM三大调参优化参数"><a href="#JVM三大调参优化参数" class="headerlink" title="JVM三大调参优化参数"></a>JVM三大调参优化参数</h3><ul><li>-Xss：规定了每个线程虚拟机栈（堆栈）的大小，一般256k,影响并发线程数的大小</li><li>-Xms：堆的初始值</li><li>-Xmx：堆能达到的最大值</li></ul><p>一般将Xms和Xmx设置成一样，因为当堆不够用而发生扩容时，会发生内存抖动，影响程序运行时的稳定性。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在运行状态中，对于任意一个类。都能够知道这个类的所有属性和方法；对于任意一个对象。都能够调用它的任意方法和属性；这种动态获取信息以及调用对象方法的功能称为java的反射机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//robot.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Robot</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">String</span> helloSentence<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloSentence <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">throwHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> tag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//ReflectSample.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectSample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> rc <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.interview.javabasic.reflect.Robot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Robot</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Robot</span><span class="token punctuation">)</span> rc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Class name is "</span> <span class="token operator">+</span> rc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取方法时getDeclaredMethod()函数第二个参数是传参的类型，不能获得继承或接口的方法</span>        <span class="token class-name">Method</span> getHello <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"throwHello"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//允许访问权限</span>        getHello<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> str <span class="token operator">=</span> getHello<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getHello result is "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getMethod()只能获取public的方法或者是继承或接口的方法</span>        <span class="token class-name">Method</span> sayHi <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设定成员变量的值</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> rc<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//允许访问权限</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sayHi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"Welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><h2 id="多线程与并发"><a href="#多线程与并发" class="headerlink" title="多线程与并发"></a>多线程与并发</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程：进程独占内存空间，保存各自运行状态，相互间不干扰且可以互相切换，为并发处理任务提供了可能。</p><p>线程：共享进程的内存资源，互相间切换更快捷，支持更细粒度的任务控制，使进程内的子任务的一并发执行。</p><p>进程是资源分配的最小单位，线程是CPU调度的最小单位。</p><p>所有与进程相关的资源，都被记录在PCB中。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_PCB.png" alt="Java复习笔记_PCB.png"></p><p>进程是抢占处理机的调度单位。线程属于某个进程，共享其资源。</p><p>线程只由堆栈寄存器、程序计数器和TCB组成。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_TCB.png" alt="Java复习笔记_TCB.png"></p><p>区别：</p><ul><li>线程不能看作独立应用，而进程可看作独立应用</li><li>进程有独立的地址空间，相互不影响，线程只是进程的不同执行路径。当线程down掉，进程也会down掉</li><li>线程没有独立的地址空间，多进程的程序比多线程的程序健壮</li><li>进程的切换比线程的切换开销大</li></ul><h3 id="Java中的进程与线程"><a href="#Java中的进程与线程" class="headerlink" title="Java中的进程与线程"></a>Java中的进程与线程</h3><ul><li>Java对OS提供的功能进行封装，包括线程与进程</li><li>运行一个程序会产生一个进程，进程包含至少一个线程</li><li>每个进程对应一个JVM实例，多个线程共享JVM里的堆，每一个线程都有自己私有的栈</li><li>Java采用单线程编程模型，程序会自动创建主线程</li><li>主线程可以创建子线程，原则上要后于子线程完成执行</li></ul><p>使用<code>Thread.currentThread()</code>获得当前的线程。</p><p>JVM不是只有一个线程 ，比如GC。</p><h3 id="线程安全的主要原因"><a href="#线程安全的主要原因" class="headerlink" title="线程安全的主要原因"></a>线程安全的主要原因</h3><ul><li>存在共享数据（临界资源）</li><li>存在多条线程同时操作这些共享数据</li></ul><p>解决的根本方法：</p><p>同一时刻有且只有一个线程在操作共享数据，其他线程必须等待该线程处理完数据后再对共享数据进行操作。</p><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>特性：</p><ul><li>互斥性：即在同一时间只允许一个线程持有某个对象锁，通过这种特性来实现多线程的协调机制。这样在同一时间只有一个线程对需要同步的代码块（复合操作）进行访问。互斥性即原子性。</li><li>可见性：必须确保在锁被释放之前，对共享变量所做的修改，对于随后获得该锁的另一个线程是可见的（即在获得锁时应获得最新共享变量的值），否则另一个线程可能是在本地缓存的某个副本上继续操作，从而引起不一致。</li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>synchronzied锁的不是代码，而是对象。</p><p>根据获取锁的分类：获取对象锁和获取类锁。</p><h4 id="获取对象锁"><a href="#获取对象锁" class="headerlink" title="获取对象锁"></a>获取对象锁</h4><p>两种方法：</p><ol><li>同步代码块（synchronized(this)，synchronized(类实例对象)），锁是小括号()中的对象</li><li>同步非静态方法（synchronized method），锁是当前对象的实例对象</li></ol><h4 id="获取类锁"><a href="#获取类锁" class="headerlink" title="获取类锁"></a>获取类锁</h4><p>两种方法：</p><ol><li>同步代码块（synchronized(类.class)），锁是小括号()中的类对象(Class对象)</li><li>同步静态方法（synchronzied static method），锁是当前对象的类对象(Class对象)</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>线程访问对象的同步代码块时，另外的线程可以访问该对象的非同步代码块</li><li>若锁住的是同一个对象，一个线程在访问对象的同步代码块时，另一个访问对象的同步代码块的线程会被阻塞</li><li>若锁住的是同一个对象，一个线程在访问对象的同步方法时，另一个访问对象同步方法的线程会被阻塞</li><li>若锁住的是同一个对象，一个线程在访问对象的同步代码块时，另一个访问对象同步方法的线程会被阻塞，反之亦然</li><li>同一个类的不同对象的对象锁互不干扰</li><li>类锁由于也是一种特殊的对象锁，因此表现和上述1,2,3,4一致，而由于一个类只有一把对象锁，所以同一个类的不同对象使用类锁，将会是同步的</li><li>类锁和对象锁互不干扰</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><h5 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h5><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会进入阻塞状态。但当一个线程再次请求自己持有对象锁的临界资源的时候，这种情况就叫重入。</p><h5 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h5><p>对象在内存中的布局：</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><p>对象头的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%AF%B9%E8%B1%A1%E5%A4%B4%E7%BB%93%E6%9E%84.png" alt="Java复习笔记_对象头结构.png"></p><p>Mark Word结构：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_MarkWord.png" alt="Java复习笔记_MarkWord.png"></p><h5 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h5><p>每个Java对象天生自带了一把看不见的锁。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Montior%E9%94%81.png" alt="Java复习笔记_Montior锁.png"></p><h4 id="synchronized的四种状态"><a href="#synchronized的四种状态" class="headerlink" title="synchronized的四种状态"></a>synchronized的四种状态</h4><ul><li>无锁</li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li></ul><p>锁膨胀方向：无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E9%94%81%E6%B1%87%E6%80%BB.png" alt="Java复习笔记_锁汇总.png"></p><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p>减少同一线程获取锁的代价。</p><p>大多数情况下，锁不存在竞争，总是由同一线程多次获得。</p><p>不适用于锁竞争比较激烈的多线程场合。</p><p>核心思想：</p><p>如果一个线程呢个获得了锁，那么锁就进入偏向模式。此时Mark Word的结构也就变为偏向锁，当该线程再次请求锁，无需再做任何同步操作，即获得锁的过程只需检查Mark Word的锁标记位为偏向锁以及当前线程的ID等于ThreadID即可，这样就省去了大量有关锁申请的操作。</p><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p>轻量级锁是由偏向锁升级来的，偏向锁运行一个线程进入同步块的情况下。当第二个线程加入锁争用的时候，偏向锁会升级成轻量级锁。</p><p>使用场景：线程交替执行同步代码块</p><p>若存在同一时间多个线程访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p><h6 id="加锁过程"><a href="#加锁过程" class="headerlink" title="加锁过程"></a>加锁过程</h6><ol><li><p>在代码进入同步代码块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”），虚拟机首先在当前线程的栈帧中创建一个名为锁记录(Lock Record)的空间，用于存储锁对象目前的Mark Word拷贝。官方称之为Displaced Mark Word。这时候线程堆栈与对象头的状态如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%88%9D%E5%A7%8B%E5%8C%96%E9%94%81.png" alt="Java复习笔记_初始化锁.png"></p></li><li><p>拷贝对象头中的Mark Word复制到锁记录中。</p></li><li><p>拷贝完成后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向object mark word。如果成功，则执行步骤4,否则执行步骤5。</p></li><li><p>如果这个更新成功，那么这个线程就拥有了该对象的锁，并且该对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt="Java复习笔记_轻量级锁.png"></p></li><li><p>如果这个更新失败，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧。如果是就说明当前线程已经拥有这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁膨胀为重量级锁，锁标志位的状态值设置为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也就要进入阻塞状态。而当前线程便尝试使用自旋来获取锁。</p></li></ol><h3 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a>锁的内存语义</h3><p>当线程释放锁时，Java内存模型会把该线程对应的本地内存中的共享变量刷新到主内存中。</p><p>当线程获取锁时，Java内存模型会把该线程对应的本地内存置为无效，从而使得被监视器保护的临界区代码必须从主内存中读取共享变量。</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><h4 id="run方法和start方法"><a href="#run方法和start方法" class="headerlink" title="run方法和start方法"></a>run方法和start方法</h4><p>调用run方法的时候会调用主线程执行方法，当调用start会调用非main的线程执行方法。</p><ul><li>调用start方法会创建一个新的子线程并启动</li><li>run方法只是Thread的一个普通的方法调用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_run%E6%96%B9%E6%B3%95.png" alt="Java复习笔记_run方法.png"></p><h4 id="Runnable和Thread"><a href="#Runnable和Thread" class="headerlink" title="Runnable和Thread"></a>Runnable和Thread</h4><p>Runnable只是一个接口，里面有一个抽象的run方法。</p><ul><li>Thread是实现了Runnable接口的类，使得run支持多线程</li><li>因类的单一继承原则，推荐多使用Runnable接口</li></ul><h4 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h4><p>早期版本中，synchronzied属于重量级锁，依赖于Mutex Lock实现。线程之间的切换需要从用户态转换成核心态，开销较大。</p><p>JDK6之后，性能获得提升，引入Adaptive Spinning、Lock Eliminate、Lock Coarsening、Lightweight Locking、Biased Locking…</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><ul><li>许多情况下，共享数据的锁定状态持续时间较短，切换进程不值得</li><li>通过让线程执行忙循环等待锁的释放，不让出CPU</li><li>缺点：若锁被其他线程长时间占用，会带来许多性能上的开销</li></ul><p>可以使用PerBlockSpin进行更改。</p><h3 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h3><ul><li>自旋的次数不再固定</li><li>由前一次在同一个锁上的自旋时间及锁的拥有这的状态来决定</li></ul><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>JIT编译时，对运行上下文进行扫描，去除不可能存在竞争的锁。</p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>为了帮助一连串琐碎的加锁去锁的过程，在外部加锁。</p><h3 id="run方法传参"><a href="#run方法传参" class="headerlink" title="run方法传参"></a>run方法传参</h3><ul><li>构造函数传参</li><li>成员变量传参</li><li>回调函数传参</li></ul><h3 id="处理线程的返回值"><a href="#处理线程的返回值" class="headerlink" title="处理线程的返回值"></a>处理线程的返回值</h3><ul><li>主线程等待法，需要自己实现等待的方法。当变量多的时候，会导致代码繁琐，无法做到精准的控制</li><li>使用Thread类的join方法阻塞当前进程以等待子线程处理完毕。但是粒度粗。</li><li>通过Callable接口实现：通过FutureTask Or 线程池获取</li></ul><h4 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h4><p>该接口中只有一个抽象方法：call()。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyCallable.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> value<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//FutureTaskDemo.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTaskDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task has not finished, please wait!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task return: "</span> <span class="token operator">+</span> task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FutureTask的isDone方法表示线程执行完成，get方法获取返回值，get方法能设定最长等待时间，直接传参即可。</p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyCallable.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> value<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ready to work"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//ThreadPoolDemo.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> newCachedThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> newCachedThreadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"task has not finished, please wait!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>Executors.newCachedThreadPool</code>创建<code>ExecutorService</code>对象。通过对象的submit方法包裹继承Callable接口的自定义类，注意这里的返回值使用Future去接收。最后记得关闭线程池，使用ExecutorService的shutdown方法。</p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>六个状态：</p><ul><li><p>新建（New）：创建后尚未启动的状态</p></li><li><p>运行（Runnable）：包含Running和Ready</p></li><li><p>无限期等待（Waiting）：不会被分配CPU执行时间，需要显式被唤醒。</p><ul><li>没有设置Timeout参数的Object.wait()方法</li><li>没有设置Timeout参数的Thread.join()方法</li><li>LockSupport.park()方法</li></ul></li><li><p>限期等待（Timed Waiting）：在一定时间后由系统自动唤醒</p><ul><li>Thread.sleep()方法</li><li>设置Timeout参数的Object.wait()方法</li><li>设置Timeout参数的Thread.join()方法</li><li>LockSupport.parkNanos()方法</li><li>LockSupport.parkUtil()方法</li></ul></li><li><p>阻塞（Blocked）：等待获取排它锁</p></li><li><p>结束（Terminated）：已终止线程的状态，线程已经结束执行</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="Java复习笔记_线程状态图.png"></p><h3 id="sleep和wait"><a href="#sleep和wait" class="headerlink" title="sleep和wait"></a>sleep和wait</h3><ul><li>sleep()是Thread类的方法，wait是Object类中定义的方法</li><li>sleep()方法可以在任何地方使用</li><li>wait()方法只能在synchronized方法或synchronized块中使用</li><li><strong>Thread.sleep()只会让出CPU,不会导致锁行为的改变</strong></li><li><strong>Object.wait()不仅让出CPU,还会释放已经占用的同步资源锁</strong></li><li>Object.wait()方法能被notify和notifyAll唤醒</li></ul><h3 id="notify和notifyAll"><a href="#notify和notifyAll" class="headerlink" title="notify和notifyAll"></a>notify和notifyAll</h3><h4 id="锁池EntryList"><a href="#锁池EntryList" class="headerlink" title="锁池EntryList"></a>锁池EntryList</h4><p>假设线程A已经拥有了某个对象（不是类）的锁，而其他线程B、C想要调用这个对象的某个synchronized方法（或者块），由于B、C线程在进入对象的synchronized方法（或者块）之前必须获得该对象锁的拥有权，而恰好该对象的锁目前正被线程A所占用。此时B、C线程就会被阻塞，进入一个地方等待锁的释放，这个地方就是该对象的锁池。</p><h4 id="等待池WaitSet"><a href="#等待池WaitSet" class="headerlink" title="等待池WaitSet"></a>等待池WaitSet</h4><p>假设线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁。同时线程A就进入到该对象的等待池中，不会去竞争该对象的锁。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>notifyAll会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li><li>notify只会随即选取一个处于等待池中的线程进入锁池去争取竞争获取锁的机会</li></ul><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>当调用Thread.yield()函数时，会给线程调度器一个当前线程愿意让出CPU使用的暗示，但是线程调度器可能会忽略这个暗示。<strong>但是不会释放锁资源。</strong></p><h3 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h3><p>已经被抛弃的方法：</p><ul><li>通过调用stop()停止线程</li><li>通过调用suspend()方法和resume()方法</li></ul><p>目前使用的方法：</p><p>调用interrupt()方法，通知线程应该中断了。</p><ul><li>如果线程处于被阻塞的状态，那么线程将立即推出被阻塞的状态，并抛出一个InterruptedException异常</li><li>如果线程处于正常活动状态，那么会将该线程的中断标志设置为true.被设置中断标志的线程将继续正常运行，不受影响</li></ul><h2 id="常见类库"><a href="#常见类库" class="headerlink" title="常见类库"></a>常见类库</h2><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png" alt="Java复习笔记_集合框架.png"></p><h3 id="List和Set"><a href="#List和Set" class="headerlink" title="List和Set"></a>List和Set</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_List&amp;Set.png" alt="Java复习笔记_List&amp;Set.png"></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p><strong>在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。</strong></p><p>当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。</p><p>在Java8以前实现方式为数组+链表。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_HashMap.png" alt="Java复习笔记_HashMap.png"></p><p> 当大量数值的hash值相同时，则存储在链表中。链表查找是通过便利进行查找，所以性能恶化时，会从$O(1)$变成$O(n)$。</p><p>在Java8之后实现方式变为数组+链表+红黑树。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_HashMap_JDK8.png" alt="Java复习笔记_HashMap_JDK8"></p><p>当链表超过8时，链表变化成红黑树。当链表小于6时，退化成链表。</p><p>put方法的逻辑：</p><ol><li>如果HashMap未被初始化过，则初始化</li><li>对Key求Hash值，然后再计算下标</li><li>如果没有碰撞，直接放入桶中</li><li>如果碰撞，以链表的方式链接到后面</li><li>如果链表长度超过阈值，就把链表转成红黑树</li><li>如果链表长度低于6,就把红黑树转回成链表</li><li>如果节点已经存在就替换旧值</li><li>如果桶满了（容量16×加载因子0.75），就需要resize（扩容后重排）</li></ol><p>默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。</p><p>如何有效的减少碰撞：</p><ul><li>扰动函数：促使元素位置分布均匀，减少碰撞几率</li><li>使用final对象，并采用合适的equals和hashCode方法</li></ul><p>重新调整HashMap大小存在的问题：</p><p>当重新调整HashMap大小的时候，确实存在条件竞争，因为如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。在调整大小的过程中，存储在链表中的元素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将元素放在链表的尾部，而是放在头部，这是为了避免尾部遍历(tail traversing)。如果条件竞争发生了，那么就死循环了。</p><p>获取hash到散列的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_HashMapGetHash.png" alt="Java复习笔记_HashMapGetHash.png"></p><p>HashMap 底层数组的长度总是 2 的 n 次方。</p><p>当 length 总是 2 的倍数时，h &amp; (length-1) 将是一个非常巧妙的设计：假设 h=5,length=16, 那么 h &amp; length - 1 将得到 5；如果 h=6,length=16, 那么 h &amp; length - 1 将得到 6 ……如果 h=15,length=16, 那么 h &amp; length - 1 将得到 15；但是当 h=16 时 , length=16 时，那么 h &amp; length - 1 将得到 0 了；当 h=17 时 , length=16 时，那么 h &amp; length - 1 将得到 1 了……这样保证计算得到的索引值总是位于 table 数组的索引之内。</p><p><strong>增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</strong></p><p>扩容问题：</p><ul><li>多线程环境下，调整大小会存在条件竞争，容易造成死锁</li><li>rehashing是一个比较耗时的过程</li></ul><p>HashMap变成线程安全需要用<code>Collections.synchronizedMap()</code>包裹。因为synchronizedMap里面有一个final属性的mutex进行控制。</p><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>HashTable是线程安全的，所有方法都被<code>synchronized</code>修饰。因为是串行执行，所以效率较低。</p><p>可以通过锁细粒度化，将整把锁拆分成多个锁进行优化。</p><p><strong>Hashtable中，key和value都不允许出现null值。</strong></p><h4 id="ConccurentHashMap"><a href="#ConccurentHashMap" class="headerlink" title="ConccurentHashMap"></a>ConccurentHashMap</h4><p>早期ConcurrentHashMap：通过分化锁Segment实现。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%97%A9%E6%9C%9FConcurrentHashMap.png" alt="Java复习笔记_早期ConcurrentHashMap.png"></p><p>当前的ConcurrentHashMap：CAS+synchronized使得锁更细化。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_ConcurrentHashMap.png" alt="Java复习笔记_ConcurrentHashMap.png"></p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet 本身就采用 HashMap 来实现的。但是HashMap是Map接口的常用实现类，HashSet是Set接口的常用实现类。接口规范不同，但是底层的Hash存储机制完全一样。</p><p>HashSet的实现其实非常简单，它只是封装了一个HashMap对象来存储所有的集合元素。所有放入HashSet中的集合元素实际上由HashMap的key来保存，而HashMap的value则存储了一个PRESENT，它是一个静态的Object对象。</p><h3 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h3><p>String是字符串常量，而StringBuffer和StringBuilder是字符串变量。由String创建的字符内容是不可改变的，而由StringBuffer和StringBuilder创建的字符内容是可以改变的。</p><p>StringBuffer是线程安全的，而StringBuilder是非线程安全的。StringBuilder是从JDK 5开始，为StringBuffer类补充的一个单线程的等价类。<strong>我们在单线程使用时应优先考虑使用StringBuilder</strong>，因为它支持StringBuffer的所有操作，但是因为它不执行同步，不会有线程安全带来额外的系统消耗，所以速度更快。</p><p>虽然String、StringBuffer和StringBuilder都是final类，它们生成的对象都是不可变的，而且它们内部也都是靠char数组实现的，但是不同之处在于，String类中定义的char数组是final的，而StringBuffer和StringBuilder都是继承自AbstractStringBuilder类，它们的内部实现都是靠这个父类完成的，而这个父类中定义的char数组只是一个普通是私有变量，可以用append追加。因为AbstractStringBuilder实现了Appendable接口。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>What：异常类型回答了什么被抛出</li><li>Where：异常堆栈跟踪回答了在哪被抛出</li><li>Why：异常信息回答了为什么被抛出</li></ul><p><strong>try-catch块影响JVM优化，并且异常对象实例需要保存栈快照等信息，开销较大。</strong></p><h3 id="Error和Exception"><a href="#Error和Exception" class="headerlink" title="Error和Exception"></a>Error和Exception</h3><ul><li>Error：程序无法处理的系统错误，编译器不做检查</li><li>Exception：程序可以处理的异常，捕获后可能恢复</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%BC%82%E5%B8%B8.png" alt="Java复习笔记_异常.png"></p><ul><li>RuntimeException：不可预知，程序应当自行避免</li><li>非RuntimeException：可预知，从编译器校验的异常</li></ul><h3 id="常见的Error和Exception"><a href="#常见的Error和Exception" class="headerlink" title="常见的Error和Exception"></a>常见的Error和Exception</h3><h4 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h4><ul><li>NullPointerException——空指针引用异常</li><li>ClassCastException——类型强制转换异常</li><li>IllegalArgumentException——传递非法参数异常</li><li>IndexOutOfBoundsException——下标越界异常</li><li>NumberFormatException——数字格式异常</li></ul><h4 id="非RuntimeException"><a href="#非RuntimeException" class="headerlink" title="非RuntimeException"></a>非RuntimeException</h4><ul><li>ClassNotFoundException——找不到指定的class的异常</li><li>IOException——IO操作异常</li></ul><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><ul><li>NoClassDefFoundError——找不到class定义异常</li><li>StackOverflowError——深递归导致栈被耗尽而抛出的异常</li><li>OutofMemoryError——内存溢出异常</li></ul><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><ul><li>抛出异常：创建异常对象，交由运行时系统处理</li><li>捕获异常：寻找合适的异常处理器处理异常，否则终止执行</li></ul><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>把底层类作为参数传递给上层类，实现上层对下层的“控制”。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Spring_DI.png" alt="Java复习笔记_Spring_DI.png"></p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC支持的功能：</p><ul><li>依赖注入</li><li>依赖检查</li><li>自动装配</li><li>支持集合</li><li>指定初始化方法和销毁方法</li><li>支持回调方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Spring_IOC.png" alt="Java复习笔记_Spring_IOC.png"></p><p>IOC容器的优势：</p><ul><li>避免在各处使用new来创建类，并且可以做到统一维护。</li><li>创建实例的时候不需要了解其中的细节。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Spring_IOC%E6%B5%81%E7%A8%8B.png" alt="Java复习笔记_Spring_IOC流程.png"></p><h4 id="IOC容器的核心接口"><a href="#IOC容器的核心接口" class="headerlink" title="IOC容器的核心接口"></a>IOC容器的核心接口</h4><h5 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h5><p>Spring框架最核心的接口。</p><ul><li>提供了IOC的配置机制。</li><li>包含Bean的各种定义，便于实例化Bean。</li><li>建立Bean之间的依赖关系。</li><li>Bean生命周期的控制。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_BeanFactory%E4%BD%93%E7%B3%BB.png" alt="Java复习笔记_BeanFactory体系.png"></p><h5 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h5><p>ApplicationContext是BeanFactory的子接口之一。 </p><p>ApplicationContext的功能（继承多个接口）</p><ul><li>BeanFactory：能够管理、装配Bean。</li><li>ResourcePatternResolver：能够加载资源文件。</li><li>MessageSource：能够实现国际化等功能。</li><li>ApplicationEventPublisher：能够注册监听器，实现监听机制。</li></ul><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ul><li>Beanfactory是Spring框架的基础设施，面向Spring。</li><li>ApplicationContext面向使用Spring框架的开发者。</li></ul><p>BeanDefinition：主要用来描述Bean定义。</p><p>BeanDefinitionRegistry：提供向IOC容器注册BeanDefinition对象的方法。</p><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><ul><li>singleton：Spring的默认作用域，容器里拥有唯一的Bean实例。适合无状态Bean。</li><li>prototype：针对每个getBean请求，容器都会创建一个Bean实例。适合有状态的Bean。</li><li>request：会为每个HTTP请求创建一个Bean实例。</li><li>session：会为每个session创建一个Bean实例。</li><li>golbalSession：会为每个全局HTTP Session创建一个Bean,该最用于仅对Portlet有效。</li></ul><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><h6 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h6><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Bean%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B.png" alt="Java复习笔记_Bean创建流程.png"></p><h6 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h6><ul><li>若实现了DisposableBean接口，则会调用destory方法。</li><li>若配置了destory-method属性，则会调用其配置的销毁方法。</li></ul><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>关注点分离：不同的问题交给不同的部分去解决。</p><ul><li>面向切面编程AOP正是此种技术的实现</li><li>通用化功能代码的实现，对应的就是所谓的切面（Aspect）</li><li>业务功能代码和切面代码分开后，架构将变得高内聚低耦合</li><li>确保功能的完整性：切面最终需要被合并到业务中（Weave）</li></ul><h4 id="三种织入方式"><a href="#三种织入方式" class="headerlink" title="三种织入方式"></a>三种织入方式</h4><ul><li>编译时织入：需要特殊的Java编译器，如AspectJ</li><li>类加载时织入：需要特殊的Java编译器，如AspectJ和AspectWerkz</li><li>运行时织入：Spring采用的方式，通过动态代理的方式，实现简单</li></ul><h4 id="主要名词概念"><a href="#主要名词概念" class="headerlink" title="主要名词概念"></a>主要名词概念</h4><ul><li>Aspect：通用功能的代码实现</li><li>Target：被织入Aspect的对象</li><li>Join point：可以作为切入点的机会，所有方法都可以作为切入点</li><li>Pointcut：Aspect世纪被应用在的Join Point,支持正则</li><li>Advice：类里的方法以及这个方法如何织入到目标方法的方式</li><li>Waving：AOP的实现过程</li></ul><h4 id="Advice的种类"><a href="#Advice的种类" class="headerlink" title="Advice的种类"></a>Advice的种类</h4><ul><li>前置通知（Before）</li><li>后置通知（AfterReturning）</li><li>异常通知（AfterThrowing）</li><li>最终通知（After）</li><li>环绕通知（Around）</li></ul><h4 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h4><p>AOP的实现通过JdkProxy和Cglib。</p><ul><li>由AopProxyFactory根据AdvisedSupport对象的配置来决定</li><li>默认策略如果目标类是接口，则用JDKProxy实现，否则后者</li><li>JDKProxy的核心：InvocationHandler接口类和Proxy类</li><li>Cglib：以继承的方式动态生成目标类的代理</li><li>JDKProxy：通过Java的内部反射机制实现，反射机制在生成类的过程中比较高效</li><li>Cglib：借助ASM实现，ASM是一种能够操作字节码的框架，ASM在生成类之后的执行过程中比较高效，可以使用缓存的方式，改善ASM生成类过程中缓慢的问题</li></ul><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><h3 id="事务传播"><a href="#事务传播" class="headerlink" title="事务传播"></a>事务传播</h3><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="static、final、static-final的区别"><a href="#static、final、static-final的区别" class="headerlink" title="static、final、static final的区别"></a>static、final、static final的区别</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>可以修饰属性、方法、类、局部变量。</p><p>初始化可以在编译期或者运行期，<strong>初始化后不能改变。</strong></p><p>与具体对象有关，在运行期初始化的final属性，不同对象可以有不同值。</p><p>final类无法被继承，没有子类，final类中的方法默认是final的。</p><p>final方法不能被子类的方法覆盖，但是可以被继承。</p><p><strong>final成员变量表示常量，只能被赋值一次。其后不能改变。</strong></p><p>不能用于修饰构造方法。</p><p>private类型的方法默认是final类型的。</p><ul><li>对于基本数据类型：是常量，创建后不能修改。</li><li>对于对象句柄：final将句柄变成常数（在声明时，必须将句柄初始化到一个具体的对象，而且不能再将句柄指向另一个对象。<strong>但是对象本身是可以修改的</strong>）</li><li>对于数组：数组属于对象，数组本身也可以改。同对象。</li><li>对于方法参数中的final句柄：在该方法内部不能改变参数句柄指向的实际东西，不能给形参句柄再赋值。</li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>可以修饰属性、方法、代码段、内部类（静态或嵌套内部类）</p><p>初始化在编译期，初始化后能改变。</p><p>static与具体对象无关。</p><p>不可以修饰局部变量。</p><p><strong>被static修饰的成员变量和成员方法独立于该类的任何对象。</strong>被所有类的实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内找到它们。可以在任意对象创建之前访问，无需引用任何对象。</p><h4 id="final-static"><a href="#final-static" class="headerlink" title="final static"></a>final static</h4><p><strong>static修饰的属性强调它们只有一个，final修饰的属性强调是一个常数</strong>。</p><h3 id="不同JDK版本之间的intern-方法的区别"><a href="#不同JDK版本之间的intern-方法的区别" class="headerlink" title="不同JDK版本之间的intern()方法的区别"></a>不同JDK版本之间的intern()方法的区别</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JDK6：当调用intern方法时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。否则，将此字符串对象添加到字符串常量池中，并且返回该字符串对象的引用。</p><p>JDK6+：当调用intern方式时，如果字符串常量池先前已创建出该字符串对象，则返回池中的该字符串的引用。否则，如果该字符串对象已经存在于Java堆中，则将堆中对此对象的引用添加到字符串常量池中，并且返回该引用。如果堆中不存在，则在池中创建该字符串并返回其引用。</p><h3 id="getBean方法的代码逻辑"><a href="#getBean方法的代码逻辑" class="headerlink" title="getBean方法的代码逻辑"></a>getBean方法的代码逻辑</h3><ol><li>转换beanName</li><li>从缓存中加载实例</li><li>实例化Bean</li><li>检测parentBeanFactory</li><li>初始化依赖的Bean</li><li>创建Bean </li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java架构之旅--单体</title>
      <link href="/2020/09/29/cheng-xu-she-ji/java-jia-gou-zhi-lu-dan-ti/"/>
      <url>/2020/09/29/cheng-xu-she-ji/java-jia-gou-zhi-lu-dan-ti/</url>
      
        <content type="html"><![CDATA[<p>大型互联网网站特点：</p><ul><li>高流量，流量大</li><li>高可用</li><li>大数据</li><li>敏捷开发，迭代快</li><li>用户体系庞大</li><li>可持续升级</li><li>安全防范</li><li>弹性扩展</li><li>吞吐量高，响应速度快</li></ul><p>maven项目的打包方式分为三种：pom(用在父级工程或聚合工程)、jar(用于jar包使用)、war(打包成war，发布在服务器上的工程)。</p><p>聚合工程里可以分为顶级工程和子工程。这两者的关系是父子继承关系。子工程在maven中称之为模块(module)，模块之间是平级的，可以相互依赖(在相应的子模块pom文件中添加依赖关系)。</p><p>子模块可以使用顶级工程了所有的资源(依赖)，子模块之间如果要使用资源，必须构建依赖(构建关系)。</p><p>一个顶级工程是可以有多个不同的子工程共同组合而成，在项目中打包成jar包的形式。</p><p>顶级工程创建后，需要在创建子工程后检查顶级工程的pom文件中moduels标签中是否存在子工程module。</p><p>pom中的依赖具有传递性。</p><p>创建完顶级工程与子工程后，但是此时项目还是没有依赖关系还没有真正的建立。需要使用maven工具中lifecycle中的install，建立其中的依赖关系。</p><p><strong>不推荐使用数据库外键</strong>，原因如下：</p><ul><li>性能影响</li><li>热更新。但是外键会导致新更新的代码无法热更新</li><li>保留逻辑外键，但是不推荐物理外键，降低耦合度</li><li>数据库分库分表，物理外键不适合分布式数据库的分库分表</li></ul><h2 id="项目设置成SpringBoot项目"><a href="#项目设置成SpringBoot项目" class="headerlink" title="项目设置成SpringBoot项目"></a>项目设置成SpringBoot项目</h2><ol><li>在<code>pom.xml</code>文件中添加如下字段可以添加相关基础依赖：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>设置资源属性</p><p>在<code>pom.xml</code>中添加如下字段：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加依赖</p><p>在<code>pom.xml</code>中添加如下字段：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在相应项目的<code>src/main/java</code>中创建形如<code>com.wangzhengbest</code>的文件夹作为整个项目代码的存放空间。</p></li><li><p>创建<code>Application.java</code>文件，添加如下字段:</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//扫描mybatis通用mapper所在包</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.wangzhengbest.mapper"</span><span class="token punctuation">)</span><span class="token comment">//扫描所有包，以及相关组件包</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.wangzhengbest"</span><span class="token punctuation">,</span><span class="token string">"org.n3r.idworker"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>在当前项目的<code>resources</code>文件夹下创建<code>application.yml</code>配置文件。</p></li><li><p>创建一个控制器，代码如下：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <em>@RestController默认返回一个json对象</em></p><p>​    @RequestMapping(“api地址”)</p><p>​    在函数的传入参数中添加@RequestParam表示该传参是一个请求类型的参数，而不是一个路径参数。@RequestBody作用类似上个，但是接收的是一个对象。</p><p><strong>maven-site-plugin报错</strong></p><p>若IDEA报错，可以将其添加至pom.xml文件中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-site-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>添加JUNIT测试</strong><br>在pom.xml文件中添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合数据库相关设置"><a href="#整合数据库相关设置" class="headerlink" title="整合数据库相关设置"></a>整合数据库相关设置</h2><ol><li><p>添加依赖</p><p>在整个工程的<code>pom.xml</code>文件中添加如下字段:</p></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        mysql驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        mybatis--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>添加配置</p><p>在当前项目的<code>application.yml</code>中添加相应配置：</p></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置数据源信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># 数据源的相关设置</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment"># 数据源类型:HikariCP</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token comment"># Mysql驱动</span>    <span class="token key atrule">drive-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//数据库ip或者域名<span class="token punctuation">:</span>mysql端口号/Project_Shop<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;autoReconnect=true</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> 用户名    <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码  <span class="token key atrule">hikari</span><span class="token punctuation">:</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span> <span class="token comment"># 等待连接池分配链接的最大时长(毫秒)，超过这个时长还没有可用连接则发生SQLException,默认30秒</span>    <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 最小连接数</span>    <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 最大连接数</span>    <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 自动提交</span>    <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">600000</span> <span class="token comment"># 连接超时的最大时长(毫秒),超时则被释放(retired),默认10分钟</span>    <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> DateSourceHikariCP <span class="token comment"># 连接池名字</span>    <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span> <span class="token comment"># 连接的生命时长(毫秒),超时而且没被使用则被释放,默认30分钟 1800000ms</span>    <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1<span class="token comment"># Mybatis配置</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.wangzhengbest.pojo <span class="token comment"># 所有POJO类所在包路径</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span> <span class="token comment"># mapper映射文件,classpath表示项目的resources文件夹</span><span class="token comment"># 内置Tomcat配置</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span>  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">max-http-header-size</span><span class="token punctuation">:</span> 80KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Restful Web Service</strong></p><ul><li>通信方式</li><li>信息传递</li><li>无状态</li><li>独立性</li></ul><h2 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>commons-lang3的StringUtils中有一个方法isNotBlank可以判断字符串是否为空且是否非空字符串。</p><h2 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h2><ul><li><p>基于POJO轻量级和最小侵入式开发</p><p>对于EJB、Struts2等一些传统的框架，通常是要实现特定的接口，继承特定的类才能增强功能。改变了Java类的结构。</p><p>对于Hibernate、Spring等框架，对现有的类结构没有影响，就能增强JavaBean的功能。</p></li><li><p>通过依赖注入和面向接口实现松耦合</p></li><li><p>基于切面和惯例进行声明式编程</p></li><li><p>通过切面和模板<strong>减少样版式代码</strong></p></li></ul><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转，简单来说就是对象的创建交给外部容器完成。对象与对象之间的依赖关系依靠依赖注入实现。</p><p>IOC思想最核心的地方在于<strong>资源不由使用资源的双方管理，而由不使用资源的第三方管理。</strong>这样的好处是<strong>1.资源集中管理，实现资源的可配置和易管理。2.降低了使用资源双方的耦合度。</strong></p><p>$$Spring \begin{cases} Core: Spring的核心功能 \ Web: Spring对Web模块的支持 \ DAO: Spring对JDBC操作的支持 \ ORM: Spring对ORM的支持 \ AOP: 切面编程 \ SpringEE: Spring对JAVAEE其他模块的支持 \end{cases} $$</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务概念可以描述成以下四个关键属性ACID：</p><ul><li>原子性：事务应当作为一个单独单元的操作。整个序列操作要么成功，要么失败。</li><li>一致性：这表示数据库的引用完整性的一致性，表中唯一的主键等。</li><li>隔离性：可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li><li>持久性：一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li></ul><p>Spring中事务本质是数据库对事务的支持。当我们在配置文件中开启注解驱动，并在相关类和方法上通过注解<code>@Transactional</code>标识时，Spring会在启动时解析生成相关的bean，会查看拥有相关注释的类和方法，并且为这些类和方法生成代理。根据@Transactional的相关参数进行注入。真正的数据库层面的事务提交和回滚通过binlog或redo log实现。</p><p>数据访问技术及其实现：</p><table><thead><tr><th>数据库访问技术</th><th>实现</th></tr></thead><tbody><tr><td>JDBC</td><td>DataSourceTransactionManager</td></tr><tr><td>JPA</td><td>JpaTransactionManager</td></tr><tr><td>Hibernate</td><td>HibernateTransactionManager</td></tr><tr><td>JDO</td><td>JdoTransactionManager</td></tr><tr><td>分布式事务</td><td>JtaTransactionManager</td></tr></tbody></table><p>Spring事务抽象的关键是由 <em>org.springframework.transaction.PlatformTransactionManager</em> 接口定义，如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token punctuation">{</span>   <span class="token comment">//根据指定的传播行为，该方法返回当前活动事务或创建一个新的事务。</span>    <span class="token class-name">TransactionStatus</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token class-name">TransactionDefinition</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>    <span class="token comment">//该方法提交给定的事务和关于它的状态。</span>   <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span>    <span class="token comment">//该方法执行一个给定事务的回滚。</span>   <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransactionException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。即向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。</strong></p><p>Spring中关于事务的配置总是由三个部分组成。</p><p>$Spring事务配置\begin{cases}DataSource \ TransactionManager \ 代理机制(一般变化的之后这部分)\end{cases}$</p><pre class="mermaid">graph LR    Spring事务配置--&gt;DataSource    DataSource--&gt;DataSource_ &amp; SessionFactory &amp; EntityManager    DataSource_-.JDBC配置.-&gt;DataSourceTransactionManager    SessionFactory-.Hibernate配置.-&gt;HibernateTranscationManager    EntityManager-.JPA配置.-&gt;JpaTransactionManager    Spring事务配置--&gt;TransactionManager    TransactionManager--&gt;DataSourceTransactionManager &amp; HibernateTranscationManager &amp; JpaTransactionManager    Spring事务配置--&gt;代理机制    代理机制--&gt;proxy[Bean和代理] &amp; 使用拦截器 &amp; 使用Tx标签配置的拦截器 &amp; 全注解配置    proxy--&gt;每个Bean有一个代理 &amp; 所有Bean共享一个代理基类</pre><h4 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h4><p>即定义存在多个事务的时候，spring应该如何处理这些事务的行为。</p><table><thead><tr><th>常量名称</th><th>常量解释</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>支持当前事务，如果当前没有事务，就新建一个。是Spring默认的事务传播。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，则当前事务挂起，新建的事务将和被挂起的事务没有任何关系，是两个独立的事务。外层事务失败回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式运行。查询时可以使用。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务，如果当前没有事务，则抛出异常。强制存在一个事务。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式运行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性运行，它使用了一个单独的事务。这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响，但是外部回滚会把内部事务一起回滚回去。它只对DataSourceTransactionManager事务管理器起效。</td></tr></tbody></table><h4 id="Spring中事务隔离级别"><a href="#Spring中事务隔离级别" class="headerlink" title="Spring中事务隔离级别"></a>Spring中事务隔离级别</h4><table><thead><tr><th>隔离级别</th><th>隔离级别的值</th><th>导致的问题</th></tr></thead><tbody><tr><td>Read-Uncommitted</td><td>0</td><td>导致脏读</td></tr><tr><td>Read-Committed</td><td>1</td><td>避免脏读，允许不可重复读和幻读</td></tr><tr><td>Repeatable-Read</td><td>2</td><td>避免脏读，不可重复读，允许幻读</td></tr><tr><td>Serializable</td><td>3</td><td>串行优读，事务只能一个一个执行，避免了脏读，不可重复读、幻读。执行效率慢，使用时慎重。</td></tr></tbody></table><p>脏读：一个事务对数据进行了增删改，但是未提交命令一个事务可以读取到未提交的数据。如果第一个事务此时进行了回滚，那么第二个事务就读到了脏数据。</p><p>不可重复读：一个事务中发生了两次读操作。第一次读操作和第二次读操作之间，另一个事务对数据进行了修改，此时两次读取的数据是不一致的。</p><p>幻读：第一个事务查询一定范围内的数据，第二个事务在这个范围i内insert一条数据，此时第一个事务会出现两次查询结果不一致的情况。</p><p>总结：</p><ul><li><strong>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</strong></li><li>大多数数据库默认隔离级别为Read Committed,如果SqlServer、Oracle。</li><li>少数数据库默认隔离级别为：Repeatable Read。如Mysql的InnoDB引擎。<strong>Mysql的InnoDB引擎下的RR隔离级别通过next-key lock解决了幻读问题。</strong></li></ul><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>这是个PlatfromTransactionManager默认的隔离级别。使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。</td></tr><tr><td>ISOLATION_READ_UNCOMMITED</td><td>这是事务最低的隔离级别，它允许另一个事务可以看到这个事务提交的数据。会导致脏读，不可重复读和幻读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>保证一个事务修改的数据提交后才能被另一个事务读取。另一个事务不能读取该事务未提交的数据。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>可以防止脏读，不可重复读，但是可能出现幻读。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>花费最高最为可靠的事务隔离级别，事务被顺序执行。</td></tr></tbody></table><p>@Transactional注解中可以设置事务的隔离级别，默认是ISOLATION_DEFAULT级别。</p><p>由属性接口TransactionDefinition可以看到，可返回四个基本事务属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传播行为。</span>    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隔离级别。事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据。</span>    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 事务必须在多少秒内完成。</span>    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事务是否只读。事务管理器能够根据这个返回值进行优化，确保事务是只读的</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务的嵌套"><a href="#事务的嵌套" class="headerlink" title="事务的嵌套"></a>事务的嵌套</h4><p>假设外层事务 ServiceA的Method A() 调用内层ServiceB的Method B()</p><h5 id="PROPAGATION-REQUIRED-Spring默认"><a href="#PROPAGATION-REQUIRED-Spring默认" class="headerlink" title="PROPAGATION_REQUIRED(Spring默认)"></a>PROPAGATION_REQUIRED(Spring默认)</h5><p>如果ServiceB.methodB() 的事务级别定义为 PROPAGATION_REQUIRED，那么执行 ServiceA.methodA() 的时候Spring已经起了事务，这时调用 ServiceB.methodB()，ServiceB.methodB() 看到自己已经运行在 ServiceA.methodA() 的事务内部，就不再起新的事务。</p><p>假如 ServiceB.methodB() 运行的时候发现自己没有在事务中，他就会为自己分配一个事务。</p><p>这样，在 ServiceA.methodA() 或者在 ServiceB.methodB() 内的任何地方出现异常，事务都会被回滚</p><h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h5><p>比如我们设计 ServiceA.methodA() 的事务级别为 PROPAGATION_REQUIRED，ServiceB.methodB() 的事务级别为 PROPAGATION_REQUIRES_NEW。</p><p>那么当执行到 ServiceB.methodB() 的时候，ServiceA.methodA() 所在的事务就会挂起，ServiceB.methodB() 会起一个新的事务，等待 ServiceB.methodB() 的事务完成以后，它才继续执行。</p><p>它与 PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为 ServiceB.methodB() 是新起一个事务，那么就是存在两个不同的事务。如果 ServiceB.methodB() 已经提交，那么 ServiceA.methodA() 失败回滚，ServiceB.methodB() 是不会回滚的。如果 ServiceB.methodB() 失败回滚，如果他抛出的异常被 ServiceA.methodA() 捕获，ServiceA.methodA() 事务仍然可能提交(主要看B抛出的异常是不是A会回滚的异常)。</p><h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h5><p>现在的情况就变得比较复杂了， ServiceB.methodB() 的事务属性被配置为 PROPAGATION_NESTED，此时两者之间又将如何协作呢? ServiceB#methodB如果rollback，那么内部事务(即 ServiceB#methodB) 将回滚到它执行前的SavePoint而外部事务(即 ServiceA#methodA) 可以有以下两种处理方式：</p><p>a、捕获异常，执行异常分支逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token class-name">ServiceB</span><span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SomeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 执行其他业务, 如 ServiceC.methodC(); </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式也是嵌套事务最有价值的地方， 它起到了分支执行的效果，如果 ServiceB.methodB()失败，那么执行 ServiceC.methodC()，而 ServiceB.methodB()已经回滚到它执行之前的 SavePoint，所以不会产生脏数据(相当于此方法从未执行过)，这种特性可以用在某些特殊的业务中， 而 PROPAGATION_REQUIRED 和 PROPAGATION_REQUIRES_NEW 都没有办法做到这一点。</p><p>b、外部事务回滚/提交 代码不做任何修改， 那么如果内部事务(ServiceB#methodB) rollback，那么首先 ServiceB.methodB()回滚到它执行之前的 SavePoint（在任何情况下都会如此）， 外部事务 ServiceA#methodA()将根据具体的配置决定自己是commit 还是 rollback。</p><p>另外三种事务传播属性基本用不到，在此不做分析。</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="java-security-MessageDigest"><a href="#java-security-MessageDigest" class="headerlink" title="java.security.MessageDigest"></a>java.security.MessageDigest</h3><p>功能：</p><ul><li>单向文本加密</li><li>不论输入的文本长度，输出固定长度的hash值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMD5Str</span><span class="token punctuation">(</span><span class="token class-name">String</span> strValue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">MessageDigest</span> md5<span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newStr<span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>strValue<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h2><p>使用Swagger2可以减少编写过多的文档，只需要通过代码就能生成API文档。</p><p>添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        swagger2配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建Swagger类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wangzhengbest<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span><span class="token punctuation">;</span><span class="token comment">/** * @className: Swagger2 * @description: Swagger2配置 * @author: buer * @date: 2020/10/30 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2</span> <span class="token punctuation">{</span>    <span class="token comment">//配置swagger2核心</span>    <span class="token comment">//访问地址为:http://ip:port/swagger-ui.html 这是官方ui</span>    <span class="token comment">//访问地址为:http://ip:port/doc.html 这是github中的第三方ui</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//指定Api类型为swagger2,并定义Api文档汇总信息,设置扫描Api路径(controller层)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.wangzhengbest.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"架构演进电商项目"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"buer"</span><span class="token punctuation">,</span><span class="token string">"buerlog.top"</span><span class="token punctuation">,</span><span class="token string">"weiyouwozuiku@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"电商项目的Api文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"bpan.xyz"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要忽略注解的Api上添加注释<code>@ApiIgnore</code>。</p><p>在需要进行中文注释Api接口的java文件上添加注释<code>@Api(value = "",tags = {""})</code>，value约等于标题，tags进行详细描述。</p><p>对API方法进行描述在java方法上添加注释<code>@ApiOperation(value = "用户名是否存在",notes = "用户名是否存在",httpMethod = "GET")</code></p><p>对前端传来的对象在pojo中添加类似代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户对象BO"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"从客户端由用户传入的数据封装在此entity中"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"???"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"确认密码"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"confirmPassword"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"???"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> confirmPassword<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跨域请求问题"><a href="#跨域请求问题" class="headerlink" title="跨域请求问题"></a>跨域请求问题</h2><p>当项目是前后端分离时，会涉及到跨域请求问题。可以在后端进行设置，创建CorsConfig类，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wangzhengbest<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span><span class="token punctuation">;</span><span class="token comment">/** * @className: CorsConfig * @description: 解决跨域请求以及资源获取权限 * @author: buer * @date: 2020/10/30 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.添加cors配置信息</span>        <span class="token class-name">CorsConfiguration</span> config<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//允许跨域</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"http://192.168.50.152:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置是否发送cookie信息</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置允许的请求方式</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置允许的header</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.为url添加映射路径</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> corsConfigurationSource<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfigurationSource<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>corsConfigurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>调用API出现HTTP 405错误–method not allowed ，大多是因为前端的请求方法和后断的接受方法不一致。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发知识</title>
      <link href="/2020/09/01/ce-shi/ce-shi-kai-fa-zhi-shi/"/>
      <url>/2020/09/01/ce-shi/ce-shi-kai-fa-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>作为测试工程师，目标是要保证系统在各种应用场景下的功能是符合设计要求的。需要考虑的测试用例需要更多、更全面。</p><p>黑盒测试方法:</p><ul><li>等价类划分方法，将所有可能的输入数据划分为若干个子集。在每个子集中，如果任意一个输入数据对于揭露程序中潜在的错误都具有同等的效果，那么这样的子集就构成了一个等价类。后续只要从每个等价类中任意选取一个值进行测试，就可以用少量具有代表性的测试输入取得较好的测试覆盖结果。</li><li>边界值分析方法，选取输入、输出的边界值进行测试。通常大量的软件错误发生在输入或输出范围的边界上，所以需要对边界值进行重点测试。通常选取正好等于刚大于或刚小于边界的值作为测试数据。</li></ul><p>上述两种方法相互补充，故通常结合使用。</p><p>一个质量过硬的软件系统，除了显式功能性需求之外，其他的非功能性需求即隐式功能性需求也是极其关键的。</p><p>显式功能性需求(Functional requirement)指软件本身需要实现的具体功能。</p><p>非功能性需求(Non-functional requirement)主要涉及安全性、性能以及兼容性三大方面。这些往往决定软件质量的关键因素。</p><p>在绝大多数的软件工程实践中，测试由于受限于时间成本和经济成本，是不可能进行穷尽测试，而是采用基于风险驱动的模式，有所侧重的选择测试范围和设计测试用例，以寻求缺陷风险和研发成本之间的平衡。</p><blockquote><p>每一个解决方案都是下一个问题的来源，要真正理解问题，那至少对自己的解决方案提出三个可能出错的地方。–《你的灯亮着吗》</p></blockquote><p>“好的”测试用例一定是一个完备的集合。它能覆盖所有等价类以及各种边界值，而跟能否发现缺陷无关。需要具备一下三个特征:</p><ul><li><strong>整体完备性</strong>:”好的”测试用例一定是一个完备的整体，是有效测试用例组成的集合，能够完全覆盖测试需求。</li><li><strong>等价类划分的准确性</strong>:对于每个等价类都要保证只要其中一个输入测试通过，其他输入也一定测试通过。</li><li><strong>等价类集合的完备性</strong>:需要保证所有可能的边界值和边界条件都已经正确识别。</li></ul><p>常用的测试方法：<strong>等价类划分法，边界值分析法、错误推测方法</strong>、因果图方法、判定表驱动分析法、正交实验设计方法、功能图分析方法、场景设计方法、形式化方法、扩展有限状态机方法等等。实际使用的主要是前三个。</p><hr><h5 id="等价类划分方法"><a href="#等价类划分方法" class="headerlink" title="等价类划分方法"></a>等价类划分方法</h5><p>等价类中任意一个输入数据对于揭露程序中潜在错误都具有同等效果。只需从每个等价类中任意选取一个值进行测试，就可以用少量具有代表性的测试输入取得较好的测试覆盖结果。</p><h5 id="边界值分析方法"><a href="#边界值分析方法" class="headerlink" title="边界值分析方法"></a>边界值分析方法</h5><p>边界值分析是对等待类划分的补充。大量的错误发生在输入输出的边界值上，所以需要对边界值进行重点测试，通常选择正好等于、刚刚大于或刚刚小于边界的值作为测试数据。</p><h5 id="错误推测方法"><a href="#错误推测方法" class="headerlink" title="错误推测方法"></a>错误推测方法</h5><p>错误推测方法是指基于对被测试软件系统设计的理解、过往经验以及个人直觉，推测出软件可能存在的缺陷，从而有针对性的设计测试用例的方法。该方法强调的是对被测试软件的需求理解以及设计实现的细节把握，当然还有个人能力。</p><p>在企业的具体实践中，为了降低对个人能力的依赖，通常会建立常见缺陷知识库，在测试设计的过程中，会使用缺陷知识库作为检查点列表，去帮助优化补充测试用例的设计。</p><hr><p>在真实的项目实践中，不同的软件项目在研发生命周期的各个阶段都会有不同的测试类型。</p><p>在具体的用例设计中，首先需要搞清楚每一个业务需求所对应的多个软件功能需求点，然后分析出每个软件功能需求点对应的多个软件需求点，最后再针对每个测试需求点设计测试用例。</p><p>具体到测试用例本身的设计，有两个关键点需要注意：</p><ol><li>从软件功能需求出发，全面的、无遗漏的识别出测试需求是至关重要的，这将直接关系到用例的测试覆盖率。</li><li>对于识别出的每个测试需求点，需要综合运用等价类划分、边界值分析和错误推测方法来全面的设计测试用例。</li></ol><p>经验：</p><ul><li>只有深入理解被测试软件的架构，才能设计出“有的放矢”的测试用例集，去发现系统边界以及系统集成上的潜在缺陷。</li><li>必须深入理解被测软件的设计与实现细节，深入理解软件内部的处理逻辑。在具体实践中，可以通过代码覆盖率指标标出可能的测试遗漏点。<strong>切忌不要以开发代码的实现以依据设计测试用例，应该根据原始需求设计测试用例。</strong></li><li>需要引入需求覆盖率和代码覆盖率来衡量测试执行的完备性，并以此为依据来找出遗漏的测试点。</li></ul><p>单元测试:对软件中的最小可测试单元在与程序其他部分相隔离的情况下进行检查和验证的工作，这里的最小可测试单元通常指的是函数或者类。</p><p>单元测试的用例是一个“输入数据”和“预计输出”的集合。</p><p>“输入数据”：</p><ul><li>被测试函数的输入参数</li><li>被测试函数内部需要读取的全局静态变量或成员变量</li><li>函数内部调用子函数获取或改写的数据</li><li>嵌入式系统中，在中断调用时改写的数据</li><li>…</li></ul><p>“预计输出”（要严格按照代码的功能逻辑来设计定，不能通过阅读代码来推算预期输出）:</p><ul><li>被测试函数的返回值</li><li>被测试函数的输出函数</li><li>被测试函数改写的成员变量或全局变量</li><li>被测试函数中进行的文件更新或数据库更新</li><li>被测试函数中进行的消息队列更新</li><li>…</li></ul><p>注意等价类或边界值，容易在测试时被忽略。</p><p>软件测试从小到大的粒度进行划分：单元测试、集成测试、系统测试。</p><p>$被测函数\begin{cases} 驱动代码=&gt;调用被测函数的代码 \ 桩代码=&gt;替代真实代码的临时代码 \ Mock代码 \end{cases}$</p><p>驱动模块：被测函数前的数据准备+调用被测函数+验证相关结果</p><p>桩代码：具有隔离和不起的作用，使得被测代码能够独立编译、链接并独立运行，还具有控制被测函数执行路径的作用。</p><p>编写桩代码的三个原则</p><ol><li>桩函数具有与原函数完全一致的原型。</li><li>桩函数比较简单，只需保持原函数的声明，加上一个空的实现，目的是通过编译链接。</li><li>要根据测试用例的需要，输出合适的数据作为被测函数的内部输入。</li></ol><p>Mock代码和桩代码的区别：<strong>测试期待结果的验证</strong>。可以理解为关注点的不同。Mock代码关注的是Mock有没被调用，如何调用，调用次数，MOck的调用顺序。<strong>对结果验证在Mock函数中</strong>。桩代码关注的是被测函数的执行路径。<strong>对于结果验证在驱动代码</strong>。</p><p>不是所有代码都要进行单元测试，通常只有底层模块和核心模块。</p><p>单元测试款假的选型取决于开发语言。对于桩代码和Mock代码框架选型依据开发所采用的具体技术栈。</p><p>需要将单元测试执行、代码覆盖率统计和持续集成流水线做集成，以确保每次代码提交，自动触发单元测试，自动统计代码覆盖率，并决定本次代码提交是否能够被接受。</p><p>测试中的困难：</p><ul><li>紧密耦合的代码难以隔离</li><li>隔离后编译链运行困难</li><li>代码可测试性差，可测试性与代码规模呈正比</li><li>无法通过桩代码直接模拟系统底层函数的调用</li><li>代码覆盖率越往后越难提高</li></ul><p>自动化测试的本质就是先写一段代码，然后测试另一段代码。在自动化上，需要权衡利弊。</p><p>自动化的缺陷：</p><ul><li>自动化只能取代手工测试中执行频率高、机械化高的</li><li>自动化成本高，比手动测试脆弱，无法应对被测系统的变化</li><li>自动化测试的开发工作量远大于单次的手工测试。只有有效执行次数大于5次，才考虑进行自动化测试</li><li>测试效率依赖自动化测试用例的设计与实现质量</li><li>初期效率低，后期需要重构</li></ul><p>使用自动化测试的项目特点：</p><ul><li>需求稳定，不会频繁变更</li><li>研发和维护周期长，需要频繁执行回归测试</li><li>需要在多种平台上重复执行相同测试的场景</li><li>某项测试项目通过手工测试无法实现，或手工成本太高，如性能和压力测试。</li><li>被测软件开发规范，具有可测试性。</li><li>某些测试用例的自动化需要开发人员预留可测试接口，比如图形验证码。</li></ul><p>短期的一次性项目，选择手工探索性测试。中长期项目，对于较稳定的软件功能进行自动化测试，对于变化较大的或需求不明的采用手工测试。</p><p>单元测试阶段的“自动化”：</p><ul><li>测试用例执行的自动化</li><li>用例框架代码生成的自动化</li><li>部分测试输入数据的自动化生成</li><li>自动桩代码的生成</li><li>被测代码的自动化静态分析</li><li>测试覆盖率的自动统计与分析</li></ul><p>抽桩：比如在单元测试阶段，使用的是桩代码。但是在进行代码集成测试阶段需要调用真实代码，则需要“抽桩”。</p><p>代码的静态扫描的目的是识别出违反编码规则或编码风格的代码行。通常是结合项目具体的编码规则和编码风格，有自动化工具通过内建规则和用户自动以规则自动化完成。常用的工具有Sonar和Coverity。</p><p>代码行测试覆盖率、分支覆盖率、MC/DC覆盖率等可以帮助衡量单元测试用例集合的充分性和完备性，提供适当增补测试用例以提高测试覆盖率的依据。</p><p>代码级集成测试更加关注软件模块之间的接口调用和数据传递。被测函数内部调用的其它函数必须是真实的，不允许使用桩代码代替。单元测试可以。</p><p>现在软件追求系统复杂性的解耦，避免“大单体”应用，采用Web Service或者RPC调用的方式来协作完成各个软件功能。现在代码级集成测试基本不做了。</p><p>Web Service测试主要是SOAP API和REST API两种。手动常用SoapUI或Postman。</p><p>基于代码的API测试用例，通常包含三大步骤：</p><ol><li>准备API调用时需要的测试数据</li><li>准备API调用参数并发起API的调用</li><li>验证API调用的返回结果</li></ol><p>Web Service的自动化测试体现在：</p><ul><li>API测试用例执行的自动化</li><li>测试脚手架代码的自动化生成</li><li>部分测试输入数据的自动生成</li><li>Response验证的自动化，其核心思想是自动比较相同API调用的返回结果，并实现出有差异的字段值，比较过程可以通过规则配置来去掉一些动态值</li><li>基于SoapUI或者Postman的自动化脚本生成</li></ul><p>GUI测试的自动化技术核心思想是基于页面元素识别技术，对于页面元素进行自动化操作，以模拟实际终端用户的行为并验证软件功能的正确性。</p><p>$GUI自动化 \begin{cases} 传统Web浏览器=&gt;Selenium和Micro\quad Focus的UFT \ 移动端原生应用=&gt;Appium \end{cases}$</p><p>$测试覆盖率\begin{cases} 面向项目的需求覆盖率：指测试对需求的覆盖程度，常将每一条分解后的软件需求和对应的测试建立一对多的映射关系，保证测试可以覆盖每个需求 \ 偏向技术的代码覆盖率：至少被执行了一次的条目数占整个条目数的百分比 \end{cases}$</p><p>需求覆盖率属于传统瀑布模型下的软件工程实践，难以适应当前的敏捷开发。</p><p>$代码覆盖率 \begin{cases} 语句覆盖率 \ 判断覆盖率 \ 条件覆盖率 \end{cases}$</p><p><strong>统计代码覆盖率的根本目的是找出潜在的遗漏测试用例，并有针对性的进行补充，同时还可以识别出代码中那些由于需求变更等原因造成的不可达的废弃代码。</strong></p><p>单元测试可以最大化利用打桩技术来提高覆盖率。</p><p>MC/DC覆盖率是最高标准的代码覆盖率指标，除了直接关系人生命安全的软件以外，很少有项目会有严格的MC/DC覆盖率要求。</p><p><strong>即使测试用例达到100%的代码覆盖率，产品质量也不能说是万无一失。</strong>在于代码覆盖率是基于现有代码的，对于没有考虑到的某些输入或未处理的情况无法发现。</p><p>实现代码覆盖率的统计，最基本的方法就是<strong>注入</strong>。简单的说就是在被测代码中自动插入用于覆盖率统计的探针代码，并保证插入的探针代码不会给源代码带来任何影响。</p><p>实现技术<br>    Instrumentation<br>        Source Code<br>        Byte Code（主流）<br>            Offline：无需修改源代码，但是要在测试开始前对文件进行插桩，并实现生成插过桩的class文件。适用于不支持Java Agent的运行环境，以及无法使用自定义类装载器的情况。无法实时获取。<br>                Inject：直接修改原class文件<br>                Replace：生成新的class文件<br>            On-The-Fly：无需修改源代码，也无需进行字节码插桩。可以在系统不停机的情况下实时手机代码覆盖率信息。但是运行环境必须允许使用Java Agent。<br>                Java Agent：利用执行在main()方法之前的拦截器方法premain()插入探针。实际中需要在JVM添加”-javaagent”启动参数并指定用于实时字节码注入的代理程序。代理程序在装载每个class文件之前，先判断是否插入了探针。没有则将探针插入class文件中。<br>                Class Loader：在每次类加载前，在class文件中插入探针。</p><p>作为测试人员，<strong>必须深入理解业务，但业务知识不等同于测试能力。</strong></p><p>测试开发岗位的核心是<strong>测试</strong>，开发是为了更好的测试。</p><p>$传统测试工程师的核心竞争\begin{cases} 测试策略设计能力（重点） \ 测试用例设计能力 \ 快速学习能力 \ 探索性测试思维 \ 缺陷分析能力\ 自动化测试技术 \ 良好的沟通能力 \end{cases}$</p><p>测试策略设计能力:对于各种被测软件，能够快速准确的理解需求，并在有限的时间和资源下，明确测试重点和最适合的测试方法。</p><ol><li>测试要具体执行到什么程度；</li><li>测试需要借助于什么工具；</li><li>如何运用自动化测试以及自动化测试框架，以及如何选型；</li><li>测试人员资源如何合理分配；</li><li>测试进度如何安排；</li><li>测试风险如何应对</li></ol><p>测试用例设计能力：深入理解被测软件的业务需求和目标用户的使用习惯，熟悉软件的具体设计和运行环境。<strong>对常见的缺陷模式、典型的错误类型以及遇到的缺陷，进行归纳总结。阅读好的测试用例。</strong></p><p>快速学习能力：1.阅读官方文档 2.理解原理。</p><p>探索性测试思维：在执行测试的过程中不断学习被测系统，结合自己的经验猜测和逻辑推理，提出更多的有针对的测试关注点。</p><p>缺陷分析能力：</p><ul><li><p>对于已经发现的缺陷，结合发生错误的上下文以及后台日志，<strong>可以预测或者定位缺陷的发生原因，甚至可以明确指出具体出错的代码行</strong>，由此可以大幅缩短缺陷的修复周期，并提高开发工程师对于测试工程师的认可以及信任度；</p></li><li><p>根据已经发现的缺陷，结合探索性测试思维，<strong>推断同类缺陷存在的可能性</strong>，并由此找出所有相关的潜在缺陷；</p></li><li><p>可以对一段时间内所发生的缺陷类型和趋势进行合理分析，由点到面<strong>预估整体质量的健康状态，并能够对高频缺陷类型提供系统性的发现和预防措施，并以此来调整后续的测试策略</strong>。</p></li></ul><p>自动化测试技术：自动化是手段。</p><p>$测试开发工程师的核心竞争力\begin{cases} 测试系统需求分析能力：需要识别出测试架构的需求和提高效率的应用场景 \ 更宽广的知识体系 \end{cases}$</p><p>缺陷报告的组成：</p><ul><li>缺陷标题：概括性描述，在什么情况下发生了什么问题。应该尽量描述问题本质，而非停留在问题表面。</li><li>缺陷概述：除了描述清楚缺陷，还可以扩展，比如描述同一类型的缺陷可能出现的所有场景。<strong>目的是清晰简洁的描述缺陷，使开发工程师能够聚焦缺陷的本质</strong>。</li><li>缺陷影响：缺陷引起的问题对用户或者业务的影响范围以及严重程度。决定缺陷的优先级和严重程度。</li><li>环境配置：详细描述测试环境的配置细节。通常只描述那些重现缺陷的环境的敏感信息。</li><li>前置条件：测试步骤前系统应该处在的状态，目的是<strong>减少缺陷重现的步骤</strong>。</li><li><strong>缺陷重现步骤</strong>：<strong>目的在于用简洁的语言向开发工程师展示缺陷重现的具体操作步骤。</strong>确保缺陷的可重现性，找到最短的重现路径。</li><li>期望结果与实际结果：在描述重现步骤的过程中，需要明确说明期待结果(应该发生什么)和实际结果(发生了什么)。</li><li>优先级和严重程度：严重程度是缺陷本身的属性，优先级是缺陷的工程属性，随着项目进度、解决缺陷的成本等因素而变动。</li><li>变通方案：提供一种临时绕开当前缺陷而不影响产品功能的方式。</li><li>根原因分析：即RCA，定位出问题的根本原因，清楚的描述缺陷产生的原因。</li><li>附件：为缺陷的存在提供必要的证据支持，如：界面截图、测试用例日志、服务端日志、GUI测试视频等。</li></ul><p>测试计划的组成：</p><ul><li>测试范围：描述被测对象和主要的测试内容，明确“测什么”和“不测什么”</li><li>测试策略：明确测试的重点和各项测试的先后顺序，采用什么样的测试类型和测试方法，不仅要给出为什么选用这个测试类型，还要详细说明具体的实施方法<ol><li>功能测试：哪些测试点适合采用自动化测试，并采用什么样的框架技术。需要手工测试的测试点，决定采用什么类型的测试用例设计方法，如何准备相关的测试数据。</li><li>兼容性测试：既有产品测试Top30%的移动设备以及IOS/Android版本列表。全新产品：通过TalkingData这样的网站查看目前主流的移动设备、分辨率大小、IOS/Android版本等信息</li><li>性能测试</li></ol></li><li>测试资源：谁来测，在哪测。</li><li>测试进度：描述各类测试的开始时间、所需工作量、预计完成时间，并以此为依据来建议最终产品的上线发布时间。</li><li>测试风险评估：预估整个测试过程中可能存在的潜在问题，以及当这些风险发生时的应对策略。</li></ul><p>扩展知识：网络架构的核心知识(性能测试、稳定性测试、全链路压测、故障切换Failover测试、动态集群容量伸缩测试、服务降级测试、安全渗透测试、Memcached分布式缓存集群、缓存击穿、缓存雪崩、缓存预热、缓存集群扩容局限性、可伸缩性架构设计、负载均衡、数据库读写分离、故障切换、动态集群容量伸缩、服务降级)、容器技术(Selenium Grid、Docker、Kubernetes)、云计算技术(Appium+Selenium Grid)、DevOps思维(Jenkins，组合各种Plugin来完成流水性搭建，提供高效的CI/CD)、前端开发技术。</p><p>通常情况下，互联网产品要求回归测试的执行时间不能超过四个小时。</p><p>缩短测试执行时间的方法：</p><ul><li>引入测试的并发执行机制，用包含大量测试节点的测试执行集群来并发执行测试用例。</li><li>改进测试策略设计。<ol><li>单元测试</li><li>API测试</li><li>GUI测试</li></ol></li></ul><p>传统软件通常采用金字塔模型的测试策略，现今的互联网产品往往采用菱形模型：以中间层的API测试为重点做全面的测试；轻量级的GUI测试，支付高最核心直接影响主营业务流程的E2E场景；最上层的GUI测试通常利用探索式测试思维，以人工测试的方式发现尽可能多的潜在问题。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring实战学习</title>
      <link href="/2020/08/13/cheng-xu-she-ji/spring-shi-zhan-xue-xi/"/>
      <url>/2020/08/13/cheng-xu-she-ji/spring-shi-zhan-xue-xi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/spring.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录学习《Spring实战》(第五版)中的知识点，并将一些开发项目中遇到的相关经验与理解记录在这里。</p><blockquote><p>唯一不变的就是变化    —-希腊哲学家 赫拉克利特</p></blockquote><h2 id="第一部分-Spring基础"><a href="#第一部分-Spring基础" class="headerlink" title="第一部分 Spring基础"></a>第一部分 Spring基础</h2><p>Spring的核心提供了一个叫做Spring上下文(Spring application context)的容器，其创建和管理应用组件(bean)。将bean组装在一起的行为是通过基于依赖注入(dependency injection,DI)的模式实现。组件不会创建它所依赖的组件并管理它们的生命周期，使用依赖注入的应用依赖于单独的实体（容器）来创建和维护所有的组件，并将其注入到它们所需的bean中。</p><p>以往，使用一个或多个xml文件指导Spring上下文将bean装配在一起。现在推荐使用基于java的配置。<code>@Configuration</code>注释告知Spring这是一个配置类，为Spring应用提供上下文。使用<code>@Bean</code>注释标注，表明方法返回的对象会以bean的形式添加到Spring的上下文。(默认这些bean对应的bean ID与定义它们的方法名称相同)。</p><p>基于java的配置相较于xml有更强的类型安全性和更好的重构能力。</p><p><strong>只有当Spring不能进行自动配置时，才需要显示配置。</strong></p><p>$自动配置\begin{cases}\text{自动装配：Spring能够自动为组件注入所依赖的其他bean} \ \text{组件扫描:Spring自动发现应用路径下的组件，并将它们创建成Spring应用上下文的组件}\end{cases}$</p><p>Spring Initializr是一个能够生成Spring Boot项目的REST API。</p><p>Spring项目的目录结构：</p><ul><li>mvnw和mvnw.cmd：Maven包装器(wrapper)脚本。即使机器上没有安装Maven，也能构建项目。</li><li>pom.xml：Maven构建规范。</li><li>application.properties：最初该文件是空的，为我们提供制定配置属性的地方。</li><li>resources/static：存放任意为浏览器提供服务的静态内容。</li><li>resources/templates：存放用来渲染内容到浏览器的模板文件。</li></ul><p>Spring Boot starter依赖它们本身不包含库代码，而是传递性的拉取其他的库。这样做的好处如下：</p><ul><li>构建文件会显著减小并易于管理。不必为每个所需的依赖库都声明依赖。</li><li>能够根据它们所提供的功能来思考依赖，而不是库名称。</li><li>不必担心库版本问题。可以相信给定版本的Spring Boot，传递性引入的库的版本是兼容的。只要关心Spring Boot版本就行。</li></ul><p>Spring Boot maven plugin：1.提供一个maven goal，允许我们使用maven来运行应用。2.确保依赖的所有库都包含在可执行的jar文件中，并保证它们在运行时类路径下可用。3.它会在jar中生成一个manifest文件，将引导类声明为可执行jar主类。</p><p><code>@SpringBootApplication</code>是一个组合注释，如下：</p><ol><li><code>@SpringBootConfiguration</code>：将该类声明为配置类。实际上该注释是<code>@Configuration</code>的特殊形式。</li><li><code>@EnableAutoConfiguration</code>：启用Spring Boot的自动配置。</li><li><code>@ComponentScan</code>：启用组件扫描。</li></ol><p>测试类带有<code>@RunWith(SpringRunner.class)</code>注解。其是Junit的注解，它会运行一个测试运行器(runner)来指导JUnit如何运行测试。本例子中为JUnit提供的是SpringRunner，这个是一个Spring提供的测试运行器，它会创建测试运行所需的Spring应用上下文。<code>@SpringBootTest</code>告诉JUit在启动测试时添加上Spring Boot功能</p><p>SpringRunner是SpringJUit4ClassRunner的别名，于Spring4.3引入，移除了对特定JUit版本的关联。</p><p>Spring自带一个强大的Web框架，Spring MVC。其核心是控制器的理念(处理请求并以某种方式进行信息响应的类)。</p><p>在Spring Boot2.2之后，默认的测试工具变成了Junit5。有两种方法进行测试:1.直接写<code>@SpringBootTest</code>，如果测试MVC加上注释<code>@AutoConfigureMockMvc</code>，注入一个<code>Autowired</code>的<code>MockMvc</code>对象。2.声明<code>@ExtendWith(SpringExtension.class)</code>替换<code>@RunWith(SpringRunner.class)</code>。设置<code>@WebMvcTest(所需测试的Controller.class)</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">Matchers</span><span class="token punctuation">.</span>containsString<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>view<span class="token punctuation">;</span><span class="token comment">//@SpringBootTest</span><span class="token comment">//@AutoConfigureMockMvc</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">HomeController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeControllerTest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// &lt;3&gt;</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;4&gt;</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &lt;5&gt;</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>           <span class="token comment">// &lt;6&gt;</span>                        <span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"Welcome to..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@RequestMapping</code>：注释到类级别的时候，它能够指定该控制器所处理的请求类型。</p><p>在方法上的<code>@GetMapping</code>注释对类级别的<code>@RequestMapping</code>细化。<code>GetMapping</code>是Spring4.3引入，之前的是<code>@RequestMapping(method=RequestMethod.GET)</code>。</p><table><thead><tr><th>Spring MVC 的请求注解</th><th>描述</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>通用的请求处理</td></tr><tr><td>@GetMapping</td><td>处理HTTP GET请求</td></tr><tr><td>@PostMapping</td><td>处理HTTP POST请求</td></tr><tr><td>@PutMapping</td><td>处理HTTP PUT请求</td></tr><tr><td>@DeleteMapping</td><td>处理HTTP DELETE请求</td></tr><tr><td>@PatchMapping</td><td>处理HTTP PATCH请求</td></tr></tbody></table><p>在为控制器方法声明请求映射时，越具体越好。意味着至少要声明路径(或者从类级别的QRequestMapping继承一个路径)以及它所处理的HTTP方法。<strong>推荐在类级别上使用@RequestMapping以便于指定基本的路径。在每个处理器方法上，使用更具体的@GetMapping或@PostMapping注解。</strong></p><p>DevTools是Spring开发人员的开发期工具，包括：</p><ul><li>代码变更后应用自动重启。</li><li>当面向浏览器的资源（如模板、Js、样式表）等发生变化时，会自动刷新浏览器。</li><li>自动禁用模板缓存。</li><li>如果使用了H2数据库，内置H2控制台。</li></ul><p>当DevTools运行时，应用程序会被加载到Java虚拟机两个独立的类加载器中。其中一个类加载器会加载Jva代码、属性文件和项目中”src/main”路径下几乎所有的内容。另一个类加载器会加载依赖的库。当检测到变更时，DevTools只会重新加载包含项目代码的类加载器，并重启应用上下文。另一个类加载器和jvm保持不变，缩短应用启动时间。但<strong>导致自动重启无法反映依赖项的变化。需手动重新启动应用</strong>。DevTools在应用程序运行时，自启动一个LiveReload服务器。当LiveReload服务器与LiveReload浏览器插件结合时，有变化时自动刷新浏览器。</p><p><strong>推荐使用Idea中的插件JRBEL</strong></p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="IDEA集成热部署"><a href="#IDEA集成热部署" class="headerlink" title="IDEA集成热部署"></a>IDEA集成热部署</h3><p>JRebel and XRebel for intellij（低版本叫JRebel for intellij，下方还有一个JRebel mybatisPlus extension是针对mybatis的mapper.xml的热部署）</p><h3 id="修改Spring启动字符"><a href="#修改Spring启动字符" class="headerlink" title="修改Spring启动字符"></a>修改Spring启动字符</h3><p>每次spring项目启动时都会在终端打印<code>SPRING</code>。如果需要换成其他字符。在<code>src/main/resources/</code>路径下创建<code>banner.txt</code>即可。其中放入你想打印的字符。</p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><blockquote><p>Lombok是一种JAVA的实用工具，可用来帮助开发人员消除JAVA的冗长，通过注解实现这一目的。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>添加lombok依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        lombok--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在IDEA中安装lombok插件。这一步是保证IDEA不会将代码标红。虽然不安装该插件也不会影响运行，但是会导致IDEA标红。</p></li></ol><h4 id="常见的Lombok注释"><a href="#常见的Lombok注释" class="headerlink" title="常见的Lombok注释"></a>常见的Lombok注释</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_overview.png" alt="lombok_overview.png"></p><ul><li><p>@Data：注解在类上。提供类所有属性的getter和setter方法，还提供了equals、hashCode、toString、RequiredArgsConstructor方法。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_data.png" alt="lombok_data.png"></p></li><li><p>@Setter：注解在属性上；为属性提供setting方法</p></li><li><p>@Getter：注解在属性上；为属性提供getting方法</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_getter_setter.png" alt="lombok_getter_setter.png"></p></li><li><p>@ToString：自动重写<code>toString</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_tostring.png" alt="lombok_tostring.png"></p></li><li><p>@EqualAndHashCode</p><p>自动生成<code>equals(Object other)</code>和<code>hashCode()</code>方法，包括所有非静态变量和非transient的变量</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_equalsandhashcode.png" alt="lombok_equalsandhashcode.png"></p><p>如果某些变量不想要加进判断，可以透过exclude 排除，也可以使用of 指定某些字段</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_equalsandhashcode_exclude.png" alt="lombok_equalsandhashcode_exclude.png"></p><p>Q :为什么只有一个整体的@EqualsAndHashCode注解，而不是分开的两个@Equals和@HashCode？</p><p>A : 在Java 中有规定，当两个object equals 时，他们的hashcode 一定要相同，反之，当hashcode 相同时，object 不一定equals。所以equals 和hashcode 要一起implement，免得发生违反Java 规定的情形发生</p></li><li><p>@SneakyThrows：无需在签名处显式抛出异常</p></li><li><p>@Log4j：注释在类上；为类提供一个属性名为log的log4j日志对象</p></li><li><p>@Slf4j：同上。其作用同如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Logger</span> log<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">DesignTacoController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>@NoArgsConstructor：注释在类上；为类提供一个无参的构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_noargsconstructor.png" alt="lombok_noargsconstructor.png"></p></li><li><p>@AllArgsConstructor：注释在类上；为类提供一个全参的构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_allargsconstructor.png" alt="lombok_allargsconstructor.png"></p><p>这里注意一个Java 的小坑，当我们没有指定constructor 时，Java compiler 会帮我们自动生成一个没有任何参数的constructor 给该类，但是如果我们自己写了constructor 之后，Java 就不会自动帮我们补上那个无参数的constructor 了</p><p>然而很多地方（像是Spring Data JPA），会需要每个类都一定要有一个无参数的constructor，所以<strong>你在加上@AllArgsConstructor时，拜托，一定要补上@NoArgsConstrcutor，不然会有各种坑等着你</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@RequiredArgsConstructor：生成一个包含“特定参数”的constructor，特定参数指的是那些有加上final修饰词的变量们</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_requiredargsconstructor.png" alt="lombok_requiredargsconstructor.png"></p><p>如果所有的变量都是正常的，都没有用final 修饰的话，那就会生成一个没有参数的constructor。</p></li><li><p>@Value 基本与@Data相同，不同在于它会把所有变量设置为final。相应的也就没有setter方法了。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_value.png" alt="lombok_value.png"></p><p>此lombok 的注解@Value 和另一个Spring 的注解@Value 撞名，在import 时不要import 错了。</p></li><li><p>@Builder，自动生成流式set 值写法，从此之后再也不用写一堆setter 了</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Spring%E5%AE%9E%E6%88%98%E5%AD%A6%E4%B9%A0/lombok_builder.png" alt="lombok_builder.png"></p><p>注意，虽然只要加上@Builder 注解，我们就能够用流式写法快速设定Object 的值，但是setter 还是必须要写不能省略的，因为Spring 或是其他框架有很多地方都会用到Object 的getter/setter对他们取值/赋值。所以<strong>通常是@Data 和@Builder 会一起用在同个类上，既方便我们流式写code，也方便框架做事</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="修改SpringBoot中Tomcat的服务端口"><a href="#修改SpringBoot中Tomcat的服务端口" class="headerlink" title="修改SpringBoot中Tomcat的服务端口"></a>修改SpringBoot中Tomcat的服务端口</h3><p>在配置文件<code>src/main/resources/application.properties</code>中修改或增加<code>server.port=8000</code>，其中8000就是指定的端口号，可以随意设置。</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><p>返回字符串或JSON对象</p><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h4><p>用于定义接口，是请求的入口。</p><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>约等于@ResponseBody和@Controller的结合</p><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>SpringBoot启动入口处的注解</p><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p>只是简单的使用@RequestMapping注解表示这个接口支持所有的请求方式</p><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h4><p>不同于上一个@RequestMapping，其表示只接受get请求方式。或者写成<code>@RequestMapping(value="/hello", method=RequestMethod.GET)</code>，效果一样。</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>该注解实现了扫描包的功能。但是<strong>其只会扫描当前文件夹及其子文件夹的内容，对于上级或同级目录不会扫描。</strong></p><p>使用时在需要添加扫描的类上加上这个注解，并在注解后面的括号中写上包名，如<code>@ComponentScan("com.wangzhengbest.wiki")</code>。<strong>不要只写com,会扫描到第三方Jar,出错非常难排查。</strong>使用<code>@ComponentScan({"com.wangzhengbest","top.buerlog"})</code>扫描多个包。</p><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><p>该注解可以将配置文件中的变量读取到程序中。例如<code>@Value("${test.hello:Test}")</code>就会去读取配置文件中的test.hello字段。后面的<code>:Test</code>表示这个值没有在配置文件中读取到时赋值为Test。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在IDEA中可以创建以<code>.http</code>为结尾的文件来测试接口。在IDEA的设置中的实时模板中有创建测试的快捷指令。</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>在<code>pom.xml</code>文件中添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        集成Mybatis--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        集成mysql连接--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在配置文件中添加数据库信息，不添加这个信息直接运行会报错</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring.datasource.url=jdbc:mysql://数据库ip/wiki?characterEncoding=UTF8&amp;autoReconnect=true&amp;serverTimeZone=Asia/Shanghaispring.datasource.username=spring.datasource.password=spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>mapper层设置完毕之后，还不能被spring扫描到。因此需要在启动spring的<code>XXXApplication.java</code>文件中添加上注解<code>@MapperScan("com.wangzhengbest.WIKI.mapper")</code>。这里的包路径就是mapper层的路径。</p><p>同理，sql对应的xml文件建立后，需要在<code>application.properties</code>文件中添加：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#配置mybatis所有Mapper.xml所在的路径mybatis.mapper-locations=classpath:/mapper/**/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用的时候使用注解<code>@AutoWired</code>。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>一般Spring项目中的源代码会分成几个层次：controller层（一般用来作为服务的入口），domain层（也可以叫POJO或entity，放置与数据库表一一映射的实体类），mapper层（持久层，也就是Dao层，生成的代码都以Mapper结尾）</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些算法</title>
      <link href="/2020/05/14/suan-fa/yi-xie-suan-fa/"/>
      <url>/2020/05/14/suan-fa/yi-xie-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="马尔可夫"><a href="#马尔可夫" class="headerlink" title="马尔可夫"></a>马尔可夫</h2><p>20世纪初,马尔可夫研究自然界有一类事物变化的过程仅与失误的近期状态有关,与事物过去的状态无关.即马尔可夫性.</p><p>一个马尔可夫过程是状态间的转移仅依赖前n个状态的过程.这个过程被称为n阶马尔可夫模型,其中n是影响下一个状态的(前)n个状态.</p><p>马尔可夫假设:假设模型的当前状态仅仅依赖前面的几个状态.</p><h3 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h3><ul><li>随机过程的本质就是对一系列随机变量的整体描述.</li><li>马尔可夫矩阵的性质,其中每个值大于等于0,且每行或者每列和为1(这取决于是左乘还是右乘).</li><li>马尔可夫的时齐性:从状态i转化到状态j的转义概率$p_{ij}(m)$仅仅依赖于时间的长短,与其他(比如起始状态等)均无关.</li></ul><h3 id="收敛的必要条件"><a href="#收敛的必要条件" class="headerlink" title="收敛的必要条件"></a>收敛的必要条件</h3><ul><li>可能的状态数是有限的</li><li>状态间的转移概率需要固定不变</li><li>从任意状态能够转变到任意状态</li><li>不能是简单的循环</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>T表示时间空间,E表示状态空间.</p><ul><li>T连续,E连续-&gt;连续Markov过程</li><li>T连续,E离散-&gt;离散Markov过程</li><li>T离散,E连续-&gt;Markov序列</li><li>T离散,E离散-&gt;Markov链</li></ul><h3 id="转移概率矩阵"><a href="#转移概率矩阵" class="headerlink" title="转移概率矩阵"></a>转移概率矩阵</h3><p>$P(m)=(p_{ij}(m))$为马尔可夫链的m步转移矩阵.</p><p>马尔可夫预测的核心在于转移概率矩阵的确定,获取方法可以是理论分析亦或实际统计结果给出的,甚至是猜测的.</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ol><li>$0\le p_{ij}(m)\le1$:概率在0~1之间.</li><li>对于任意的$i\in E$,$\sum_{j\in E}p_{ij}(m)$:概率之和为1.</li><li>对于任意的$i,j\in E$,$p_{ij}(0)=\begin{cases}\text{1,i=j}\ 0,i\neq j\end{cases}$:不发生转移的概率.</li></ol><h3 id="柯尔莫格洛夫-切普曼方程-k-c方程"><a href="#柯尔莫格洛夫-切普曼方程-k-c方程" class="headerlink" title="柯尔莫格洛夫-切普曼方程(k-c方程)"></a>柯尔莫格洛夫-切普曼方程(k-c方程)</h3><p>对于任意的$m,n\ge 0$,有$\begin{cases}p_{ij}(n+m)=\sum_{k\in E}p_{ik}(n)p_{kj}(m)\ P(n+m)=(P(1))^{n+m}\end{cases}$</p><h3 id="马尔可夫预测"><a href="#马尔可夫预测" class="headerlink" title="马尔可夫预测"></a>马尔可夫预测</h3><ol><li>对于一个马尔可夫链,其一步转移概率矩阵为P.</li><li>初始状态(初始分布)$\pi _j(0)=P{\xi_0=j}$,反映了马尔可夫链在初始时候的对于各个状态的概率分布情况,可以搁在一起写个向量$\pi(0)=(\pi_1(0),\pi_2(0),…)$.</li><li>同样有$\pi_j(n)=P{\xi_n=j}$,表示经过n步转移后,马尔可夫链对于各个状态的概率分布情况.同样的,把它们搁在一起写成一个向量:$\pi(n)=(\pi_1(n),\pi_2(n),…)$</li><li>预测方法:$\pi(n)=\pi(0)P^n$</li><li>$(\pi_1(n),\pi_2(n),…)$收敛到一个固定的向量,称之为马尔可夫链或转移矩阵P的不变分布(<strong>不是所有的马尔可夫链都有不变分布</strong>).当马尔可夫链有不变分布时,称之为马尔科夫链具有遍历性.</li></ol><h3 id="可观测马尔可夫模型"><a href="#可观测马尔可夫模型" class="headerlink" title="可观测马尔可夫模型"></a>可观测马尔可夫模型</h3><p>对于一个问题而言,我们有初始分布$\pi$,转移概率矩阵A,在给定的任意一个时刻t,我们都能有一个状态$q_t$,时间的变化,随一个状态转移到另一个状态,便能得到一个观测序列,即为状态序列$O=[q_1,q_2,q_3,q_4,…,q_m]$.且整个问题中一共有n个观测状态.出现这样的序列的概率是:$P(O|A,\pi)=P(q_1)\prod_{t=2}^mP(q_t|q_{t-1})$,所以一个可观测的马尔可夫模型由一个三元组描述:$(A,\pi,n)$,一般情况下简记为$(A,\pi)$.</p><p>如果穷举了所有的观测序列:</p><p>$\pi_i=\frac{以状态i开始的序列的数目}{序列总数}$</p><p>$p_{ij}=\frac{从状态i转移到状态j的序列数目}{从状态i开始转移的序列总数}$</p><h3 id="隐马尔可夫模型"><a href="#隐马尔可夫模型" class="headerlink" title="隐马尔可夫模型"></a>隐马尔可夫模型</h3><h4 id="两个基本假设"><a href="#两个基本假设" class="headerlink" title="两个基本假设"></a>两个基本假设</h4><ul><li>齐次马尔可夫性假设:$P(i_t|i_{t-1},o_{t-1},…,i_1,o_1)=P(i_t|i_{t-1}),t=1,2,…,T$.表示任意时刻t的状态只依赖前一时刻的状态,与其他状态和观测都无关.</li><li>观测独立性假设:$P(o_t|i_T,o_T,i_{T-1},o_{T-1},…,i_{t+1},o_{t+1},i_t,o_t,i_{t-1},o_{t-1},…,i_1,o_1)=P(o_t|i_t)$.对于任意时刻的观测,只依赖该时刻的状态,与其他时刻的观测和状态都无关.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png" alt="隐马尔可夫.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB_1.png" alt="隐马尔可夫_1.png"></p><h4 id="基本想法"><a href="#基本想法" class="headerlink" title="基本想法"></a>基本想法</h4><p>系统的状态S无法预测,但是可以观测到某个其他和状态相关联的事物,这个事物出现是伴随系统状态而出现的.</p><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><p>观测概率不依赖时间(马尔可夫过程)</p><ul><li>观测集合：$R={R_1,R_2,R_3,R_4,…,R_m}$</li><li>观测序列：$O=[o_1,o_2,o_3,o_4,…,o_l]$</li><li>状态集合：$S={S_1,S_2,S_3,S_4,..,S_n}$</li><li>状态序列：$Q=[q_1,q_2,q_3,q_4,…,q_l]$</li><li>观测概率：$P{o_i=R_k|q_t=S_j}=b_j(i)$，记$B=[b_j(i)]$,叫做发射概率矩阵</li><li>隐马尔可夫模型由一个五元组描述$(A,B,\pi,R,S)$，简记为$(A,B,\pi)$.初始分布属于状态集合.</li></ul><h4 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h4><ul><li><p><em>估计</em>:已知模型$(A,B,\pi)$,求观测序列出现的概率</p><p>  解决方法:前向后向算法</p></li><li><p><em>预测</em>:已知模型$(A,B,\pi)$和一个观测序列,求对应的不可观测的状态序列</p><p>  解决方法:Viterbi算法</p></li><li><p><em>学习</em>:已知一组观测序列,求模型$(A,B,\pi)$</p><p>  解决方法:Baum-Welch算法</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>不同的状态序列可以产生相同的观测序列(以不同的概率产生)</li><li>状态转移是随机的,系统在一个状态中产生的观测也随机的</li><li>可观测的马尔可夫模型是特殊的隐马尔可夫模型</li></ul><h3 id="吸收马尔可夫链"><a href="#吸收马尔可夫链" class="headerlink" title="吸收马尔可夫链"></a>吸收马尔可夫链</h3><p>在马尔可夫链中,称$P_{ij}=1$的状态是吸收状态.如果一个马尔可夫链中至少包含一个吸收状态,并且从每一个非吸收状态出发,都能到达某个吸收状态,那么这个马尔科夫链称为吸收马尔可夫链.</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95/%E5%90%B8%E6%94%B6%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png" alt="吸收马尔可夫.png"></p><p>对于吸收链P<em>的标准形式，矩阵I-Q具有可逆矩阵N，且$N=(I-Q)^{-1}=I+Q+Q^2+···$。N的元素nij是从非吸收状态$s_i$到另一非吸收状态$s_j$的平均转移次数。设c为元素全为1的列向量c=[1,1,···,1]’，则</em>t=Nc的第i个分量是从第i个非吸收态出发，到某个吸收状态的平均转移次数。从非吸收状态i出发终被吸收状态j吸收的概率由B=NR给出。</p><p>详细解释参考:<a href="https://www.cnblogs.com/guolei/p/3504931.html">https://www.cnblogs.com/guolei/p/3504931.html</a></p><h2 id="排队论"><a href="#排队论" class="headerlink" title="排队论"></a>排队论</h2><h3 id="符号表示"><a href="#符号表示" class="headerlink" title="符号表示"></a>符号表示</h3><table><thead><tr><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">顾客到达流或者顾客到达间隔时间的分布</td></tr><tr><td align="center">Y</td><td align="center">服务时间的分布</td></tr><tr><td align="center">Z</td><td align="center">服务台数目</td></tr><tr><td align="center">A</td><td align="center">系统容量限制</td></tr><tr><td align="center">B</td><td align="center">顾客源数目</td></tr><tr><td align="center">C</td><td align="center">服务规则</td></tr></tbody></table><p>例如:银行服务系统为先到先服务,C即为FCFS.一般系统容量与顾客源数目均视为无限.指数分布具备无记忆性,即Markov性(M).在这个问题中服务台为1,问题就可以表述为M/M/1.</p><h3 id="运行指标"><a href="#运行指标" class="headerlink" title="运行指标"></a>运行指标</h3><ul><li>平均队长$L_s$:系统内顾客数的期望(可以理解为在处理的客户和还在等待中的客户)</li><li>平均排序长$L_q$:系统内等待服务的顾客数的期望</li><li>平均逗留时间$W_s$:顾客在系统内逗留时间的期望(可以理解为等待时间+处理时间)</li><li>平均等待时间$W_q$:顾客在排队中等待时间的期望</li></ul><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><ul><li>N(t)表示在时间区间[0,t)内到达的顾客数(t&gt;0)</li><li>$P_n(t_1,t_2)$表示在时间区间[$t_1,t_2$)内有n个顾客到达的概率.$P_n(t_1,t_2)=P{N(t_1)-N(t2)}=n$</li></ul><h3 id="输入过程"><a href="#输入过程" class="headerlink" title="输入过程"></a>输入过程</h3><ol><li><p>在不重叠时间区内顾客到达数相互独立;</p></li><li><p>充分小的$\Delta t$时间,在时间区间$[t,t+\Delta t)$内有一个顾客到达的概率与t无关,而大约和区间长$\Delta t$成正比,即:$P_1(t,t+\Delta t)=\lambda \Delta t+\omicron(\Delta t)$.用$\lambda &gt;0$表示单位时间内平均到达的顾客数 </p></li><li><p>对于充分小的,在时间区间内有两个或两个以上顾客到达的概率极小,可以忽略,即$\sum_{n=2}^\infty{P_n(t,t+\Delta t)=\omicron(\Delta t)}$</p><p> 符合以上的条件即服从泊松分布.</p><h3 id="服务过程"><a href="#服务过程" class="headerlink" title="服务过程"></a>服务过程</h3></li><li><p>充分小的$\Delta t$时间,在时间区间$[t,t+\Delta t)$内有一个顾客服务完的概率与t无关,而 大概与去区间长$\Delta t$成正比,即$P(T\le\Delta t)=\mu\Delta t+\omicron(\Delta t)$,T为服务时间,用$\mu&gt;0$表示单位时间内平均服务的顾客数.</p></li></ol><h2 id="最大熵"><a href="#最大熵" class="headerlink" title="最大熵"></a>最大熵</h2><p>克劳德 艾尔伍德 香农在1948年提出信息熵,用来描述信息的不确定程度.</p><p>最大熵原理其实就是指包含已知信息(约束条件),不做任何未知假设,把未知事件当成等概率事件处理.</p><p>一个系统的信息熵其实是系统中的每一个事件的概率乘上log概率,然后将所有事件相加取复数.</p><p>$H(P)=-\sum_XP(X)logP(X)$</p><table><thead><tr><th align="center">log底数的取值</th><th align="center">相应信息熵的单位取值</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">比特(bit)</td></tr><tr><td align="center">e</td><td align="center">奈特(nat)</td></tr><tr><td align="center">10</td><td align="center">哈托特(hat)</td></tr></tbody></table><p>因为概率总是在0-1之间,log之后小于0,加上负号才是正数.</p><h2 id="任务调度算法"><a href="#任务调度算法" class="headerlink" title="任务调度算法"></a>任务调度算法</h2><h3 id="Conservation-BackFilling算法"><a href="#Conservation-BackFilling算法" class="headerlink" title="Conservation BackFilling算法"></a>Conservation BackFilling算法</h3><p>在等待任务队列中选择任务进行回填，该任务必须保证不能使预约在其前面的任务延迟执行。步骤如下：</p><ol><li>寻找插入点<ol><li>对当前虚拟机的时空分布图进行扫描，如果发现可以满足该任务申请的处理器资源的第一个时间点作为该任务的插入点。</li><li>从插入点开始，扫描时空图，确保当前任务在插入点后的执行时间处理器都是可用的。</li><li>若条件2不满足，则返回1继续执行扫描，直到找到一个合适的插入点。</li></ol></li><li>更新虚拟机的时空图，及时反馈当前任务的调度情况，将当前任务提交到插入点执行。</li></ol><h3 id="Easy-BackFilling算法"><a href="#Easy-BackFilling算法" class="headerlink" title="Easy BackFilling算法"></a>Easy BackFilling算法</h3><p>该算法不需要考虑等待队列后面的任务对排在前面任务造成的延迟。回填时根据等待任务申请的处理器资源的大小尽可能提前将小任务回填至空闲资源中执行。在扫描虚拟机时空图前对所有的等待任务按照申请的处理器的资源大小升序排列，优先回填小任务。</p><h3 id="Improved-BackFilling算法"><a href="#Improved-BackFilling算法" class="headerlink" title="Improved BackFilling算法"></a>Improved BackFilling算法</h3><p>使用Balanced Spiral方法对等待任务进行分类，按照任务所申请的PE的大小进行升序排列，排序处理提交任务所申请的处理器核心数将任务排成V字形的趋势进行排序，然后对后续提交的任务进行回填作业。</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="显著性水平"><a href="#显著性水平" class="headerlink" title="显著性水平"></a>显著性水平</h3><p>假设检验是围绕对原假设内容的审定而展开的。如果原假设正确我们接受了（同时也就拒绝了备择假设），或原假设错误我们拒绝了（同时也就接受了备择假设），这表明我们作出了正确的决定。但是，由于假设检验是根据样本提供的信息进行推断的，也就有犯错误的可能。<em>有这样一种情况，原假设正确，而我们却把它当成错误的加以拒绝。犯这种错误的概率用α表示，统计上把α称为假设检验中的显著性水平  ，也就是决策中所面临的风险。</em></p><h3 id="小概率原理"><a href="#小概率原理" class="headerlink" title="小概率原理"></a>小概率原理</h3><p>小概率原理是指一个事件的发生概率很小，那么它在一次试验中是几乎不可能发生的，但在多次重复试验中是必然发生的。统计学上，把小概率事件在一次实验中看成是实际不可能发生的事件，一般认为等于或小于0.05或0.01的概率为小概率。</p><h3 id="离散程度指标"><a href="#离散程度指标" class="headerlink" title="离散程度指标"></a>离散程度指标</h3><p>离散指标的数据越小,说明数据的离散程度越小,反之亦然.</p><h4 id="全距-Range"><a href="#全距-Range" class="headerlink" title="全距(Range)"></a>全距(Range)</h4><p>又称极差,指数据中最大值与最小值的差.即$R=max-min$.是一个比较粗糙的测度指标。如果需要全面、精确地说明数据离散程度时，就不宜使用全距.</p><h4 id="平均差-Mean-Absolute-Deviation"><a href="#平均差-Mean-Absolute-Deviation" class="headerlink" title="平均差(Mean Absolute Deviation)"></a>平均差(Mean Absolute Deviation)</h4><p>各项数值与其均值绝对值之和的平均数,即$MAD=\frac{\sum|X-\overline{X}|}{n}$</p><p>虽然平均差简单易懂，但因为使用了绝对值，不便于进一步计算，所以在实际应用中不如其他离散指标应用那样广泛。但在预测领域，还常常使用该指标用于误差的说明。</p><h4 id="方差-Variance"><a href="#方差-Variance" class="headerlink" title="方差(Variance)"></a>方差(Variance)</h4><p>指全部数据离差平方的平均数,即$\sigma^2=\frac{\sum_{i=1}^n(X_i-\mu)^2}{n}$.</p><p>方差克服了平均差绝对值的问题，成为描述离散程度的一个重要指标。但是，在方差数值含义的解释上却遇到困难。因为方差的单位是数据单位的平方，夸大了数据的离散程度，使人不易直观理解数值意义.</p><h4 id="标准差-Standard-Deviation"><a href="#标准差-Standard-Deviation" class="headerlink" title="标准差(Standard Deviation)"></a>标准差(Standard Deviation)</h4><p>通常取方差的算数平方根作为描述离散程度的指标,即$\sigma=\sqrt{\frac{\sum_{i=1}^n(X_i-\mu)^2}{n}}$.</p><h4 id="样本的方差和标准差"><a href="#样本的方差和标准差" class="headerlink" title="样本的方差和标准差"></a>样本的方差和标准差</h4><p>分别用$S^2和S$表示.与总体的方差和标准差之间的唯一区别就是分数的分母是n-1,而不是n了.因为样本的方差和标准差在使用中，经常作为总体方差和标准差的估计量，如果直接除以样本容量n，得到的结果相对于总体方差和标准差来说是有偏的；除以自由度n-1可以得到总体方差和标准差的较好的估计量。</p><h4 id="离散系数-Coefficient-Of-Variation"><a href="#离散系数-Coefficient-Of-Variation" class="headerlink" title="离散系数(Coefficient Of Variation)"></a>离散系数(Coefficient Of Variation)</h4><p>为标准差与均值的比值.一般用V表示.总体的离散系数$V_\sigma=\frac{\sigma}{\mu}$.样本的离散系数$V_\sigma=\frac{S}{\overline X}$.</p><h4 id="异众比率"><a href="#异众比率" class="headerlink" title="异众比率"></a>异众比率</h4><p>异众比率指的是总体中非众数次数与总体全部次数之比，常常使用$V_r$来表示.假设有N个样本值,样本存在一个众数c,且众数的个数为n,则异众比率$V_r=\frac{N-n}{N}=1-\frac{n}{N}$.</p><h4 id="四分位距-interquartile-range-IQR"><a href="#四分位距-interquartile-range-IQR" class="headerlink" title="四分位距(interquartile range, IQR)"></a>四分位距(interquartile range, IQR)</h4><p>又称四分差,以确定第三四分位数(上分位数)和第一二分位数(下分位数)的区别.$IQR=Q_3-Q_1$.用来画出箱线图查看数据的异常点,数据的偏态和数据的大致形状.</p><h3 id="四分位数"><a href="#四分位数" class="headerlink" title="四分位数"></a>四分位数</h3><ul><li>第一四分位数$Q_1$，又称较小四分位数，等于该样本中所有数值由小到大排列后第25%的数字。</li><li>第二四分位数$Q_2$，又称中位数，等于该样本中所有数值由小到大排列后第50%的数字。</li><li>第三四分位数$Q_3$，又称较大四分位数，等于该样本中所有数值由小到大排列后第75%的数字。</li></ul><p>主要选择四分位的百分比值p，及样本总量n.有以下数学公式可以表示：</p><ul><li><p>情况1：如果L是一个整数，则取第L和第L+1的平均值.</p></li><li><p>情况2：如果L不是一个整数，则取向下取整.</p></li></ul><h4 id="四分位差-QD"><a href="#四分位差-QD" class="headerlink" title="四分位差(QD)"></a>四分位差(QD)</h4><p>$QD=\frac{Q_3-Q_1}{2}$.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马尔可夫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing学习</title>
      <link href="/2020/04/15/suan-fa/acwing-xue-xi/"/>
      <url>/2020/04/15/suan-fa/acwing-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><pre class="mermaid">graph LRdata[数据结构与算法]data--&gt;CA[复杂度分析]data--&gt;BA[基础算法]data--&gt;Sort[排序]data--&gt;Search[搜索]data--&gt;Find[查找]data--&gt;Match[字符串匹配]data--&gt;Other[其他]data--&gt;Link[线性表]data--&gt;Hash[散列表]data--&gt;Tree[树]data--&gt;ggraph[图]CA--&gt;空间复杂度CA--&gt;时间复杂度时间复杂度--&gt;最好时间复杂度--&gt;最坏时间复杂度--&gt;平均时间复杂度--&gt;均摊BA--&gt;贪心BA--&gt;分治BA--&gt;动态规划BA--&gt;回溯BA--&gt;枚举Sort--&gt;n2[O(n^2)]Sort--&gt;nlogn[O(nlogn)]Sort--&gt;n[O(n)]n2--&gt;冒泡排序n2--&gt;插入排序n2--&gt;选择排序n2--&gt;希尔排序nlogn--&gt;归并排序nlogn--&gt;快速排序nlogn--&gt;堆排序n--&gt;计数排序n--&gt;基数排序n--&gt;桶排序Search--&gt;深度优先搜索Search--&gt;广度优先搜索Search--&gt;A*启发式搜索Find--&gt;线性表查找Find--&gt;树结构查找Find--&gt;散列表查找Match--&gt;朴素Match--&gt;KMPMatch--&gt;Robin-KarpMatch--&gt;Boyer-MooreMatch--&gt;AC自动机Match--&gt;TrieMatch--&gt;后缀数组Other--&gt;数论Other--&gt;计算几何Other--&gt;概率分析Other--&gt;并查集Other--&gt;拓扑网络Other--&gt;矩阵运算Other--&gt;线性规划Link--&gt;数组Link--&gt;链表Link--&gt;栈Link--&gt;队列链表--&gt;单链表链表--&gt;双向链表链表--&gt;循环链表链表--&gt;双向循环链表链表--&gt;静态链表栈--&gt;顺序栈栈--&gt;链式栈队列--&gt;普通队列队列--&gt;双端队列队列--&gt;阻塞队列队列--&gt;并发队列队列--&gt;阻塞并发队列Hash--&gt;散列表Hash--&gt;冲突解决Hash--&gt;动态扩容Hash--&gt;位图冲突解决--&gt;链表法冲突解决--&gt;开放寻址冲突解决--&gt;1[其他]Tree--&gt;二叉树Tree--&gt;多路查找树Tree--&gt;堆Tree--&gt;2[其他]二叉树--&gt;平衡二叉树二叉树--&gt;二叉查找树二叉树--&gt;平衡二叉查找树二叉树--&gt;完全二叉树二叉树--&gt;满二叉树平衡二叉查找树--&gt;AVL树平衡二叉查找树--&gt;红黑树多路查找树--&gt;B树多路查找树--&gt;B+树多路查找树--&gt;2-3树多路查找树--&gt;2-3-4树堆--&gt;大顶堆堆--&gt;小顶堆堆--&gt;优先级队列堆--&gt;斐波那契堆堆--&gt;二项堆2--&gt;树状数组2--&gt;线段树ggraph--&gt;图的存储ggraph--&gt;拓扑排序ggraph--&gt;最短路径ggraph--&gt;关键路径ggraph--&gt;最小生成树ggraph--&gt;二分图ggraph--&gt;最大流图的存储--&gt;邻接矩阵图的存储--&gt;邻接表</pre><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本流程：</p><ol><li>确定分界点：通常随机选取q[l],q[(l+r)/2],q[r]</li><li><strong>调整区间，左边区间$\leq x$，右边区间$\geq x$。</strong></li><li>递归处理左右区间。</li></ol><p>时间复杂度：$O(nlogn)$</p><p><strong>随机取点时，不推荐使用边界点。</strong>当给定的序列有序时，如果每次选择区间左端点进行划分，每次会将区间[L, R]划分成[L, L]和[L + 1, R]，那么相当于每次递归右半部分的区间长度只会减少1，所以就需要递归n-1次了，时间复杂度会达到 $n^2$。但每次选择区间中点或者随机值时，划分的两个子区间长度会比较均匀，那么期望只会递归$logn$层。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断是否有元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//因为这里为了递归，在每次都直接将数组的指针进行加一，所以这里在声明的时候将范围左右各扩展一个</span>    <span class="token comment">//这里x也不能取到n[r]，理由和下面的类似</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//判断是否有元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//因为这里为了递归，在每次都直接将数组的指针进行加一，所以这里在声明的时候将范围左右各扩展一个</span>    <span class="token comment">//这里初值位置修改成这样是因为当下面递归使用i时，防止出现右边界死循环，用j的时候不会发生这个问题</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> j<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>要是觉得快排是不稳定的算法，可以将所有元素都变成二元组。这样每个元素都是不一样的了，就不涉及稳不稳定的问题了。</del>归并排序是稳定的。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>基本流程：</p><ol><li>确定分界点：$mid=(l+r)/2$</li><li>递归排序左右区间</li><li><strong>归并，合二为一</strong></li></ol><p>时间复杂度：$O(nlogn)$，且需要一个额外的辅助数组空间。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//这里也可以写成l+r&gt;&gt;1</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//递归处理</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的k记录tmp数组中的位置</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果还有没有处理的元素，进行处理</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将tmp数组中的数组转移到原本的数组中,注意这里的i使用l初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h4><p>最直接的方法的时间复杂度是$O(n^2)$，可以使用归并排序计算逆序对数量。</p><p>$逆序对数量=左区间的逆序对数量+右区间的逆序对数量+合并部分的逆序对数量$</p><p>若i是左区间的遍历索引，j为右区间的遍历索引。当数组[i]大于[j]时，此时逆序对数量为$mid-i+1$。进行累加即可。</p><p>对于测试数量级较大时，逆序对数量用long long 比较好。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            x<span class="token operator">+=</span>mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//for(int i=0;i &lt; n;i++) printf("%d ",q[i]);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h3><p><strong>二分的本质不是单调性，有单调性一定可以二分，但是没单调性也不一定不能使用二分。对于整数二分而言，是边界，即一侧区间满足某种性质，另一侧不满足某种性质。</strong></p><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><p>将一个域划分为两个相反区间。</p><p>整数二分中没有交点。</p><ul><li><p>区间[l,r]被划分为[l,mid]和[mid+1,r]</p></li><li><p>$mid={\frac{l+r+1}{2}}$</p><p>  $if (check(mid)) \begin{cases} true&amp; \text {[mid,r]=&gt;l=mid} \ false&amp; \text {[l,mid+1]=&gt;r=mid-1} \end{cases} $</p></li><li><p>区间[l,r]被划分为[l,mid-1]和[mid,r]</p></li><li><p>$mid=\frac{l+r}{2}$</p><p>  $if(check(mid))\begin{cases}true \quad[l,mid]=&gt;r=mid \ false \quad [mid+1,r]=&gt;l=mid+1\end{cases}$</p></li></ul><p>**这里的mid是否加一,取决于当为true时是l=mid还是r=mid.如果是l=mid,默认的除法是下取整,在l和r之间只相差一个的时候导致一直是l=l,进而导致死循环.**写程序的时候先写成<code>l+r&gt;&gt;1</code>，之后再根据l和r，选择是否+1。</p><p>需要考虑如果找不到的情况，二分出来的结果就是最靠近的那个元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span> <span class="token comment">// 检查x是否满足某种性质</span><span class="token comment">//区间[l,r]被划分为[l,mid]和[mid+1,l]时使用</span><span class="token keyword">int</span> <span class="token function">bsearch_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//区间[l,r]被划分为[l,mid-1]和[mid,r]时使用</span><span class="token keyword">int</span> <span class="token function">bsearch_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h4><p>浮点数二分不需要处理边界，所以相对简单。</p><p>下面是一个开方的函数,就是利用了浮点数的二分.如果精度要求是四位小数le-6,五位精度le-7类推.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kaifang</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> <span class="token number">1e-8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span>r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大整数计算"><a href="#大整数计算" class="headerlink" title="大整数计算"></a>大整数计算</h3><h4 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h4><p>这里的选择使用数组存储大整数，这里第0位存个位数，最高位放在数组最后面。这样当发生进位的时候，容易处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token comment">//t为当前操作位</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">+=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">+=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//注意，最后进位不为0的话需要进一</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>    <span class="token comment">//注意下面的i是从size()-1开始，size()出没有值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法的第零位存放的是数字的个位。</p><h4 id="两数相减"><a href="#两数相减" class="headerlink" title="两数相减"></a>两数相减</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//当结果的位数&gt;1时，去掉结果高位的无用0</span><span class="token keyword">void</span> <span class="token function">trimZero</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//C=A-B</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">-=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">trimZero</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//是否A&gt;=b</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>    <span class="token comment">//读入的数字存放进vector</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        C<span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C<span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法需要注意要去除多余的0。</p><h4 id="两数相乘"><a href="#两数相乘" class="headerlink" title="两数相乘"></a>两数相乘</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//A是大正整数，B是相对小的正整数(直接定义为int型)vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A,int B){        vector&lt;int&gt; C;        int t=0;        for (int i = 0; i &lt; A.size()||t; ++i) {            t+=A[i]*B;            C.push_back(t%10);            t/=10;        }        // 去除前导0        while(C.back()==0&amp;&amp;C.size()&gt;1) C.pop_back();        return C;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两数相除"><a href="#两数相除" class="headerlink" title="两数相除"></a>两数相除</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token comment">//A是被除数，B是除数，C是商，r是余数。注意这里的r需要被调用，记得加引用</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r <span class="token operator">%</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前缀与差分"><a href="#前缀与差分" class="headerlink" title="前缀与差分"></a>前缀与差分</h3><h5 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h5><p>前缀和一定要从1开始。</p><p><strong>a[]和s[]数组的第0位都放0，之后进行存储运算从第1位开始。这样在进行计算s[]的时候可以直接用-1</strong></p><p>前缀和与差分是逆运算。</p><p>差分与前缀和可以使得一个数组区间加减一个数的时间复杂度从$O(n)$降低至$O(1)$。原本执行流程是遍历所有情况后</p><h6 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h6><p>int a[N],s[N]，其中a[i]表示真实数组中第i个元素的值，s[N]表示前i个元素的和。前缀和公式为$s=s[r]-s[l-1]$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h6><p>结构原理同上，公式为$s=s[x_2][y_2]-s[x_1-1][y_2]-s[x_2][y_1-1]+s[x_1-1][y_1-1]$和$s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j]$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><p><strong>一阶差分</strong></p><p>给定a[]数组，求一段区间内元素加上某一数值的和。</p><p>思路：假定前缀和数组a[]每个元素都是从0开始，差分数组b[]相应的也都是0。然后获取a[]每个元素的过程视为a[i]=(i,i)区间内加上$a_i$的值。</p><p>使用前缀和计算原数组：$b[i]+=c &amp;&amp; b[i+1]-=c$，前缀和就是$b[i]+=b[i-1]$的累加。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二阶差分</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><p>双指针算法大致可以分成两种，即两个指针指向不同的两个空间和两个指针指向同一空间的不同区间。</p><p>双指针算法的核心是将朴素算法中的两层及其以上的嵌套循环优化到O(n)。</p><p>双指针的模板的大都类似这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>i<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//每道题目的具体逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>最长连续不重复子序列</code>中朴素的算法如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种算法的时间复杂度在$O(n^2)$。</p><p>采用双指针算法时间复杂度能降低至$O(n+n)=O(2n)=O(n)$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里i是终点，j是往右最远的距离就是答案。本题中j的移动是单调的。所以只有有重复的必然是b[a[i]]所带来的，将j右移,b[a[j]]–。</p><p>下面是双指针实现的最长连续不重复子序列：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>一般用于计算n的二进制表示第k位是什么。<code>n&gt;&gt;k&amp;1</code></p><p><code>lowbit(x)</code>：返回x的最后一位1。实现的原理是基于C++中负数是原数取反+1，所以x&amp;-x即x&amp;(~x+1)。、取反后最后一位1是0之后都是1，加1之后全部变成0,最后一位再次变成1,前面的还是取反状态与运算0。</p><h5 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整数离散化"><a href="#整数离散化" class="headerlink" title="整数离散化"></a>整数离散化</h3><p>难点：</p><ul><li>数组中可能有重复元素，<strong>去重</strong>。</li><li>如何找出相应数对应的下标，<strong>二分</strong>。</li></ul><p>C++中的<code>unique(容器.begin(),容器.end())</code>函数将所有重复元素放置到容器的尾部，并返回指向第一个重复元素的迭代器。</p><p>离散化模板：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> alls<span class="token punctuation">;</span><span class="token comment">//存储所有待离散化的值</span><span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所有值排序</span>alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去重</span><span class="token comment">//二分求出x对应的离散化的值，找出第一个大于等于x的位置</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//映射到1,2..，不加一就是不映射</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对范围很大，但是其中使用到的元素很少的情况，使用离散化是一个不错的选择。 </p><p>求区间和：假定有一个无限长的数轴，数轴上每个坐标上的数都是0。现在，我们首先进行 n 次操作，每次操作将某一位置x上的数加c。接下来，进行 m 次询问，每个询问包含两个整数l和r，你需要求出在区间[l, r]之间的所有数的和。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//坐标x的数量上限为1e5，两个坐标l,r的数量上限也为1e5,所以加起来为3*le5</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">300010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> add<span class="token punctuation">,</span>query<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> alls<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>x<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//因为后续要使用前缀和，所以返回的坐标要加上1</span>    <span class="token keyword">return</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//unique的自己实现</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">unique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token operator">||</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>A<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token comment">//一次性读取所有添加和查询的坐标，以便进行离散化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//排序去重</span>    <span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理加入，构建原数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>add<span class="token punctuation">)</span><span class="token punctuation">{</span>        q<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span>item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//计算前缀和</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//查询</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>query<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> seg<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>    <span class="token comment">//按左端点排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>seg<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">,</span>ed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>seg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//情况1：两个区间无法合并</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ed<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//区间1放进res数组</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//维护区间2</span>            st<span class="token operator">=</span>item<span class="token punctuation">.</span>first<span class="token punctuation">;</span>            ed<span class="token operator">=</span>item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            ed<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">,</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//剩下还有一个序列，但循环中没有放进res数组，因为它是序列中的最后一个序列</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    seg<span class="token operator">=</span>res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        seg<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">merge</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>seg<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启发式合并"><a href="#启发式合并" class="headerlink" title="启发式合并"></a>启发式合并</h3><h3 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h3><h3 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h3><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><h3 id="打表"><a href="#打表" class="headerlink" title="打表"></a>打表</h3><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>在笔试与面试的时候，直接生成节点的结构体在new的时候会花费大量时间。因此，需要使用数组来模拟链表，优化执行时间。</p><h3 id="链表与邻接表"><a href="#链表与邻接表" class="headerlink" title="链表与邻接表"></a>链表与邻接表</h3><p>单链表最大的用途是写邻接表，而邻接表最大的用途是存储图和树。邻接表的实现就是一堆单链表的集合。</p><p>双链表来优化某些问题。</p><p>使用两个数组记录一个链表，在算法题目中大多使用这种形式的链表，避免了new和delete过程所花费的时间。</p><h4 id="单链表数组实现"><a href="#单链表数组实现" class="headerlink" title="单链表数组实现"></a>单链表数组实现</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//va[i]表示i的数值，ne[i]表示节点i中的next指针是多少</span><span class="token keyword">int</span> va<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//head表示头节点的下标，idx存储当前已经用到了哪个点</span><span class="token keyword">int</span> head<span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert_head</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    va<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">;</span>    head<span class="token operator">=</span>idx<span class="token punctuation">;</span>    idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    va<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    ne<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token punctuation">;</span>    idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    ne<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>ne<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'H'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insert_head</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果删除的是头节点，将头指针设置为头指针指向的下一个</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">)</span> head<span class="token operator">=</span>ne<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//注意下标</span>            <span class="token keyword">else</span> <span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//注意下标</span>            <span class="token function">insert</span><span class="token punctuation">(</span>key<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>va<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双链表数组实现"><a href="#双链表数组实现" class="headerlink" title="双链表数组实现"></a>双链表数组实现</h4><p>双链表不同于单链表在于其拥有左节点和右节点的信息。因此基础的数据为<code>e[i],l[i],r[i],idx</code>。索引0固定为起始节点，索引1固定为结束节点，因此初始化可以设置为<code>r[0]=1,l[1]=0,idx=2</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//0代表起始端点，1代表结束端点</span>    <span class="token comment">//真实数字从idx==2开始存放</span>    idx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//此函数的逻辑是插入k的右侧节点</span><span class="token comment">//若需要实现插入k的左侧节点只需传入l[k]即可</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    l<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token operator">++</span>idx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    r<span class="token punctuation">[</span>l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    l<span class="token punctuation">[</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"IL"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"IR"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>这里使用数组来模拟栈结构。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> stk<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stk<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> stk<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"YES"</span> <span class="token operator">:</span> <span class="token string">"NO"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> stk<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"empty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>常见模型：找出每个数左边离它最近的比它大/小的数</p><p>这里主要应用了结果的单调性，即找左边最近的最大或者最小的数。由于之前的数若大于等于当前数字则出栈，其永远不会是解，直至找到栈顶最小的数，并将当前数字压入栈中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> tt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tt<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>    stk<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>常见模型：找出滑动窗口中的最大值/最小值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> hh<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt<span class="token operator">&amp;&amp;</span><span class="token function">check_out</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> hh<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//判断队头是否滑出窗口</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hh<span class="token operator">&lt;=</span>tt<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> tt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// 注意这里的新元素存放，可能新入队的元素满足条件，需要放在结果集操作前面</span>    q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p><strong>Trie可以实现高效的存储和查找字符串集合</strong>。其本质上采用树的结构。除根节点之外的所有节点来存储字符串的每个字符信息。依据字符串来创建Trie树，并记录每个节点作为字符串结尾的次数。</p><p><strong>能算法题中能使用Trie数的题目，必然限制了字符的范围，一般在26到52之间</strong>。</p><p>汉字这种字符特别多的情况，可以将其转化为二进制数，范围就成了01之间。</p><p>Trie树示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Acwing%E5%AD%A6%E4%B9%A0/Trie.jpeg" alt="Trie.jpeg"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// s存放的trie数，横坐标为所有字符串个数，纵坐标为每个字符串的字符，同一层级元素在不同行</span><span class="token comment">// s[i][j]==0既可能是根节点也可能是叶子结点</span><span class="token comment">// cnt[x]存放以x为结尾的单词个数</span><span class="token comment">// idx记录当前处理的s数组行数</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">char</span> op<span class="token punctuation">,</span> str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>idx<span class="token punctuation">;</span>        p <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">++</span>cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>通常将<strong>两个集合合并或查询两个元素是否在一个集合当中</strong>，朴素算法的时间复杂度为$O(n)$，而并查集的优点在于进行上述两种操作时，时间复杂度**近乎$O(1)$**，并不是完全$O(1)$。</p><p>基本原理为：<strong>每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点存储它的父节点</strong>。<code>p[x]</code>表示x的父节点。</p><ul><li>如何判断树根：<code>if(p[x]==x)</code></li><li>  求x的集合编号：<code>while(p[x]!=x) x=p[x];</code></li><li>如何合并两个集合：设立任意一条边属于另一个树</li><li>如何优化并查集寻找父节点的过程：使用路径压缩，即在寻找的过程中，将所有子节点的父指针直接指向树根。一般不用大枝合并。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 返回idx的根节点+路径压缩</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆这种数据结构本身支持以上五种操作，前三种在STL中有之间实现，后两种可以间接实现。</p><ul><li>插入一个元素</li><li>求集合中最小元素的值</li><li>删除最小元素</li><li>删除任意元素</li><li>修改任意元素</li></ul><p>小根堆的定义就是其节点小于等于其左右子节点的值。其根节点就是整个数的最小值。在小根堆中上述五种的实现可以用伪代码表示：</p><ul><li><code>heap[++size]=x;up(size);</code></li><li><code>heap[1]</code></li><li><code>heap[1]=heap[size--];down(1);</code></li><li><code>heap[k]=heap[size--];down(k);up(k);</code></li><li><code>heap[k]=x;down(k);up(k);</code></li></ul><p>上述表达中的<code>size</code>表示当前占用到的索引，这里的索引从1开始，这样<code>x</code>的左子节点就可以方便的设置为<code>2x</code>，右子节点为<code>2x+1</code>。down操作表示将对应索引的向底层下降，up操作表示将对应索引向根节点靠近。</p><p>针对修改任意一个元素或删除任意一个元素，其实都是只有三种情况：down、up或者不变。如果需要down，则up实则不会执行。需要up同理。因此上述两种直接写上down和up操作即可。</p><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p>堆的建立不推荐使用插入的方式解决，效率太低是<code>O(nlogn)</code>。这里阐述一个<code>O(n)</code>复杂度的建堆方式，并给出复杂度分析。</p><p>思想就是<strong>直接从$\lfloor n/2 \rfloor$下标开始执行down操作直至1下标</strong>。</p><p>之所以这么做是基于下标之间的关系及其完全二叉树的性质。由于完全二叉树的性质，我们可以知道在某一节点之后的所有节点都是叶子节点。再结合下标之间的关系可以知道，最后一个非叶子节点就是$\lfloor n/2 \rfloor$的位置。因此之后的所有叶子节点不需要进行调整位置，因为其父节点调整时会调整符合条件的叶子结点，而起本身没有子节点。</p><p>原本的插入方式来建堆，其复杂性依赖于树的深度其复杂度为$O(logn)$，建堆中有n个元素，因此总时间复杂度为$O(nlogn)$。</p><p>但是采用上述方法创建堆，其时间复杂度大大较少。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%AE%97%E6%B3%95/Acwing%E5%AD%A6%E4%B9%A0/%E5%BB%BA%E5%A0%86%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.jpeg" alt="建堆复杂度分析.jpeg"></p><p>可以分析出其是一个等差数列求和，可以使用错位相减获得和的计算公式，再借助极限就可以发现其复杂度无限接近$O(n)$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token comment">// 建堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用堆优化Dijkstra算法。但是需要两个二个额外的数组空间<code>hp、ph</code>来维护从堆到数组的映射关系、数组到堆的映射关系。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// h: 堆数据</span><span class="token comment">// ph[i]: 第k数的堆索引</span><span class="token comment">// hp[i]: 索引i是第hp[i]个插入的数</span><span class="token comment">// len: 堆索引</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token comment">// 这里的ab都是堆中的索引</span><span class="token keyword">void</span> <span class="token function">heapSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ph<span class="token punctuation">[</span>hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>hp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> hp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> idx<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">*</span> t <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        idx <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> idx<span class="token punctuation">)</span> <span class="token function">heapSwap</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>idx <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> h<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heapSwap</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> idx <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idx <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// n: 操作数量</span>    <span class="token comment">// x: 操作数</span>    <span class="token comment">// m: 第m个数</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            ph<span class="token punctuation">[</span><span class="token operator">++</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>len<span class="token punctuation">;</span>            hp<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            h<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"DM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">heapSwap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">heapSwap</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>op<span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            h<span class="token punctuation">[</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token function">down</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">up</span><span class="token punctuation">(</span>ph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码维护了上述信息。</p><h4 id="堆排序分析"><a href="#堆排序分析" class="headerlink" title="堆排序分析"></a>堆排序分析</h4><h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><p>整个堆排序的过程，都只需要极个别临时存储空间，所以堆排序是原地排序算法。堆排序包括建堆和排序两个操作，建堆过程的时间复杂度是$O(n)$，排序过程的时间复杂度是$O(nlogn)$。所以，堆排序整体的时间复杂度是$O(nlog⁡n)$。</p><h5 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h5><p>堆排序不是稳定的排序算法，因为在排序的过程，存在将堆的最后一个节点跟堆顶节点互换的操作，所以就有可能改变值相同数据的原始相对顺序。</p><h5 id="索引为0开始"><a href="#索引为0开始" class="headerlink" title="索引为0开始"></a>索引为0开始</h5><p>如果节点的下标是$i$，那左子节点的下标就是$2*i+1$，右子节点的下标就是$2(i+1)$，父节点的下标就是$\frac{i-1}{2}$。</p><h5 id="为何不如快速排序"><a href="#为何不如快速排序" class="headerlink" title="为何不如快速排序"></a>为何不如快速排序</h5><ul><li><p><strong>堆排序数据访问的方式没有快速排序友好。</strong></p><p>对于快速排序来说，数据是顺序访问的。而对于堆排序来说，数据是跳着访问的。 而不是像快速排序那样，局部顺序访问，所以，这样对 CPU 缓存是不友好的。</p></li><li><p><strong>对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序。</strong></p><p>我们在讲排序的时候，提过两个概念，有序度和逆序度。对于基于比较的排序算法来说，整个排序过程就是由两个基本的操作组成的，比较和交换（或移动）。快速排序数据交换的次数不会比逆序度多。</p><p>但是堆排序的第一步是建堆，建堆的过程会打乱数据原有的相对先后顺序，导致原数据的有序度降低。比如，对于一组已经有序的数据来说，经过建堆之后，数据反而变得更无序了。</p></li></ul><h3 id="整数Hash"><a href="#整数Hash" class="headerlink" title="整数Hash"></a>整数Hash</h3><p>哈希算法是一种期望算法。在平均情况下来看，每个节点对应的数可以认为是常数级别的。因此时间复杂度近似可以看成$O(1)$。</p><pre class="mermaid">graph LR哈希表--&gt;存储结构哈希表--&gt;字符串哈希方式存储结构--&gt;开放寻址法存储结构--&gt;拉链法</pre><p>离散化可以理解为一种特殊的哈希方式，其需要保序。</p><p>哈希函数：</p><ul><li>将x映射进一个范围，一般用取余的操作。x mod 范围</li><li>冲突解决。针对冲突解决有两种方法：<ul><li>开放寻址法：出现散列冲突之后，就去寻找下一个空的散列地址<ul><li>线性寻址：线性寻址步长是1</li><li>二次探测：步长是线性寻址步长的2次方</li><li>随机探测：每次步长随机</li></ul></li><li>再散列函数法：发生散列冲突后，换一个散列函数计算散列值</li><li>拉链法：在计算出的位置索引出链上一个链表，其中存放在这个位置的所有元素</li></ul></li></ul><p>不管哪种探测方法，散列表中空闲位置不多的时候，散列冲突的概率就会提高，为了保证操作效率，我们会尽可能保证散列表中有一定比例的空闲槽位，我们用装载因子来表示空位的多少，装载因子=填入元素/散列表长度，装载因子越大，表明空闲位置越少，冲突越多，散列表性能降低。</p><p>算法题中一般只涉及插入和查找操作，不涉及删除。如果一定要实现删除，可以选择将对应节点做上标识的方式，而不是真的去删除。</p><p>**取模的数一般推荐选择采用质数且离2的整次幂尽可能的远，这样冲突的概率较小，可以通过<a href="https://buerlog.top/2022/02/16/suan-fa/sheng-ri-peng-zhuang-he-ha-xi-han-shu/">数学证明</a>**。</p><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>    <span class="token comment">// 向哈希表中插入一个数</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>        e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> idx <span class="token operator">++</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 在哈希表中查询某个数是否存在</span>    <span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><p>注意这里h的空间一般需要放到题目元素数组元素的2到3倍。因为开放寻址法在每个元素都有的情况下，会陷入死循环。</p><p>这里的选择的0x3f3f3f3f标记没有元素。因此可以直接是用<code>memset(h,0x3f,sizeof h)</code>,因为int是4字节，memset会每个字节塞0x3f。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> N <span class="token operator">+</span> N<span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t <span class="token operator">++</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> N<span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h3><h3 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h3><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><h3 id="动态树"><a href="#动态树" class="headerlink" title="动态树"></a>动态树</h3><h3 id="Dancing-Links"><a href="#Dancing-Links" class="headerlink" title="Dancing Links"></a>Dancing Links</h3><h3 id="左偏树"><a href="#左偏树" class="headerlink" title="左偏树"></a>左偏树</h3><h3 id="后缀树组"><a href="#后缀树组" class="headerlink" title="后缀树组"></a>后缀树组</h3><h3 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h3><h3 id="点分治和点分树"><a href="#点分治和点分树" class="headerlink" title="点分治和点分树"></a>点分治和点分树</h3><h3 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h3><h3 id="仙人掌"><a href="#仙人掌" class="headerlink" title="仙人掌"></a>仙人掌</h3><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h3><p>对于字符串匹配问题，暴力算法的时间复杂度为O(n*m)。只要枚举文本串的起始位置i，然后从改位开始逐位与模式串进行匹配。如果匹配过程中每一位都相同，则匹配成功。否则，只要出现某位不同，就让文本串的起始位置变成i+1，并从头开始模式串的匹配。字符串比较过程中，必然会每个字符之间进行大量重复比较，其很难优化。暴力算法其时间复杂度最差的情况为每次扫描在模式串最后处才匹配失败。其实现算法如下。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// brute force暴力枚举算法</span><span class="token comment">// 复杂度为O(n*m)。当n和m为1e5数量级时，算法完全不可用。</span><span class="token keyword">void</span> <span class="token function">bruteForce</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>P<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> lens <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span> lenp <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> lens <span class="token operator">-</span> lenp<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，优化整体的检查次数，利用上一次扫描的结果避免重复的比较是优化方向，也是KMP算法的主要优化方式。</p><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>KMP算法的核心思想就是如何利用字符串对比中的信息，简化循环的次数，利用可用的重复性。朴素算法采用两个for循环对每个字符串的元素进行比较，KMP先针对模式串进行处理，获取其next数组。其next[i]表示当前元素从右往左与从模板起始处相同子串的最大长度。这样当出现不匹配的情况时，可以一次性向后移动多个位置，而不是一个个移动，将算法的复杂度降至O(m+n)。KMP算法利用了模式串内部的重复性在失配的时候将模式串向后移动与匹配指针对齐，减少无意义的匹配。</p><p>KMP算法中定义可用重复性使用的是<code>Partial Match</code>数组，<code>PM[i]</code>表示字符串长度为i+1的前缀里（除本身外）最长相等前后缀的长度。为了方便使用，<code>Next</code>数组。<code>Next[i]</code>表示匹配模式串i位置失配模式串向后滑动对其匹配指针的位置。Next数组的构建方式为将PM数组整体向后移动一位，并在第一个位置出补上-1。此时，Next数组的前两位就固定为Next[0]=-1,Next[1]=0。因为本身不计算，其只能是0。</p><p>在书写代码的时候<code>next</code>这个名字可能被使用了，可以使用<code>ne</code>作为名字。<code>next[i]</code>表示使子串s[0…i]的前缀s[0…k]等于后缀s[i-k…i]的最大的k（<strong>注意前缀跟后缀可以部分重叠，但不能是s[0…i]本身</strong>）。如果找不到相等的前后缀，则令next[i]=-1。显然，next[i]就是所求最长相等前后缀中前缀最后一位的下标。</p><p>为了提升 KMP 算法的易用性，我们定义 Next 数组为 <code>-1</code> 接上删去最后一位的PM数组，这样有一个好处就是在<code>T[x]</code>处失配，我们可以直接通过 <code>Next[x]</code> 跳转，而不是复杂地还要去找 <code>pm[x-1]</code> 然后再移动字符串再从下一位开始继续匹配。</p><p>这里在赘述以下 Next 数组的使用方法：我们先暴力匹配的过程将模式串与目标串进行匹配，当失配的时候，我们比较$ S[p]\neq =T[q]$ 的时候失配，分两种情况：</p><ul><li>q = 0，下一步目标串下一位和模式串从头比较，也就是<code>S[p+1]</code>与<code>T[0]</code> 进行比较。</li><li>q &gt; 0，我们将模式串向后移动，使<code>T[Next[q]]</code>对齐<code>S[p]</code>，下一步比较这两位。</li></ul><p>我们可以通过证明使用 Next 数组与使用 PM 数组等价，证明 Next 数组的正确性。</p><p>紧接着看如何计算 Next 数组，其实从意义上理解我们是在计算 PM 数组。<code>Next[i]</code> 就是算$T[0\cdots i-1]$ 的最长前后缀长度是多少，这有两种情况：<br>* 如果 <code>T[i – 1] = T[Next[i-1]]</code>，那么<code>Next[i] = Next[i – 1] + 1</code>。因为<code>Next[i-1]</code>存储的是$T[0\cdots i-2]$的最长前后缀，如果能在这个基础上增加 1 个得到<code>Next[i]</code>，那一定是最长的。<br>* 如果$T[i – 1] \neq T[Next[i – 1]]$，那么我们可以把它看作是 T 的前缀和$ T[0\cdots i-1]$ 的匹配问题且在这一步失配了，那么我们可以使用上述的 KMP 算法跳 Next 数组比较<code>T[i-1]</code>与<code> T[Next[Next[i-1]]]</code>，再分成现在说的这两种情况考虑。（或者确认模式串此前缀的最长前后缀长度为 0 为止）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// KMP算法</span><span class="token comment">// 复杂度为O(m+n)</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> ne<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这里多放的一位表示完成匹配</span>    ne<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> ne<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span>j <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> lenp <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">,</span> lent <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lent<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> lenp<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">-</span> lenp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串前缀哈希"><a href="#字符串前缀哈希" class="headerlink" title="字符串前缀哈希"></a>字符串前缀哈希</h3><p>核心思想：<strong>将字符串看成P进制数</strong>，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用$2^{64}$，这样直接用<code>unsigned long long</code>存储，溢出的结果就是取模的结果。</p><p><strong>注意这里不能从0开始映射，这样会导致0和00、000之类的都没有区别。所以必须从非0开始。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ULL<span class="token punctuation">;</span>ULL h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><span class="token comment">// 初始化</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> P<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 计算子串 str[l ~ r] 的哈希值</span>ULL <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>除最后一层无任何子节点外，每一层上的所有节点都有两个子节点二叉树。</p><blockquote><p>定义：一个二叉树，如果每一层的节点数都达到最大值，则这个树就是满二叉树。即，如果一个二叉树的层数为K，且节点总数为$2^K-1$，则它是满二叉树。</p></blockquote><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>完全二叉树是在满二叉树的基础上引申出来的。对于深度为k，有n个节点的二叉树，当且仅当每个节点都与深度为k的满二叉树中编号从1至n的节点一一对应就是完全二叉树。</p><blockquote><p>定义：若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p></blockquote><h3 id="DFS与BFS"><a href="#DFS与BFS" class="headerlink" title="DFS与BFS"></a>DFS与BFS</h3><table><thead><tr><th align="center"></th><th align="center">数据结构</th><th align="center">空间 （h是树的高度）</th><th align="center">特性</th></tr></thead><tbody><tr><td align="center">DFS</td><td align="center">stack</td><td align="center">$O(h)$</td><td align="center">不具有最短性</td></tr><tr><td align="center">BFS</td><td align="center">queue</td><td align="center">$O(2^h)$</td><td align="center">可以计算最短路径</td></tr></tbody></table><p>时间复杂度$O(n+m)$， $n$表示点数，$m$表示边数。</p><ul><li><p>深度优先遍历</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// st[u] 表示点u已经被遍历过</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>广度优先遍历</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 表示1号点已经被遍历过</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 表示点j已经被遍历过</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="拓朴排序"><a href="#拓朴排序" class="headerlink" title="拓朴排序"></a>拓朴排序</h3><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><h4 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h4><h4 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h4><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h4><h4 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h4><h4 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h4><h3 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h3><h3 id="朱流算法"><a href="#朱流算法" class="headerlink" title="朱流算法"></a>朱流算法</h3><h3 id="Prufer编码"><a href="#Prufer编码" class="headerlink" title="Prufer编码"></a>Prufer编码</h3><h3 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h3><h3 id="爬山法"><a href="#爬山法" class="headerlink" title="爬山法"></a>爬山法</h3><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><h3 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h3><h3 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h3><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><h3 id="扩展欧几里德算法"><a href="#扩展欧几里德算法" class="headerlink" title="扩展欧几里德算法"></a>扩展欧几里德算法</h3><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><h3 id="组合计数"><a href="#组合计数" class="headerlink" title="组合计数"></a>组合计数</h3><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><h3 id="简单博弈论"><a href="#简单博弈论" class="headerlink" title="简单博弈论"></a>简单博弈论</h3><h3 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h3><h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><h3 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h3><h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><h3 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h3><h3 id="Burnside引理和Polya定理"><a href="#Burnside引理和Polya定理" class="headerlink" title="Burnside引理和Polya定理"></a>Burnside引理和Polya定理</h3><h3 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h3><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><h3 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h3><h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><h3 id="计数类DP"><a href="#计数类DP" class="headerlink" title="计数类DP"></a>计数类DP</h3><h3 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h3><h3 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h3><h3 id="树状DP"><a href="#树状DP" class="headerlink" title="树状DP"></a>树状DP</h3><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><h3 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h3><h3 id="四边形不等式优化"><a href="#四边形不等式优化" class="headerlink" title="四边形不等式优化"></a>四边形不等式优化</h3><h3 id="插头DP"><a href="#插头DP" class="headerlink" title="插头DP"></a>插头DP</h3><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h2 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h2><h3 id="二维计算几何基础"><a href="#二维计算几何基础" class="headerlink" title="二维计算几何基础"></a>二维计算几何基础</h3><h3 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h3><h3 id="半平面交"><a href="#半平面交" class="headerlink" title="半平面交"></a>半平面交</h3><h3 id="最小圆覆盖"><a href="#最小圆覆盖" class="headerlink" title="最小圆覆盖"></a>最小圆覆盖</h3><h3 id="三维计算几何基础"><a href="#三维计算几何基础" class="headerlink" title="三维计算几何基础"></a>三维计算几何基础</h3><h3 id="三维凸包"><a href="#三维凸包" class="headerlink" title="三维凸包"></a>三维凸包</h3><h3 id="旋转卡壳"><a href="#旋转卡壳" class="headerlink" title="旋转卡壳"></a>旋转卡壳</h3><h3 id="三角剖分"><a href="#三角剖分" class="headerlink" title="三角剖分"></a>三角剖分</h3><h3 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h3><h3 id="自适应辛普森积分"><a href="#自适应辛普森积分" class="headerlink" title="自适应辛普森积分"></a>自适应辛普森积分</h3><h2 id="常用STL"><a href="#常用STL" class="headerlink" title="常用STL"></a>常用STL</h2><p>所有容器中都有<code>size()和empty()</code>函数时间复杂度为$O(1)$。</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>变长数组，倍增思想。</p><p>系统中为某一程序分配空间时所需时间时间，与空间大小无关，与申请次数有关。vector插入的平均性能可以理解为是$O(1)$。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a中10个元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a中10个元素，都是3</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  清空 <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 随机寻址</span> 支持比较运算，按字典序 <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 迭代器可以看做是指针，用*获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token comment">// 两个元素不要求相同类型</span> 实例化：p<span class="token operator">=</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">}</span>first<span class="token punctuation">,</span> 第一个元素 second<span class="token punctuation">,</span> 第二个元素 支持比较运算，以first为第一关键字，以second为第二关键字（字典序）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回字符串长度 <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">substr</span><span class="token punctuation">(</span>起始下标，<span class="token punctuation">(</span>子串长度<span class="token punctuation">)</span><span class="token punctuation">)</span>  返回子串 <span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回字符串所在字符数组的起始地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>队列</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  向队尾插入一个元素<span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回队头元素<span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回队尾元素<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  弹出队头元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>优先队列，默认是大根堆。</p><p>如果想要小顶堆有两种方式：</p><ul><li>可以存放-x，即在数值前加上负号</li><li><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入一个元素 <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回堆顶元素 <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  弹出堆顶元素 定义成小根堆的方式：priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>栈</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  向栈顶插入一个元素<span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回栈顶元素<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  弹出栈顶元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列，效率较差。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set-map-multiset-multimap"><a href="#set-map-multiset-multimap" class="headerlink" title="set map multiset multimap"></a>set map multiset multimap</h3><p>multiset支持重复元素，set不支持重复元素。</p><p>基于平衡二叉树（红黑树），动态维护有序序列</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">--</span> 返回前驱和后继，时间复杂度 <span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>set<span class="token operator">/</span>multiset  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入一个数  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  查找一个数  <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回某一个数的个数  <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 输入是一个数x，删除所有x   <span class="token function">O</span><span class="token punctuation">(</span>k <span class="token operator">+</span> logn<span class="token punctuation">)</span> <span class="token comment">// k是x的个数</span>    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 输入一个迭代器，删除这个迭代器  <span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">lower_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  返回大于等于x的最小的数的迭代器，不存在返回end迭代器    <span class="token function">upper_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  返回大于x的最小的数的迭代器，不存在返回end迭代器map<span class="token operator">/</span>multimap  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  插入的数是一个pair  <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  输入的参数是pair或者迭代器  <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  注意multimap不支持此操作。 时间复杂度是 <span class="token function">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unordered-set-unordered-map-unordered-multiset-unordered-multimap"><a href="#unordered-set-unordered-map-unordered-multiset-unordered-multimap" class="headerlink" title="unordered_set unordered_map unordered_multiset unordered_multimap"></a>unordered_set unordered_map unordered_multiset unordered_multimap</h3><p>哈希表</p><p>和上面类似，增删改查的时间复杂度是$O(1)$</p><p>不支持 lower_bound()/upper_bound()， 迭代器的++，–</p><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><p>压位</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">bitset<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token comment">// 此处的10000为长度</span>   <span class="token operator">~</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">|</span><span class="token punctuation">,</span> <span class="token operator">^</span>   <span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;&lt;</span>   <span class="token operator">==</span><span class="token punctuation">,</span> <span class="token operator">!=</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  返回有多少个<span class="token number">1</span>   <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  判断是否至少有一个<span class="token number">1</span>   <span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  判断是否全为<span class="token number">0</span>   <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  把所有位置成<span class="token number">1</span>   <span class="token function">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>  将第k位变成v   <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  把所有位变成<span class="token number">0</span>   <span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  等价于<span class="token operator">~</span>   <span class="token function">flip</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> 把第k位取反<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="c-的io"><a href="#c-的io" class="headerlink" title="c++的io"></a>c++的io</h3><h4 id="cin和scanf速度"><a href="#cin和scanf速度" class="headerlink" title="cin和scanf速度"></a>cin和scanf速度</h4><p>cin、cout之所以效率低是因为先把要输出的东西存入缓冲区，再输出，导致效率降低，而<code>std::ios::sync_with_stdio(false);</code>可以来打消iostream的输入输出缓存，可以节省许多时间，使效率与scanf与printf相差无几。这样做了之后要注意不要同时混用cout和printf 之类。</p><p>应注意的是scanf与printf使用的头文件应是stdio.h而不是 iostream。</p><p>在默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。可以通过tie(0)（0表示NULL）来解除cin与cout的绑定，进一步加快执行效率。</p><h4 id="sync-with-stdio"><a href="#sync-with-stdio" class="headerlink" title="sync_with_stdio"></a>sync_with_stdio</h4><p>这个函数是一个“是否兼容stdio”的开关，C++为了兼容C，保证程序在使用了std::printf和std::cout的时候不发生混乱，将输出流绑到了一起。</p><h4 id="tie"><a href="#tie" class="headerlink" title="tie"></a>tie</h4><p>tie是将两个stream绑定的函数，空参数的话返回当前的输出流指针。如<code>std::cin.tie()</code>，默认返回cout，数据类型为std::ostream。</p><h3 id="java的io"><a href="#java的io" class="headerlink" title="java的io"></a>java的io</h3><p> java.util.Scanner类是一个简单的文本扫描类，它可以解析基本数据类型和字符串。它本质上是使用正则表达式去读取不同的数据类型。</p><p>Java.io.BufferedReader类为了能够高效的读取字符序列，从字符输入流和字符缓冲区读取文本。</p><p>Java的标准输入串是System.in。System.in提供的read方法是通过字节来读取数据的，不好处理。</p><p>java.util包中的Scanner读取数据是按空格符（这其中包括空格键，Tab键，Enter键）来分割数据的。只要遇到其中之一，Scanner的方法就会返回下一个输入（当然nextLine()方法的结束符为换行符，它    return 0;<br>}会返回换行符之前的数据）</p><p>BufferReader位于java.io包中，使用BufferReader就相对来说没有那么多方法来让你选择！读取数据比较固定，这样格式也就相对来说比较单一，只要记住就这一个读取数据的方法。<code>BufferedReader br = new BufferedReader (newInputStreamReader(System.in));</code>。这个BufferReader对象通过readLine()；方法来读取数据，readLine()是按Enter回车来读取一行数据的，只要在回车键之前的都会被readLine()方法返回。</p><p>readLine()方法返回的是字符串，因此要使用BufferReader输入一些字符之外的类型的数据，就要相对比较麻烦，需要通过一些XXXX.parseXxx()；来转换相应的数据类型，（例如：int类型的用Integer.parseInt（需要转换的字符串））。虽然麻烦一些，但通过BufferReader读入的效率要比Scanner高一倍，这个差距可想而知，而且读取的数据越多，效果就越明显。需要注意的是使用BufferReader对象的readLine()方法必须处理java.io.IOException异常。</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><ul><li>Scanner提供了一系列nextXxx()方法，当我们确定输入的数据类型时，使用Scanner更加方便。也正是因为这个BufferedReader相对于Scanner来说要快一点，因为Scanner对输入数据进行类解析，而BufferedReader只是简单地读取字符序列</li><li>BufferedReader是支持同步的，而Scanner不支持。如果我们处理多线程程序，BufferedReader应当使用。</li><li>Scanner和BufferedReader都设置了缓冲区，Scanner有很少的缓冲区(1KB字符缓冲)相对于BufferedReader(8KB字节缓冲)，但是这是绰绰有余的。</li><li>Scanner输入的一个问题：在Scanner类中如果我们在任何7个nextXXX()方法之后调用nextLine()方法，这nextLine()方法不能够从控制台读取任何内容，并且，这游标不会进入控制台，它将跳过这一步。nextXXX()方法包括nextInt()，nextFloat()， nextByte()，nextShort()，nextDouble()，nextLong()，next()。在BufferReader类中就没有那种问题。这种问题仅仅出现在Scanner类中，由于nextXXX()方法忽略换行符，但是nextLine()并不忽略它。如果我们在nextXXX()方法和nextLine()方法之间使用超过一个以上的nextLine()方法，这个问题将不会出现了；因为nextLine()把换行符消耗了。</li></ul><h3 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h3><p>通俗地讲就是能保证排序前两个相等的数据其在序列中的先后位置顺序与排序后它们两个先后位置顺序相同。即：如，如果$A_i==A_j$，$A_i$原来在$A_j$位置前，排序后$A_i$仍然是在$A_j$位置前。</p><h3 id="短码"><a href="#短码" class="headerlink" title="短码"></a>短码</h3><p>判断i不等于-1：<code>if (~i)</code></p><p>判断i不能0：<code>if(i)</code></p><h3 id="反推算法复杂度"><a href="#反推算法复杂度" class="headerlink" title="反推算法复杂度"></a>反推算法复杂度</h3><p>一般ACM或者笔试题的时间限制是1秒或2秒。在这种情况下，C++代码中的操作次数控制在$10^710^8$为最佳。</p><p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p><ol><li>$n\leq 30$，指数级别，dfs+剪枝，状态压缩DP</li><li>$n\leq 100 \rightarrow O(n^2)$，floyd,dp,高斯消元</li><li>$n\leq 1000 \rightarrow O(n^2),O(n^2logn)$，dp,二元，朴素版Dijkstra，朴素版Prim，Bellman-Ford</li><li>$n\leq 10000 \rightarrow O(n*\sqrt{n})$，块状链表，分块，莫队</li><li>$n\leq 100000 \rightarrow O(nlogn)$，各种sort,线段树，树状数组，set/map,heap,拓朴排序，dijkstra+heap，prim+heap,spfa,求凸包，求半平面交，二分，CDQ分治，整体二分</li><li>$n\leq 1000000 \rightarrow O(n)$，以及常数较小的$O(nlogn)$算法，单调队列，hash,双指针扫描，并查集，kmp,AC自动机，常数较小的$O(nlogn)$的做法：sort,树状数组，heap,dijkstra,spfa</li><li>$n\leq 10000000 \rightarrow O(n)$，双指针扫描，kmp,AC自动机，线性筛素数</li><li>$n \leq 10^9 \rightarrow O(\sqrt{n})$，判断质数</li><li>$n \leq 10^{18} \rightarrow O(logn)$，最大公约数，快速幂</li><li>$n \leq 10^{1000} \rightarrow O((logn)^2)$，高精度加减乘除</li><li>$n \leq 10^{100000} \rightarrow O(logk * loglogk)$，k表示位数，高精度加减，FFT/NTT</li></ol><h4 id="accumulate函数"><a href="#accumulate函数" class="headerlink" title="accumulate函数"></a>accumulate函数</h4><p>accumulate定义在#include<numeric>中，作用有两个，一个是累加求和，另一个是自定义类型数据的处理。</numeric></p><h5 id="累加求和"><a href="#累加求和" class="headerlink" title="累加求和"></a>累加求和</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>accumulate带有三个形参：头两个形参指定要累加的元素范围，第三个形参则是累加的初值。</p><p>可以实现将<code>vector&lt;string&gt;</code>类型的元素链接起来。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string sum <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数调用的效果是：从空字符串开始，把vec里的每个元素连接成一个字符串。</p><h5 id="自定义数据类型的处理"><a href="#自定义数据类型的处理" class="headerlink" title="自定义数据类型的处理"></a>自定义数据类型的处理</h5><p>对于自定义数据类型，我们就需要自己动手写一个回调函数来实现自定义数据的处理，然后让它作为accumulate()的第四个参数，accumulate()的原型为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">template<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">_InIt</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">_Ty</span><span class="token punctuation">,</span>  <span class="token keyword">class</span> <span class="token class-name">_Fn2</span><span class="token operator">&gt;</span> inline _Ty <span class="token function">_Accumulate</span><span class="token punctuation">(</span><span class="token parameter">_InIt _First<span class="token punctuation">,</span> _InIt _Last<span class="token punctuation">,</span> _Ty _Val<span class="token punctuation">,</span> _Fn2 _Func</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token comment">// return sum of _Val and all in [_First, _Last), using _Func  </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> _First <span class="token operator">!=</span> _Last<span class="token punctuation">;</span> <span class="token operator">++</span>_First<span class="token punctuation">)</span>          _Val <span class="token operator">=</span> <span class="token function">_Func</span><span class="token punctuation">(</span>_Val<span class="token punctuation">,</span> <span class="token operator">*</span>_First<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>_Val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Grade</span>  <span class="token punctuation">{</span>      string name<span class="token punctuation">;</span>      <span class="token keyword">int</span> grade<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      Grade subject<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token punctuation">{</span> <span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token string">"Biology"</span><span class="token punctuation">,</span> <span class="token number">70</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> <span class="token string">"History"</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> subject <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> Grade b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">.</span>grade<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解技巧"><a href="#题解技巧" class="headerlink" title="题解技巧"></a>题解技巧</h3><h4 id="字符读取"><a href="#字符读取" class="headerlink" title="字符读取"></a>字符读取</h4><p>有点时候需要去读表示操作的单字符串，为了避免<code>scanf("%c")</code>中可能读取到换行或者空格，推荐直接<code>scanf("%s")</code>，读取字符串会忽略换行之类的操作。然后获取<code>op[0]</code>获取操作。</p><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><p><code>strcmp(str1,str2)</code>需要引入<string>头文件。其作用是对两个字符串作比较。</string></p><p>返回值：</p><ul><li>str1小于str2，返回负数或者-1</li><li>str1等于str2，返回0</li><li>str1大于str2，返回正数或者1</li></ul><h4 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h4><p>puts函数可以一次输出一个字符串指针对应的元素，并末尾追加换行。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文总结</title>
      <link href="/2020/02/24/yun-ji-suan/lun-wen-zong-jie/"/>
      <url>/2020/02/24/yun-ji-suan/lun-wen-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客作为自身阅读论文的一个备忘。记录自己看过的论文中的所见、所思、所感。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h3><p>解释：QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力，是网络的一种<strong>安全机制</strong>， 是用来解决网络延迟和阻塞等问题的一种技术。QoS的保证对于容量有限的网络来说是十分重要的，特别是对于流多媒体应用，例如VoIP和IPTV等，因为这些应用常常需要固定的传输率，对延时也比较敏感。</p><p>定义：当网络发生拥塞的时候，所有的数据流都有可能被丢弃；为满足用户对不同应用不同服务质量的要求，就需要网络能根据用户的要求分配和调度资源，对不同的数据流提供不同的服务质量：对实时性强且重要的数据报文优先处理；对于实时性不强的普通数据报文，提供较低的处理优先级，网络拥塞时甚至丢弃。QoS应运而生。支持QoS功能的设备，能够提供传输品质服务；针对某种类别的数据流，可以为它赋予某个级别的传输优先级，来标识它的相对重要性，并使用设备所提供的各种优先级转发策略、拥塞避免等机制为这些数据流提供特殊的传输服务。配置了QoS的网络环境，增加了网络性能的可预知性，并能够有效地分配网络带宽，更加合理地利用网络资源。</p><h3 id="Best-Effort-service"><a href="#Best-Effort-service" class="headerlink" title="Best-Effort service"></a>Best-Effort service</h3><p>解释: 标准的因特网服务模式。在网络接口发生拥塞时，不顾及用户或应用，马上丢弃数据包，直到业务量有所减少为止。对Best-Effort服务模型，网络尽最大的可能性来发送报文。但对延时、可靠性等性能不提供任何保证。</p><p>Best-Effort服务模型是网络的缺省服务模型，通过<a href="https://baike.baidu.com/item/FIFO">FIFO</a>（first in first out 先入先出）<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97">队列</a>来实现。它适用于绝大多数网络应用，如FTP、<a href="https://baike.baidu.com/item/E-Mail">E-Mail</a>等。</p><h3 id="Integrated-service"><a href="#Integrated-service" class="headerlink" title="Integrated service"></a>Integrated service</h3><p>综合服务模型，简称Int-Serv</p><p>Int-Serv是一个综合服务模型，它可以满足多种QoS需求。该模型使用资源预留协议（RSVP），RSVP运行在从源端到目的端的每个设备上，可以监视每个流，以防止其消耗资源过多。这种体系能够明确区分并保证每一个业务流的服务质量，为网络提供最细粒度化的服务质量区分。但是，Inter-Serv模型对设备的要求很高，当网络中的数据流数量很大时，设备的存储和处理能力会遇到很大的压力。Inter-Serv模型可扩展性很差，难以在Internet核心网络实施。</p><h3 id="Differentiated-service"><a href="#Differentiated-service" class="headerlink" title="Differentiated service"></a>Differentiated service</h3><p>Diff-Serv服务模型是一个多服务模型，它可以满足不同的QoS需求。与Int-Serv不同，它不需要通知网络为每个业务预留资源。区分服务实现简单，扩展性较好。</p><h3 id="P、NP、NP-hard、NP-complete"><a href="#P、NP、NP-hard、NP-complete" class="headerlink" title="P、NP、NP-hard、NP-complete"></a>P、NP、NP-hard、NP-complete</h3><p>最简单的解释：<br>P：算起来很快的问题<br>NP：算起来不一定快，但对于任何答案我们都可以快速的验证这个答案对不对<br>NP-hard：比所有的NP问题都难的问题<br>NP-complete：满足两点：</p><ol><li>是NP hard的问题</li><li>是NP问题</li></ol><p>P就是能在多项式时间内解决的问题，NP就是能在多项式时间验证答案正确与否的问题。</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>模拟退火是一种通用概率算法，常用来在一定时间内寻找在一个很大搜寻空间中的近似最优解。</p><p>模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。</p><p>模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。</p><p>可以证明，模拟退火算法所得解依概率收敛到全局最优解。</p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>遗传算法（Genetic Algorithm）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。遗传算法是从代表问题可能潜在的解集的一个种群（population）开始的，而一个种群则由经过基因（gene）编码的一定数目的个体(individual)组成。每个个体实际上是染色体(chromosome)带有特征的实体。染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如二进制编码，初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代（generation）演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度（fitness）大小选择（selection）个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉（crossover）和变异（mutation），产生出代表新的解集的种群。这个过程将导致种群像自然进化一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过解码（decoding），可以作为问题近似最优解。</p><p>过程如下：</p><ol><li>初始化：设置进化代数计数器t=0，设置最大进化代数T，随机生成M个个体作为初始群体P(0)。</li><li>个体评价：计算群体P(t)中各个个体的适应度。</li><li>选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。</li><li>交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。</li><li>变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。</li><li>终止条件判断：若t=T,则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93_%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95.jpg"></p><p>基因型(genotype)：性状染色体的内部表现。</p><p>表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现。</p><p>进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。</p><p>适应度(fitness)：度量某个物种对于生存环境的适应程度。</p><p>选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。</p><p>复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。</p><p>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交。</p><p>变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。</p><p>w编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。</p><p>解码(decoding)：基因型到表现型的映射。</p><p>个体（individual）：指染色体带有特征的实体。</p><p>种群（population）：个体的集合，该集合内个体数称为种群的大小。        </p><h2 id="Resource-allocation-algorithms-for-virtualized-service-hosting-platforms"><a href="#Resource-allocation-algorithms-for-virtualized-service-hosting-platforms" class="headerlink" title="Resource allocation algorithms for virtualized service hosting platforms"></a>Resource allocation algorithms for virtualized service hosting platforms</h2><p>author:Mark Stillwell a , David Schanzenbacha , Frédéric Vivienb , Henri Casanova a,∗</p><p>这片论文研究的是在具有多种资源类型的服务器在静态工作量的情况下进行资源分配方案。支持尽力而为和QoS混合场景，通过精确定义的目标函数来提升性能、公平性和集群利用率。</p><h3 id="论文的创新点"><a href="#论文的创新点" class="headerlink" title="论文的创新点"></a>论文的创新点</h3><ol><li>定义资源分配问题为静态服务负载，每个服务完全运行在一台VM实例上。这个定义考虑到了多个资源维度。</li><li>建立了问题的复杂度，并给出混合整数线性函数公式，到达最优的界限。</li><li>提出几种算法解决问题。</li><li>模拟评估算法。</li><li>讨论算法在服务运行在多台服务器上的情况。</li></ol><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>计算机群为同构服务器配有高速网络交换。每个服务包含一个或多个VM实例。每台服务器提供CPU、RAM、I/O、disk。</p><p>在第三章，假定每个服务只运行在一台VM实例上。在第六章讨论多VM的服务。</p><p>每个服务资源需求量固定。资源分为两类：<code>regid</code>(load-independent)和<code>fluid</code>(load-dependent)</p><table><thead><tr><th>rigid</th><th>fluid</th></tr></thead><tbody><tr><td>对资源的需求量提供的不能少，多也无法获益</td><td>对资源的需求量提供的少也能运行，多无法获益</td></tr></tbody></table><p>$yield=\frac{分配的资源量}{所需分配的最大资源量}$取值范围为[0,1]。当有QoS要求时，yield设置一个最低阈值。</p><p>假定所有资源的利用率与fluid需求之间呈现线性相关性。</p><p>一些没有QoS要求且采用的是尽力而为模式的任务，$constrained\quad fluid\quad need=一个服务的fluid\quad need×QoS要求$。</p><p>假定所有rigid资源需求都与fluid资源需求无关且彼此独立。</p><p>资源份额与响应时间或吞吐量之间的模型在[11],[33],[8],[45],[55],[64],[54]中有定义。这些都只能处理有QoS需求的服务。本论文方法可以处理具有QoS需求的服务和不具有QoS的尽力而为服务。</p><p>$scaled\quad yield=\frac{yield-minimum\quad yield}{1-minimum\quad yield}$</p><p>对于尽力而为服务，yield=scaled yield。yield最小为1时，sclaes yield为1。sclaes yield为负数则资源分配失败。</p><p>yield和传统的strtch相比，stretch适用于有时限的任务，而不是连续服务。stretch的定义是作业的流动时间，即作业提交和完成之间的时间，除以该作业在系统中所应达到的流动时间。 最小化最大拉伸被认为是优化平均流动时间的一种方法，同时确保作业不会经历较高的相对流动时间。 因此，这是一种同时优化性能和公平性的方法，而仅使平均拉伸量最小化则容易出现饥饿。</p><p>论文使用的是最大化最小yield。</p><p>虽然定期迁移可以提高最低收益[56]，但是会占用网络资源，具有开销，在本论文不进行考虑。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93_%E7%BA%A6%E6%9D%9F%E5%BD%A2%E5%BC%8F%E5%8C%96.png"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>将服务进行排序。因为在装箱问题中，大多数情况下递增序列效果差于递减序列。所以排序采用递减序列。（S1）随机； （S2）通过递减最大fluid需求进行排序； （S3）通过递减fluid需求的总和； （S4）通过递减最大rigid需求和受约束的fluid需求;（S5）通过递减rigid需求和受约束的fluid需求的总和;（S6）通过递减最大资源需求（无论为fluid还是rigid）;（S7）通过递减rigid and fluid 需求。</p><p>从七个指标考虑服务器的选择。</p><h4 id="遗传算法-1"><a href="#遗传算法-1" class="headerlink" title="遗传算法"></a>遗传算法</h4><p>每个染色体为一个一维数组，索引为服务编号，对应值为服务器编号。</p><h2 id="Energy-aware-service-allocation"><a href="#Energy-aware-service-allocation" class="headerlink" title="Energy-aware service allocation"></a>Energy-aware service allocation</h2><p>author:Damien Borgettoa,∗ , Henri Casanova b , Georges Da Costa a , Jean-Marc Piersona</p><h2 id="CSL‑driven-and-energy‑efficient-resource-scheduling-in-cloud-data-center"><a href="#CSL‑driven-and-energy‑efficient-resource-scheduling-in-cloud-data-center" class="headerlink" title="CSL‑driven and energy‑efficient resource scheduling in cloud data center"></a>CSL‑driven and energy‑efficient resource scheduling in cloud data center</h2><p>DOI: 10.1007/s11227-019-03036-9</p><p>CSL: Customer Satisfaction Level </p><p>MSVR:metric based on SLA violation rate</p><p>MW:metric based on workload</p><p>MRT:metric based on response time</p><p>$CSL\begin{cases}imperceptible-&gt; energy;saving;strategy;达到最小能源消耗\tolerable-&gt;trade-off ;strategy;最大化每单位能源的CSL\unusable-&gt;CSL-driven; strategy;达到最大CSL\end{cases}$</p><h3 id="本文创新点"><a href="#本文创新点" class="headerlink" title="本文创新点"></a>本文创新点</h3><ul><li>设计了CSL-driven 高效调度框架以优化云数据中心的能源效率。同时考虑了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2ray</title>
      <link href="/2020/02/15/jing-yan-zong-jie/v2ray/"/>
      <url>/2020/02/15/jing-yan-zong-jie/v2ray/</url>
      
        <content type="html"><![CDATA[<h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><p>多入口多出口: 一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作。<br>可定制化路由: 入站流量可按配置由不同的出口发出。轻松实现按区域或按域名分流，以达到最优的网络性能。<br>多协议支持: V2Ray 可同时开启多个协议支持，包括 Socks、HTTP、Shadowsocks、VMess 等。每个协议可单独设置传输载体，比如 TCP、mKCP、WebSocket 等。<br>隐蔽性: V2Ray 的节点可以伪装成正常的网站（HTTPS），将其流量与正常的网页流量混淆，以避开第三方干扰。<br>反向代理: 通用的反向代理支持，可实现内网穿透功能。<br>多平台支持: 原生支持所有常见平台，如 Windows、Mac OS、Linux，并已有第三方支持移动平台。</p><h3 id="Linux终端环境"><a href="#Linux终端环境" class="headerlink" title="Linux终端环境"></a>Linux终端环境</h3><ol><li><p>获取安装脚本</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">curl</span> -L-s https://install.direct/go.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>由于该脚本默认执行时，需要访问国外的服务器下载<code>v2ray-linux-64.zip</code>文件，可以提前下载下来，地址<code>https://github.com/v2ray/v2ray-core/releases/download/${NEW_VER}/v2ray-linux-${VDIS}.zip</code>。</p></li><li><p>下载完之后，将<code>go.sh</code>和<code>v2ray-linux-64.zip</code>放在同一个文件夹中。</p></li><li><p>使用命令<code>sudo bash go.sh --local ./v2ray-linux-64.zip</code>安装。</p></li><li><p>配置文件在<code>/etc/v2ray/config.json</code>中。可以先用其他平台生成的<code>config.json</code>文件复制覆盖这个文件。</p></li><li><p>使用命令<code>sudo service v2ray restart</code>，重启服务。</p></li><li><p>使用命令<code>export http_proxy="socks5://127.0.0.1:1088"</code>，将终端中的流量都走代理。</p></li><li><p>使用命令<code>curl www.cip.cc </code>查看当前ip所在位置。</p></li><li><p>可以将以上命令写入<code>.zshrc</code>文件中</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">setproxy</span><span class="token operator">=</span><span class="token string">'export http_proxy="socks5://127.0.0.1:1088"'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ipaddr</span><span class="token operator">=</span><span class="token string">'curl www.cip.cc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="Linux桌面环境"><a href="#Linux桌面环境" class="headerlink" title="Linux桌面环境"></a>Linux桌面环境</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S qv2ray v2ray v2ray-geoip v2ray-domain-list-community<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用qv2ray即可。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>去<code>https://github.com/2dust/v2rayN/releases</code>上下载最新的v2rayN程序。</p><h3 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h3><p>去美区APP Store下载Shadowrocket软件。</p><h3 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h3><p>树莓派3B的架构是armv7，无法正常使用x86架构下打包的appiamge软件。解决方案是使用<br><a href="https://github.com/mzz2017/V2RayA%E3%80%82">https://github.com/mzz2017/V2RayA。</a> 这个项目的GUI是由网页提供的。语言是GO。直接在它的arm二进制包。运行。可以写入<code>/etc/rc.local</code>中作为自启服务。作为网关还行。</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> V2ray </tag>
            
            <tag> IOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerlevel10k设置及客制化</title>
      <link href="/2020/02/15/jing-yan-zong-jie/powerlevel10k-she-zhi-ji-ke-zhi-hua/"/>
      <url>/2020/02/15/jing-yan-zong-jie/powerlevel10k-she-zhi-ji-ke-zhi-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Powerlevel10k"><a href="#Powerlevel10k" class="headerlink" title="Powerlevel10k"></a>Powerlevel10k</h2><p><strong>Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience.</strong></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用操作系统软件管理器安装Zsh。</p><h3 id="安装Oh-My-Zsh主题"><a href="#安装Oh-My-Zsh主题" class="headerlink" title="安装Oh-My-Zsh主题"></a>安装Oh-My-Zsh主题</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wget不能走sock代理，推荐使用curl下载。</p><h3 id="基于Oh-My-Zsh的安装"><a href="#基于Oh-My-Zsh的安装" class="headerlink" title="基于Oh-My-Zsh的安装"></a>基于Oh-My-Zsh的安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone --depth<span class="token operator">=</span><span class="token number">1</span> https://github.com/romkatv/powerlevel10k.git <span class="token variable">$ZSH_CUSTOM</span>/themes/powerlevel10k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>在<code>.zshrc</code>文件中设置主题</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"powerlevel10k/powerlevel10k"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>使用<code>p10k configure</code>配置Powerlevel10k。会自动根据选项生成<code>.p10k.zsh</code>文件。根据喜好设置配置文件。</p><h3 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># The list of segments shown on the left. Fill it with the most important segments.</span> <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span>   <span class="token comment"># =========================[ Line #1 ]=========================</span>   context   os_icon                 <span class="token comment"># os identifier</span>   Greeting   public_ip   disk_usage   <span class="token function">dir</span>                     <span class="token comment"># current directory</span>   vcs                     <span class="token comment"># git status</span>   <span class="token comment"># =========================[ Line #2 ]=========================</span>   newline                 <span class="token comment"># \n</span>   prompt_char             <span class="token comment"># prompt symbol</span> <span class="token punctuation">)</span> <span class="token comment"># The list of segments shown on the right. Fill it with less important segments.</span> <span class="token comment"># Right prompt on the last prompt line (where you are typing your commands) gets</span> <span class="token comment"># automatically hidden when the input line reaches it. Right prompt above the</span> <span class="token comment"># last prompt line gets hidden if it would overlap with left prompt.</span> <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS</span><span class="token operator">=</span><span class="token punctuation">(</span>   <span class="token comment"># =========================[ Line #1 ]=========================</span>   status                  <span class="token comment"># exit code of the last command</span>   command_execution_time  <span class="token comment"># duration of the last command</span>   background_jobs         <span class="token comment"># presence of background jobs</span>   <span class="token comment">#direnv                  # direnv status (https://direnv.net/)</span>   <span class="token comment">#asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)</span>   <span class="token comment">#virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)</span>   <span class="token comment">#anaconda                # conda environment (https://conda.io/)</span>   <span class="token comment">#pyenv                   # python environment (https://github.com/pyenv/pyenv)</span>   <span class="token comment">#goenv                   # go environment (https://github.com/syndbg/goenv)</span>   <span class="token comment">#nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)</span>   nvm                     <span class="token comment"># node.js version from nvm (https://github.com/nvm-sh/nvm)</span>   nodeenv                 <span class="token comment"># node.js environment (https://github.com/ekalinin/nodeenv)</span>   <span class="token comment"># node_version          # node.js version</span>   <span class="token comment"># go_version            # go version (https://golang.org)</span>   <span class="token comment"># rust_version          # rustc version (https://www.rust-lang.org)</span>   <span class="token comment"># dotnet_version        # .NET version (https://dotnet.microsoft.com)</span>   <span class="token comment"># php_version           # php version (https://www.php.net/)</span>   <span class="token comment"># laravel_version       # laravel php framework version (https://laravel.com/)</span>   <span class="token comment">#rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)</span>   <span class="token comment">#rvm                     # ruby version from rvm (https://rvm.io)</span>   <span class="token comment">#fvm                     # flutter version management (https://github.com/leoafarias/fvm)</span>   <span class="token comment">#luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)</span>   <span class="token comment">#jenv                    # java version from jenv (https://github.com/jenv/jenv)</span>   <span class="token comment">#plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)</span>   <span class="token comment">#phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)</span>   kubecontext             <span class="token comment"># current kubernetes context (https://kubernetes.io/)</span>   <span class="token comment">#terraform               # terraform workspace (https://www.terraform.io)</span>   <span class="token comment">#aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.h</span>   <span class="token comment">#aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)</span>  <span class="token comment"># azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)</span>   <span class="token comment">#gcloud                  # google cloud cli account and project (https://cloud.google.com/)</span>   <span class="token comment">#google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/productio</span>   <span class="token comment">#context                 # user@hostname</span>   <span class="token comment">#nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)</span>   ranger                  <span class="token comment"># ranger shell (https://github.com/ranger/ranger)</span>   <span class="token comment">#nnn                     # nnn shell (https://github.com/jarun/nnn)</span>   vim_shell               <span class="token comment"># vim shell indicator (:sh)</span>   <span class="token comment">#midnight_commander      # midnight commander shell (https://midnight-commander.org/)</span>   <span class="token comment">#nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)</span>   vi_mode                 <span class="token comment"># vi mode (you don't need this if you've enabled prompt_char)</span>   <span class="token comment"># vpn_ip                # virtual private network indicator</span>    load                  <span class="token comment"># CPU load</span>    disk_usage            <span class="token comment"># disk usage</span>    <span class="token function">ram</span>                   <span class="token comment"># free RAM</span>    swap                  <span class="token comment"># used swap</span>   <span class="token comment">#todo                    # todo items (https://github.com/todotxt/todo.txt-cli)</span>   timewarrior             <span class="token comment"># timewarrior tracking status (https://timewarrior.net/)</span>   <span class="token function">time</span>                    <span class="token comment"># current time</span>   <span class="token comment">#my_weather</span>   <span class="token comment"># =========================[ Line #2 ]=========================</span>   newline                 <span class="token comment"># \n</span>    <span class="token function">ip</span>                    <span class="token comment"># ip address and bandwidth usage for a specified network interface</span>   <span class="token comment"># public_ip             # public IP address</span>   <span class="token comment"># proxy                 # system-wide http/https/ftp proxy</span>    battery               <span class="token comment"># internal battery</span>   <span class="token comment"># wifi                  # wifi speed</span>   <span class="token comment"># example               # example user-defined segment (see prompt_example function below)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下<code>context</code>组件不显示，需要修改才能显示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">##################################[ context: user@hostname ]##################################</span>  <span class="token comment"># Context color when running with privileges.</span>  <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND</span><span class="token operator">=</span><span class="token number">178</span>  <span class="token comment"># Context color in SSH without privileges.</span>  <span class="token builtin class-name">typeset</span> -g POWERLEVEL9K_CONTEXT_<span class="token punctuation">{</span>REMOTE,REMOTE_SUDO<span class="token punctuation">}</span>_FOREGROUND<span class="token operator">=</span><span class="token number">180</span>  <span class="token comment"># Default context color (no privileges, no SSH).</span>  <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_CONTEXT_FOREGROUND</span><span class="token operator">=</span><span class="token number">180</span>  <span class="token comment"># Context format when running with privileges: bold user@hostname.</span>  <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE</span><span class="token operator">=</span><span class="token string">'%B%n@%m'</span>  <span class="token comment"># Context format when in SSH without privileges: user@hostname.</span>  <span class="token builtin class-name">typeset</span> -g POWERLEVEL9K_CONTEXT_<span class="token punctuation">{</span>REMOTE,REMOTE_SUDO<span class="token punctuation">}</span>_TEMPLATE<span class="token operator">=</span><span class="token string">'%n@%m'</span>  <span class="token comment"># Default context format (no privileges, no SSH): user@hostname.</span>  <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_CONTEXT_TEMPLATE</span><span class="token operator">=</span><span class="token string">'%n@%m'</span>  <span class="token comment"># Don't show context unless running with privileges or in SSH.</span>  <span class="token comment"># Tip: Remove the next line to always show context.</span>  <span class="token comment"># 在这里开启了context一直显示的选项</span>  <span class="token comment">#typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=</span>  <span class="token comment"># Custom icon.</span>  <span class="token comment"># typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'</span>  <span class="token comment"># Custom prefix.</span>  <span class="token comment"># typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%246Fwith '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况的IP组件无法显示，需要配置相应的网卡信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># Show information for the first network interface whose name matches this regular expression.</span> <span class="token comment"># Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.</span> <span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_IP_INTERFACE</span><span class="token operator">=</span><span class="token string">'wlp2s0*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  自己扩展功能的方式就是以shell中函数的方式定义。函数名需要以<code>prompt_my_</code>作为前缀。在前面的设置中直接写之后的函数就行。显示必须依托<code>p10k segment</code>才能显示在主题中。可以使用<code>p10k help segment</code>获取使用方法。</p><p>修改显示的系统图标：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#################################[ os_icon: os identifier ]##################################</span><span class="token comment"># OS identifier color.</span><span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_OS_ICON_FOREGROUND</span><span class="token operator">=</span><span class="token number">255</span><span class="token comment"># Make the icon bold.</span><span class="token comment">#typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT}'</span><span class="token comment"># 修改显示的系统图标为Arch</span><span class="token builtin class-name">typeset</span> -g <span class="token assign-left variable">POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION</span><span class="token operator">=</span>%B<span class="token string">$'<span class="token entity" title="\uF303">\uF303</span> '</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>'\uF303'</code>为Arch图标，<code>'\uF17c'</code>为Linux图标。后面如果显示字符位不足的时候在编码后添加适量空格，<code>%B</code>表示加粗。</p><h3 id="自定义的问候语程序"><a href="#自定义的问候语程序" class="headerlink" title="自定义的问候语程序"></a>自定义的问候语程序</h3><p>实现思路：通过<code>date</code>程序获取当前小时数。通过小时数判断当前是哪一个时间段。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">function</span> <span class="token function-name function">prompt_Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">hour</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%H"</span><span class="token variable">`</span></span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">",king"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$hour</span> -lt <span class="token number">12</span> -a <span class="token variable">$hour</span> -gt <span class="token number">4</span>  <span class="token punctuation">]</span>    <span class="token keyword">then</span>         <span class="token builtin class-name">local</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Morning"</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$hour</span> -eq <span class="token number">12</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Noon"</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$hour</span> -gt <span class="token number">12</span> -a <span class="token variable">$hour</span> -lt <span class="token number">19</span> <span class="token punctuation">]</span>                                                                                <span class="token keyword">then</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Afternoon"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"Evening"</span>    <span class="token keyword">fi</span>    p10k segment -f <span class="token number">208</span> -i <span class="token string">'㋡'</span> -t <span class="token variable">$str</span><span class="token variable">$name</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义的显示当前天气的程序"><a href="#自定义的显示当前天气的程序" class="headerlink" title="自定义的显示当前天气的程序"></a>自定义的显示当前天气的程序</h3><p>实现思路：先查询电脑是否连接网络。若连接，去<code>/tmp</code>路径中查找是否有一年中相同天数相同小时的文件。这个路径下的文件在关机后自动删除，所以在这不考虑重复的可能。每小时去获取一次当前天气。避免频繁获取造成的终端响应缓慢。获取后写入文件中，同一小时内，天气信息从文件中获取。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">function</span> <span class="token function-name function">prompt_my_weather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ping</span> -c1 <span class="token number">114.114</span>.114.114 <span class="token operator">&amp;&gt;</span> /dev/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherDay</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%j"</span><span class="token variable">`</span></span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherHour</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%H"</span><span class="token variable">`</span></span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherPath</span><span class="token operator">=</span><span class="token string">"/tmp/"</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherName</span><span class="token operator">=</span><span class="token string">"my_weather"</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherFileType</span><span class="token operator">=</span><span class="token string">".txt"</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weatherFile</span><span class="token operator">=</span><span class="token variable">$weatherPath</span><span class="token variable">$weatherName</span><span class="token variable">$weatherDay</span><span class="token variable">$weatherHour</span><span class="token variable">$weatherFileType</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token variable">$weatherFile</span> -o <span class="token operator">!</span> -s <span class="token variable">$weatherFile</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>            <span class="token function">touch</span> <span class="token string">"<span class="token variable">$weatherFile</span>"</span>            <span class="token builtin class-name">local</span> <span class="token assign-left variable">weather</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">curl</span> -s <span class="token string">"wttr.in/?format=3 "</span><span class="token variable">`</span></span>            <span class="token builtin class-name">echo</span> <span class="token variable">$weather</span> <span class="token operator">&gt;</span> <span class="token variable">$weatherFile</span>        <span class="token keyword">else</span>            <span class="token builtin class-name">local</span> <span class="token assign-left variable">weather</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $weatherFile<span class="token variable">)</span></span>        <span class="token keyword">fi</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">local</span> <span class="token assign-left variable">weather</span><span class="token operator">=</span><span class="token string">"无网络"</span>    <span class="token keyword">fi</span>    p10k segment -f <span class="token string">'#ffb44b'</span> -t <span class="token variable">$weather</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/01/13/cheng-xu-she-ji/she-ji-mo-shi/"/>
      <url>/2020/01/13/cheng-xu-she-ji/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h2><ul><li><p>Java接口不具有实现代码，继承接口无法达到代码复用。这意味着，无论何时你需要修改某个行为，你必须得往下追踪并在每一个定义此行为的类中修改它，一不小心，可能造成新的错误。</p></li><li><p>良好的OO设计必须具有可复用、可扩充、可维护三个特性。</p></li><li><p>模式被认为是历经验证的OO设计经验。</p></li><li><p>代码应该免于改变但是能够拓展。</p></li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li>静态工厂：采用静态方法定义一个简单工厂。这样不需要使用创建对象的方法来实例化对象。但是不能通过继承来改变创建方法的行为。</li><li>设计模式中，所谓的“实现一个接口”并“不一定”是“写一个类，并利用implemennt关键词来实现某个java接口”。泛指“实现某个超类型（可以是类或接口）的某种方法”。</li></ul><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_6.png" alt="设计模式_6.png"></p><ul><li>简单工厂如上图所示，并不是“工厂模式”。只是一种编程习惯。本质就是将针对实现的代码提取出来，进行封装。这里封装成了工厂而已。</li></ul><h4 id="真正的工厂模式"><a href="#真正的工厂模式" class="headerlink" title="真正的工厂模式"></a>真正的工厂模式</h4><ul><li>所有工厂模式都用来封装对象的创建。</li><li>工厂模式方法通过让子类决定创建的对象是什么，来达到将对象创建的过程封装的目的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_7.png" alt="设计模式_7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_8.png" alt="设计模式_8.png"></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。这里的决定并不是指模式允许子类本身在运行时做决定，而是指在编写创建者类时，不需要知道实际创建的产品是哪一个。选择了使用哪个子类，自然就决定了实际创建的产品是什么。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_9.png" alt="设计模式_9.png"></p><ul><li>即使在只有一个ConcreteCreator的时候，工厂方法模式依然有用。可以有效的帮助将产品的“实现”从“使用”中解耦。如果增加产品或者改变产品的实现，Creator不会受影响。</li><li>工厂方法模式中的ConcreteCreator和Creator的实现类似见到简单工厂但是这里的ConcreteCreator扩展自Creator。每个ConcreteCreator自行负责具体实现方法。简单工厂中，Creator只是ConcreteCreator使用的对象。</li><li>工厂方法和创建者不一定总是抽象的。可以定义一个默认的工厂方法来产生某些具体的产品。这样，即使创建者没有任何子类，依然可以创建产品。</li><li><strong>设计原则六</strong>：(依赖倒置原则)要依赖抽象，不要依赖具体类。</li><li>设计原则六说明了不能让高层组件依赖低层组件，且都应该依赖抽象。所谓高层组件指的是低层组件定义其行为的类。</li></ul><h4 id="指导方针"><a href="#指导方针" class="headerlink" title="指导方针"></a>指导方针</h4><p>以下方法可以避免在OO设计中违反依赖倒置原则：</p><ul><li>变量不可以持有具体类的引用。如果使用new就会持有具体类的引用，使用工厂来避免。</li><li>不要让类派生自具体类。如果派生自具体类，就会依赖具体类。请派生一个接口或抽象类。</li><li>不要覆盖基类中已实现的方法。如果覆盖基类中已实现的方法，那么你的基类就不是一个真正适合被继承的抽象。基类中已实现的方法，应该由所有的子类共享。</li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_10.png" alt="设计模式_10.png"></p><p>抽象工厂的方法经常以工厂方法的方式实现。抽象工厂的任务是定义一个负责创建一组产品的接口。在这个接口内的每个方法都负责创建一个具体产品，同时利用实现抽象工厂的子类来提供这些具体的做法。</p><p>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。</p><p>工厂方法模式与抽象工厂模式的区别：</p><ul><li>抽象工厂使用的是对象之间的组合，对象的创建被实现在工厂接口所暴露出来的方法中。而工厂方法使用的是继承，把对象的创建委托给子类，子类实现工厂方法来创建对象。</li><li>利用工厂方法创建对象，需要扩展一个类，并覆盖它的工厂方法。整个工厂方法模式，只不过就是通过子类来创建对象。</li><li>抽象工厂提供一个用来创建一个产品家族的抽象类型，这个类型的子类定义了产品被产生的方法。要想使用这个工厂，必须先实例化它，然后将它传入一些针对抽象类型所写的代码中。可以把一群相关的产品结合起来。</li></ul><p>所有的工厂都是来封装对象的创建。</p><p>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_11.png" alt="设计模式_11.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_12.png" alt="设计模式_12.png"></p><h3 id="单件模型"><a href="#单件模型" class="headerlink" title="单件模型"></a>单件模型</h3><h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><h3 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern)"></a>策略模式(Strategy Pattern)</h3><ul><li><strong>设计原则一：找出应用中可能需要变化之处，把它们独立出去，不要和那些不需要变化的代码混在一起。</strong></li><li><strong>设计原则二：针对接口编程，而不是针对实现编程。</strong></li><li>需要变化的模块将被放在分开的类中，此类专门提供某行为接口的实现，则相应的类不再需要知道行为的实现细节。</li><li>以前的做法是：行为来自超类的具体实现，或是继承某个接口并由子类自行实现而来。这两种做法都依赖于“实现”。被实现绑得死死的，没办法更改行为（除非写更多代码）。现行做法是特定的具体行为编写在相应的接口的具体实现类中。</li><li>针对接口编程指的是针对超类型(supertype)编程。优势是利用多态进而执行时会根据实际状态执行到真正的行为。更明确的说就是“变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口。如此。只要是具体实现此超类型的类所产生的对象，都可以指定给这个变量。这意味者，声明类时不会理会以后执行时的真正对象类型。”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1.png" alt="设计模式_1.png"></p><ul><li><strong>设计原则三：多用组合，少用继承。</strong></li><li>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以在运行时动态的改变行为，只要组合的行为对象符合正确的接口标准。</li></ul><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的用户。</p><h4 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h4><ol><li>首先在超类中将会变化的方法变成接口类型的变量，而不是具体实现类类型。</li><li>然后在超类的相应行为的方法中调用接口类型的实现方法名。</li><li>子类的构造函数中给接口类型的变量new一个具体实现类的实体，并通过这个实体定义一个方法不实现，只做调用相应实现类的方法。</li><li>生成超类的对接口类型变量成员的setter。从而支持在运行时对变化方法的修改。</li></ol><pre class="line-numbers language-none"><code class="language-none">// 策略接口声明了某个算法各个不同版本间所共有的操作。上下文会使用该接口来// 调用有具体策略定义的算法。interface Strategy is    method execute(a, b)// 具体策略会在遵循策略基础接口的情况下实现算法。该接口实现了它们在上下文// 中的互换性。class ConcreteStrategyAdd implements Strategy is    method execute(a, b) is        return a + bclass ConcreteStrategySubtract implements Strategy is    method execute(a, b) is        return a - bclass ConcreteStrategyMultiply implements Strategy is    method execute(a, b) is        return a * b// 上下文定义了客户端关注的接口。class Context is    // 上下文会维护指向某个策略对象的引用。上下文不知晓策略的具体类。上下    // 文必须通过策略接口来与所有策略进行交互。    private strategy: Strategy    // 上下文通常会通过构造函数来接收策略对象，同时还提供设置器以便在运行    // 时切换策略。    method setStrategy(Strategy strategy) is        this.strategy = strategy    // 上下文会将一些工作委派给策略对象，而不是自行实现不同版本的算法。    method executeStrategy(int a, int b) is        return strategy.execute(a, b)// 客户端代码会选择具体策略并将其传递给上下文。客户端必须知晓策略之间的差// 异，才能做出正确的选择。class ExampleApplication is    method main() is        创建上下文对象。        读取第一个数。        读取最后一个数。        从用户输入中读取期望进行的行为。        if (action == addition) then            context.setStrategy(new ConcreteStrategyAdd())        if (action == subtraction) then            context.setStrategy(new ConcreteStrategySubtract())        if (action == multiplication) then            context.setStrategy(new ConcreteStrategyMultiply())        result = context.executeStrategy(First number, Second number)        打印结果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>你可以在运行时切换对象内的算法</li><li>你可以将算法的实现和使用算法的代码隔离开</li><li>你可以使用组合来代替继承</li><li>开闭原则。你无需对上下文进行修改就能够引入新的策略</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>如果你的算法极少发生变化，那么没有任务理由引入新的类和接口。使用该模式只会让程序过于复杂</li><li>客户端必须知晓策略间的不同——它需要选择合适的策略</li><li>许多现代编程语言支持函数类型功能，允许你在一组匿名函数中实现不同版本的算法。这样，你使用这些函数的方式就和使用策略对象时完全相同，无需借助额外的类和接口来保持代码简洁</li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>针对具体实现编程导致以后对修改时需要大量改动。</li><li>尽量将类似的接口进行封装统一。</li><li>主题是真正拥有数据的人，观察者是主题的依赖者，在数据变化时更新，这样比起让许多对象控制同一份数据来，可以得到更干净的OO设计。</li><li>松耦合：当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。</li><li>观察者模式提供了一种对象设计，让主题和观察者之间松耦合。松耦合设计更有弹性，更能应对变化。</li><li><strong>设计原则四：为交互对象之间的松耦合设计而努力。</strong></li><li>有多个观察者时，不可以依赖特定的通知次序。</li></ul><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_2.png"></p><ul><li>当新类型的观察者出现时，主题的代码不需要修改。假如有新的具体类需要当观察者，我们不需要为了兼容新类型而修改主题的代码，所有要做的就是在新的类里实现此观察者接口，然后注册为新的观察者即可。</li><li>改变主题或观察者其中一方，并不会影响另一方。因为松耦合，只要遵循它们之间的接口，我们就可以自由地改变他们。</li><li><strong>设计原则四：为了交互对象之间的松耦合设计而努力。</strong></li><li>subject在观察者具体类中保留，进行注册和删除。</li><li>JAVA API内置了观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。</li></ul><h4 id="具体实现方法-1"><a href="#具体实现方法-1" class="headerlink" title="具体实现方法"></a>具体实现方法</h4><ol><li>创建一个subject接口，所有内容的提供者都要实现这个接口。该接口中需要定义三个函数：<code>registerObserver(Object o)</code>，<code>removeObserver(Object o)</code>和<code>notifyObservser()</code>。</li><li>具体内容提供者实现subject接口，且设置一个私有ArrayList变量来存放所有的观察者。在构造函数中初始化观察者列表。在相应接口方法的实现中操作观察者列表。</li><li>创建观察者的接口类，声明函数<code>update()</code>。其中变量列表为subject中所有内容。</li><li>创建具体的观察者实现观察者接口。设置一个私有的主题接口类型变量，方便进行注册或退出。自定义相应的update函数。</li></ol><h4 id="使用API的具体实现方法"><a href="#使用API的具体实现方法" class="headerlink" title="使用API的具体实现方法"></a>使用API的具体实现方法</h4><ul><li><strong>把对象变成观察者</strong>：实现观察者接口(java.util.Observer)，然后调用任何Observable对象的addObserver()方法。当不想再当观察者时，调用deleteObserver()方法即可。</li><li><strong>观察者送出通知</strong>：<ol><li>利用扩展java.util.Observable接口产生“可观察者类”。</li><li>调用setChanged()方法，标记状态已经改变的事实。</li><li>调用两种notifyObservers()方法中的一个：notifyObservers()或notifyObservers(Object arg)。</li></ol></li><li><strong>观察者接收通知</strong>：观察者实现update(Observable o,Object arg)方法。主题本身作为第一个变量，好让观察者知道是哪个主题通知它。第二个参数是传入notifyObservers()的数据对象，没有说明则为空。</li></ul><p><em>setChanged()方法用来标记状态已经改变的事实。如果调用notifyObservers()之前没有调用setChanged()，观察者就不会被通知。</em></p><p><em>hasChanged()方法获取changed标志的当前状态。</em></p><h4 id="JAVA-API实现的缺点"><a href="#JAVA-API实现的缺点" class="headerlink" title="JAVA API实现的缺点"></a>JAVA API实现的缺点</h4><p><em>java自带的可观察类是一个类，而不是一个接口，且没有实现一个接口。</em></p><ul><li>java不支持多继承，在继承Observable类的同时，无法继承另一个超类，限制了Observable的复用潜力。</li><li>没有相应的接口，无法创建自己的实现。</li><li>Observable API中的setChanged()方法是protected类型。除非继承自Observable，否则无法创建Observable实例并组合到你自己的对象中去。违反了多用组合，少用继承。</li></ul><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="迭代器模型"><a href="#迭代器模型" class="headerlink" title="迭代器模型"></a>迭代器模型</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><p>迭代器模式把游走的任务放在迭代器上，而不是聚合上。这样简化了聚合的接口和实现，也让责任各得其所。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>当集合背后为复杂的数据结构，且你希望对客户端隐藏其复杂性时（出于使用便利性或安全性的考虑），可以使用迭代器模式。</p><p>迭代器封装了与复杂数据结构进行交互的细节，为客户端提供了多个访问集合元素的简单方法。这种方式不仅对客户端来说方便，而且能避免客户端在直接与集合交互时执行错误或有害的操作，从而起到保护集合的作用。</p><p>使用迭代器模式可以减少程序中重复的遍历代码。</p><p>重要迭代算法的体积非常庞大。当这些代码被放置在程序业务逻辑中时，它就会让原始代码的逻辑不清楚，降低其维护性。</p><p>如果你希望代码能够遍历不同的甚至是无法预知的数据结构，可以使用迭代器模式。</p><p>该模式为集合和迭代器提供了一些通用接口。 如果你在代码中使用了这些接口， 那么将其他实现了这些接口的集合和迭代器传递给它时， 它仍将可以正常运行。</p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><ol><li>声明迭代器接口。 该接口必须提供至少一个方法来获取集合中的下个元素。 但为了使用方便， 你还可以添加一些其他方法， 例如获取前一个元素、 记录当前位置和判断迭代是否已结束。</li><li>声明集合接口并描述一个获取迭代器的方法。 其返回值必须是迭代器接口。 如果你计划拥有多组不同的迭代器， 则可以声明多个类似的方法。</li><li>为希望使用迭代器进行遍历的集合实现具体迭代器类。 迭代器对象必须与单个集合实体链接。 <strong>链接关系通常通过迭代器的构造函数建立</strong>。</li><li><strong>在你的集合类中实现集合接口</strong>。 其主要思想是针对特定集合为客户端代码提供创建迭代器的快捷方式。 <strong>集合对象必须将自身传递给迭代器的构造函数来创建两者之间的链接</strong>。</li><li>检查客户端代码， 使用迭代器替代所有集合遍历代码。 <strong>每当客户端需要遍历集合元素时都会获取一个新的迭代器</strong>。</li></ol><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>单一职责原则。通过将提及庞大的遍历算法代码抽取为独立的类，可对客户端代码和集合进行整理</li><li>开闭原则。可实现新型的集合和迭代器并将其传递给现有代码，无需修改现有代码</li><li>你可以并行遍历统一集合，每个迭代器对象都包含其自身的遍历状态</li><li>相似的，你可以暂停遍历并在需要时继续</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>如果你的程序只与简单的集合进行交互，应用该模式可能矫枉过正</li><li><strong>对于某些特殊集合，使用迭代器可能必直接遍历的效率低</strong></li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><ul><li><strong>设计原则五：类应该对扩展开放，对修改关闭。</strong></li><li>在选择需要被扩展的代码部分时要小心。每个地方都采用开放-关闭原则，是一种浪费，也没必要，还会导致代码变得复杂且难以理解。</li><li>装饰者和被装饰对象有着相同的超类型。</li><li>可以使用一个或者多个装饰者包装一个对象。</li><li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象(被包装的)的场合，可以用装饰过的对象代替它。</li><li><strong>装饰者可以在所委托被装饰者的行为之前与之后，加上自己的行为，甚至将被装饰者的行为整个替换掉，以达到特定的目的。</strong></li><li>对象可以在任何时候被装饰，所以可以在运行时动态的、不限量的用你喜欢的装饰者来装饰对象。</li><li>继承属于拓展形式之一，但不见得是达到弹性设计的最佳方式。</li><li>组合和委托可用于在运动时动态的加上新的行为。</li><li>除了继承，也可以使用像装饰者模式这样的链式扩展行为。</li><li>装饰者模式意味着一群装饰者类，这些类用来包装具体组件。</li><li>装饰者类反映出被装饰的组件类型。事实上，他们具有相同的类型，都经过接口或继承实现。</li><li>理论上，可以用无数个装饰者包装一个组件。</li><li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。</li></ul><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p>装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_3.png"></p><ul><li>继承Component抽象类是为了有正确的类型，因为装饰者必须能取代被装饰者，而不是继承它的行为。在JAVA中可以使用接口，这里使用抽象类是因为装饰者模式通常使用抽象类。如果抽象类运行的好好的，还是别去修改它，</li><li>将代码针对特定种类的具体组件做特殊的行为，会造成一旦用装饰者包装特定种类就会造成类型改变，进而导致程序出现问题。<strong>只有在针对抽象组件类型编程时，才不会因为装饰者而受到影响。</strong></li><li>装饰者该做的事就是增加行为到被包装对象上。当需要窥视装饰者链中每一个装饰者时，这就超出他们的能力了。只能每一次装饰时，将装饰信息传递，最后进行统一解析。</li></ul><h4 id="JAVA类中的一个应用"><a href="#JAVA类中的一个应用" class="headerlink" title="JAVA类中的一个应用"></a>JAVA类中的一个应用</h4><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_5.png"></p><h4 id="具体实现方法-2"><a href="#具体实现方法-2" class="headerlink" title="具体实现方法"></a>具体实现方法</h4><ol><li>创建组件抽象类，设置相应属性。这些属性会继承到之后的所有组件，并设置相应的getter和setter。需要在组件类中具体重写的方法设置为抽象方法。</li><li>创建装饰类的抽象类，将装饰类中需要进行重写的方法设置为抽象方法。</li><li>创建相应的装饰类，继承2中的装饰类的抽象类，设置一个组件抽象类的对象。用以接收装饰链时传入对象，并进行相应抽象方法的重写。</li><li>创建相应的组件类，继承组件抽象类，并重写抽象方法。</li><li>使用时，用组件抽象类类型变量new相应的装饰类或者组件类。一个对象进行装饰时，将哪一个对象依次传入每一个装饰器或组件中。</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>会在设计中加入大量小类，使人不容易理解设计方式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino和树莓派开发</title>
      <link href="/2019/12/27/qian-ru-shi/arduino-he-shu-mei-pai-kai-fa/"/>
      <url>/2019/12/27/qian-ru-shi/arduino-he-shu-mei-pai-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="实验室机器人控制代码"><a href="#实验室机器人控制代码" class="headerlink" title="实验室机器人控制代码"></a>实验室机器人控制代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> serial<span class="token keyword">import</span> timeser<span class="token operator">=</span>serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span><span class="token string">"/dev/ttyACM0"</span><span class="token punctuation">,</span><span class="token number">115200</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    ser<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the number of steering engine:(1:left;2:right)"</span><span class="token punctuation">)</span>    engine<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the channel of steering engine:"</span><span class="token punctuation">)</span>    channel<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the angle of the steering engine:"</span><span class="token punctuation">)</span>    angle<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the second of the steering engine:"</span><span class="token punctuation">)</span>    second<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>engine<span class="token operator">+</span><span class="token string">"#"</span><span class="token operator">+</span>channel<span class="token operator">+</span><span class="token string">"P"</span><span class="token operator">+</span>angle<span class="token operator">+</span><span class="token string">"T"</span><span class="token operator">+</span>second    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send data:"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>    ser<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#time.sleep(1)</span>    response<span class="token operator">=</span>ser<span class="token punctuation">.</span>readall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>        result<span class="token operator">=</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"receiced data:"</span><span class="token operator">+</span>result<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#print(response)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;SoftwareSerial.h&gt;</span></span>SoftwareSerial <span class="token function">serial_1</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SoftwareSerial <span class="token function">serial_2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serial_1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serial_2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    data <span class="token operator">+=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">judge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      command<span class="token operator">=</span>command<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"left:"</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>serial_1<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      command<span class="token operator">=</span>command<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"right:"</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>serial_2<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>SoftwareSerial serial<span class="token punctuation">,</span>String command<span class="token punctuation">)</span><span class="token punctuation">{</span>  serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li><p>封装：元器件在电路板上的实际投影，包括外形、实际尺存和焊点。</p></li><li><p>DIP封装(Double Ln-line Package)：双列直插式封装</p></li><li><p>LQFP封装：薄型QFP(Low-profile Quad Flat Package)指封装本体厚度为1.4mm的QFP</p></li><li><p>不同元器件有不同封装形式，同一种封装形式也可以表示为不同元器件。</p></li><li><p>AD软件一般说<strong>两图两库</strong>：原理图库和PCB库，原理图和PCB图。</p>  <pre class="mermaid">    graph TD  A(建立工程)--&gt;B(建立两库两图)  B --&gt; C(保存整个工程)  F[AD项目建立流程]</pre></li></ul><h2 id="电容选择"><a href="#电容选择" class="headerlink" title="电容选择"></a>电容选择</h2><ul><li><p>1uf=1000nf,1nf=1000pf</p></li><li><p>在电源中要加电容滤波，在每个芯片的电源引脚放置一个0.1uf的电容去耦。</p></li><li><p>电容分两种：极性电容和非极性电容。极性电容</p></li></ul><p>等效电容示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91_0.png" alt="arduino和树莓派开发_0.png"></p><p>ESR是电容的串联等效电阻，ESL是电容的串联等效电感，C是真正理想的电容。ESL和ESR是由电容的制作工艺和材料决定的，没法消除。ESR影响电源的纹波，ESL影响电容的滤波频率特性。</p><p>容抗计算公式：$X_c=\frac{1}{wc}=\frac{1}{2\pi fc}$  (w:角频率，f:频率，我国国家电网对工频是50Hz，C:电容值)</p><p>感抗计算公式：$X_l=wL=2\pi fL$  (L是线圈电感，单位是亨利)</p><p><strong>当频率很低的时候是电容起作用，而频率高到一定的时候电感的作用就不可忽视了，再高的时候电感就起主导作用了。电容就失去滤波的作用了。所以记住，高频的时候电容就不是单纯的电容了。</strong></p><p>实际电容的滤波曲线如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91_1.png" alt="arduino和树莓派开发_1.png"></p><p>参见上图，我们想要的最好的滤波效果是在“谷”底，就是曲线凹进去的尖尖，在这个尖尖的时候，滤波效果做好，当我们的芯片IC内部的逻辑门在10-50Mhz范围内执行的时候，芯片内部产生的干扰也在10-50Mhz,（比如51单片机），仔细看上图的曲线，0.1uF电容 （有两种，一种是插件，一种是贴片）的谷底刚好落在了这个范围内，所以能够滤除这个频段的干扰，但是，看清楚，当频率很高的时候（50-100Mhz），就不是那么回事了，这个时候0.1uF电容个滤波效果就没有0.01uF好了，以此类推，频率再高，选用的滤波电容的量级还要变小。</p><p>参考如下：</p><p>DC-100K 10uF以上的钽电容或铝电解</p><p>100K-10M 100nF(0.1uF)陶瓷电容</p><p>10M-100M 10nF(0.01uF)陶瓷电容</p><p>&gt;100M 1nF(0.001uF)陶瓷电容和PCB的地平面与电源平面的电容</p><h2 id="磁珠"><a href="#磁珠" class="headerlink" title="磁珠"></a>磁珠</h2>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开发记录</title>
      <link href="/2019/12/27/qian-ru-shi/shu-mei-pai-kai-fa-ji-lu/"/>
      <url>/2019/12/27/qian-ru-shi/shu-mei-pai-kai-fa-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="无线计划"><a href="#无线计划" class="headerlink" title="无线计划"></a>无线计划</h2><p>因为最近在寝室远程连接电脑进行开发或者文档的编写，需要多台设备连网。但是由于学校”神奇”的网络状况，每个人只能有一个在线设备，且没有有线宽带。</p><p>与其找一台<code>pc</code>连接<code>wifi</code>再用软件开热点，效果并不好，且稳定性较差。于是想到的解决方案是将树莓派连接wifi,即树莓派的wifi作为wlan口，再将网络数据转发给树莓派的lan口，最后通过路由器做AP将rj45传来的数据做共享wifi。</p><p>步骤：</p><ol><li><p>配置网桥</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install bridge-utils #安装网桥管理工具brctl addbr br-lanbrctl addif br-lan eth0ifconfig br-lan 192.168.3.1 up #192.168.3.1就是树莓派在整个扩展网络中的地址ifconfig eth0 0.0.0.0 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置IP转发</p><p>一般的Linux发行版默认都不会开启ip_forward，因为正常的计算机都是作为终端，没有转发数据报的需求，因此需要手动打开。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim /etc/sysctl.conf+ net.ipv4.ip_forward = 1#或sysctl net.ipv4.ip_forward = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置iptables</p><p>想让内网的所有设备共享一个IP，需要在wlan0网口启用nat。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装DHCP/DNS服务器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt install dnsmasq -yvim /etc/dnsmasq.conf+'dhcp-range=192.168.3.50,192.168.3.150,255.255.255.0,12h' &gt;&gt; /etc/dnsmasq.conf #这里IP的网段跟之前配置的需要一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置开机自启</p><p>新建如下脚本:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!/bin/bashbrctl addbr br-lanbrctl addif br-lan eth0ifconfig br-lan 192.168.3.1 up #这里的地址随便，和Wan侧不在一个网段就行ifconfig eth0 0.0.0.0 upsysctl net.ipv4.ip_forward=1iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>vim /usr/lib/systemd/system/&lt;自定义&gt;.service</code>命令创建执行计划</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Unit]Description=autostart[Service]Type=oneshotExecStart=/home/pi/&lt;上一步骤中脚本的名字&gt;.sh[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>systemctl enable autostart.service</code></p></li></ol><hr><h2 id="顺风耳"><a href="#顺风耳" class="headerlink" title="顺风耳"></a>顺风耳</h2><p>列出所有的录音设备：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">arecord -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出所有的播放设备：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">aplay -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="千里眼"><a href="#千里眼" class="headerlink" title="千里眼"></a>千里眼</h2><p>针对USB的免驱摄像头，推荐拍照使用<code>fswebcam</code>，摄像使用<code>luvcview</code>。</p><hr><h2 id="5寸触摸屏"><a href="#5寸触摸屏" class="headerlink" title="5寸触摸屏"></a>5寸触摸屏</h2><p>硬件连接</p><ol><li>连接GPIO接口<br>Raspberry Pi引出了40个GPIO管脚，而屏幕引出了26个管脚，连接时注意对应屏幕管脚和树莓派管脚。</li><li>连接HDMI接口。把HDMI连接器接入屏幕和主板的HDMI接口。<br>Raspberry Pi Model B与Raspberry Pi Zero需另配HDMI连接线进行连接。</li><li>把LCD背后的Backlight拨到“ON”。</li></ol><p>在<code>config.txt</code>文件中添加</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">max_usb_current=1hdmi_group=2hdmi_mode=87hdmi_cvt 800 480 60 6 0 0 0hdmi_drive=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载驱动程序：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/waveshare/LCD-show.gitcd LCD-show/sudo ./LCD5-show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h2><p>安装Barrier：<code>sudo apt install barrier</code></p><p>自启动：在<code>～/.config/autostart/</code>下新建文件<code>barrier.desktop</code>，添加如下字段：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Desktop Entry]Type=ApplicationName=barrierNoDisplay=falseExec=/usr/bin/barrier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Docker笔记</title>
      <link href="/2019/12/22/yun-ji-suan/shen-ru-qian-chu-docker-bi-ji/"/>
      <url>/2019/12/22/yun-ji-suan/shen-ru-qian-chu-docker-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-容器发展之路"><a href="#第一章-容器发展之路" class="headerlink" title="第一章 容器发展之路"></a>第一章 容器发展之路</h2><p>运营成本:OPEX</p><p>资金性支出:CAPEX</p><p>容器模型与虚拟机的区别：容器的运行不会独占操作系统。运行在相同宿主主机上的容器是共享一个操作系统，节省大量的系统资源，节省在许可证上的花销，以及为OS打补丁等运维成本。启动快，便于迁移。</p><p>$$对容器影响较大的技术\begin{cases} 内核命名空间(Kernel \quad Namespace) \\ 控制组(Control \quad Group) \\ 联合文件系统(Union \quad File \quad System) \\ Docker  \end{cases}$$</p><p>运行中的容器共享主机的内核。</p><p>Kubernetes提供热插拔的容器运行时接口CRI。默认容器为Docker。</p><h2 id="第二章-走进Docker"><a href="#第二章-走进Docker" class="headerlink" title="第二章 走进Docker"></a>第二章 走进Docker</h2><p>Docker是一种运行在Linux和Win上的软件，用于创建、管理和编排容器。</p><p>Docker引擎是用于运行和编排容器的基础设施工具，是运行容器的核心容器运行时。</p><p>Docker版本号遵循<code>YY.MM-xx</code>格式。</p><p>Docker公司的一个核心哲学通常称为”含电池，但可拆卸”(Batteries included but removable)。即许多Docker内置的组件都可以替换为第三方组件。</p><p>OCI(开放容器计划)是CoreOS和Docker共同成立的管理委员会，发布镜像规范和运行时规范。</p><h2 id="第三章-Docker安装"><a href="#第三章-Docker安装" class="headerlink" title="第三章 Docker安装"></a>第三章 Docker安装</h2><h4 id="Win版Docker"><a href="#Win版Docker" class="headerlink" title="Win版Docker"></a>Win版Docker</h4><ul><li>属于社区版，并不适用于生产环境。</li><li>通过启动一个独立的引擎来提供Docker环境。</li><li>某些版本特性可能延迟支持，稳定性第一，新特性其次。</li></ul><h4 id="Mac版Docker"><a href="#Mac版Docker" class="headerlink" title="Mac版Docker"></a>Mac版Docker</h4><ul><li>属于社区版，并不是为了生产环境进行设计的。</li><li>运行在一个轻量级的Linux VM之上。</li></ul><h4 id="Linux版Docker"><a href="#Linux版Docker" class="headerlink" title="Linux版Docker"></a>Linux版Docker</h4><p>$$\begin{cases}\text{社区版(Community Edition)} \ \text{企业版(Enterprise Edition)}\end{cases}$$</p><p>Docker EE包含Docker CE中的全部功能，还包括了商业支持和其他Docker产品的集成。</p><p>使用shell脚本的安装步骤如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -qO- https://get.docker.com/ | sh# 将用户加入Docker Unix组，通过非root用户使用Dockersudo usermod -aG docker your-name# 查看是否添加到docker组成功，执行完毕需要重新登录，组权限才能生效cat /etc/group | grep docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看docker版本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看docker信息：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker system info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置docker开机自启：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl enable dockersudo systemctl is-enabled docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查确保docker的容器和服务都已经重启成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker container lsdocker service ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="升级Docker引擎"><a href="#升级Docker引擎" class="headerlink" title="升级Docker引擎"></a>升级Docker引擎</h4><p>升级关键步骤：</p><ol><li>确保容器配置了正确的重启策略；在Swarm Mode模式下使用服务时，需要正确配置了draining node。</li><li>停止Docker守护程序</li><li>移除旧版本Docker</li><li>安装新版本Docker</li><li>配置新版本的Docker为开机自启动</li><li>确保容器重启成功</li></ol><h4 id="Docker存储驱动的选择"><a href="#Docker存储驱动的选择" class="headerlink" title="Docker存储驱动的选择"></a>Docker存储驱动的选择</h4><p>每个Docker容器都有一个本地存储空间，用于保存层叠的镜像层(Image Layer)以及挂载的容器文件系统。默认情况下，容器的所有读写操作发生在其镜像层上或挂载的文件系统中。</p><p>存储驱动在上层抽象设计中都采用了栈式镜像层存储和写时复制(Copy-on-Write)的设计思想。</p><p>存储驱动对Docker的性能和稳定性至关重要。</p><p>在Linux上，Docker可选择的一些存储驱动包括AUFS(最原始也是最老的)、Overlay2(可能是未来最佳选择)、Device Mapper、Btrfs和ZFS。</p><p>在Win上，Docker只支持Windows Filter一种存储驱动。</p><p>存储驱动的选择是节点级别的。即，每个docker主机只能选择一种存储驱动。不能为每个容器选择不同的存储驱动。在Linux上，修改<code>/etc/docker/deamon.json</code>文件来修改存储引擎配置。<em>修改完之后需要重启Docker才能生效。</em>如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">{"storage-driver":"overlay2"}# 如果配置所在行不是最后一行，则需要在行尾添加逗号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果修改了正在运行的docker主机的存储引擎类型，则现有的镜像和容器在重启之后将不可用，因为每种存储驱动在主机上存储镜像层的位置不一样(通常在/var/lib/<storage-driver>/…目录下)。</storage-driver></p><p>修改了存储驱动的类型，docker就无法找到原有的镜像和容器。切换回原本的存储驱动能继续使用之前的镜像和容器。如果在切换存储引擎之后，还想使用之前的镜像和容器，则需要将镜像保存为Docker格式，上传到某个镜像仓库，修改本地Docker引擎并重启，之后从镜像仓库将镜像拉取到本地，最后重启容器。</p><p>检查Docker当前的存储驱动类型：<code>docker system info</code>。</p><p>版本推荐选择：</p><ul><li>Red Hat Enterprise Linux：4.x版本内核或更高版本+Docker 17.06版本或更高版本，建议使用Overlay2。</li><li>Red Hat Enterprise Linux:低版本内核或低版本的Docker，建议使用Device Mapper。</li><li>Ubuntu Linux:4.x版本内核或更高版本，建议使用Overlay2。</li><li>Ubuntu Linux:更早的版本建议使用AUFS。</li><li>SUSE Linux Enterprise Server:Btrfs。</li></ul><h4 id="Device-Mapper配置"><a href="#Device-Mapper配置" class="headerlink" title="Device Mapper配置"></a>Device Mapper配置</h4><p>大部分Linux存储驱动不需要或需要很少的配置。</p><p>Device Mapper通常需要合理配置之后才能表现出良好的性能。</p><p>默认情况下，Device Mapper采用loopback mounted sparse file作为底层实现来为Docker提供存储支持。开箱即用，并不适用于生产环境，性能很差。</p><p>通过将底层修改为direct-lvm模式，可以获取更好的性能。这种规模下通过使用基于裸块设备(Raw Block Device)的LVM精简池(LVM thin pool)。暂时只能配置一个块设备，并且只有在第一次安装后才能设置生效。但是目前来说有一定的风险。</p><h4 id="Docker自动设置direct-lvm"><a href="#Docker自动设置direct-lvm" class="headerlink" title="Docker自动设置direct-lvm"></a>Docker自动设置direct-lvm</h4><p>如下步骤将Docker配置存储驱动为Device Mapper，并使用direct-lvm模式。</p><ol><li><p>将下面的存储驱动配置添加到<code>/etc/docker/daemon.json</code>当中。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">{"storage-driver":"devicemapper""storage-opts":["dm.directlvm_device=/dev/xdf", # 设置块设备的位置"dm.thinp_percent=95", # 设置镜像和容器允许适应的最大存储空间占比"dm.thinp_metapercent=1",# 设置元数据存储允许使用的存储空间大小"dm.thinp_autoextend_threshold=80",# 设置LVM自动扩展精简池的阈值"dm.thinp_autoextend_percent=20",# 当触发精简池自动扩容机制的时候，扩容大小应当占现有空间的比例"dm.directlvm_device_force=false"# 是否将块设备格式化为新的文件系统]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启Docker。</p></li><li><p>确认Docker已成功运行，并块设备配置被成功加载。</p></li></ol><p>即使Docker在direct-lvm模式下只能设置单一块设备，其性能显著优于loopback模式。</p><h4 id="Docker手动设置direct-lvm"><a href="#Docker手动设置direct-lvm" class="headerlink" title="Docker手动设置direct-lvm"></a>Docker手动设置direct-lvm</h4><p>前置知识：</p><ul><li><p>块设备(Block Device)</p><p>在使用direct-lvm模式的时候，需要有可用的块设备。这些块设备应该位于高性能的存储设备之上，如：SSD或外部LUN存储。</p></li><li><p>LVM配置</p><p>Docker的Docker Mapper存储驱动底层利用LVM(Logical Volume Manager)来实现，需要配置LVM所需的物理设备、卷组、逻辑卷和精简池。应当使用专用的物理卷并将其配置在相同的卷组中。这个卷组不应当被Docker之外的工作负载所使用。此外还需要配置额外两个逻辑卷，分别存储存储数据和源数据信息。另外要创建LVM配置文件、指定LVM自动扩容的触发阈值，以及自动扩容的大小，并且为自动扩容配置相应的监控，保证自动扩容会被触发。</p></li><li><p>Docker配置</p><p>修改Docker配置文件之前要先保存原始文件(etc/docker/daemon.json)，然后进行修改。</p></li></ul><h2 id="第四章-纵观Docker"><a href="#第四章-纵观Docker" class="headerlink" title="第四章 纵观Docker"></a>第四章 纵观Docker</h2><h4 id="运维视角"><a href="#运维视角" class="headerlink" title="运维视角"></a>运维视角</h4><p>Docker安装主要涉及两个组件：Docker客户端、Docker daemon。</p><p>deamon实现了Docker引擎的API。</p><p>Linux默认安装时，客户端和daemon之间的通信是通过本地IPC/UNIX Socket完成的(/var/run/docker.sock)。Windows通过名为npipe:////./pipe/docker_engine的管道完成的。</p><p>Docker镜像可以理解为一个包含了OS文件系统和应用的对象。</p><p>虚拟机模板本质上是处于关机状态的虚拟机。</p><p><code>docker image ls</code>：查看镜像。</p><p>拉取(pulling)：在Docker主机上获取镜像的操作。</p><p>Docker的每个镜像都有自己唯一的ID。用户可以通过引用镜像的ID或名称来使用镜像。如果用户选择使用镜像ID，通常只需要输入ID开头的几个字符即可。</p><p><code>docker container run -it + 镜像名 运行的进程</code>：从镜像中来启动容器。例如：<code>docker container run -it ubuntu:latest /bin/bash</code>或<code>docker container run -it microsoft/powershell:nanoserver pwsh.exe</code>。<code>it</code>参数：开启容器的交互模式并将Shell链接到容器终端。</p><p>按<code>Ctrl-PQ</code>组合键，<strong>可以在退出容器的同时还保持容器运行</strong>。</p><p><code>docker container ls</code>：查看系统内部处于运行状态的容器。-a参数可以列出所有容器，包括处于停止状态的。</p><p><code>docker container stop + 容器对应名称或ID</code>：停止容器运行</p><p><code>docker container rm + 容器对应名称或ID</code>：杀死容器</p><p><code>docker container exec</code>：将shell链接到一个运行中的容器终端。例如：<code>docker container exec -it 容器名称或者id bash</code>。</p><p><code>docker container start &lt;镜像ID&gt;</code>：启动镜像</p><h4 id="开发视角"><a href="#开发视角" class="headerlink" title="开发视角"></a>开发视角</h4><p>每个仓库都包含一个名为Dockerfile文件，这是一个纯文本文件，描述了如何将应用构建到Docker镜像中。 每一行代表一个用于构建镜像的指令。</p><p><code>docker image build -t 镜像名 .</code> ：使用当前目录中的Dockerfile文件和应用代码创建新的镜像。构建时间长短是由构建过程中要拉取的镜像大小和复杂度决定的。</p><h2 id="第五章-Docker引擎"><a href="#第五章-Docker引擎" class="headerlink" title="第五章 Docker引擎"></a>第五章 Docker引擎</h2><p>Docker引擎是用来运行和管理容器的核心软件，通常将其代指为Docker或Docker平台。</p><p>Docker引擎是模块化的。</p><p>$Docker引擎组件\begin{cases}Docker\quad Client\Docker\quad daemon\containerd\runc\end{cases}$</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_Docker%E5%BC%95%E6%93%8E.png" alt="深入浅出Docker笔记_Docker引擎.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_Docker%E5%BC%95%E6%93%8E1.png" alt="深入浅出Docker笔记_Docker引擎1.png"></p><p>runc是OCi容器运行时规范的参考实现。实质上是一个轻量级的、针对Libcontainer进行了包装的命令行交互工具(Libcontainer取代了早起的LXC)。</p><p>runc只有一个功能就是<strong>创建容器</strong>。本质是一个独立的容器运行时工具。</p><p>containerd的主要任务是容器的生命周期管理，也可以进行镜像管理等。containerd组件确保了Docker镜像能够以之后以正确的OCI Bundle的格式传递给runc。</p><p>containerd在linux和windows中以daemon的方式运行。Kubernetes可以通过cri-containerd使用containerd。</p><p>Daemon使用一种CRUD风格的API，通过gRPC与containerd进行通信。</p><p>Daemon的主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络、编排。</p><p>一旦Daemon接收到创建新容器的命令，就会向containerd发出调用。containerd指挥runc去做。containerd将Docker镜像转换成OCI bundle，并让runc基于此创建一个新的容器。runc与操作系统内核接口进行通信，基于所有必要的工具(Namespace、CGroup等)来创建容器。容器进程作为runc的子进程启动。启动完毕后，runc退出。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_Docker%E5%90%AF%E5%8A%A8.png" alt="深入浅出Docker笔记_Docker启动.png"></p><p>将所有的用于启动、管理容器的逻辑和代码从daemon中移除，以为者容器运行时与Docker daemon是解耦的，称之为“无守护进程的容器”。因此，Docker daemon的维护和升级不会影响运行中的容器。</p><p>每次创建容器<code>shim</code>fork一个新的runc实例。一旦容器创建完毕，对应的runc进程退出。</p><p>一旦容器进程的父进程runc进程退出，相关联的containerd-shim进程就会成为容器的父进程。</p><p>shim的部分职责：1.保持所有STDIN和STDout流是开启的，从而当daemon重启时，容器不会因为管道的关闭而终止。2.将容器的退出状态反馈给daemon。</p><h2 id="第六章-Docker镜像"><a href="#第六章-Docker镜像" class="headerlink" title="第六章 Docker镜像"></a>第六章 Docker镜像</h2><p>镜像由多层构成。内部是一个精简的操作系统，包括应用运行所必须的文件和依赖包。</p><p><code>docker container run</code>和<code>docker service create</code>命令从某个镜像启动一个或多个容器。</p><p>一旦容器从镜像启动后，二者之间变成相互依赖关系，并且在镜像上启动的容器全部停止之前，镜像是无法被删除的。</p><p>通常Docker镜像中只有一个精简的shell，甚至没有shell。镜像不包含内核，容器共享所在Docker主机的内核。</p><p>容器只包含必要的操作系统(通常只有操作系统文件和文件系统对象)。</p><p>Hyper-V容器运行在专业用的轻量级VM上，同时利用VM内部的操作系统内核。</p><p>Linux Docker主机本地镜像仓库通常位于<code>/var/lib/docker/\&lt;stroage-drivewr&gt;</code>，Windows Docker主机是<code>C:\ProgramData\docker\windowsfilter</code>。</p><p><code>docker image pull &lt;repository&gt;:&lt;tag&gt;</code>：拉取镜像。如果用户没有指定具体的镜像标签，默认拉取标签为latest的镜像。Docker镜像存储在镜像仓库服务中。客户端中的镜像仓库服务默认是使用Docker Hub。</p><p><strong>标签为latest的镜像并不一定是最新的，但是使用的时候依然要谨慎。</strong></p><p><code>docker image pull &lt;所有者&gt;/&lt;repository&gt;:&lt;tag&gt;</code>：拉取非官方的Docker hub仓库的镜像。</p><p><code>docker pull &lt;第三方镜像仓库服务的DNS名称&gt;/&lt;所有者&gt;/&lt;repository&gt;:&lt;tag&gt;</code>：从第三方仓库拉取镜像</p><p>以上拉取镜像的命令可以加-a参数，下载仓库中的全部镜像。如果镜像仓库中同时包含用于多个平台或者架构的镜像，那么命令可能会失败。</p><p>镜像仓库服务包含多个镜像仓库。一个镜像仓库包含多个镜像。</p><p>标签是存放在镜像元数据中的任意数字或字符串。一个镜像可以根据用户需要设置多个标签。</p><p>悬虚镜像：没有标签的镜像，在列表时显示为&lt;none&gt;:&lt;none&gt;。通常出现这种情况，是因为构建了一个新的镜像，然后为这个镜像打了一个已经存在的标签。Docker创建新的镜像，并赋予这个镜像标签。之前拥有这个标签的镜像会被移除这个标签。</p><p><code>docker image ls --filter dangling=true</code>：显示悬虚镜像。可以使用–format参数通过Go模板。–digest参数在本地查看镜像摘要。</p><p><code>docker image prune</code>：移除全部悬虚镜像。-a参数删除所有没有被任何容器使用的镜像。</p><p>Docker目前支持如下的过滤器：</p><ul><li>dangling：可以指定true或者false，仅返回悬虚镜像(true)，或非悬虚镜像(false)。</li><li>before：需要镜像名称或者ID作为参数，返回在之前被创建的全部镜像。</li><li>since：与before类似，不过返回的是指定镜像之后创建的全部镜像。</li><li>label：根据标注(label)的名称或者值，对镜像进行过滤。</li><li>其他过滤方式可以使用reference。例如：–filter=reference=”*:latest*”。</li></ul><p>使用<code>docker image ls --format "{{.Size}}"</code>或<code>docker image ls --format "{{.Repository}: {{.Tag}: {{.Size}}"</code>这个的format参数是Go模板对输出内容进行格式化。</p><p><code>docker search &lt;特定字符串&gt;</code>：搜索所有”NAME”字段中包含特定字符串的仓库。“NAME”字段是仓库名称，包含了Docker ID，或者非官方仓库的组织名称。–filter “is-official=true”参数使命令只显示官方镜像。–filter “is-automated=true”参数使命令只显示自动创建的仓库。–limit参数设置返回内容行数，默认25行，最多100行。</p><p><code>docker image inspect &lt;镜像名&gt;</code>：查看镜像层数据和元数据。</p><p><code>docker histoy</code>：显示镜像的构建历史记录，但其不是严格意义上的镜像分层。有些Dockerfile中的指令并不会创建新的镜像层。但是会在镜像中添加元数据。</p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像之上，创建新的镜像层。</p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合。</p><p>Docker采用快照机制实现镜像层堆栈，并保证多镜像层对外显示为统一的文件系统。</p><p><strong>多个镜像之间可以共享镜像层。</strong></p><p><strong>每个镜像都有一个基于其内容的密码散列值，也被称为摘要(digest)。</strong></p><p><code>docker image pull &lt;镜像名&gt;@&lt;sha256码&gt;</code>：通过镜像摘要拉取镜像。</p><p>镜像的唯一标识是一个加密ID，即配置对象本身的散列值。每个镜像层也由一个加密ID区分，其值为镜像层本身内容的散列值。也就是内容散列。</p><p><strong>每个镜像层在拉取或推送时，包含一个分发散列值，这是一个压缩版镜像的散列值。该散列值用于校验拉取的镜像是否被篡改过。</strong></p><p>为了实现多架构的方便使用，Docker的镜像仓库服务API支持两种重要的结构：Manifest列表(新)和Manifest。Manifest列表是指某个镜像标签支持的架构列表。其支持的每种架构，都有自己的Manifest定义。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_Manifest%E5%88%97%E8%A1%A8.png" alt="深入浅出Docker笔记_Manifest列表.png"></p><p>Manifest列表是可选的。在没有Manifest列表的情况下，镜像仓库服务会返回普通的Manifest。</p><p><code>docker image rm &lt;镜像名或镜像ID&gt;</code>：删除镜像。</p><p>某个镜像层被多个镜像共享，那只有当全部依赖该镜像层的镜像都被删除，该镜像层才会被删除。</p><p><code>docker image ls -q </code>：返回当前docker主机中所有容器的ID。</p><p><code>docker image rm $ (docker image ls -q) -f</code></p><h2 id="第七章-Docker容器"><a href="#第七章-Docker容器" class="headerlink" title="第七章 Docker容器"></a>第七章 Docker容器</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>镜像是一堆只读层的统一视角。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_image-container.png" alt="深入浅出Docker笔记_image-container.png"></p><p>统一文件系统：将多个只读层重叠在一起，并整合成一个文件系统，对用户隐藏。</p><p>在一个运行的容器内部，相应的文件层是不可见的。</p><p><strong>容器和镜像几乎一样，也是一堆层的统一视角。唯一区别在于容器最上面的一层是可读可写的。即，容器=镜像+可读写层</strong></p><p>运行态容器：可读写的统一文件系统加上隔离的进程空间和包含其中的进程。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_%E8%BF%90%E8%A1%8C%E6%80%81%E5%AE%B9%E5%99%A8.png" alt="深入浅出Docker笔记_运行态容器.png"></p><p>一个文件层包含多信息：1.元数据(metadata)：关于这个层的额外信息，它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息。<strong>只读层和读写层都包含元数据。</strong>2.指向父层的指针。如果没有这个指针，说明它处于最底层。3.id。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0_dockerrun.png" alt="深入浅出Docker笔记_dockerrun.png"></p><p><code>docker ps </code>：；列出所有运行中的容器，隐藏非运行态的容器。-a参数可以列出所有容器。</p><p>Docker主要解决了应用隔离、应用部署、资源限制。</p><p>其中隔离技术只要依靠的是Namespace，资源限制使用的是Cgroup。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro系统配置</title>
      <link href="/2019/12/12/jing-yan-zong-jie/manjaro-an-zhuang-ji-qi-pei-zhi/"/>
      <url>/2019/12/12/jing-yan-zong-jie/manjaro-an-zhuang-ji-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Manjaro安装及其配置"><a href="#Manjaro安装及其配置" class="headerlink" title="Manjaro安装及其配置"></a>Manjaro安装及其配置</h2><h3 id="Win与Manjaro并存"><a href="#Win与Manjaro并存" class="headerlink" title="Win与Manjaro并存"></a>Win与Manjaro并存</h3><p>在安装时，需要注意分配<code>/</code>和<code>/home</code>路径。将挂载点<code>/boot/efi</code>放置在windows启动盘的fat32格式的区分中。</p><p>若是Windows更新或其他原因导致Manjaro引导消失，请执行一下步骤：</p><ol><li>首先关闭Windows快速启动</li><li>用DG打开EFI分区，检查其中的文件是否有相应linux的启动引导，名称应该是<code>grubx64.efi</code>。Windows的引导文件为<code>bootmgfw.efi</code>。</li><li><code>win+x</code>+<code>a</code>进入管理员命令行</li><li>输入<code>bcdedit /set '{bootmgr}' path \EFI\Manjaro\grubx64.efi</code></li></ol><p>Win和Manjaro同时存在时会导致时间不同。原因在于电脑时间有两个:</p><ul><li>硬件时间：保存在主板中，信息少没有时区。</li><li>系统时间：独立于硬件时间，拥有时区、时令等信息。</li></ul><p>系统时间又因为系统不同，管理时间采用两种方法。</p><ul><li>localtime：本地时间，目前只有Windows使用。</li><li>UTC：是一种世界标准时间，Linux和Unix使用。UTC加减时区就是本地时间。</li></ul><p>Windows认为硬件时间就是UTC时间，而Linux会加减时区。使用<code>sudo timedatectl set-local-rtc true</code>即可。</p><hr><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="Pacman安装"><a href="#Pacman安装" class="headerlink" title="Pacman安装"></a>Pacman安装</h4><p>vim：文本软件，配合<a href="https://github.com/chxuan/vimplus">vimplus</a>更佳（若默认编辑器不是vim可以在<code>/etc/profile</code>中添加<code>export EDITOR=/usr/bin/vim</code>）</p><p>yay：优秀的社区包管理工具</p><p>gcc和base-devel可以方便的准备C++环境</p><p>go：go语言包</p><p>nodejs：nodejs</p><p>npm</p><p>nvm</p><p>jq：提供json解析功能</p><p>wireshark：wireshark-qt，分析网络之用</p><p>axel：多线程下载</p><p>wiznote：为知笔记</p><p>bmon：命令行查看网络情况</p><p>net-tools：查看网络，安装后可以使用ifconfig</p><p>wps-office ttf-wps-fonts：WPS</p><p>latte-dock：类MacOS的应用启动器</p><p>unzip：解压工具</p><p>visual-studio-code-bin：vscode</p><p>v2ray qv2ray：v2ray工具链</p><p>baidunetworkdisk-bin：百度网盘</p><p>annie：A fast, simple and clean video downloader written in Go</p><p>arduino：Arduino prototyping platform SDK</p><p>Gimp：Linux中的PS</p><p>cloc：Count lines of code</p><p>cool-retro-term：A good looking terminal emulator which mimics the old cathode display</p><p>evtest：Input device event monitor and query tool</p><p>fzf：Command-line fuzzy finder</p><p>feh：Fast and light imlib2-based image viewer</p><p>telegram-desktop：Official Telegram Desktop client </p><p>highlight：Fast and flexible source code highlighter (CLI version)</p><p>iease-music：Elegant neteaseMusic desktop app, Rock with NeteaseMusic.</p><p>kate： Advanced Text Editor</p><p>ncdu：Disk usage analyzer with an ncurses interface</p><p>neofecth：A CLI system information tool written in BASH that supports displaying images</p><p>netease-cloud-music：网易云</p><p>netease-musicbox：网易云命令行版</p><p>nmap：nmap</p><p>postman：Build, test, and document your APIs faster</p><p>rclone：Sync files to and from Google Drive, S3, Swift, Cloudfiles, Dropbox and Google Cloud Storage</p><p>simplescreenrecorder：优秀的录屏软件</p><p>smplayer：播放器</p><p>teamviewer：远程软件</p><p>tig：Text-mode interface for Git.</p><p>translate-shell：A command-line interface and interactive shell for Google Translate</p><p>typora：Markdown编辑器</p><p>flameshot：截图工具</p><p>zmap：快速的互联网那个扫描仪</p><p>mycli：支持自动补全和语法高亮的Mysql客户端</p><p>kvantum-qt5：主题美化工具</p><p>filezilla：sftp/ftp图形化软件</p><p>motrix：磁力下载器</p><p>zathura：vim风格的pdf阅读器</p><p>inkscape：适量图形编辑器</p><p>fd：搜索软件</p><p>ripgrep-all：搜索软件</p><p>bat：预览文件程序</p><p>unrar：解压软件爱</p><p>atool</p><p>xdman：下载软件</p><p>lolcat：终端文本渐变色</p><p>strace:追踪进程进行时的系统调用和接收的信号</p><p>downgrade：指定软件版本降级</p><h5 id="Goldendict"><a href="#Goldendict" class="headerlink" title="Goldendict"></a>Goldendict</h5><p>Feature-rich dictionary lookup program</p><p>可以添加自己的词库</p><p>设置程序翻译：</p><ol><li><p>sudo pacman -S translate-shell</p></li><li><p>编辑-&gt;词典-&gt;词典来源-&gt;程序-&gt;添加</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">#  Trans-2-Chinesetrans -e google -s auto -t zh-CN -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation-phonetics n -show-prompt-message n -show-languages y -show-original-dictionary n -show-dictionary n -show-alternatives n “%GDWORD%”# Trans-2-Englishtrans -e google -s auto -t en-US -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation-phonetics n -show-prompt-message n -show-languages y -show-original-dictionary n -show-dictionary n -show-alternatives n “%GDWORD%”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="Alacritty"><a href="#Alacritty" class="headerlink" title="Alacritty"></a>Alacritty</h5><p>一款GPU实时渲染的终端</p><p>配置文件在<code>.config/alacritty/alacritty.yml</code>。</p><p>可以使用<code>fc-list</code>查看已安装的字体。</p><p>修改如下字段：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">background_opacity: 0.7# Font configurationfont:  size: 11    #Normal (roman) font face  normal:    # Font family    #      # Default:    #   - (macOS) Menlo    #   - (Linux/BSD) monospace    #   - (Windows) Consolas    family: JetBrainsMono Nerd Font Mono    #family: JetBrains Mono Regular Nerd Font Complete Mono    # The `style` can be specified to pick a specific face.    style: Regular<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h5><p>安装<code>sudo pacman -S tmux</code></p><p>配置基于<a href="https://github.com/gpakosz/.tmux">github</a></p><h5 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h5><p>多台主机之间共享键鼠，使用<code>sudo pacman -S barrier</code>或<code>sudo apt install barrier</code>。</p><p>配置时在服务端的屏幕和联结中创建新的屏幕并设置名称，此名称需要和连接的设备的barrier中的名称一致。</p><h5 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h5><p>推荐使用<code>fcitx5</code>。搜狗输入法每次启动都会花费大量时间。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx5-im<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>~/.pam_environment</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INPUT_METHOD  DEFAULT=fcitx5GTK_IM_MODULE DEFAULT=fcitx5QT_IM_MODULE  DEFAULT=fcitx5XMODIFIERS    DEFAULT=\@im=fcitx5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>/usr/share/applications/fcitx5.desktop</code>复制到<code>~/.config/autostart  </code>，实现开机自启。</p><p>添加对中文支持</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx5-chinese-addons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加输入法模块</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx5-qt fcitx5-gtk <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加词库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装输入法皮肤</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S fcitx5-material-color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    然后修改配置文件 <code>~/.config/fcitx5/conf/classicui.conf</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 垂直候选列表Vertical Candidate List=False# 按屏幕 DPI 使用PerScreenDPI=False# Font (设置成你喜欢的字体)Font="思源黑体 CN Medium 13"# 主题 (自定义)Theme=Material-Color-Pink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题名称：</p><ul><li>Material-Color-Pink</li><li>Material-Color-Blue</li><li>Material-Color-Brown</li><li>Material-Color-DeepPurple</li><li>Material-Color-Indigo</li><li>Material-Color-Red</li><li>Material-Color-Teal(不错)</li></ul><p>​    更新皮肤  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ~/.local/share/fcitx5/themes/Material-Colorgit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    单行模式</p><ul><li>对于 fcitx5 自带的 pinyin，请修改 <code>~/.config/fcitx5/conf/pinyin.conf</code></li><li>对于 fcitx5-rime，请新建/修改 <code>~/.config/fcitx5/conf/rime.conf</code></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 可用时在应用程序中显示预编辑文本PreeditInApplication=True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h5><p>终端显示，能智能的显示一些信息，高定制性。</p><h6 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh-My-Zsh"></a>Oh-My-Zsh</h6><p><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></p><h6 id="相应插件"><a href="#相应插件" class="headerlink" title="相应插件"></a>相应插件</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">plugins=(    git    z    extract    hitokoto    gitignore    cp    git-open    \#safe-paste //这个软件会导致zsh的命令回溯出现问题l   sudo    zsh-syntax-highlighting    zsh-autosuggestions    history    tmuxinator    tmux    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果相关插件提示无法使用，需要去寻找相应github仓库。将所需项目克隆至本地。</p><p>添加fzf设置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export FZF_DEFAULT_COMMAND='fd --hidden --follow -E ".git" -E "node_modules" -E ".idea" . /home'#export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview "[[ $(file --mime {}) =~ binary ]] &amp;&amp; echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2&gt; /dev/null | head -500" --preview-windows=down'#export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border  --preview "[[ $(file --mime {}) =~ binary ]] &amp;&amp; echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2&gt; /dev/null | head -500" --preview-window=down'export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview "echo {} | ~/.config/file_preview.py" --preview-window=down'export FZF_COMPLETION_TRIGGER='\'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>file_preview.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding=utf-8</span><span class="token comment"># 在使用这个插件之前你需要先安装以下程序</span><span class="token comment"># 压缩文件：atool unrar unzip p7zip-full</span><span class="token comment"># 网页文件：w3m</span><span class="token comment"># 种子文件：transmission</span><span class="token comment"># 文本文件：bat</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">path_transfer</span><span class="token punctuation">(</span>path_input<span class="token punctuation">)</span><span class="token punctuation">:</span>    rg_list <span class="token operator">=</span> path_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rg_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        bat_range <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        bat_range <span class="token operator">=</span> rg_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    file_path_list <span class="token operator">=</span> rg_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> filep <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>file_path_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file_path_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        path_space <span class="token operator">=</span> filep<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> path_space <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            file_path_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"'{}'"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filep<span class="token punctuation">)</span>        file_path <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path_list<span class="token punctuation">)</span>    preview_nameandline <span class="token operator">=</span> <span class="token punctuation">[</span>file_path<span class="token punctuation">,</span> bat_range<span class="token punctuation">]</span>    <span class="token keyword">return</span> preview_nameandline<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    path_input <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> path_input <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        path_input <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    preview_nameandline <span class="token operator">=</span> path_transfer<span class="token punctuation">(</span>path_input<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls -la {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.ZIP'</span><span class="token punctuation">,</span> <span class="token string">'.tar'</span><span class="token punctuation">,</span> <span class="token string">'.tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'rar'</span><span class="token punctuation">,</span> <span class="token string">'7z'</span><span class="token punctuation">,</span> <span class="token string">'RAR'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'als {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.torrent'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'transmission-show {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token string">'.htm'</span><span class="token punctuation">,</span> <span class="token string">'.xhtml'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'w3m -dump {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># elif preview_nameandline[0].replace("'", '').endswith(('.png')):</span>        <span class="token comment"># os.system('img2txt {}'.format(preview_nameandline[0]))</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'bat --style=numbers --color=always -r {}: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            preview_nameandline<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'echo {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加执行权限。</p><p>设置power10k:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Generated by Powerlevel10k configuration wizard on 2020-02-16 at 19:30 CST.# Based on romkatv/powerlevel10k/config/p10k-classic.zsh, checksum 02588.# Wizard options: nerdfont-complete + powerline, large icons, classic, dark, time,# angled separators, blurred heads, sharp tails, 2 lines, dotted, right frame, compact,# many icons, concise, instant_prompt=quiet.# Type `p10k configure` to generate another config.## Config for Powerlevel10k with classic powerline prompt style. Type `p10k configure` to generate# your own config based on it.## Tip: Looking for a nice color? Here's a one-liner to print colormap.##   for i in {0..255}; do print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}; done# Temporarily change options.'builtin' 'local' '-a' 'p10k_config_opts'[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'() {  emulate -L zsh  setopt no_unset extended_glob  # Unset all configuration options. This allows you to apply configiguration changes without  # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.  unset -m 'POWERLEVEL9K_*'  autoload -Uz is-at-least &amp;&amp; is-at-least 5.1 || return  zmodload zsh/langinfo  if [[ ${langinfo[CODESET]:-} != (utf|UTF)(-|)8 ]]; then    local LC_ALL=${${(@M)$(locale -a):#*.(utf|UTF)(-|)8}[1]:-en_US.UTF-8}  fi  # The list of segments shown on the left. Fill it with the most important segments.  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    context    os_icon                 # os identifier    Greeting    public_ip    disk_usage    dir                     # current directory    vcs                     # git status    # =========================[ Line #2 ]=========================    newline                 # \n    prompt_char             # prompt symbol  )  # The list of segments shown on the right. Fill it with less important segments.  # Right prompt on the last prompt line (where you are typing your commands) gets  # automatically hidden when the input line reaches it. Right prompt above the  # last prompt line gets hidden if it would overlap with left prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    status                  # exit code of the last command    command_execution_time  # duration of the last command    background_jobs         # presence of background jobs    #direnv                  # direnv status (https://direnv.net/)    #asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)    #virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)    #anaconda                # conda environment (https://conda.io/)    pyenv                   # python environment (https://github.com/pyenv/pyenv)    goenv                   # go environment (https://github.com/syndbg/goenv)    nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)    nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)    nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)    node_version          # node.js version    go_version            # go version (https://golang.org)     rust_version          # rustc version (https://www.rust-lang.org)    # dotnet_version        # .NET version (https://dotnet.microsoft.com)    # php_version           # php version (https://www.php.net/)    # laravel_version       # laravel php framework version (https://laravel.com/)    #rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)    #rvm                     # ruby version from rvm (https://rvm.io)    #fvm                     # flutter version management (https://github.com/leoafarias/fvm)    #luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)    jenv                    # java version from jenv (https://github.com/jenv/jenv)    #plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)    #phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)    kubecontext             # current kubernetes context (https://kubernetes.io/)    #terraform               # terraform workspace (https://www.terraform.io)    #aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)    #aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)   # azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)    #gcloud                  # google cloud cli account and project (https://cloud.google.com/)    #google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)    #context                 # user@hostname    #nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)    ranger                  # ranger shell (https://github.com/ranger/ranger)    #nnn                     # nnn shell (https://github.com/jarun/nnn)    vim_shell               # vim shell indicator (:sh)    #midnight_commander      # midnight commander shell (https://midnight-commander.org/)    #nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)    vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)    # vpn_ip                # virtual private network indicator     load                  # CPU load     disk_usage            # disk usage     ram                   # free RAM     swap                  # used swap    #todo                    # todo items (https://github.com/todotxt/todo.txt-cli)    timewarrior             # timewarrior tracking status (https://timewarrior.net/)    time                    # current time    #my_weather    # =========================[ Line #2 ]=========================    newline                 # \n     ip                    # ip address and bandwidth usage for a specified network interface    # public_ip             # public IP address    # proxy                 # system-wide http/https/ftp proxy     battery               # internal battery    # wifi                  # wifi speed    # example               # example user-defined segment (see prompt_example function below)  )  # To enable default icons for all segments, don't define POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION  # or set it to '${P9K_VISUAL_IDENTIFIER}'.  #  # To remove trailing space from all default icons, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION  # to '${P9K_VISUAL_IDENTIFIER% }'.  #  # To enable default icons for one segment (e.g., dir), set  # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'.  #  # To assign a specific icon to one segment (e.g., dir), set  # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='⭐'.  #  # To assign a specific icon to a segment in a given state (e.g., dir in state NOT_WRITABLE),  # set POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'.  #  # Note: You can use $'\u2B50' instead of '⭐'. It's especially convenient when specifying  # icons that your text editor cannot render. Don't forget to put $ and use single quotes when  # defining icons via Unicode codepoints.  #  # Note: Many default icons cannot be displayed with system fonts. You'll need to install a  # capable font to use them. See POWERLEVEL9K_MODE below.  typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'  # This option makes a difference only when default icons are enabled for all or some prompt  # segments (see POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION above). LOCK_ICON can be printed as  # $'\uE0A2', $'\uE138' or $'\uF023' depending on POWERLEVEL9K_MODE. The correct value of this  # parameter depends on the provider of the font your terminal is using.  #  #   Font Provider                    | POWERLEVEL9K_MODE  #   ---------------------------------+-------------------  #   Powerline                        | powerline  #   Font Awesome                     | awesome-fontconfig  #   Adobe Source Code Pro            | awesome-fontconfig  #   Source Code Pro                  | awesome-fontconfig  #   Awesome-Terminal Fonts (regular) | awesome-fontconfig  #   Awesome-Terminal Fonts (patched) | awesome-patched  #   Nerd Fonts                       | nerdfont-complete  #   Other                            | compatible  #  # If this looks overwhelming, either stick with a preinstalled system font and set  # POWERLEVEL9K_MODE=compatible, or install the recommended Powerlevel10k font from  # https://github.com/romkatv/powerlevel10k/#recommended-meslo-nerd-font-patched-for-powerlevel10k  # and set POWERLEVEL9K_MODE=nerdfont-complete.  typeset -g POWERLEVEL9K_MODE=nerdfont-complete  # When set to true, icons appear before content on both sides of the prompt. When set  # to false, icons go after content. If empty or not set, icons go before content in the left  # prompt and after content in the right prompt.  #  # You can also override it for a specific segment:  #  #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false  #  # Or for a specific segment in specific state:  #  #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false  typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=  # Add an empty line before each prompt.  typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=false  # Connect left prompt lines with these symbols. You'll probably want to use the same color  # as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=  # Connect right prompt lines with these symbols.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX='%240F─╮'  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX='%240F─┤'  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX='%240F─╯'  # Filler between left and right prompt on the first prompt line. You can set it to ' ', '·' or  # '─'. The last two make it easier to see the alignment between left and right prompt and to  # separate prompt from command output. You might want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false  # for more compact prompt if using using this option.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR='·'  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=  if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then    # The color of the filler. You'll probably want to match the color of POWERLEVEL9K_MULTILINE    # ornaments defined above.    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=240    # Start filler from the edge of the screen if there are no left segments on the first line.    typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'    # End filler on the edge of the screen if there are no right segments on the first line.    typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'  fi  # Default background color.  typeset -g POWERLEVEL9K_BACKGROUND=236  # Separator between same-color segments on the left.  typeset -g POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR='%244F\uE0B1'  # Separator between same-color segments on the right.  typeset -g POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR='%244F\uE0B3'  # Separator between different-color segments on the left.  typeset -g POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR='\uE0B0'  # Separator between different-color segments on the right.  typeset -g POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR='\uE0B2'  # The right end of left prompt.  typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='▓▒░'  # The left end of right prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='░▒▓'  # The left end of left prompt.  typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL='\uE0B2'  # The right end of right prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL='\uE0B0'  # Left prompt terminator for lines without any segments.  typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=  #################################[ os_icon: os identifier ]##################################  # OS identifier color.  typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255  # Make the icon bold.  #typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT}'  # 修改显示的系统图标为Arch  typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION=%B$'\uF303 '    ################################[ prompt_char: prompt symbol ]################################  # Transparent background.  typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=  # Green prompt symbol if the last command succeeded.  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=76  # Red prompt symbol if the last command failed.  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=196  # Default prompt symbol.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'  # Prompt symbol in command vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'  # Prompt symbol in visual vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='Ⅴ'  # Prompt symbol in overwrite vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'  typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true  # No line terminator if prompt_char is the last segment.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=  # No line introducer if prompt_char is the first segment.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=  # No surrounding whitespace.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_{LEFT,RIGHT}_WHITESPACE=  ##################################[ dir: current directory ]##################################  # Default current directory color.  typeset -g POWERLEVEL9K_DIR_FOREGROUND=31  # If directory is too long, shorten some of its segments to the shortest possible unique  # prefix. The shortened directory can be tab-completed to the original.  typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique  # Replace removed segment suffixes with this symbol.  typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=  # Color of the shortened directory segments.  typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103  # Color of the anchor directory segments. Anchor segments are never shortened. The first  # segment is always an anchor.  typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=39  # Display anchor directory segments in bold.  typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true  # Don't shorten directories that contain any of these files. They are anchors.  local anchor_files=(    .bzr    .citc    .git    .hg    .node-version    .python-version    .go-version    .ruby-version    .lua-version    .java-version    .perl-version    .php-version    .tool-version    .shorten_folder_marker    .svn    .terraform    CVS    Cargo.toml    composer.json    go.mod    package.json  )  typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"  # If set to true, remove everything before the last (deepest) subdirectory that contains files  # matching $POWERLEVEL9K_SHORTEN_FOLDER_MARKER. For example, when the current directory is  # /foo/bar/git_repo/baz, prompt will display git_repo/baz. This assumes that /foo/bar/git_repo  # contains a marker (.git) and other directories don't.  typeset -g POWERLEVEL9K_DIR_TRUNCATE_BEFORE_MARKER=false  # Don't shorten this many last directory segments. They are anchors.  typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1  # Shorten directory if it's longer than this even if there is space for it. The value can  # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,  # directory will be shortened only when prompt doesn't fit or when other parameters demand it  # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).  # If set to `0`, directory will always be shortened to its minimum length.  typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80  # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this  # many columns for typing commands.  typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40  # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least  # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.  typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50  # If set to true, embed a hyperlink into the directory. Useful for quickly  # opening a directory in the file manager simply by clicking the link.  # Can also be handy when the directory is shortened, as it allows you to see  # the full directory that was used in previous commands.  typeset -g POWERLEVEL9K_DIR_HYPERLINK=false  # Enable special styling for non-writable directories.  typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true  # Show this icon when the current directory is not writable. POWERLEVEL9K_DIR_SHOW_WRITABLE  # above must be set to true for this parameter to have effect.  # typeset -g POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_DIR_PREFIX='%246Fin '  # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons for different directories.  # It must be an array with 3 * N elements. Each triplet consists of:  #  #   1. A pattern against which the current directory is matched. Matching is done with  #      extended_glob option enabled.  #   2. Directory class for the purpose of styling.  #   3. Icon.  #  # Triplets are tried in order. The first triplet whose pattern matches $PWD wins. If there  # are no matches, the directory will have no icon.  #  # Example:  #  #   typeset -g POWERLEVEL9K_DIR_CLASSES=(  #       '~/work(|/*)'  WORK     '(╯°□°）╯︵ ┻━┻'  #       '~(|/*)'       HOME     '⌂'  #       '*'            DEFAULT  '')  #  # With these settings, the current directory in the prompt may look like this:  #  #   (╯°□°）╯︵ ┻━┻ ~/work/projects/important/urgent  #  # Or like this:  #  #   ⌂ ~/best/powerlevel10k  #  # You can also set different colors for directories of different classes. Remember to override  # FOREGROUND, SHORTENED_FOREGROUND and ANCHOR_FOREGROUND for every directory class that you wish  # to have its own color.  #  #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=31  #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=103  #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=39  #  # typeset -g POWERLEVEL9K_DIR_CLASSES=()  #####################################[ vcs: git status ]######################################  # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.  typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126 '  POWERLEVEL9K_VCS_BRANCH_ICON=${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}  # Untracked files icon. It's really a question mark, your font isn't broken.  # Change the value of this parameter to show a different icon.  typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'  POWERLEVEL9K_VCS_UNTRACKED_ICON=${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}  # Formatter for Git status.  #  # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.  #  # You can edit the function to customize how Git status looks.  #  # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:  # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.  function my_git_formatter() {    emulate -L zsh    if [[ -n $P9K_CONTENT ]]; then      # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from      # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.      typeset -g my_git_format=$P9K_CONTENT      return    fi    if (( $1 )); then      # Styling for up-to-date Git status.      local       meta='%246F'  # grey foreground      local      clean='%76F'   # green foreground      local   modified='%178F'  # yellow foreground      local  untracked='%39F'   # blue foreground      local conflicted='%196F'  # red foreground    else      # Styling for incomplete and stale Git status.      local       meta='%244F'  # grey foreground      local      clean='%244F'  # grey foreground      local   modified='%244F'  # grey foreground      local  untracked='%244F'  # grey foreground      local conflicted='%244F'  # grey foreground    fi    local res    local where  # branch or tag    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then      res+="${clean}${POWERLEVEL9K_VCS_BRANCH_ICON}"      where=${(V)VCS_STATUS_LOCAL_BRANCH}    elif [[ -n $VCS_STATUS_TAG ]]; then      res+="${meta}#"      where=${(V)VCS_STATUS_TAG}    fi    # If local branch name or tag is at most 32 characters long, show it in full.    # Otherwise show the first 12 … the last 12.    (( $#where &gt; 32 )) &amp;&amp; where[13,-13]="…"    res+="${clean}${where//\%/%%}"  # escape %    # Display the current Git commit if there is no branch or tag.    # Tip: To always display the current Git commit, remove `[[ -z $where ]] &amp;&amp;` from the next line.    [[ -z $where ]] &amp;&amp; res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"    # Show tracking branch name if it differs from local branch.    if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then      res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %    fi    # ⇣42 if behind the remote.    (( VCS_STATUS_COMMITS_BEHIND )) &amp;&amp; res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"    # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.    (( VCS_STATUS_COMMITS_AHEAD &amp;&amp; !VCS_STATUS_COMMITS_BEHIND )) &amp;&amp; res+=" "    (( VCS_STATUS_COMMITS_AHEAD  )) &amp;&amp; res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"    # ⇠42 if behind the push remote.    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) &amp;&amp; res+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"    (( VCS_STATUS_PUSH_COMMITS_AHEAD &amp;&amp; !VCS_STATUS_PUSH_COMMITS_BEHIND )) &amp;&amp; res+=" "    # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.    (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) &amp;&amp; res+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"    # *42 if have stashes.    (( VCS_STATUS_STASHES        )) &amp;&amp; res+=" ${clean}*${VCS_STATUS_STASHES}"    # 'merge' if the repo is in an unusual state.    [[ -n $VCS_STATUS_ACTION     ]] &amp;&amp; res+=" ${conflicted}${VCS_STATUS_ACTION}"    # ~42 if have merge conflicts.    (( VCS_STATUS_NUM_CONFLICTED )) &amp;&amp; res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"    # +42 if have staged changes.    (( VCS_STATUS_NUM_STAGED     )) &amp;&amp; res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"    # !42 if have unstaged changes.    (( VCS_STATUS_NUM_UNSTAGED   )) &amp;&amp; res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"    # ?42 if have untracked files. It's really a question mark, your font isn't broken.    # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.    # Remove the next line if you don't want to see untracked files at all.    (( VCS_STATUS_NUM_UNTRACKED  )) &amp;&amp; res+=" ${untracked}${POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"    # "─" if the number of unstaged files is unknown. This can happen due to    # POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY (see below) being set to a non-negative number lower    # than the number of files in the Git index, or due to bash.showDirtyState being set to false    # in the repository config. The number of staged and untracked files may also be unknown    # in this case.    (( VCS_STATUS_HAS_UNSTAGED == -1 )) &amp;&amp; res+=" ${modified}─"    typeset -g my_git_format=$res  }  functions -M my_git_formatter 2&gt;/dev/null  # Don't count the number of unstaged, untracked and conflicted files in Git repositories with  # more than this many files in the index. Negative value means infinity.  #  # If you are working in Git repositories with tens of millions of files and seeing performance  # sagging, try setting POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY to a number lower than the output  # of `git ls-files | wc -l`. Alternatively, add `bash.showDirtyState = false` to the repository's  # config: `git config bash.showDirtyState false`.  typeset -g POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY=-1  # Don't show Git status in prompt for repositories whose workdir matches this pattern.  # For example, if set to '~', the Git repository at $HOME/.git will be ignored.  # Multiple patterns can be combined with '|': '~|~/some/dir'.  typeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'  # Disable the default Git status formatting.  typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true  # Install our own Git status formatter.  typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'  typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'  # Enable counters for staged, unstaged, etc.  typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1  # Icon color.  typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=76  typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244  # Custom icon.  # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_VCS_PREFIX='%246Fon '  # Show status of repositories of these types. You can add svn and/or hg if you are  # using them. If you do, your prompt may become slow even when your current directory  # isn't in an svn or hg reposotiry.  typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)  # These settings are used for respositories other than Git or when gitstatusd fails and  # Powerlevel10k has to fall back to using vcs_info.  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=76  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178  ##########################[ status: exit code of the last command ]###########################  # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and  # style them independently from the regular OK and ERROR state.  typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true  # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as  # it will signify success by turning green.  typeset -g POWERLEVEL9K_STATUS_OK=false  typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70  typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'  # Status when some part of a pipe command fails but the overall exit status is zero. It may look  # like this: 1|0.  typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'  # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as  # it will signify error by turning red.  typeset -g POWERLEVEL9K_STATUS_ERROR=false  typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160  typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='✘'  # Status when the last command was terminated by a signal.  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160  # Use terse signal names: "INT" instead of "SIGINT(2)".  typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='✘'  # Status when some part of a pipe command fails and the overall exit status is also non-zero.  # It may look like this: 1|0.  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='✘'  ###################[ command_execution_time: duration of the last command ]###################  # Show duration of the last command if takes longer than this many seconds.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3  # Show this many fractional digits. Zero means round to seconds.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0  # Execution time color.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=248  # Duration format: 1d 2h 3m 4s.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'  # Custom icon.  # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='%246Ftook '  #######################[ background_jobs: presence of background jobs ]#######################  # Don't show the number of background jobs.  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false  # Background jobs color.  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=37  # Custom icon.  # typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ direnv: direnv status (https://direnv.net/) ]########################  # Direnv color.  typeset -g POWERLEVEL9K_DIRENV_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_DIRENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ asdf: asdf version manager (https://github.com/asdf-vm/asdf) ]###############  # Default asdf color. Only used to display tools for which there is no color override (see below).  typeset -g POWERLEVEL9K_ASDF_FOREGROUND=66  # There are four parameters that can be used to hide asdf tools. Each parameter describes  # conditions under which a tool gets hidden. Parameters can hide tools but not unhide them. If at  # least one parameter decides to hide a tool, that tool gets hidden. If no parameter decides to  # hide a tool, it gets shown.  #  # Special note on the difference between POWERLEVEL9K_ASDF_SOURCES and  # POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW. Consider the effect of the following commands:  #  #   asdf local  python 3.8.1  #   asdf global python 3.8.1  #  # After running both commands the current python version is 3.8.1 and its source is "local" as  # it takes precedence over "global". If POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW is set to false,  # it'll hide python version in this case because 3.8.1 is the same as the global version.  # POWERLEVEL9K_ASDF_SOURCES will hide python version only if the value of this parameter doesn't  # contain "local".  # Hide tool versions that don't come from one of these sources.  #  # Available sources:  #  # - shell   `asdf current` says "set by ASDF_${TOOL}_VERSION environment variable"  # - local   `asdf current` says "set by /some/not/home/directory/file"  # - global  `asdf current` says "set by /home/username/file"  #  # Note: If this parameter is set to (shell local global), it won't hide tools.  # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SOURCES.  typeset -g POWERLEVEL9K_ASDF_SOURCES=(shell local global)  # If set to false, hide tool versions that are the same as global.  #  # Note: The name of this parameter doesn't reflect its meaning at all.  # Note: If this parameter is set to true, it won't hide tools.  # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_PROMPT_ALWAYS_SHOW.  typeset -g POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW=false  # If set to false, hide tool versions that are equal to "system".  #  # Note: If this parameter is set to true, it won't hide tools.  # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_SYSTEM.  typeset -g POWERLEVEL9K_ASDF_SHOW_SYSTEM=true  # If set to non-empty value, hide tools unless there is a file matching the specified file pattern  # in the current directory, or its parent diretory, or its grandparent directory, and so on.  #  # Note: If this parameter is set to empty value, it won't hide tools.  # Note: SHOW_ON_UPGLOB isn't specific to asdf. It works with all prompt segments.  # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_ON_UPGLOB.  #  # Example: Hide nodejs version when there is no package.json and no *.js files in the current  # directory, in `..`, in `../..` and so on.  #  #   typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.js|package.json'  typeset -g POWERLEVEL9K_ASDF_SHOW_ON_UPGLOB=  # Ruby version from asdf.  typeset -g POWERLEVEL9K_ASDF_RUBY_FOREGROUND=168  # typeset -g POWERLEVEL9K_ASDF_RUBY_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_RUBY_SHOW_ON_UPGLOB='*.foo|*.bar'  # Python version from asdf.  typeset -g POWERLEVEL9K_ASDF_PYTHON_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_PYTHON_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PYTHON_SHOW_ON_UPGLOB='*.foo|*.bar'  # Go version from asdf.  typeset -g POWERLEVEL9K_ASDF_GO_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_GO_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_GO_SHOW_ON_UPGLOB='*.foo|*.bar'  # Node.js version from asdf.  typeset -g POWERLEVEL9K_ASDF_NODEJS_FOREGROUND=70  # typeset -g POWERLEVEL9K_ASDF_NODEJS_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.foo|*.bar'  # Rust version from asdf.  typeset -g POWERLEVEL9K_ASDF_RUST_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_RUST_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_RUST_SHOW_ON_UPGLOB='*.foo|*.bar'  # .NET Core version from asdf.  typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_FOREGROUND=134  # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_SHOW_ON_UPGLOB='*.foo|*.bar'  # Flutter version from asdf.  typeset -g POWERLEVEL9K_ASDF_FLUTTER_FOREGROUND=38  # typeset -g POWERLEVEL9K_ASDF_FLUTTER_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_FLUTTER_SHOW_ON_UPGLOB='*.foo|*.bar'  # Lua version from asdf.  typeset -g POWERLEVEL9K_ASDF_LUA_FOREGROUND=32  # typeset -g POWERLEVEL9K_ASDF_LUA_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_LUA_SHOW_ON_UPGLOB='*.foo|*.bar'  # Java version from asdf.  typeset -g POWERLEVEL9K_ASDF_JAVA_FOREGROUND=32  # typeset -g POWERLEVEL9K_ASDF_JAVA_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_JAVA_SHOW_ON_UPGLOB='*.foo|*.bar'  # Perl version from asdf.  typeset -g POWERLEVEL9K_ASDF_PERL_FOREGROUND=67  # typeset -g POWERLEVEL9K_ASDF_PERL_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PERL_SHOW_ON_UPGLOB='*.foo|*.bar'  # Erlang version from asdf.  typeset -g POWERLEVEL9K_ASDF_ERLANG_FOREGROUND=125  # typeset -g POWERLEVEL9K_ASDF_ERLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_ERLANG_SHOW_ON_UPGLOB='*.foo|*.bar'  # Elixir version from asdf.  typeset -g POWERLEVEL9K_ASDF_ELIXIR_FOREGROUND=129  # typeset -g POWERLEVEL9K_ASDF_ELIXIR_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_ELIXIR_SHOW_ON_UPGLOB='*.foo|*.bar'  # Postgres version from asdf.  typeset -g POWERLEVEL9K_ASDF_POSTGRES_FOREGROUND=31  # typeset -g POWERLEVEL9K_ASDF_POSTGRES_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_POSTGRES_SHOW_ON_UPGLOB='*.foo|*.bar'  # PHP version from asdf.  typeset -g POWERLEVEL9K_ASDF_PHP_FOREGROUND=99  # typeset -g POWERLEVEL9K_ASDF_PHP_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PHP_SHOW_ON_UPGLOB='*.foo|*.bar'  ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########  # NordVPN connection indicator color.  typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=39  # Hide NordVPN connection indicator when not connected.  typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=  typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'  #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################  # Ranger shell color.  typeset -g POWERLEVEL9K_RANGER_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################[ nnn: nnn shell (https://github.com/jarun/nnn) ]#######################  # Nnn shell color.  typeset -g POWERLEVEL9K_NNN_FOREGROUND=72  # Custom icon.  # typeset -g POWERLEVEL9K_NNN_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########################[ vim_shell: vim shell indicator (:sh) ]###########################  # Vim shell indicator color.  typeset -g POWERLEVEL9K_VIM_SHELL_FOREGROUND=34  # Custom icon.  # typeset -g POWERLEVEL9K_VIM_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######[ midnight_commander: midnight commander shell (https://midnight-commander.org/) ]######  # Midnight Commander shell color.  typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ nix_shell: nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html) ]##  # Nix shell color.  typeset -g POWERLEVEL9K_NIX_SHELL_FOREGROUND=74  # Tip: If you want to see just the icon without "pure" and "impure", uncomment the next line.  # typeset -g POWERLEVEL9K_NIX_SHELL_CONTENT_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_NIX_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##################################[ disk_usgae: disk usage ]##################################  # Colors for different levels of disk usage.  typeset -g POWERLEVEL9K_DISK_USAGE_NORMAL_FOREGROUND=35  typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_FOREGROUND=220  typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_FOREGROUND=160  # Thresholds for different levels of disk usage (percentage points).  typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL=90  typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL=95  # If set to true, hide disk usage when below $POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL percent.  typeset -g POWERLEVEL9K_DISK_USAGE_ONLY_WARNING=false  # Custom icon.  # typeset -g POWERLEVEL9K_DISK_USAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ vi_mode: vi mode (you don't need this if you've enabled prompt_char) ]###########  # Text and color for normal (a.k.a. command) vi mode.  typeset -g POWERLEVEL9K_VI_COMMAND_MODE_STRING=NORMAL  typeset -g POWERLEVEL9K_VI_MODE_NORMAL_FOREGROUND=106  # Text and color for visual vi mode.  typeset -g POWERLEVEL9K_VI_VISUAL_MODE_STRING=VISUAL  typeset -g POWERLEVEL9K_VI_MODE_VISUAL_FOREGROUND=68  # Text and color for overtype (a.k.a. overwrite and replace) vi mode.  typeset -g POWERLEVEL9K_VI_OVERWRITE_MODE_STRING=OVERTYPE  typeset -g POWERLEVEL9K_VI_MODE_OVERWRITE_FOREGROUND=172  # Text and color for insert vi mode.  typeset -g POWERLEVEL9K_VI_INSERT_MODE_STRING=  typeset -g POWERLEVEL9K_VI_MODE_INSERT_FOREGROUND=66  # Custom icon.  # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################################[ ram: free RAM ]#######################################  # RAM color.  typeset -g POWERLEVEL9K_RAM_FOREGROUND=66  # Custom icon.  # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################################[ swap: used swap ]######################################  # Swap color.  typeset -g POWERLEVEL9K_SWAP_FOREGROUND=96  # Custom icon.  # typeset -g POWERLEVEL9K_SWAP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################################[ load: CPU load ]######################################  # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.  typeset -g POWERLEVEL9K_LOAD_WHICH=5  # Load color when load is under 50%.  typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=66  # Load color when load is between 50% and 70%.  typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=178  # Load color when load is over 70%.  typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=166  # Custom icon.  # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ todo: todo items (https://github.com/todotxt/todo.txt-cli) ]################  # Todo color.  typeset -g POWERLEVEL9K_TODO_FOREGROUND=110  # Hide todo when the total number of tasks is zero.  typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_TOTAL=true  # Hide todo when the number of tasks after filtering is zero.  typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_FILTERED=false  # Todo format. The following parameters are available within the expansion.  #  # - P9K_TODO_TOTAL_TASK_COUNT     The total number of tasks.  # - P9K_TODO_FILTERED_TASK_COUNT  The number of tasks after filtering.  #  # These variables correspond to the last line of the output of `todo.sh -p ls`:  #  #   TODO: 24 of 42 tasks shown  #  # Here 24 is P9K_TODO_FILTERED_TASK_COUNT and 42 is P9K_TODO_TOTAL_TASK_COUNT.  #  # typeset -g POWERLEVEL9K_TODO_CONTENT_EXPANSION='$P9K_TODO_FILTERED_TASK_COUNT'  # Custom icon.  # typeset -g POWERLEVEL9K_TODO_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ timewarrior: timewarrior tracking status (https://timewarrior.net/) ]############  # Timewarrior color.  typeset -g POWERLEVEL9K_TIMEWARRIOR_FOREGROUND=110  # If the tracked task is longer than 24 characters, truncate and append "…".  # Tip: To always display tasks without truncation, delete the following parameter.  # Tip: To hide task names and display just the icon when time tracking is enabled, set the  # value of the following parameter to "".  typeset -g POWERLEVEL9K_TIMEWARRIOR_CONTENT_EXPANSION='${P9K_CONTENT:0:24}${${P9K_CONTENT:24}:+…}'  # Custom icon.  # typeset -g POWERLEVEL9K_TIMEWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##################################[ context: user@hostname ]##################################  # Context color when running with privileges.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178  # Context color in SSH without privileges.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND=180  # Default context color (no privileges, no SSH).  typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180  # Context format when running with privileges: bold user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'  # Context format when in SSH without privileges: user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_TEMPLATE='%n@%m'  # Default context format (no privileges, no SSH): user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'  # Don't show context unless running with privileges or in SSH.  # Tip: Remove the next line to always show context.  #typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%246Fwith '  ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###  # Python virtual environment color.  typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=37  # Don't show Python version next to the virtual environment name.  typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false  # Separate environment name from Python version only with a space.  typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################[ anaconda: conda environment (https://conda.io/) ]######################  # Anaconda environment color.  typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=37  # Don't show Python version next to the anaconda environment name.  typeset -g POWERLEVEL9K_ANACONDA_SHOW_PYTHON_VERSION=false  # Separate environment name from Python version only with a space.  typeset -g POWERLEVEL9K_ANACONDA_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################  # Pyenv color.  typeset -g POWERLEVEL9K_PYENV_FOREGROUND=37  # Hide python version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PYENV_SOURCES=(shell local global)  # If set to false, hide python version if it's the same as global:  # $(pyenv version-name) == $(pyenv global).  typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ goenv: go environment (https://github.com/syndbg/goenv) ]################  # Goenv color.  typeset -g POWERLEVEL9K_GOENV_FOREGROUND=37  # Hide go version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_GOENV_SOURCES=(shell local global)  # If set to false, hide go version if it's the same as global:  # $(goenv version-name) == $(goenv global).  typeset -g POWERLEVEL9K_GOENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_GOENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########  # Nodenv color.  typeset -g POWERLEVEL9K_NODENV_FOREGROUND=70  # Don't show node version if it's the same as global: $(nodenv version-name) == $(nodenv global).  typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############  # Nvm color.  typeset -g POWERLEVEL9K_NVM_FOREGROUND=70  # Custom icon.  # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############  # Nodeenv color.  typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=70  # Don't show Node version next to the environment name.  typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false  # Separate environment name from Node version only with a space.  typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##############################[ node_version: node.js version ]###############################  # Node version color.  typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=70  # Show node version only when in a directory tree containing package.json.  typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ go_version: go version (https://golang.org) ]########################  # Go version color.  typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=37  # Show go version only when in a go project subdirectory.  typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################  # Rust version color.  typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=37  # Show rust version only when in a rust project subdirectory.  typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################  # .NET version color.  typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=134  # Show .NET version only when in a .NET project subdirectory.  typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################[ php_version: php version (https://www.php.net/) ]######################  # PHP version color.  typeset -g POWERLEVEL9K_PHP_VERSION_FOREGROUND=99  # Show PHP version only when in a PHP project subdirectory.  typeset -g POWERLEVEL9K_PHP_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_PHP_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ laravel_version: laravel php framework version (https://laravel.com/) ]###########  # Laravel version color.  typeset -g POWERLEVEL9K_LARAVEL_VERSION_FOREGROUND=161  # Custom icon.  # typeset -g POWERLEVEL9K_LARAVEL_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############  # Rbenv color.  typeset -g POWERLEVEL9K_RBENV_FOREGROUND=168  # Hide ruby version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_RBENV_SOURCES=(shell local global)  # If set to false, hide ruby version if it's the same as global:  # $(rbenv version-name) == $(rbenv global).  typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################  # Rvm color.  typeset -g POWERLEVEL9K_RVM_FOREGROUND=168  # Don't show @gemset at the end.  typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false  # Don't show ruby- at the front.  typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false  # Custom icon.  # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ fvm: flutter version management (https://github.com/leoafarias/fvm) ]############  # Fvm color.  typeset -g POWERLEVEL9K_FVM_FOREGROUND=38  # Custom icon.  # typeset -g POWERLEVEL9K_FVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ luaenv: lua version from luaenv (https://github.com/cehoffman/luaenv) ]###########  # Lua color.  typeset -g POWERLEVEL9K_LUAENV_FOREGROUND=32  # Hide lua version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_LUAENV_SOURCES=(shell local global)  # If set to false, hide lua version if it's the same as global:  # $(luaenv version-name) == $(luaenv global).  typeset -g POWERLEVEL9K_LUAENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_LUAENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ jenv: java version from jenv (https://github.com/jenv/jenv) ]################  # Java color.  typeset -g POWERLEVEL9K_JENV_FOREGROUND=32  # Hide java version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_JENV_SOURCES=(shell local global)  # If set to false, hide java version if it's the same as global:  # $(jenv version-name) == $(jenv global).  typeset -g POWERLEVEL9K_JENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_JENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ plenv: perl version from plenv (https://github.com/tokuhirom/plenv) ]############  # Perl color.  typeset -g POWERLEVEL9K_PLENV_FOREGROUND=67  # Hide perl version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PLENV_SOURCES=(shell local global)  # If set to false, hide perl version if it's the same as global:  # $(plenv version-name) == $(plenv global).  typeset -g POWERLEVEL9K_PLENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PLENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ############[ phpenv: php version from phpenv (https://github.com/phpenv/phpenv) ]############  # PHP color.  typeset -g POWERLEVEL9K_PHPENV_FOREGROUND=99  # Hide php version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PHPENV_SOURCES=(shell local global)  # If set to false, hide php version if it's the same as global:  # $(phpenv version-name) == $(phpenv global).  typeset -g POWERLEVEL9K_PHPENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PHPENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ terraform: terraform workspace (https://www.terraform.io) ]#################  # POWERLEVEL9K_TERRAFORM_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current terraform workspace gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_TERRAFORM_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_TERRAFORM_CLASSES defines the workspace class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current terraform workspace is "project_test", its class is TEST because "project_test"  # doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_CONTENT_EXPANSION='&gt; ${P9K_CONTENT} &lt;'  typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_FOREGROUND=38  # typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############  # Show kubecontext only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show kubecontext.  typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc'  # Kubernetes context classes for the purpose of using different colors, icons and expansions with  # different contexts.  #  # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current kubernetes context gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current kubernetes context is "deathray-testing/default", its class is TEST  # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='&gt; ${P9K_CONTENT} &lt;'  typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134  # typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext  # segment. Parameter expansions are very flexible and fast, too. See reference:  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.  #  # Within the expansion the following parameters are always available:  #  # - P9K_CONTENT                The content that would've been displayed if there was no content  #                              expansion defined.  # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the  #                              output of `kubectl config get-contexts`.  # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the  #                              output of `kubectl config get-contexts`.  # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE  #                              in the output of `kubectl config get-contexts`. If there is no  #                              namespace, the parameter is set to "default".  # - P9K_KUBECONTEXT_USER       The current context's user. Corresponds to column AUTHINFO in the  #                              output of `kubectl config get-contexts`.  #  # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),  # the following extra parameters are available:  #  # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".  # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.  # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.  # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.  #  # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,  # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":  #  #   - P9K_KUBECONTEXT_CLOUD_NAME=gke  #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account  #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a  #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01  #  # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":  #  #   - P9K_KUBECONTEXT_CLOUD_NAME=eks  #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012  #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1  #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=  # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'  # Append the current context's namespace if it's not "default".  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'  # Custom prefix.  # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%246Fat '  #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#  # Show aws only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show aws.  typeset -g POWERLEVEL9K_AWS_SHOW_ON_COMMAND='aws|awless|terraform|pulumi'  # POWERLEVEL9K_AWS_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current AWS profile gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_AWS_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_AWS_CLASSES defines the profile class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_AWS_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current AWS profile is "company_test", its class is TEST  # because "company_test" doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_AWS_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_AWS_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_AWS_TEST_CONTENT_EXPANSION='&gt; ${P9K_CONTENT} &lt;'  typeset -g POWERLEVEL9K_AWS_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_AWS_DEFAULT_FOREGROUND=208  # typeset -g POWERLEVEL9K_AWS_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#  # AWS Elastic Beanstalk environment color.  typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=70  # Custom icon.  # typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########  # Show azure only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show azure.  typeset -g POWERLEVEL9K_AZURE_SHOW_ON_COMMAND='az|terraform|pulumi'  # Azure account name color.  typeset -g POWERLEVEL9K_AZURE_FOREGROUND=32  # Custom icon.  # typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ gcloud: google cloud account and project (https://cloud.google.com/) ]###########  # Show gcloud only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show gcloud.  typeset -g POWERLEVEL9K_GCLOUD_SHOW_ON_COMMAND='gcloud|gcs'   # Google cloud color.  typeset -g POWERLEVEL9K_GCLOUD_FOREGROUND=32  # Google cloud format. Change the value of POWERLEVEL9K_GCLOUD_CONTENT_EXPANSION if the default  # is too verbose or not informative enough.  #  #   P9K_GCLOUD_ACCOUNT: the output of `gcloud config get-value account`  #   P9K_GCLOUD_PROJECT: the output of `gcloud config get-value project`  #   ${VARIABLE//\%/%%}: ${VARIABLE} with all occurences of '%' replaced with '%%'.  #  typeset -g POWERLEVEL9K_GCLOUD_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT//\%/%%}'  # Custom icon.  # typeset -g POWERLEVEL9K_GCLOUD_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ google_app_cred: google application credentials (https://cloud.google.com/docs/authentication/production) ]#  # Show google_app_cred only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show google_app_cred.  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_SHOW_ON_COMMAND='terraform|pulumi'  # Google application credentials classes for the purpose of using different colors, icons and  # expansions with different credentials.  #  # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES is an array with even number of elements. The first  # element in each pair defines a pattern against which the current kubernetes context gets  # matched. More specifically, it's P9K_CONTENT prior to the application of context expansion  # (see below) that gets matched. If you unset all POWERLEVEL9K_GOOGLE_APP_CRED_*CONTENT_EXPANSION  # parameters, you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES defines the context class. Patterns are tried in order.  # The first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(  #     '*:*prod*:*'  PROD  #     '*:*test*:*'  TEST  #     '*'           DEFAULT)  #  # If your current Google application credentials is "service_account deathray-testing x@y.com",  # its class is TEST because it doesn't match the pattern '* *prod* *' but does match '* *test* *'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_CONTENT_EXPANSION='$P9K_GOOGLE_APP_CRED_PROJECT_ID'  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(      # '*:*prod*:*'  PROD    # These values are examples that are unlikely      # '*:*test*:*'  TEST    # to match your needs. Customize them as needed.      '*'             DEFAULT)  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_FOREGROUND=32  # typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use POWERLEVEL9K_GOOGLE_APP_CRED_CONTENT_EXPANSION to specify the content displayed by  # google_app_cred segment. Parameter expansions are very flexible and fast, too. See reference:  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.  #  # You can use the following parameters in the expansion. Each of them corresponds to one of the  # fields in the JSON file pointed to by GOOGLE_APPLICATION_CREDENTIALS.  #  #   Parameter                        | JSON key file field  #   ---------------------------------+---------------  #   P9K_GOOGLE_APP_CRED_TYPE         | type  #   P9K_GOOGLE_APP_CRED_PROJECT_ID   | project_id  #   P9K_GOOGLE_APP_CRED_CLIENT_EMAIL | client_email  #  # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurences of '%' replaced by '%%'.  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_CONTENT_EXPANSION='${P9K_GOOGLE_APP_CRED_PROJECT_ID//\%/%%}'  ###############################[ public_ip: public IP address ]###############################  # Public IP color.  typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=94  # Custom icon.  # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ########################[ vpn_ip: virtual private network indicator ]#########################  # VPN IP color.  typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=81  # When on VPN, show just an icon without the IP address.  # Tip: To display the private IP address when on VPN, remove the next line.  typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=  # Regular expression for the VPN network interface. Run `ifconfig` or `ip -4 a show` while on VPN  # to see the name of the interface.  typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'  # Custom icon.  # typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ ip: ip address and bandwidth usage for a specified network interface ]###########  # IP color.  typeset -g POWERLEVEL9K_IP_FOREGROUND=38  # The following parameters are accessible within the expansion:  #  #   Parameter             | Meaning  #   ----------------------+---------------  #   P9K_IP_IP         | IP address  #   P9K_IP_INTERFACE  | network interface  #   P9K_IP_RX_BYTES   | total number of bytes received  #   P9K_IP_TX_BYTES   | total number of bytes sent  #   P9K_IP_RX_RATE    | receive rate (since last prompt)  #   P9K_IP_TX_RATE    | send rate (since last prompt)  typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION='%70F⇣$P9K_IP_RX_RATE %215F⇡$P9K_IP_TX_RATE %38F$P9K_IP_IP'  # Show information for the first network interface whose name matches this regular expression.  # Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.  typeset -g POWERLEVEL9K_IP_INTERFACE='wlp2s0*'  # Custom icon.  # typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  #########################[ proxy: system-wide http/https/ftp proxy ]##########################  # Proxy color.  typeset -g POWERLEVEL9K_PROXY_FOREGROUND=68  # Custom icon.  # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################################[ battery: internal battery ]#################################  # Show battery in red when it's below this level and not connected to power supply.  typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20  typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=160  # Show battery in green when it's charging or fully charged.  typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=70  # Show battery in yellow when it's discharging.  typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=178  # Battery pictograms going from low to high level of charge.  typeset -g POWERLEVEL9K_BATTERY_STAGES='\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'  # Don't show the remaining time to charge/discharge.  typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false  #####################################[ wifi: wifi speed ]#####################################  # WiFi color.  typeset -g POWERLEVEL9K_WIFI_FOREGROUND=68  # Custom icon.  # typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use different colors and icons depending on signal strength ($P9K_WIFI_BARS).  #  #   # Wifi colors and icons for different signal strength levels (low to high).  #   typeset -g my_wifi_fg=(68 68 68 68 68)                           # &lt;-- change these values  #   typeset -g my_wifi_icon=('WiFi' 'WiFi' 'WiFi' 'WiFi' 'WiFi')     # &lt;-- change these values  #  #   typeset -g POWERLEVEL9K_WIFI_CONTENT_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}$P9K_WIFI_LAST_TX_RATE Mbps'  #   typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}${my_wifi_icon[P9K_WIFI_BARS+1]}'  #  # The following parameters are accessible within the expansions:  #  #   Parameter             | Meaning  #   ----------------------+---------------  #   P9K_WIFI_SSID         | service set identifier, a.k.a. network name  #   P9K_WIFI_LINK_AUTH    | authentication protocol such as "wpa2-psk" or "none"  #   P9K_WIFI_LAST_TX_RATE | wireless transmit rate in megabits per second  #   P9K_WIFI_RSSI         | signal strength in dBm, from -120 to 0  #   P9K_WIFI_NOISE        | noise in dBm, from -120 to 0  #   P9K_WIFI_BARS         | signal strength in bars, from 0 to 4 (derived from P9K_WIFI_RSSI and P9K_WIFI_NOISE)  #  # All parameters except P9K_WIFI_BARS are extracted from the output of the following command:  #  #   /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I  ####################################[ time: current time ]####################################  # Current time color.  typeset -g POWERLEVEL9K_TIME_FOREGROUND=66  # Format for the current time: 09:51:02. See `man 3 strftime`.  typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'  # If set to true, time will update when you hit enter. This way prompts for the past  # commands will contain the start times of their commands as opposed to the default  # behavior where they contain the end times of their preceding commands.  typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false  # Custom icon.  # typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_TIME_PREFIX='%246Fat '  # Example of a user-defined prompt segment. Function prompt_example will be called on every  # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or  # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.  #  # Type `p10k help segment` for documentation and a more sophisticated example.  function prompt_example() {    p10k segment -f 208 -i '⭐' -t 'hello, %n'  }  function prompt_Greeting() {    local hour=`date "+%H"`    local name=",king"    if [ $hour -lt 12 -a $hour -gt 4  ]    then         local str="Morning"    elif [ $hour -eq 12 ]    then        local str="Noon"    elif [ $hour -gt 12 -a $hour -lt 19 ]                                                                                then        local str="Afternoon"    else        local str="Evening"    fi    p10k segment -f 208 -i '㋡' -t $str$name   }  function prompt_my_weather() {    ping -c1 114.114.114.114 &amp;&gt; /dev/null    if [ $? -eq 0 ]    then        local weatherDay=`date "+%j"`        local weatherHour=`date "+%H"`        local weatherPath="/tmp/"        local weatherName="my_weather"        local weatherFileType=".txt"        local weatherFile=$weatherPath$weatherName$weatherDay$weatherHour$weatherFileType        if [ ! -e $weatherFile -o ! -s $weatherFile ]        then            touch "$weatherFile"            local weather=`curl -s "wttr.in/?format=3 "`            echo $weather &gt; $weatherFile        else            local weather=$(cat $weatherFile)        fi    else        local weather="无网络"    fi    p10k segment -f '#ffb44b' -t $weather }  # User-defined prompt segments may optionally provide an instant_prompt_* function. Its job  # is to generate the prompt segment for display in instant prompt. See  # https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.  #  # Powerlevel10k will call instant_prompt_* at the same time as the regular prompt_* function  # and will record all `p10k segment` calls it makes. When displaying instant prompt, Powerlevel10k  # will replay these calls without actually calling instant_prompt_*. It is imperative that  # instant_prompt_* always makes the same `p10k segment` calls regardless of environment. If this  # rule is not observed, the content of instant prompt will be incorrect.  #  # Usually, you should either not define instant_prompt_* or simply call prompt_* from it. If  # instant_prompt_* is not defined for a segment, the segment won't be shown in instant prompt.  function instant_prompt_example() {    # Since prompt_example always makes the same `p10k segment` calls, we can call it from    # instant_prompt_example. This will give us the same `example` prompt segment in the instant    # and regular prompts.    prompt_example  }  # User-defined prompt segments can be customized the same way as built-in segments.  # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208  # typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt  # when accepting a command line. Supported values:  #  #   - off:      Don't change prompt when accepting a command line.  #   - always:   Trim down prompt when accepting a command line.  #   - same-dir: Trim down prompt when accepting a command line unless this is the first command  #               typed after changing current working directory.  typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=off  # Instant prompt mode.  #  #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found  #              it incompatible with your zsh configuration files.  #   - quiet:   Enable instant prompt and don't print warnings when detecting console output  #              during zsh initialization. Choose this if you've read and understood  #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.  #   - verbose: Enable instant prompt and print a warning when detecting console output during  #              zsh initialization. Choose this if you've never tried instant prompt, haven't  #              seen the warning, or if you are unsure what this all means.  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet  # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.  # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload  # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you  # really need it.  typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true  # If p10k is already loaded, reload configuration.  # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.  (( ! $+functions[p10k] )) || p10k reload}(( ${#p10k_config_opts} )) &amp;&amp; setopt ${p10k_config_opts[@]}'builtin' 'unset' 'p10k_config_opts'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="终端音乐"><a href="#终端音乐" class="headerlink" title="终端音乐"></a>终端音乐</h5><p>推荐使用<code>ncmpcpp</code>作为前端，<code>mpd</code>作为后端，<code>mpc</code>作为控制端。</p><h6 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a><del>全局配置</del></h6><p>打开mpd的配置文件<code>/etc/mpd.conf</code></p><p>添加音乐目录</p><p>​    将<code>/etc/mpd.conf</code>中添加字段<code>music_directory "/path/to/music"</code>。这里的路径就是音乐存放的绝对路径。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># gpasswd -a mpd &lt;your login group&gt;$ chmod 710 /home/&lt;your home dir&gt;gpasswd -a mpd audio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="单用户配置"><a href="#单用户配置" class="headerlink" title="单用户配置"></a>单用户配置</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>~/.config/mpd/mpd.conf</code> 并且指定所需文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Required filesdb_file            "~/.config/mpd/database"log_file           "~/.config/mpd/log"# Optionalmusic_directory    "~/Music"playlist_directory "~/.config/mpd/playlists"pid_file           "~/.config/mpd/pid"state_file         "~/.config/mpd/state"sticker_file       "~/.config/mpd/sticker.sql"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建所有上述配置中提及的文件和目录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir ~/.config/mpd/playlists$ touch ~/.config/mpd/{database,log,pid,state,sticker.sql}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">audio_output {    type        "alsa"    name        "My ALSA Device"    device      "hw:0,0"    # optional    mixer_type      "hardware"  # optional    mixer_device    "default"   # optional    mixer_control   "Master"        # optional    mixer_index "0"     # optional}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的mixer控制mpd的音量调节。如果不知使用哪一个mixer,可以用<code>amixer</code>进行查看。</p><p>ncmpcpp实现可视化需要如下字段：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">audio_output {    type                    "fifo"    name                    "my_fifo"    path                    "/tmp/mpd.fifo"    format                  "44100:16:2"}     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建ncmpcpp的配置文件<code>~/.ncmpcpp/config</code>。从<code>/usr/share/doc/ncmpcpp/config</code>复制过来。</p><p>创建ncmpcpp的自定义按键的配置文件<code>~/.ncmpcpp/bindings</code>。从<code>/usr/share/doc/ncmpcpp/bindings </code>复制过来。</p><hr><h5 id="Ranger"><a href="#Ranger" class="headerlink" title="Ranger"></a>Ranger</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S ranger  #或者pip install ranger-fm --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><h6 id="开启自定义选项"><a href="#开启自定义选项" class="headerlink" title="开启自定义选项"></a>开启自定义选项</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ranger --copy-config=all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在环境变量中添加<code>export RANGER_LOAD_DEFAULT_RC=FALSE </code></p><h6 id="设置文件图标"><a href="#设置文件图标" class="headerlink" title="设置文件图标"></a>设置文件图标</h6><p>首先安装nerd-font,详见下面的字体配置。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加<code>default_linemode devicons</code> 到 <code>rc.conf</code>。即执行<code>echo "default_linemode devicons" &gt;&gt; $HOME/.config/ranger/rc.conf</code></p><p><del>若是不行，就在这个插件的文件夹下面<code>make install</code>。</del></p><h6 id="开启图片预览"><a href="#开启图片预览" class="headerlink" title="开启图片预览"></a>开启图片预览</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S w3m #提供显示图像的组件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>rc.conf</code>中添加：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set preview_images true # Be aware of version control systems and display information.将这里改成true,可以显示github目录的状态set vcs_aware true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看图片：</p><p><code>sudo pacman -S w3m</code></p><p>编辑配置文件<code>~/.config/ranger/rc.conf</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Use one of the supported image preview protocolsset preview_images true set preview_images_method w3m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>～/.config/ranger/scope.sh</code>中，将相关格式代码的注释取消。</p><p>视频预览需要安装ffmpegthumbnailer。</p><p>docx预览需要安装pandoc。</p><h6 id="设置自定义的命令（压缩，mkcd，解压，fzf）"><a href="#设置自定义的命令（压缩，mkcd，解压，fzf）" class="headerlink" title="设置自定义的命令（压缩，mkcd，解压，fzf）"></a>设置自定义的命令（压缩，mkcd，解压，fzf）</h6><p>在<code>commands.py</code>文件中添加如下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ranger<span class="token punctuation">.</span>core<span class="token punctuation">.</span>loader <span class="token keyword">import</span> CommandLoader<span class="token keyword">class</span> <span class="token class-name">mkcd</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :mkcd &lt;dirname&gt;    Creates a directory with the name &lt;dirname&gt; and enters it.    """</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> join<span class="token punctuation">,</span> expanduser<span class="token punctuation">,</span> lexists        <span class="token keyword">from</span> os <span class="token keyword">import</span> makedirs        <span class="token keyword">import</span> re        dirname <span class="token operator">=</span> join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>path<span class="token punctuation">,</span> expanduser<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> lexists<span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>            makedirs<span class="token punctuation">(</span>dirname<span class="token punctuation">)</span>            <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'^/|^~[^/]*/'</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dirname <span class="token operator">=</span> dirname<span class="token punctuation">[</span><span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">'[^/]+'</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">'..'</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'show_hidden'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment">## We force ranger to load content before calling `scout`.</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span>schedule<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>execute_console<span class="token punctuation">(</span><span class="token string">'scout -ae ^{}$'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token string">"file/directory exists!"</span><span class="token punctuation">,</span> bad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">fzf_select</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    记得安装一下fzf:sudo pacman -S fzf    :fzf_select    Find a file using fzf.    With a prefix argument select only directories.    See: https://github.com/junegunn/fzf    """</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> subprocess        <span class="token keyword">import</span> os<span class="token punctuation">.</span>path        <span class="token keyword">if</span> self<span class="token punctuation">.</span>quantifier<span class="token punctuation">:</span>            <span class="token comment"># match only directories</span>            command<span class="token operator">=</span>"find <span class="token operator">-</span>L <span class="token punctuation">.</span> \<span class="token punctuation">(</span> <span class="token operator">-</span>path <span class="token string">'*/\.*'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'dev'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'proc'</span> \<span class="token punctuation">)</span> <span class="token operator">-</span>prune \            <span class="token operator">-</span>o <span class="token operator">-</span><span class="token builtin">type</span> d <span class="token operator">-</span><span class="token keyword">print</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">/</span>dev<span class="token operator">/</span>null <span class="token operator">|</span> sed 1d <span class="token operator">|</span> cut <span class="token operator">-</span>b3<span class="token operator">-</span> <span class="token operator">|</span> fzf <span class="token operator">+</span>m"        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># match files and directories</span>            command<span class="token operator">=</span>"find <span class="token operator">-</span>L <span class="token punctuation">.</span> \<span class="token punctuation">(</span> <span class="token operator">-</span>path <span class="token string">'*/\.*'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'dev'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'proc'</span> \<span class="token punctuation">)</span> <span class="token operator">-</span>prune \            <span class="token operator">-</span>o <span class="token operator">-</span><span class="token keyword">print</span> <span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">/</span>dev<span class="token operator">/</span>null <span class="token operator">|</span> sed 1d <span class="token operator">|</span> cut <span class="token operator">-</span>b3<span class="token operator">-</span> <span class="token operator">|</span> fzf <span class="token operator">+</span>m"        fzf <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>command<span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> fzf<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> fzf<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            fzf_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>select_file<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">compress</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Compress marked files to current directory """</span>        cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir        marked_files <span class="token operator">=</span> cwd<span class="token punctuation">.</span>get_selection<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> marked_files<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">def</span> <span class="token function">refresh</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>            cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>get_directory<span class="token punctuation">(</span>original_path<span class="token punctuation">)</span>            cwd<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span><span class="token punctuation">)</span>        original_path <span class="token operator">=</span> cwd<span class="token punctuation">.</span>path        parts <span class="token operator">=</span> self<span class="token punctuation">.</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        au_flags <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        descr <span class="token operator">=</span> <span class="token string">"compressing files in: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> CommandLoader<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'apack'</span><span class="token punctuation">]</span> <span class="token operator">+</span> au_flags <span class="token operator">+</span> \                <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">,</span> cwd<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> marked_files<span class="token punctuation">]</span><span class="token punctuation">,</span> descr<span class="token operator">=</span>descr<span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>signal_bind<span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">,</span> refresh<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tab</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tabnum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Complete with current folder name """</span>        extension <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'.rar'</span><span class="token punctuation">,</span> <span class="token string">'.7z'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'compress '</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> ext <span class="token keyword">for</span> ext <span class="token keyword">in</span> extension<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">extracthere</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Extract copied files to current directory """</span>        copied_files <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>copy_buffer<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> copied_files<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">def</span> <span class="token function">refresh</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>            cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>get_directory<span class="token punctuation">(</span>original_path<span class="token punctuation">)</span>            cwd<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span><span class="token punctuation">)</span>        one_file <span class="token operator">=</span> copied_files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir        original_path <span class="token operator">=</span> cwd<span class="token punctuation">.</span>path        au_flags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-X'</span><span class="token punctuation">,</span> cwd<span class="token punctuation">.</span>path<span class="token punctuation">]</span>        au_flags <span class="token operator">+=</span> self<span class="token punctuation">.</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        au_flags <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'-e'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>copy_buffer<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cut_buffer <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>copied_files<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            descr <span class="token operator">=</span> <span class="token string">"extracting: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>one_file<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            descr <span class="token operator">=</span> <span class="token string">"extracting files from: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>one_file<span class="token punctuation">.</span>dirname<span class="token punctuation">)</span>        obj <span class="token operator">=</span> CommandLoader<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'aunpack'</span><span class="token punctuation">]</span> <span class="token operator">+</span> au_flags \                <span class="token operator">+</span> <span class="token punctuation">[</span>f<span class="token punctuation">.</span>path <span class="token keyword">for</span> f <span class="token keyword">in</span> copied_files<span class="token punctuation">]</span><span class="token punctuation">,</span> descr<span class="token operator">=</span>descr<span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>signal_bind<span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">,</span> refresh<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pacman -S texstudiosudo pacman -S texlive-core  texlive-bin texlive-langcjk texlive-latex3 texlive-latexextra texlive-langchinesesudo pacman -S texlive-most<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>中文latex最简化模板</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token comment">%!TEX program = xelatex</span><span class="token function selector">\documentclass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">ctex</span><span class="token punctuation">}</span><span class="token function selector">\title</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\author</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\maketitle</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span>Hello World <span class="token function selector">\\</span>你好，世界 <span class="token function selector">\\</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span> <span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="yay安装"><a href="#yay安装" class="headerlink" title="yay安装"></a>yay安装</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>yay jdk15 和yay jdk8</p><p>若是需要安装jdk8，则先下载相应版本的jdk包到默认的下载文件夹。然后执行<code>yay jdk8</code>即可。</p><p><code>archlinux-java status</code>查看当前使用的JDK版本</p><p>easyconnect: yay easyconnect</p><p>burpsuite: yay burpsuite</p><p>gotop：一款命令行查看系统使用状况</p><p>bashtop:同上</p><p>termius：多平台终端软件</p><p>yay -S picgo-appimage:picgo图片上传工具</p><p><a href="https://www.archlinux.org/packages/community/x86_64/zathura-pdf-mupdf/"> zathura-pdf-mupdf</a>：zathura的pdf支持插件</p><p>the_silver_searcher：</p><p>touchegg：触控板程序，创建开机自启可以使用”/usr/bin/touchegg –daemon &amp; /usr/bin/touchegg –client”</p><p>logiops：罗技MX系列鼠标在linux下的驱动</p><h4 id="Appimage形式存在的软件"><a href="#Appimage形式存在的软件" class="headerlink" title="Appimage形式存在的软件"></a>Appimage形式存在的软件</h4><p>pdman：数据库设计软件</p><hr><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h4 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h4><p><strong>Http代理</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export http_proxy="http://localhost:port"export https_proxy="http://localhost:port"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Socket5</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export http_proxy="socks5://127.0.0.1:1080"export https_proxy="socks5://127.0.0.1:1080"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ArchLinuxCN源"><a href="#ArchLinuxCN源" class="headerlink" title="ArchLinuxCN源"></a>ArchLinuxCN源</h4><p>在/etc/pacman.conf文件中添加以下两行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[archlinuxcn]Server = https://repo.archlinuxcn.org/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者去<a href="https://github.com/archlinuxcn/mirrorlist-repo">官方</a>获取镜像站点。</p><h4 id="BlackArch源"><a href="#BlackArch源" class="headerlink" title="BlackArch源"></a>BlackArch源</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[blackarch]SigLevel = Optional TrustAllServer = https://mirrors.ustc.edu.cn/blackarch/$repo/os/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="桌面毛玻璃"><a href="#桌面毛玻璃" class="headerlink" title="桌面毛玻璃"></a>桌面毛玻璃</h4><p><a href="https://www.youtube.com/watch?v=86ro5Q0Fi34">主题配置</a></p><h6 id="终端模糊"><a href="#终端模糊" class="headerlink" title="终端模糊"></a>终端模糊</h6><p>修改<code>.config/yakuakerc</code>，修改成:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[Appearance]Blur=trueTranslucency=true                                                                                                                                                            [Favorite Profiles]Favorites=[Window]Height=100KeepOpen=falseWidth=100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>konsole的毛玻璃特效在外观-&gt;配色方法和字体中的背景透明度。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>nerd-fonts-hack ttf-meslo-nerd-font-powerlevel10k nerd-fonts-jetbrains-mono ttf-nerd-fonts-hack-complete-git</p><p>重点推荐<code>nerd-fonts-jetbrains-mono</code>。挺好的。</p><p>中文字体：<strong>yay</strong> -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei adobe-source-han-mono-cn-fonts adobe-source<br>-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</p><h4 id="安全软件"><a href="#安全软件" class="headerlink" title="安全软件"></a>安全软件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S john<span class="token function">sudo</span> pacman -S hydra<span class="token function">sudo</span> pacman -S nmap<span class="token function">sudo</span> pacman -S bettercap<span class="token function">sudo</span> pacman -S exploitdb<span class="token function">sudo</span> pacman -S metasploit<span class="token function">sudo</span> pacman -S hashcat<span class="token function">sudo</span> pacman -S nikto<span class="token function">sudo</span> pacman -S lynisyay -S dirbyay -S edb-debuggeryay -S halcyonyay -S charlesyay -S maltego<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开机蓝牙自启"><a href="#开机蓝牙自启" class="headerlink" title="开机蓝牙自启"></a>开机蓝牙自启</h4><p>实现登陆前可以使用蓝牙键盘。</p><p>修改<code>/etc/bluetooth/main.conf</code>，修改如下字段：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>Policy<span class="token punctuation">]</span>AutoEnable-true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新错误"><a href="#更新错误" class="headerlink" title="更新错误"></a>更新错误</h3><h4 id="下载出现依赖关系的错误"><a href="#下载出现依赖关系的错误" class="headerlink" title="下载出现依赖关系的错误"></a>下载出现依赖关系的错误</h4><p>推荐去官网的公告区查看最新信息。</p><p><a href="https://forum.manjaro.org/c/announcements/11">https://forum.manjaro.org/c/announcements/11</a></p><h4 id="包错误或损坏"><a href="#包错误或损坏" class="headerlink" title="包错误或损坏"></a>包错误或损坏</h4><p>首先自然是重新下载。但是顺利下载下来的内容依旧是损坏或错误，此时推荐使用<code>sudo pacman -S archlinuxcn-keyring</code>。</p><h3 id="罗技驱动"><a href="#罗技驱动" class="headerlink" title="罗技驱动"></a>罗技驱动</h3><p>罗技的MX系列鼠标没有板载内存，只能通过读取软件中设置的方式来实现按键自定义。因此，需要在Linux下也安装相应的驱动才能正常使用。详情见<a href="https://wiki.archlinux.org/title/Logitech_MX_Master">https://wiki.archlinux.org/title/Logitech_MX_Master</a></p><ol><li><p><code>yay -s logiops</code>安装驱动。</p></li><li><p>启动服务<code>systemctl start logid</code></p></li><li><p>使用命令<code>sudo logid -v</code>获取设备的名称。</p></li><li><p>编写配置文件<code>/etc/logid.cfg</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">devices: ({    name: "Wireless Mouse MX Master 3";    buttons: (        {            # 鼠标侧键的下键            cid: 0x53;            action =            {                type: "Keypress";                keys: ["KEY_F12"];            };        },        {            # 鼠标侧键的上键            cid: 0x56;            action =            {                type :  "Keypress";                keys: ["KEY_LEFTALT", "KEY_L"];            };        }    );});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Navicat15"><a href="#Navicat15" class="headerlink" title="Navicat15"></a>Navicat15</h3><ol><li><p>首先下载navicat15的软件包。<code>wget https://github.com/HeQuanX/navicat-keygen-tools/releases/download/recommended/navicat15-premium-cs.zip</code></p></li><li><p>提取Appimage文件中的内容到指定文件夹中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> navicat15-premium-cs<span class="token function">sudo</span> <span class="token function">mount</span> -o loop navicat15-premium-cs.AppImage navicat15-premium-cs<span class="token function">sudo</span> <span class="token function">cp</span> -r navicat15-premium-cs navicat<span class="token function">sudo</span> <span class="token function">umount</span> navicat15-premium-cs<span class="token function">rm</span> -rf navicat15-premium-cs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装编译依赖软件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -S capstone keystone rapidjson openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译生成补丁文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone -b linux --single-branch https://github.com/Orginly/navicat-keygen.git<span class="token builtin class-name">cd</span> navicat-keygen<span class="token function">make</span> all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>生成完成后，你会在 <code>./bin</code> 文件夹下看到编译后的keygen/patcher。</strong></p></li><li><p>navicat-patcher 替换官方公钥</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ./bin/navicat-patcher <span class="token punctuation">..</span>/navicat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新打包成AppImage文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yay -S appimagetoolappimagetool navicat navicat15.AppImage./navicat15.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>激活</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> navicat-keygen./bin/navicat-keygen --text ./RegPrivateKey.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这里输入请求码，并复制生成的激活码。此过程中记得断网，使用手动激活的方式。</p></li><li><p>清理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">rm</span> -rf navicat15-premium-cs<span class="token function">sudo</span> <span class="token function">rm</span> -rf navicat15-premium-cs.AppImage<span class="token function">sudo</span> <span class="token function">rm</span> -rf navicat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Manjaro与Win双系统蓝牙"><a href="#Manjaro与Win双系统蓝牙" class="headerlink" title="Manjaro与Win双系统蓝牙"></a>Manjaro与Win双系统蓝牙</h3><h4 id="普通蓝牙设备"><a href="#普通蓝牙设备" class="headerlink" title="普通蓝牙设备"></a>普通蓝牙设备</h4><ol><li><p>在win10下建立与蓝牙设备的连接，以保证win中的系统注册表中有该设备配置项。</p></li><li><p>切换到Manjaro下，再次设备配对。</p></li><li><p>获取Manjaro系统下蓝牙设备的linkkey或设备认证码。路径在<code>/var/lib/bluetooth</code>下。里面的第一层文件夹是本机蓝牙的mac地址，再里面的文件夹就是每个与电脑配对的蓝牙设备的mac地址。找到相应设备的mac地址文件夹，其中info文件就记录着设备的linkkey。</p><p><img src="http://www.linuxdiyf.com/linux/uploads/allimg/170311/2-1F311100530443.png"></p></li><li><p>切换到win系统下，通过<a href="https://technet.microsoft.com/en-us/sysinternals/bb897553">微软官网</a>下载PSTools工具修改系统注册表中的蓝牙linkkey。在命令行程序中执行<code>PsExec.exe -s -i regedit</code>。</p></li><li><p>找到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\BTHPORT\Parameters\Keys\</code>。将Manjaro下获取的key输入进去。重启电脑即可。</p><p><img src="http://www.linuxdiyf.com/linux/uploads/allimg/170311/2-1F311100555c6.png" alt="win10和ubuntu16共用蓝牙鼠标"></p></li></ol><h4 id="罗技Master3"><a href="#罗技Master3" class="headerlink" title="罗技Master3"></a>罗技Master3</h4><p>罗技的Master3不同于一般的蓝牙设备。**每次配对都会导致鼠标自身的mac地址自增(即+2)**，因此在修改时需要将Manjaro下的mac地址文件夹名字进行修改。</p><ol><li>将鼠标在Manjaro系统下进行配对。完成后可以在<code>/var/lib/bluetooth/主机蓝牙设备地址/鼠标蓝牙设备地址</code> 下看到配对信息，在 info 中就存有配对验证使用的 <code>IdentityResolvingKey</code> 和 <code>SlaveLongTermKey</code> 。</li><li>同普通蓝牙设备，在win系统中配对设备并通过PSTools工具获取设备当前的<code>Address(设备地址)</code>、<code>IRK(IdentityResolvingKey)</code> 和 <code>LTK(SlaveLongTermKey)</code>。</li><li>进入Manjaro系统，将设备mac文件夹修改成现在自增后的mac地址，并将info中的<code>IdentityResolvingKey和SlaveLongTermKey</code>修改成和win下一致的数据。</li><li>重启系统即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> Ranger </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7初始化安装步骤</title>
      <link href="/2019/12/08/jing-yan-zong-jie/centos7-chu-shi-hua-an-zhuang-bu-zou/"/>
      <url>/2019/12/08/jing-yan-zong-jie/centos7-chu-shi-hua-an-zhuang-bu-zou/</url>
      
        <content type="html"><![CDATA[<h2 id="安装python3-9和pip"><a href="#安装python3-9和pip" class="headerlink" title="安装python3.9和pip"></a>安装python3.9和pip</h2><h3 id="下载python源码包"><a href="#下载python源码包" class="headerlink" title="下载python源码包"></a>下载python源码包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://www.python.org/ftp/python/3.9.6/Python-3.9.6.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装所需依赖关系"><a href="#安装所需依赖关系" class="headerlink" title="安装所需依赖关系"></a>安装所需依赖关系</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum -y groupinstall "Development tools"sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解压进入相应目录"><a href="#解压进入相应目录" class="headerlink" title="解压进入相应目录"></a>解压进入相应目录</h3><p>直接使用zsh的extract。</p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./configure --prefix=/usr/local/python3  make  sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建相应软连接命令"><a href="#创建相应软连接命令" class="headerlink" title="创建相应软连接命令"></a>创建相应软连接命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="升级相应的pip版本"><a href="#升级相应的pip版本" class="headerlink" title="升级相应的pip版本"></a>升级相应的pip版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pip3 install --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装python依赖包"><a href="#安装python依赖包" class="headerlink" title="安装python依赖包"></a>安装python依赖包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo pip3 install -r requestment.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python2与python3共存"><a href="#python2与python3共存" class="headerlink" title="python2与python3共存"></a>python2与python3共存</h3><p>将 <code>/usr/bin/yum</code>和 <code>/usr/libexec/urlgrabber-ext-down</code>文件的最首句最后的python改成python2。</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>（1）在执行 make 的时候没有出现问题，但是在 make install 的时候报错： ModuleNotFoundError: No module named ‘_ctypes’</p><p>原因：这是因为没有安装上 tk-devel、libffi-devel这两个包，可以重新使用 yum 安装。</p><p>（2）SyntaxError: invalid syntax  File “/usr/libexec/urlgrabber-ext-down”</p><p>原因：没有修改/usr/libexec/urlgrabber-ext-down 文件中python的环境为python2，因为现在安装了python3，它不知道应该使用哪一个，所以会报错。</p><hr><h2 id="安装mysql5-7"><a href="#安装mysql5-7" class="headerlink" title="安装mysql5.7"></a>安装mysql5.7</h2><h3 id="安装YUM-Repo"><a href="#安装YUM-Repo" class="headerlink" title="安装YUM Repo"></a>安装YUM Repo</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpmrpm -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行完成后会在 <code>/etc/yum.repos.d/</code>目录下生成两个repo文件 <code>mysql-community.repo</code> <code>mysql-community-source.repo</code>。</p><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install mysql-serversudo systemctl start mysqld #启动MySQL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h3><p>获取初始密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep 'temporary password' /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若是获取不到则删除原本的安装过的mysql残留数据。然后在启动mysql。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rm -rf /var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p -P 3500 #这里之前设置了mysql的端口开放在3500端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set password=password("yourpassword");flush privileges; #刷新设置好的设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Mysql状态设置"><a href="#Mysql状态设置" class="headerlink" title="Mysql状态设置"></a>Mysql状态设置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop mysqld #关闭MySQLsystemctl restart mysqld #重启MySQLsystemctl status mysqld #查看MySQL运行状态systemctl enable mysqld #设置开机启动systemctl disable mysqld #关闭开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql开启远程控制"><a href="#Mysql开启远程控制" class="headerlink" title="Mysql开启远程控制"></a>Mysql开启远程控制</h3><p>首先创建一个远程访问用的用户身份。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grant all privileges on 数据库名.表名 to 创建的用户名(root)@"%" identified by "密码"; # 数据库名.表名 如果写成*.*代表授权所有的数据库 flush privileges; #刷新刚才的内容#如：grant all privileges on *.* to root@"113.64.243.1" identified by "123456789";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql配置修改"><a href="#Mysql配置修改" class="headerlink" title="Mysql配置修改"></a>Mysql配置修改</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim /etc/my.cnf#添加[mysqld]character_set_server=utf8init_connect='SET NAMES utf8'port=3500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置终端"><a href="#配置终端" class="headerlink" title="配置终端"></a>配置终端</h2><h3 id="powerlevel9k-不推荐"><a href="#powerlevel9k-不推荐" class="headerlink" title="powerlevel9k(不推荐)"></a>powerlevel9k(不推荐)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install zsh gitsh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改.zshrc文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export TERM="screen-256color"POWERLEVEL9K_MODE='nerdfont-complete'ZSH_THEME="powerlevel9k/powerlevel9k"#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context disk_usage dir vcs)#POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context os_icon disk_usage dir_writable dir vcs)POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(ip status root_indicator background_jobs load battery history date time)POWERLEVEL9K_PROMPT_ON_NEWLINE=truePOWERLEVEL9K_RPROMPT_ON_NEWLINE=truePOWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="↱"POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="↳ "plugins=(  git  catimg  encode64  z  zsh-autosuggestions  history  extract)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="powerlevel10k"><a href="#powerlevel10k" class="headerlink" title="powerlevel10k"></a>powerlevel10k</h3><p>因为powerlevel10k需要zsh5.1以上的版本，而yum源中自带的zsh只有5.0.2。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># yum info zshLoaded plugins: fastestmirrorDetermining fastest mirrorsInstalled PackagesName        : zshArch        : x86_64Version     : 5.0.2Release     : 34.el7_8.2Size        : 5.6 MRepo        : installedFrom repo   : baseSummary     : Powerful interactive shellURL         : http://zsh.sourceforge.net/License     : MITDescription : The zsh shell is a command interpreter usable as an interactive login            : shell and as a shell script command processor.  Zsh resembles the ksh            : shell (the Korn shell), but includes many enhancements.  Zsh supports            : command line editing, built-in spelling correction, programmable            : command completion, shell functions (with autoloading), a history            : mechanism, and more.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以只能通过编译源码的方式安装zsh。</p><ol><li><p>下载最新版源代码。最新版源代码可以在 <code>https://zsh.sourceforge.io/Arc/source.html</code>中获取。</p></li><li><p>安装编译依赖</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install gcc perl-ExtUtils-MakeMaker ncurses-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tar xvf zsh-5.8.tar.xzcd zsh-5.8./configuremake &amp;&amp; make install# 将zsh加入/etc/shellsvim /etc/shells # 添加：/usr/local/bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意将zsh添加到shells中时，要填写正确的zsh路径，因为我在执行./configure的时候没有指定安装的位置，所以默认是/usr/local/bin/zsh，不确定的话，执行 <strong>whereis zsh</strong> 命令查看具体的路径。</p></li><li><p>将当前的shell改成zsh：<code>chsh -s /usr/local/bin/zsh </code></p></li></ol><p>此时，zsh最新版就安装完成了。</p><p>安装 <code>oh-my-zsh</code>：<code>sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></p><p>安装powerlvel10k：<code>git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k</code></p><p>Set <code>ZSH_THEME="powerlevel10k/powerlevel10k"</code> in <code>~/.zshrc</code>.</p><h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><p>安装 <code>sudo yum install tmux -y</code></p><p>该配置文件需要tmux2.3以上。</p><p>CentOS7上安装较新版本的Tmux可以使用 <code>sh -c "$(curl -fsSL https://gitee.com/lxyoucan/tools/raw/master/centos7/tmux/tmuxinstall.sh)"</code></p><p>设置配置文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cd$ git clone https://github.com/gpakosz/.tmux.git$ ln -s -f .tmux/.tmux.conf$ cp .tmux/.tmux.conf.local .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装VIM8"><a href="#安装VIM8" class="headerlink" title="安装VIM8"></a>安装VIM8</h2><p>直接使用一键化脚本即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/chxuan/vimplus.git ~/.vimpluscd ~/.vimplus./install.sh //不加sudo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>由于国内的特殊网络环境，云服务器在访问github时会出现无法访问的情况。此时需要设置代理才能clone远程仓库。这里推荐使用<a href="https://github.com/v2rayA/v2rayA">v2rayA</a>。</p><h2 id="限制SSH连接"><a href="#限制SSH连接" class="headerlink" title="限制SSH连接"></a>限制SSH连接</h2><p>实现ssh服务中的root只能通过指定ip的服务器进行登陆</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改/etc/ssh/sshd_config# 这里实现了允许root和king通过ssh登陆，其中root需要通过指定IP来访问AllowUsers king root@ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="RAR解压"><a href="#RAR解压" class="headerlink" title="RAR解压"></a>RAR解压</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载解压程序wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz# 解压tar -xf rarlinux-x64-5.3.0.tar.gz# 编译cd rar &amp;&amp; sudo make# 解压文件rar x &lt;rar文件名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新Host"><a href="#更新Host" class="headerlink" title="更新Host"></a>更新Host</h2><p>因为某些网络原因,Github的解析十分不稳定,需要定时更新Host,可以创建crontab定时任务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat /etc/hosts.bak &gt; /etc/hosts &amp;&amp; curl https://gitee.com/ineo6/hosts/raw/master/hosts &gt;&gt; /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="psmisc"><a href="#psmisc" class="headerlink" title="psmisc"></a>psmisc</h2><p>安装之后可以通过pstree -halps 进程号，查到docker在宿主机中的进程。</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go学习</title>
      <link href="/2019/12/01/cheng-xu-she-ji/go-xue-xi/"/>
      <url>/2019/12/01/cheng-xu-she-ji/go-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Go语言之父为罗伯特·格瑞史莫、罗伯·派克和肯·汤普逊.</p><ul><li>Rob Pike（罗伯·派克），早期贝尔实验室成员，参与了 Plan9 操作系统、C 编译器以及多种语言编译器的设计和实现，UTF-8 发明人之一。​</li><li>Robert Griesemer（罗伯特·格瑞史莫），Java 的 HotSpot 虚拟机和 Chrome 浏览器的 JavaScript V8 引擎的设计者之一。​</li><li>Ken Thompson（肯·汤普逊），图灵奖得主、Unix 之父以及 C 语言的发明人之一。</li></ul><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><ul><li>使用c++构建软件给程序员造成严重的心智负担​</li><li>使用c++编写大型项目,难以忍受过长的编译时间​</li><li>c++对底层硬件的依赖以及编写并发/并行程序时的复杂性</li></ul><p>三位大佬决定开发一门新的语言,解决c++在工程上的痛点打造一个以编译速度快,心智负担小,简洁的并行编程为目标的新语言。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从csp主要继承channel的概念</li><li>从c主要继承基本的语法</li><li>从Pascal主要继承包管理特性</li><li>创造了defer,切片,map以及原生并发等特性</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/Go%E5%AD%A6%E4%B9%A0/go%E7%89%B9%E6%80%A7.png" alt="go特性.png"></p><h3 id="设计哲学"><a href="#设计哲学" class="headerlink" title="设计哲学"></a>设计哲学</h3><h4 id="简单-少即是多"><a href="#简单-少即是多" class="headerlink" title="简单-少即是多"></a>简单-少即是多</h4><ol><li>每种问题提供尽量少的答案</li><li>隐藏复杂度在语言本身的设计之中</li><li>对接口保永远的兼容</li></ol><h4 id="组合-正交解耦"><a href="#组合-正交解耦" class="headerlink" title="组合-正交解耦"></a>组合-正交解耦</h4><ol><li>通过类型嵌入,实现数据和算法的复用</li><li>通过接口,实现两个实体之间的解耦</li><li>通过channel,解耦两个并发实体之间的数据处理依赖</li></ol><h4 id="并发-原生并发"><a href="#并发-原生并发" class="headerlink" title="并发-原生并发"></a>并发-原生并发</h4><ol><li>在语法层面提供一些关键字来实现并发程序的设计</li></ol><h4 id="实用-面向工程"><a href="#实用-面向工程" class="headerlink" title="实用-面向工程"></a>实用-面向工程</h4><ol><li>实用且好用的标准库与工具链,似的开发,测试,调试,部署,运维等环节非常方便快捷</li><li>非面向过程也非面向过程</li><li>快速的写出简洁的代码却不易阅读</li></ol><h2 id="Go语言的执行、编译"><a href="#Go语言的执行、编译" class="headerlink" title="Go语言的执行、编译"></a>Go语言的执行、编译</h2><h3 id="go文件的执行"><a href="#go文件的执行" class="headerlink" title="go文件的执行"></a>go文件的执行</h3><p>go语言可以直接使用<code>go run + 相应go文件名</code>。</p><p><strong>go语言原生支持Unicode，可以处理全世界任何语言的文本。</strong></p><h3 id="go文件的编译"><a href="#go文件的编译" class="headerlink" title="go文件的编译"></a>go文件的编译</h3><p><code>go build + 相应go文件名</code>，生成相应二进制可执行文件，且是静态编译，无需担心在系统库更新的时候冲突。</p><hr><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><code>main</code>定义了一个独立可执行的程序，而不是一个库。main函数是整个程序执行时的入口函数。</p><table><thead><tr><th align="center">函数</th><th align="center">变量</th><th align="center">常量</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">func</td><td align="center">var</td><td align="center">const</td><td align="center">type</td></tr></tbody></table><p><strong>go不需要语句或者声明的末尾添加分号，除非一行上有多条语句。编译器主动将特定符号后的换行符转换为分号。换行的位置会影响go代码的正确解析。</strong></p><p>不允许使用无用的局部变量。可以使用空标识符:<code>_</code>。用于语法需要变量名，但是程序逻辑不需要。</p><p>空表示<code>nil</code>。</p><p>函数和包级别的变量可以任意顺序声明，不影响调用。CPP需要提前申明。</p><p>go中的传值类似C++的引用传递。指针是另一个指针，但是内存指向同一块区域。</p><p>常量的值只能是数字、字符串、固定的布尔值。<code>const(变量名=值)</code>。</p><p>GO最有意思并且最新奇的特性就是对并发编程的支持。</p><p>Go中的指针类似C。但是不能对指针进行加减操作。<code>*p++</code>只改变变量的值，不改变指针值。</p><p>使用<code>godoc</code>工具可以在本地命令行阅读标准库中的文档。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go doc package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>golang.org/x/tools/cmd/goimports</code>导入工具，它可以根据需要自动添加或删除导入的包。</p><p>函数的右小括弧，即函数传参数是的参数列表的最后一位的右括号，可以另起一行缩进，并在最后一个参数的后面加上一个逗号，防止编译器在行尾自动插入分号而导致编译错误。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">函数名<span class="token punctuation">(</span>    变量<span class="token number">1</span>，变量<span class="token number">2</span>，    变量<span class="token number">3</span>，<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自增自减是语句，不能像C++中那样使用。且符号只能放在最后。</strong><code>x=i++</code>这样的语法是错误的。</p><h3 id="定义变量和结构"><a href="#定义变量和结构" class="headerlink" title="定义变量和结构"></a>定义变量和结构</h3><p>变量没有显示初始化，则隐式初始化。数值为0，字符串为空。</p><p>var变量的时候，支持不同类型赋值，其赋值顺序为从左到右。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> b<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token string">"four"</span> <span class="token comment">// bool, float64, string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="定义、创建变量"><a href="#定义、创建变量" class="headerlink" title="定义、创建变量"></a>定义、创建变量</h4><p><code>var 变量名1,变量名2 变量类型</code></p><p>变量定义的几种等价方式</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">""</span>  <span class="token comment">//只能用在函数内部，不能用于包变量</span><span class="token keyword">var</span> s <span class="token builtin">string</span>  <span class="token comment">//依赖字符串的默认初始化零值机制</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment">//用于多变量声明</span><span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment">//多变量多类型时使用</span><span class="token keyword">var</span> <span class="token punctuation">(</span> <span class="token comment">//多个包变量的声明</span> a<span class="token operator">=</span><span class="token string">""</span> b<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简短变量声明对于已经在相同语法域中声明过的变量，简短变量声明只进行赋值操作。</p><p><strong>简短变量声明语句中必须至少要声明一个新的变量</strong>。</p><p><strong>简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量</strong>。</p><p><strong>包级变量的初始化顺序并不完全取决于变量的声明顺序，而取决于调用关系。</strong></p><h4 id="定义struct"><a href="#定义struct" class="headerlink" title="定义struct"></a>定义struct</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> 类型名 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    数据元素 类型<span class="token punctuation">}</span><span class="token keyword">var</span> 变量名 类型名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>命名：一个名字以一个字母或者下划线开头。后面跟任意数量的字母、数字或下划线。大小写敏感。</p><p>在函数外部定义的包级名字，是以首字母大写命名的，则它将是导出的，可以被外部的包访问。包本身的名字一般总是用小写字母。</p><p>让一些聚合类型的零值具有意义，保证不管任何类型的变量总是有一个合理有效的零值状态。</p><p>在包级别声明的变量会在<code>main</code>入口函数执行前完成初始化，局部变量将在声明语句被执行到的时候完成初始化。</p><p>定义变量有两个方式：<code>var</code>和简短变量声明(<code>:=表达式</code>)。</p><p>简短变量声明被广泛用于大部分的局部变量的声明和初始化。 var形式的声明语句往往是用于需要显式指定变量类型地方， 或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</p><p>简短变量声明语句中必须<strong>至少</strong>要声明一个新的变量。其中可以有不是全部的变量之前声明过，这里只是简单的赋值。</p><p>简短变量声明语句只有对已经在同级语法域声明过的变量才和赋值操作语句等价。变量是在外部语法域声明的，那么简短变量声明语句将在当前语法域重新声明一个新的变量。</p><h4 id="new函数"><a href="#new函数" class="headerlink" title="new函数"></a>new函数</h4><p>使用new函数创建变量，表达式<code>new(类型名)</code>将创建一个T型的匿名变量，初始化为相应类型的零值，返回变量地址，返回类型为相应类型的指针。</p><p>类型的大小为0，有可能地址相同，例如<code>struct{}</code>和<code>[0]int</code>。</p><p><em>请谨慎使用大小为0的类型。如果类型的大小为0，可能导致Go语言的自动垃圾回收机制有不同的行为。具体请查看<code>runtime.SetFinalizer</code>函数相关文档</em></p><p>new函数只是一个预定义的函数，并不是一个关键字。可以将new名字重新定义为别的类型。<strong>但是这样就会导致重定义new的空间内无法使用new函数。</strong></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//读入一行，并移除行末的换行符。读入一行返回true，否则false</span>input<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取一行输入。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><code>fmt</code>package包含格式化输出、接收输入的函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//格式化输出</span>fmt<span class="token punctuation">.</span><span class="token function">PrintIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//输出完后换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">%d</th><th align="center">十进制整数</th></tr></thead><tbody><tr><td align="center">%x,%o,%b</td><td align="center">十六进制，八进制，二进制整数</td></tr><tr><td align="center">%f,%g,%e</td><td align="center">浮点数：3.141593 3.141592653589793 3.141593e+00</td></tr><tr><td align="center">%t</td><td align="center">bool</td></tr><tr><td align="center">%c</td><td align="center">Unicode码点</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%q</td><td align="center">带双引号或单引号的字符或字符串</td></tr><tr><td align="center">%v</td><td align="center">变量的自然形式</td></tr><tr><td align="center">%T</td><td align="center">变量的类型</td></tr><tr><td align="center">%%</td><td align="center">字面上的百分号标志</td></tr></tbody></table><p>通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的<code>[1]</code>这样的副词告诉Printf函数再一次使用第一个操作数。%后的#副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>使用<code>//</code>进行注释。</p><h3 id="包和文件"><a href="#包和文件" class="headerlink" title="包和文件"></a>包和文件</h3><p><strong>必须导入需要的package，缺少了必要的package或者导入了不需要的package，程序都无法编译通过。</strong></p><p><code>import</code>语句必须要跟在文件的<code>package</code>声明之后。</p><p>当import的一个包路径包含多个单词时，通常只用最后的那个单词表示即可。</p><p>go语言通过package管理。一个package由单个目录下的一个或者多个.go源码组成。</p><p>每个go都以一条package声明语句开始。表明文件属于哪一个package。</p><p>每个包都对应一个独立的名字空间，要在外部使用函数，必须要显式声明包名。</p><p>如果一个名字是大写字母开头的，那么该名字是导出的。</p><p>包级别的常量名用大写字母开头。</p><p>每个源文件的包声明前的注释是包注释。通常，包注释的第一句是包功能的概要说明。如果一个文件有多个包注释，当前的文档工具会根据源文件名的先后顺序将它们链接成一个包注释。包注释很大时，通常会放到一个独立的doc.go文件中。</p><p>每个包都有一个全局唯一的导入路径。由构建工具进行解释。一个导入路径代表一个目录中一个或者多个Go源文件。</p><p>包名不一定要唯一。一个包的名字往往和包的导入路径的最后一个字段相同。</p><p>包的初始化首先解决包级变量的依赖顺序，然后按照包级变量声明出现的顺序依次进行初始化。如果包中含有多个源代码文件，它们将按照发给编译器的顺序进行初始化。Go语言的构建工具会首先将.go文件根据文件名排序，然后依次调用编译器编译。</p><p>包级别声明的变量，有初始化表达式用初始化表达式，没有的，可以创建<code>init</code>函数进行初始化工作。每个文件可以包含多个<code>init</code>函数。</p><p><code>init</code>函数不能被调用或者引用。在每个文件中的<code>init</code>初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。</p><p>每个包只会被初始化一次。</p><p>初始化工作自下而上进行，main包最后被初始化。确保在main函数执行之前，所有依赖的包都已经完成了初始化工作。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>注意<strong>左大括号必须要和post语句在同一行</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span>初始值<span class="token punctuation">;</span>条件<span class="token punctuation">;</span>post <span class="token punctuation">{</span>    <span class="token comment">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="range遍历"><a href="#range遍历" class="headerlink" title="range遍历"></a>range遍历</h4><p><strong>python中的range是函数，而go中的range是关键词。</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token keyword">range</span> 数组<span class="token punctuation">{</span>    <span class="token comment">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>range每次返回两个数值：索引和相应元素值，并强制处理。</p><h3 id="选择判断"><a href="#选择判断" class="headerlink" title="选择判断"></a>选择判断</h3><p><code>if</code>可以在比较的时候进行简单语句的赋值行为，以下代码等价：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> err<span class="token operator">:=</span>r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">//等价于</span>err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Go语言中条件语句不需要圆括号，但是分支中必须有大括号。</strong></p><p>Go语言不需要显式的在每一个<code>case</code>后写<code>break</code>，语言默认执行完<code>case</code>后的逻辑语句自动退出。如果需要<em>相邻几个<code>case</code>都执行同一逻辑时，需要自己显式的写上<code>fallthrough</code>来覆盖这种默认行为。</em></p><p>switch不带操作对象时称为无tag switch，默认用true值代替， 然后将每个case的表达式和true值进行比较。等价switch true。</p><p><code>continue</code>和<code>break</code>可以使用在<code>for循环</code>，<code>switch</code>，<code>select</code>中。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Go中返回函数中局部变量的地址是安全的。</p><p>一个变量的有效周期只取决于是否可达。</p><p>对于在包一级声明的变量来说，变量的生命周期和整个程序的运行周期是一致的。局部变量的生命周期是动态的。每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。</p><p>编译器自动选择在栈还是堆上分配局部变量的存储空间，不取决于是var还是new，这点不同于C++。</p><p>当局部变量在函数退出后，依然可以通过包一级的变量找到，则称局部变量从函数中逃逸了。逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</p><p>如果将执行那个短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收，从而影响程序的性能.</p><h3 id="元组赋值"><a href="#元组赋值" class="headerlink" title="元组赋值"></a>元组赋值</h3><p>元组赋值允许同时更新多个变量的值。赋值前，赋值语句右边的所有表达式会先进行求值，然后同意更新左边对应的变量值。例如，两值互换。</p><p>nil可以赋值给任何指针或引用类型的变量。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>一个类型声明语句创建了一个新的类型名称。即使和现有类型具有相同的底层结构，新命名的类型提供了一个方法，用来分隔不同概念的类型，它们底层类型相同也不兼容。</p><p>创造新的类型：<code>type 类型名字 底层类型</code>。</p><p>类型声明语句一般出现在包一级。<strong>如果新创建的类型名字的首字符大写，则在外部包也可以使用</strong>。</p><p>对于中文汉字，Unicode标志作为小写处理。因此中文的命名默认不能导出。</p><p>对于每一个类型T，都有一个对应的类型转换操作<code>T(x)</code>。如果T是指针类型，可能需要用小括弧包装T。前提是<strong>两个类型的底层基础类型相同或二者都是指向相同底层结构的指针类型</strong>。</p><p>比较运算符可以用来比较一个命名类型的变量和另一个有着相同类型的变量，或有着相同底层类型的<em>未命名</em>类型的值之间进行比较。如果这两个值有着不同的类型，则不能直接比较。</p><p>自定义类型的函数定义格式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>x 自定义类型<span class="token punctuation">)</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> 返回类型<span class="token punctuation">{</span>    <span class="token comment">//pass</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域不同于生命周期。声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时概念。</p><h3 id="一些常用的函数介绍"><a href="#一些常用的函数介绍" class="headerlink" title="一些常用的函数介绍"></a>一些常用的函数介绍</h3><p>os包提供一些与操作系统交互的函数和变量。程序的命令行参数可以通过os包的Args变量获得，即：<code>os.Args</code>，返回字符串切片，语法类似python，区间左闭右开。<code>os.Args[0]</code>为命令本身名字。省略默认传入0或len()。<strong>os.Args因为第一个参数为命令本身，因此其长度会在给定参数的数量上加一</strong></p><p><code>gofmt</code>按照字母顺序对包名进行排列，从而格式化。</p><p><strong>在进行大量字符串拼接的时候使用运算符+会导致执行的代价高昂，推荐使用strings包的Join函数。</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>字符串数组<span class="token punctuation">,</span>字符串拼接时的间隔符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>map</code>存储了键值对的集合，对集合元素，提供常数时间的存取操作。键的选择只要能用<code>==</code>比较就行。值也可以是任意类型。例如:<code>map[键类型]值类型</code>。<code>make</code>函数创建空map，形如：<code>make(map[string]int)</code>。</p><p>map的迭代顺序不确定。</p><p>系统文件的指针：<code>*os.File</code>。</p><p>系统打开文件：<code>os.Open(路径)</code>，返回的第一个值是被打开的文件，其后被<code>Scanner</code>读取，返回的第二个值是内置的<code>error</code>类型的值。</p><p>文件关闭使用<code>文件.Close()</code>函数。</p><p><code>io/ioutil</code>包中的<code>ReadFile(文件名)</code>函数读取指定文件的全部内容，返回的第一个参数是数据(byte slice)，返回的第二个是错误信息。<code>string.Split(string(数据),分割标志位)</code>函数将字符串分割成子串的切片。</p><p>http包：<code>net/http</code>。</p><p><code>http.Get(url地址)</code>函数创建HTTP请求的函数。返回两个参数，包含访问得到的请求结果的结构体，是一个可读的服务器响应流。第二个是错误信息。<code>ioutil.ReadAll(数据)</code>可以读取返回的数据的相应信息，以及可能发生的错误信息。相应的流用相应的<code>Close()</code>函数进行关闭。</p><p>程序出现错误时使用<code>os.Exit(1)</code>。</p><p>获取现在系统时间，使用包<code>time</code>，<code>time.Now()</code>。</p><p><code>ioutil.Discard</code>输出流是一个“垃圾桶”，可以向里面写入不需要的数据。</p><p><code>io.Copy(拷贝目的地,拷贝源)</code>返回两个参数，第一个字节大小，第二个是错误信息。</p><p>在编写命令行程序时，调用<code>flag.变量</code>函数创建可选的命令行参数，例如<code>flag.Bool</code>或<code>flag.String</code>。有三个参数属性：1.命令行标志参数的名字。2.该标志位的默认值。3.该标志参数的对应的描述信息。返回指向对应命令行标志参数变量的指针，指向的是是否设置参数的bool或者替换的字符串。需要加上<code>*</code>间接引用。</p><p><em>在使用标志参数对应的变量之前先调用flag.Parse函数，用于更新每个标志参数对应变量的值(之前是默认值)。</em>解析命令行参数时遇到错误，默认打印相关的提示信息。然后调用<code>os.Exit(2)</code>终止程序。</p><p><code>flag.Args()</code>获取非标志参数的普通命令行参数，返回一个字符串类型的slice。</p><p><code>strconv.ParseFloat()</code>函数可以进行字符串对浮点型数据的转换，还有类似的字符串转换函数在<code>strconv</code>包中。</p><p><code>unicode</code>包提供了诸多处理rune字符相关功能的函数。</p><p><code>unicode/utf8</code>包提供了用于rune字符序列的UTF-8编码和解码的功能。</p><p><code>utf8.RuneCountInString(变量名)</code>返回字符串的Unicode字符数。</p><p><code>utf8.DecodeRuneInString(变量名)</code>返回两个值，第一个是对应字符本身，另一个是对应字符采用UTF8编码后的编码字节数目。</p><p><code>strings.LastIndex(字符串,需要寻找的字符串)</code>返回相应字符串的索引，未找到返回-1。</p><p>将一个整数转化为字符串，一种是用<code>fmt.Sprintf</code>返回一个格式化的字符串；另一个是用<code>strconv.Itoa()</code>。</p><p><code>FormatInt</code>和<code>FormatUint</code>函数可以用不同进制来格式化数字。</p><p><code>fmt.Sprintf()</code>函数的%b、%d、%o、%x等参数提供的功能比strconv包的Format函数方便很多，还可以添加额外信息。</p><p>将字符串解析为整数，相应的使用strconv包的Atoi或ParseInt函数，用于解析无符号整数的ParseUint函数。ParseInt函数的第三个参数用于制定整数的大小，16表示int16,0表示int。</p><p>使用<code>fmt.Scanf</code>解析输入的字符串和数字。</p><h3 id="垃圾回收的基本思路"><a href="#垃圾回收的基本思路" class="headerlink" title="垃圾回收的基本思路"></a>垃圾回收的基本思路</h3><p>从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，则说明该变量是不可达的。即，它的存在并不会影响程序后续的计算结果。</p><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><p>$$数据类型\begin{cases}\text{基础类型}\begin{cases}\text{数字}\\text{字符串}\\text{布尔值}\end{cases}\\text{复合类型}\begin{cases}\text{结构体}\\text{数组}\end{cases}\\text{引用类型}\begin{cases}\text{指针}\\text{切片}\\text{字典}\\text{函数}\\text{通道}\end{cases}\\text{接口类型}\end{cases}$$</p><ul><li>bool,string</li><li>(u)int,(u)int8,(u)int16,(u)int32,(u)int64,uintptr</li><li>byte,rune(32位，四字节，避免了c语言中char只有一字节导致的问题)</li><li>float32,float64,complex64,com</li></ul><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table><thead><tr><th>int8</th><th>int16</th><th>int32</th><th align="center">int64</th></tr></thead><tbody><tr><td>uint8</td><td>uint16</td><td>uint32</td><td align="center">uint64</td></tr></tbody></table><p>int和uint类型为32bit或者64bit。根据编译器的不同以及cpu平台的不同，并不一定。</p><p>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。可以相互使用。</p><p>byte和uint8是等价类型。byte类型一般强调数值是一个原始的数据而不是小的整数。</p><p>uintptr是无符号的整数类型，没有指定具体的bit大小，但是足以容乃指针。底层编程用。</p><p>一个n-bit的有符号数的值域为$-2^{n-1}$到$2^{n-1}-1$。</p><p>一个n-bit的无符号数的值域为0到$2^{n}-1$。</p><p>二元运算符，在同一优先级下，使用左优先结合规则。也可以明确使用括号表示优先顺序。</p><p>%取模运算符的符号和被取模数的符号总是一致。</p><table><thead><tr><th align="center">&amp;</th><th align="center">|</th><th align="center">^</th><th align="center">&amp;^</th><th align="center">&lt;&lt;</th><th align="center">&gt;&gt;</th></tr></thead><tbody><tr><td align="center">AND</td><td align="center">OR</td><td align="center">XOR</td><td align="center">AND NOT</td><td align="center">左移</td><td align="center">右移</td></tr></tbody></table><p>在遇到的每种类型，需要保证规则的一致性。</p><p>移位操作bit部分必须是无符号数。</p><p>左/右移运算用零填充右边空缺的bit位。</p><p>有符号数的右移运算会使用符号位的值填充左边空缺的bit位。</p><p>len函数返回值为int有符号类型，这样便于循环时，作为索引。否则循环语句使用–时，无符号数会直接变成最大的整数。</p><p><strong>数据类型之间的转换不存在隐式转换，只能显式转换。</strong></p><p>类型强制转换:<code>类型(需转换的变量名)</code>。</p><p>任何大小的整数字面值都可以用以0来头的八进制书写，或者以0x或者0X开头的十六进制格式书写。十六进制数字可以用大写或者小写字母。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>GO语言提供了两种精度的浮点数：<code>float32</code>(6个十进制的精度)和<code>float64</code>(15个十进制的精度)。</p><p>常量<code>math.MaxFloat32</code>表示float32能表示的最大数值，大约是3.4e38。</p><p>wi常量<code>math.MaxFloat64</code>表示float64能表示的最大数值，大约是1.8e308。</p><p><strong>通常优先使用float64，float32的累计计算误差易扩散，且能表示的正整数不是很大，当整数大于23bit能表示的范围时，float32的表示将出现误差。</strong>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> f <span class="token builtin">float32</span><span class="token operator">=</span><span class="token number">16777216</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>f<span class="token operator">==</span>f<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>小数点前后的数字都有可能被省略。所以<strong>很大很小的数最好使用科学计数法，通过e或者E来指定指数部分。</strong></p><p>math包中提供IEEE754浮点数标准中定义的特殊值：正无穷和负无穷以及NaN。</p><p><code>math.IsInf(检测数,int值)</code>：检查是否是无穷数，int值Wie正数，表示检测其是否是一个正无穷，同理负数，0表示是否是无穷，不论正负。</p><p><code>math.IsNaN</code>：检测一个数是否是非数。</p><p><code>math.NaN</code>：返回一个非数对应的值。可以用其表示一个非法的值，但是测试一个结果是否非数则<em>充满风险</em>。NaN既不大于自己，也不小于自己，也不等于自己。</p><p>浮点数的相等比较是<em>危险的</em>，需要小心处理精度问题。</p><p><strong>一个函数返回的浮点数结果可能失败，最好做单独的标志报告。</strong>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">float64</span><span class="token punctuation">,</span>ok <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token keyword">if</span> failed <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Go语言提供两种精度的复数类型：<code>complex64</code>和<code>complex128</code>。对应float。内建的real和imag函数分别返回复数的实部和虚部。</p><p>复数的创建方法：<code>complex(实部,虚部)</code>。</p><p>如果一个浮点数或一个十进制整数后面有一个i，则构成一个实部为0的虚数。</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>两种值：true和false。</p><p>&amp;&amp;的优先级高于ll。(&amp;&amp;对应逻辑乘法，||对应逻辑加法)。</p><p>字符的检验代码可以如下编写：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token char">'a'</span><span class="token operator">&lt;=</span>c <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token operator">||</span><span class="token char">'A'</span><span class="token operator">&lt;=</span>c<span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token operator">||</span><span class="token char">'0'</span><span class="token operator">&lt;=</span>c<span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'9'</span><span class="token punctuation">{</span>    <span class="token comment">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值不会隐式转换为数字值0或者1，反之亦然。必须使用一个显式的if语句辅助转换。或者自己包装成一个函数，如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">btoi</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> b<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">itob</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>一个字符串是一个<strong>不可改变</strong>的字节序列。</p><p>字符串可以包含任意数据，包括byte值0。</p><p>文本字符串通常被解释为采用UTF8编码的Unicode码点(rune)序列。</p><p>使用<code>utf8.RuneCountInString</code>获取字符数量。使用<code>[]byte</code>获取字节。</p><p>len函数返回一个字符串中的字节数目，<strong>而不是字符数</strong>，字节数目大于等于字节数目。</p><p>索引操作[i]返回第i个字节的字节值。</p><p>超出索引范围会导致panic异常。</p><p><strong>第i个字节并不一定是字符串的第i个字节，因为对于非ASCII字符的UTF8编码会要两个或多个字节。</strong></p><p>支持切片操作。</p><p>字符串进行运算符比较，比较结果是字符串自然编码的顺序。</p><p>尝试修改字符内部数据的操作是被禁止的。</p><p>不变形保证了两个字符串共享相同的底层数据的话是安全的，复制任意字符串代价是廉价的，字符串和对应的子字符串切片的操作也可以安全的共享相同的内存，这两种情况都没有必要分配新的内存。</p><table><thead><tr><th>转义符</th><th>含义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr></tbody></table><p>一个十六进制的转义形式是<code>\xhh</code>，两个hh表示十六进制数字，不区分大小写。</p><p>一个八进制的转义形式是<code>\ooo</code>，o表示八进制数字，不能超过\377。</p><p>相应的十进制的范围应该是255。</p><p>字符串面值形式用``包裹，其中的字符串不进行转义操作。会删除回车保证所有平台上的值都是一样的。(Windows系统会把回车和换行一起放入文本文件中)。常用于编写正则表达式，HTML模板、JSON面值等。</p><p>可以将一个符文序列表示为一个int32序列。这种编码方式叫UTF-32或UCS-4。但是会浪费大量空间</p><p>UTF-8编码的每个符号编码后第一字节的高端bit位用于表示总共有多少编码个字节。UTF-8是变长编码，无法直接通过索引获取指定位置的字符。比较紧凑，完全兼容ASCII编码，可以自动同步，通过向前回溯最多两个字节就能确定当前字符编码的开始字节的位置，是前缀编码，不会出现任何歧义。没有任何字符的编码是其他字符编码的子串，或是其他编码序列的子串。与Unicode码点一致，没有嵌入NUL(0)字节，可以很好的兼容使用NUL作为字符串结尾的编程语言。</p><p>例如：</p><ul><li>0xxxxxxx                                                 runes 0-127</li><li>110xxxxx 10xxxxxx                                  128-2047</li><li>1110xxxx 10xxxxxx 10xxxxxx                  2048-65535</li><li>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  65536-0x10ffff</li></ul><p>对于小于256码点值可以写在一个十六进制转义字节中，但是对于更大的码点则必须使用\u或者\U转义形式。</p><p>判断一个字符串是否是另一个字符串的前缀/后缀：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">==</span>prefix<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">HasSuffix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>suffic <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>suffic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>suffic<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">==</span>suffic<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含子串测试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>substr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>substr<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go语言的range循环在处理字符串的时候，会自动隐式解码UTF8字符串。</p><p>如果遇到一个错误的UTF8编码输入，将会生成一个特殊的Unicode字符<code>\uFFFD</code>，即�。</p><p>UTF8作为交换格式方便，rune序列支持数组索引且方便切割，rune的大小一致。rune序列的长度就是字符的数量，string类型的数量是字符占用的字节空间大小。</p><p>将string转换为rune序列：<code>rune序列名:=[]rune(string类型变量名)</code>。</p><p>构建字符串推荐使用<code>bytes.Buffer</code>。</p><p>[]byte()是一个字节数组，用于保存或者操作字符串数据。</p><p>bytes包提供了Buffer类型用于字节slice的缓存。一个Buffer开始是空的，但随着string、byte或[]byte等类型数据的写入可以动态增长。一个bytes.Buffer变量并不需要初始化，零值也是有效的。</p><p>数组转换成字符串数组：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"bytes"</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">intsToString</span><span class="token punctuation">(</span>values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Bufferbuf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">'['</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v<span class="token operator">:=</span><span class="token keyword">range</span> values<span class="token punctuation">{</span><span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">{</span>buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span>buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">intsToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向bytes.Buffer添加任意字符的UTF8编码时，最好使用bytes.Buffer的WriteRune方法，如果仅仅是写入ASCII字符则可以使用WriteByte方法。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量表达式的值在编译期计算。每种常量的潜在类型都是基础类型。</p><p>形式是：<code>const</code></p><p>可以一次性声明多个常量。语法类似import。</p><p>批量声明常量，除了第一个以外，可以省略常量右边的初始化表达式，其值直接和上一个赋值的结果相同。</p><p>常量声明可以使用iota常量生成器初始化，用以生成一组以相似规则初始化的常量。在一个const声明语句中，在第一个声明的常量所在行iota会被置为0，然后在每一个有常量声明的行加一。类似其他语言的枚举类型。如果有想跳过一个数字，可以写一个<code>-</code>。也可写带有<code>iota</code>的表达式，之后的变量都会按照该表达式进行运算。</p><h4 id="无类型常量"><a href="#无类型常量" class="headerlink" title="无类型常量"></a>无类型常量</h4><p>无类型常量可以作为任意数据类型，可以简单理解为字符替换。</p><p>Go语言中有着无类型常量，编译器为这些没有明确的基础类型的数字常量提供比基础类型更高精度的算数运算，可以认为至少有256bit的运算精度。</p><p>$$无类型常量\begin{cases}无类型的布尔型\无类型的整数\无类型的字符\无类型的浮点数\无类型的复数\无类型的字符串\end{cases}$$</p><p>通过延迟明确常量的具体类型，不仅可以提供更高的运算精度，还可以直接用于更多的表达式而不需要显示的类型转换。</p><p>无类型整数常量转换为int，内存大小不确定。但是无类型浮点数内存大小明确是float64，无类型复数内存大小为complex128。</p><p>当尝试将无类型的常量转为一个接口值时，要依靠它们明确接口对应的动态类型。</p><h3 id="类型申明语句"><a href="#类型申明语句" class="headerlink" title="类型申明语句"></a>类型申明语句</h3><p>语法：<code>type 类型名字 底层类型</code></p><p>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p><p>类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在包外部也可以使用。</p><p>自己创建的类型string方法可以如下申明方式：<code>func (c 类型名字) String() string { return 返回信息字段 }</code></p><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><p>数组是由同构的元素组成。结构体是由异构元素构成。都有着固定内存大小的数据结构。slice和map是动态数据结构，能根据需要进行增长。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>int类型的数组声明：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，数组的每个元素都被初始化为元素类型对应的零值。</p><p>可以用索引位置和值来初始化数组<code>var a [3]int =[3]int {1:2}</code>，此时a有三个元素，a[1]为2,其他为0。</p><p>当数组的长度位置是<code>...</code>时，表明数组的长度是依据初始值的个数来计算的。例如<code>q:=[...]int{1,2,3}</code>。</p><p><strong>数组的长度是数组类型的一部分，不同长度的数组是不同的数组类型。</strong></p><p>可以指定数组中参数的初始化：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment">//定义了一个包含100个元素的r数组，并将第100位元素初始化位-1，其他元素均为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数传递数组时，go传递的是数组的复本。当数组较大时，效率低下且无法修改到数组上。此时可以传入指针。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">zreo</span><span class="token punctuation">(</span>ptr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//下面的代码可以简化为*ptr=[32]byte{}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token keyword">range</span> ptr<span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><p>$slice\begin{cases}指针:指向第一个slice元素对应的底层数组元素的地址，slice的第一个元素不一定是数组的第一个元素\长度:slice中的元素数目，可以用len函数获取\容量:从slice开始位置到底层数据的结尾位置，可以用cap函数获取\end{cases}$</p><p>多个slice可以共享底层数据，引用的数组部分区间可能重叠。</p><p>slice支持切片<code>s[i:j]</code>，$0\leq i\leq j \leq cap(s)$，引用s的从第i个元素开始到第j-1个元素的子序列。i省略的话，默认为0。j省略为len(s)代替。</p><p>切片操作超过cap(s)的上限导致panic异常，超过len(s)表示拓展了slice</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//翻转数组</span><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种将slice元素循环向左旋转n个元素的方法是三次调用reverse反转函数， 第一次是反转开头的n个元素， 然后是反转剩下的元素， 最后是反转整个slice的元素。 （ 如果是向右循环旋转，则将第三个函数调用移到第一个调用位置就可以了。 ）</p><p>数组能比较，slice不能比较。slice和数组在申明上的区别在于没有指明数组长度。</p><p>标准库提供了高度优化的bytes.Equal函数来判断两个字节型slice是否相等（ []byte）</p><p>slice唯一合法的比较是与nil进行比较。一个零值slice为nil，其没有底层数组，长度和容量为0。但是也有非nil值的slice长度和容量为0.</p><p>可以使用<code>[]int(nil)</code>类型转换表达式生成一个对应类型slice的nil值。</p><p>检查slice是否为空<code>len(s)==0</code>而不是<code>s==nil</code>。</p><p>所有go函数应该以相同的方式对待nil值的slice和0长度的slice。</p><p><code>make</code>函数创建一个指定元素类型、长度和容量的slice。容量可以省略，默认等于长度。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token comment">//same as make([]T,cap)[:len]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>append(slice名，需要添加的值)</code>向slice中添加元素。添加元素时如果超越cap，系统会重新分配更大的底层数组。</p><p>由于值传递的关系，必须接收append的返回值。</p><p><code>copy(slice名，拷贝源)</code></p><p>删除slice中的元素可以使用如下语法<code>s2=append(s2[:3],s2[4:]...)</code>。<code>...</code>表示这里是可变长度，不能省去。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>map</code>的声明如下:<code>map[K]V</code>，复合<code>map</code>如：<code>map[K1]map[K2]V</code>。如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">m<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>map</code>是无序的。</p><p><code>map</code>中的value不可以通过取地址获取，以避免因为map扩容导致的地址迁移。</p><p><code>map</code>中数据的返回是无序的，如果需要按照某种顺序输出，只能在外层将key进行排序后进行输出。</p><p><strong><code>map</code>中没有的key对应的value是value类型的初始值。相应取值返回的第二个参数是false，如果有返回true。</strong></p><p><code>delete(map名，key值)</code>删除元素。</p><p><code>map</code>使用哈希表，key必须可以比较。除了<code>slice,map,function的内建类型</code>都可以作为key。<code>stuct</code>不包含上述字段也可作为key。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>go的结构体没有构造函数，一般可以直接生成。如果一定要用函数进行构造，可以自己定义一个工厂函数，返回一个局部地址，但是不会出错。</p><p>针对函数体的函数形式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>go中的函数传递都是值传递，所以想对结构体中的数据进行写操作数时，需要传入的指针，而不能是值。</strong>只有使用指针才可以改变结构内容。</p><p>当改变内容必须使用指针接收者，结构过大也考虑指针接收者，如果有指针接收者，最好都是指针接收者，保持一致性。</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h3 id="文本和HTML模板"><a href="#文本和HTML模板" class="headerlink" title="文本和HTML模板"></a>文本和HTML模板</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>go的函数可以返回两个值。返回值可以命名，这样可以直接写一个<code>return</code>就行，不用再写返回变量名，但是可读性差。短函数可以用。</p><p>函数可以作为参数传入函数。func 函数名_1(函数名_2 func(参数，参数)类型)</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>使用者来定义接口。</p><h2 id="包和工具"><a href="#包和工具" class="headerlink" title="包和工具"></a>包和工具</h2><p><code>go list | wc -l</code>查看标准包的具体数目。</p><p>Go语言的开源程序包可以在<a href="http://godoc.org检索./">http://godoc.org检索。</a></p><p>名字一般使用CamelCase。</p><p>首字母大写表示<code>public</code>，首字母小写表示<code>private</code>。</p><p>每个目录一个包，main包包含可执行入口。</p><p>为结构定义的方法必须放在同一个包内。可以是不同的文件。</p><p>包就是一个目录，一个目录就是一个包，包名可以不和目录名相同，但是一个目录下只能有一个包。</p><p>go扩充系统类型或他人的类型使用两种方法：<strong>定义别名或使用组合</strong></p><p>使用组合就是创建一个新的结构体，其中包含需要拓展的结构体指针作为数据成员。将结构体中的数据提取出来，创建为一个新的结构体，并对其进行操作。</p><p>有些go的第三方包因为国内网络环境的原因影响，可以使用第三方工具进行下载，而不是使用<code>go get</code>。方式如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go get -v github.com/gpmgo/gopmgopm get -u -g -v 包的地址go install 包地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Goroutines和Channels"><a href="#Goroutines和Channels" class="headerlink" title="Goroutines和Channels"></a>Goroutines和Channels</h2><p><code>goroutine</code>是一种函数的并发执行方式，<code>channel</code>在<code>goroutine</code>之间进行参数传递。</p><p><code>main</code>函数本身运行在一个<code>goroutine</code>中。</p><p><code>go 函数名(参数)</code>表示创建一个新的<code>goroutine</code>，并在新的<code>goroutine</code>中运行这个函数。</p><p><code>make(chan 传递的参数类型)</code>表示创建一个指定类型的<code>channel</code>。</p><p>当一个<code>goroutine</code>尝试在一个<code>channel</code>上做<code>send</code>或者<code>receive</code>操作时，这个<code>goroutine</code>会阻塞在调用处，直至另一个<code>goroutine</code>往这个<code>channel</code>里写入或者接收值，这样两个<code>goroutine</code>才会继续执行<code>channel</code>操作之后的逻辑。</p><p>每一个<code>fetch</code>函数往<code>channel</code>中输入数据(ch&lt;-expression)，主函数接收<code>channel</code>中的数值(&lt;-ch)。</p><h3 id="声明共享变量"><a href="#声明共享变量" class="headerlink" title="声明共享变量"></a>声明共享变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutexmu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//操作</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于共享变量的并发"><a href="#基于共享变量的并发" class="headerlink" title="基于共享变量的并发"></a>基于共享变量的并发</h2><h2 id="包和工具-1"><a href="#包和工具-1" class="headerlink" title="包和工具"></a>包和工具</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h2 id="底层编程"><a href="#底层编程" class="headerlink" title="底层编程"></a>底层编程</h2><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>Go语言很特别，没有对象，没有继承多态，没有泛型，没有try/catch。相反，有接口，函数式编程，CSP并发模型(goroutine+channel)。</p><p><code>go</code>语言仅支持封装，不支持继承和多态。没有<code>class</code>只有<code>struct</code>。面向对象使用接口来实现。</p><p><code>GOROOT</code>表示源码包所在路径。</p><p><code>GOPATH</code>表示开发者Go项目的默认路径。</p><h3 id="依赖包下载网络配置"><a href="#依赖包下载网络配置" class="headerlink" title="依赖包下载网络配置"></a>依赖包下载网络配置</h3><p>由于国内特殊的网络环境，Go模块可能无法下载，但可以通过模块代理进行下载。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者基于系统的环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 一次性$ export GO111MODULE=on$ export GOPROXY=https://goproxy.cn# 永久$ echo "export GO111MODULE=on" &gt;&gt; ~/.profile$ echo "export GOPROXY=https://goproxy.cn" &gt;&gt; ~/.profile$ source ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>.profile</code>文件可以改成<code>.zshrc</code>。</p><h3 id="Linux安装Go"><a href="#Linux安装Go" class="headerlink" title="Linux安装Go"></a>Linux安装Go</h3><ol><li><p>去<a href="https://golang.org/dl/">官网</a>下载最新的Go安装包。</p></li><li><p><code>tar -zxvf &lt;tar.gz包&gt; -C /usr/local</code>该命令会在<code>/usr/local</code>路径下生成go文件夹</p></li><li><p><code>sudo mkdir /usr/local/gopath &amp;&amp; sudo chmod 777 /usr/local/gopath</code>这里存放go项目中的依赖</p></li><li><p>修改环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># sudo vi /etc/profile export GOROOT=/usr/local/go export GOPATH=/usr/local/gopath export PATH=$GOPATH/bin:$GOROOT/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>source /etc/profile</code>生效配置</p></li></ol><h3 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h3><p>在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">程序设计</a>领域， <strong>SOLID</strong>（<strong>单一功能、开闭原则、里氏替换、接口隔离</strong>以及<strong>依赖反转</strong>）是由<a href="https://zh.wikipedia.org/w/index.php?title=Robert_C._Martin&amp;action=edit&amp;redlink=1">罗伯特·C·马丁</a>在21世纪早期[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-metz-presentation-2009-1">1]</a> 引入的<a href="https://zh.wikipedia.org/wiki/%E8%AE%B0%E5%BF%86%E6%9C%AF">记忆术</a><a href="https://zh.wikipedia.org/wiki/%E9%A6%96%E5%AD%97%E6%AF%8D%E7%BC%A9%E7%95%A5%E5%AD%97">首字母缩略字</a>[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-ub-old-web-solid-2">2]</a>[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-ub-solid-3">3]</a>，指代了<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>和<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1">面向对象设计</a>的五个基本原则。当这些原则被一起应用时，它们使得一个<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E5%91%98">程序员</a>开发一个容易进行<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E7%B6%AD%E8%AD%B7">软件维护</a>和扩展的系统变得更加可能。[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-metz-presentation-2009-1">1]</a> SOLID所包含的原则是通过引发编程者进行软件<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>的<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84">代码重构</a>进行软件的<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3">代码异味</a>清扫，从而使得软件清晰可读以及可扩展时可以应用的指南。SOLID被典型的应用在<a href="https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91">测试驱动开发</a>上，并且是<a href="https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">敏捷开发</a>以及<a href="https://zh.wikipedia.org/w/index.php?title=Adaptive_programming&amp;action=edit&amp;redlink=1">自适应软件开发</a>的基本原则的重要组成部分。</p><table><thead><tr><th align="center">首字母</th><th align="center">指代</th><th align="center">概念</th></tr></thead><tbody><tr><td align="center">S</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99">单一功能原则</a></td><td align="center">认为“<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">对象</a>应该仅具有一种单一功能”的概念。</td></tr><tr><td align="center">O</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">开闭原则</a></td><td align="center">认为“软件应该是对于扩展开放的，但是对于修改封闭的”的概念。</td></tr><tr><td align="center">L</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99">里氏替换原则</a></td><td align="center">认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念。参考<a href="https://zh.wikipedia.org/wiki/%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1">契约式设计</a>。</td></tr><tr><td align="center">I</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99">接口隔离原则</a></td><td align="center">认为“多个特定客户端接口要好于一个宽泛用途的接口”[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-martin-design-principles-5">5]</a> 的概念。</td></tr><tr><td align="center">D</td><td align="center"><a href="https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99">依赖反转原则</a></td><td align="center">认为一个方法应该遵从“依赖于抽象而不是一个实例”[<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)#cite_note-martin-design-principles-5">5]</a> 的概念。 <a href="https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">依赖注入</a>是该原则的一种实现方式。</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://gopl.io/">《The Go Programming Language》</a></li><li>维基百科，<a href="https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)">SOLID (面向对象设计)</a>，2021</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sg90舵机控制</title>
      <link href="/2019/12/01/qian-ru-shi/sg90-duo-ji-kong-zhi/"/>
      <url>/2019/12/01/qian-ru-shi/sg90-duo-ji-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="查看树莓派引脚"><a href="#查看树莓派引脚" class="headerlink" title="查看树莓派引脚"></a>查看树莓派引脚</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E5%B5%8C%E5%85%A5%E5%BC%8F/sg90%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6/sg90%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6_gpio.png" alt="sg90舵机控制_gpio.png"></p><p>硬件接口：<br>SG90 一共三根线，红线接5v电源，棕线GND，黄线为数据控制线，接到GPIO上<br>舵机参数：<br>SG90 脉冲周期为20ms,脉宽0.5ms-2.5ms对应的角度-90到+90，对应的占空比为2.5%-12。</p><p>与步进电机不同，伺服电机不占用许多GPIO引脚来控制运动。 为此，旋转由脉冲的长度控制。</p><p>电机的角度沿脉冲长度设置，因此PWM特别有用，它以均匀的间隔发送重复信号（必须安装Raspberry Pi Python库）。</p><p>建一个python文件，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> timeservoPIN <span class="token operator">=</span> <span class="token number">17</span><span class="token comment">#GPIO口</span>GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>servoPIN<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>p <span class="token operator">=</span> GPIO<span class="token punctuation">.</span>PWM<span class="token punctuation">(</span>servoPIN<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment"># GPIO 17 for PWM with 50Hz</span>p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment"># Initialization</span><span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">7.5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">12.5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">7.5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>ChangeDutyCycle<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>  p<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理</title>
      <link href="/2019/10/07/suan-fa/shu-ju-yu-chu-li/"/>
      <url>/2019/10/07/suan-fa/shu-ju-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<p>数据预处理的主要步骤分为：<strong>数据清理、数据集成、数据规约和数据变换</strong>。本文将从这四个方面详细的介绍具体的方法。如果在一个项目中，你在这几个方面的数据处理做的都很不错，对于之后的建模具有极大的帮助，并且能快速达到一个还不错的结果。</p><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><p>数据清理(data cleaning) 的主要思想是通过填补缺失值、光滑噪声数据，平滑或删除离群点，并解决数据的不一致性来“清理“数据。如果用户认为数据时脏乱的，他们不太会相信基于这些数据的挖掘结果，即输出的结果是不可靠的。</p><h3 id="1、缺失值的处理"><a href="#1、缺失值的处理" class="headerlink" title="1、缺失值的处理"></a>1、缺失值的处理</h3><p>由于现实世界中，获取信息和数据的过程中，会存在各类的原因导致数据丢失和空缺。针对这些缺失值的处理方法，主要是基于变量的分布特性和变量的重要性（信息量和预测能力）采用不同的方法。主要分为以下几种：</p><ul><li><p>删除变量：若变量的缺失率较高（大于80%），覆盖率较低，且重要性较低，可以直接将变量删除。</p></li><li><p>定值填充：工程中常见用-9999进行替代</p></li><li><p>统计量填充：若缺失率较低（小于95%）且重要性较低，则根据数据分布的情况进行填充。对于数据符合均匀分布，用该变量的均值填补缺失，对于数据存在倾斜分布的情况，采用中位数进行填补。</p></li><li><p>插值法填充：包括随机插值，多重差补法，热平台插补，拉格朗日插值，牛顿插值等</p></li><li><p>模型填充：使用回归、贝叶斯、随机森林、决策树等模型对缺失数据进行预测。</p></li><li><p>哑变量填充：若变量是离散型，且不同值较少，可转换成哑变量，例如性别SEX变量，存在<em>male,fameal,NA</em>三个不同的值，可将该列转换成 <em>IS_SEX_MALE, IS_SEX_FEMALE, IS_SEX_NA</em>。若某个变量存在十几个不同的值，可根据每个值的频数，将频数较小的值归为一类’other’，降低维度。此做法可最大化保留变量的信息。</p></li></ul><p>总结来看，常用的做法是：先用<code>pandas.isnull.sum()</code>检测出变量的缺失比例，考虑删除或者填充，若需要填充的变量是连续型，一般采用均值法和随机差值进行填充，若变量是离散型，通常采用中位数或哑变量进行填充。</p><p><strong>注意：若对变量进行分箱离散化，一般会将缺失值单独作为一个箱子（离散变量的一个值）</strong></p><h3 id="2、离群点处理"><a href="#2、离群点处理" class="headerlink" title="2、离群点处理"></a>2、离群点处理</h3><p>异常值是数据分布的常态，处于特定分布区域或范围之外的数据通常被定义为异常或噪声。异常分为两种：“伪异常”，由于特定的业务运营动作产生，是正常反应业务的状态，而不是数据本身的异常；“真异常”，不是由于特定的业务运营动作产生，而是数据本身分布异常，即离群点。主要有以下检测离群点的方法：</p><ul><li>简单统计分析：根据箱线图、各分位点判断是否存在异常，例如pandas的describe函数可以快速发现异常值。</li><li>$3\sigma$原则：若数据存在正态分布，偏离均值的$3\sigma$之外. 通常定义$P(|x-\mu|&gt;3\sigma)\leq=0.003$范围内的点为离群点。</li><li>基于绝对离差中位数（MAD）：这是一种稳健对抗离群数据的距离值方法，采用计算各观测值与平均值的距离总和的方法。放大了离群值的影响。</li><li>基于距离：通过定义对象之间的临近性度量，根据距离判断异常对象是否远离其他对象，缺点是计算复杂度较高，不适用于大数据集和存在不同密度区域的数据集</li><li>基于密度：离群点的局部密度显著低于大部分近邻点，适用于非均匀的数据集</li><li>基于聚类：利用聚类算法，丢弃远离其他簇的小簇。</li></ul><p>总结来看，在数据处理阶段将离群点作为影响数据质量的异常点考虑，而不是作为通常所说的异常检测目标点，因而楼主一般采用较为简单直观的方法，结合箱线图和MAD的统计方法判断变量的离群点。</p><p>具体的处理手段：</p><ul><li>根据异常点的数量和影响，考虑是否将该条记录删除，信息损失多</li><li>若对数据做了log-scale 对数变换后消除了异常值，则此方法生效，且不损失信息</li><li>平均值或中位数替代异常点，简单高效，信息的损失较少</li><li>在训练树模型时，树模型对离群点的鲁棒性较高，无信息损失，不影响模型训练效果</li></ul><h3 id="3、噪声处理"><a href="#3、噪声处理" class="headerlink" title="3、噪声处理"></a>3、噪声处理</h3><p>噪声是变量的随机误差和方差，是观测点和真实点之间的误差，即$obs=x+\epsilon$。通常的处理办法：对数据进行分箱操作，等频或等宽分箱，然后用每个箱的平均数，中位数或者边界值（不同数据分布，处理方法不同）代替箱中所有的数，起到平滑数据的作用。另外一种做法是，建立该变量和预测变量的回归模型，根据回归系数和预测变量，反解出自变量的近似值。</p><h2 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h2><p>数据分析任务多半涉及数据集成。数据集成将多个数据源中的数据结合成、存放在一个一致的数据存储，如数据仓库中。这些源可能包括多个数据库、数据方或一般文件。</p><h3 id="1-实体识别问题"><a href="#1-实体识别问题" class="headerlink" title="1. 实体识别问题"></a>1. 实体识别问题</h3><p>   例如，数据分析者或计算机如何才能确信一个数 据库中的<em>customer_id</em>和另一个数据库中的 <em>cust_number</em>指的是同一实体?通常，数据库和数据仓库 有元数据——关于数据的数据。这种元数据可以帮助避免模式集成中的错误。</p><h3 id="2-冗余问题"><a href="#2-冗余问题" class="headerlink" title="2. 冗余问题"></a>2. 冗余问题</h3><p>   一个属性是冗余的，如果它能由另一个表“导出”;如年薪。属性或 维命名的不一致也可能导致数据集中的冗余。 用相关性检测冗余：数值型变量可计算相关系数矩阵，标称型变量可计算卡方检验。</p><h3 id="3-数据值的冲突和处理"><a href="#3-数据值的冲突和处理" class="headerlink" title="3. 数据值的冲突和处理"></a>3. 数据值的冲突和处理</h3><p>   不同数据源，在统一合并时，保持规范化，去重。</p><h2 id="数据规约"><a href="#数据规约" class="headerlink" title="数据规约"></a>数据规约</h2><p>数据归约技术可以用来得到数据集的归约表示，它小得多，但仍接近地保持原数据的完整性。 这样，在归约后的数据集上挖掘将更有效，并产生相同(或几乎相同)的分析结果。一般有如下策略：</p><h3 id="1、维度规约"><a href="#1、维度规约" class="headerlink" title="1、维度规约"></a>1、维度规约</h3><p>用于数据分析的数据可能包含数以百计的属性，其中大部分属性与挖掘任务不相关，是冗余的。维度归约通过删除不相关的属性，来减少数据量，并保证信息的损失最小。</p><p><strong>属性子集选择</strong>：目标是找出最小属性集，使得数据类的概率分布尽可能地接近使用所有属性的原分布。在压缩 的属性集上挖掘还有其它的优点。它减少了出现在发现模式上的属性的数目，使得模式更易于理解。</p><ul><li>逐步向前选择：该过程由空属性集开始，选择原属性集中最好的属性，并将它添加到该集合<br>中。在其后的每一次迭代，将原属性集剩下的属性中的最好的属性添加到该集合中。</li><li>逐步向后删除：该过程由整个属性集开始。在每一步，删除掉尚在属性集中的最坏属性。</li><li>向前选择和向后删除的结合：向前选择和向后删除方法可以结合在一起，每一步选择一个最 好的属性，并在剩余属性中删除一个最坏的属性。</li></ul><p><code>python scikit-learn </code>中的递归特征消除算法<code>Recursive feature elimination (RFE)</code>，就是利用这样的思想进行特征子集筛选的，一般考虑建立<code>SVM</code>或回归模型。</p><p><strong>单变量重要性</strong>：分析单变量和目标变量的相关性，删除预测能力较低的变量。这种方法不同于属性子集选择，通常从统计学和信息的角度去分析。</p><ul><li>pearson相关系数和卡方检验，分析目标变量和单变量的相关性。</li><li>回归系数：训练线性回归或逻辑回归，提取每个变量的表决系数，进行重要性排序。</li><li>树模型的Gini指数：训练决策树模型，提取每个变量的重要度，即Gini指数进行排序。</li><li>Lasso正则化：训练回归模型时，加入L1正则化参数，将特征向量稀疏化。</li><li>IV指标：风控模型中，通常求解每个变量的IV值，来定义变量的重要度，一般将阀值设定在0.02以上。</li></ul><p>以上提到的方法，没有讲解具体的理论知识和实现方法，需要同学们自己去熟悉掌握。楼主通常的做法是根据业务需求来定，如果基于业务的用户或商品特征，需要较多的解释性，考虑采用统计上的一些方法，如变量的分布曲线，直方图等，再计算相关性指标，最后去考虑一些模型方法。如果建模需要，则通常采用模型方法去筛选特征，如果用一些更为复杂的GBDT，DNN等模型，建议不做特征选择，而做特征交叉。</p><h3 id="2、维度变换"><a href="#2、维度变换" class="headerlink" title="2、维度变换"></a>2、维度变换</h3><p>维度变换是将现有数据降低到更小的维度，尽量保证数据信息的完整性。楼主将介绍常用的几种有损失的维度变换方法，将大大地提高实践中建模的效率</p><ul><li>主成分分析（PCA）和因子分析（FA）：PCA通过空间映射的方式，将当前维度映射到更低的维度，使得每个变量在新空间的方差最大。FA则是找到当前特征向量的公因子（维度更小），用公因子的线性组合来描述当前的特征向量。</li><li>奇异值分解（SVD）：SVD的降维可解释性较低，且计算量比PCA大，一般用在稀疏矩阵上降维，例如图片压缩，推荐系统。</li><li>聚类：将某一类具有相似性的特征聚到单个变量，从而大大降低维度。</li><li>线性组合：将多个变量做线性回归，根据每个变量的表决系数，赋予变量权重，可将该类变量根据权重组合成一个变量。</li><li>流行学习：流行学习中一些复杂的非线性方法，可参考skearn：<a href="https://link.zhihu.com/?target=https://scikit-learn.org/stable/auto_examples/manifold/plot_lle_digits.html">LLE Example</a></li></ul><h2 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h2><p>数据变换包括对数据进行规范化，离散化，稀疏化处理，达到适用于挖掘的目的。</p><h3 id="1、规范化处理"><a href="#1、规范化处理" class="headerlink" title="1、规范化处理"></a>1、规范化处理</h3><p>数据中不同特征的量纲可能不一致，数值间的差别可能很大，不进行处理可能会影响到数据分析的结果，因此，需要对数据按照一定比例进行缩放，使之落在一个特定的区域，便于进行综合分析。特别是基于距离的挖掘方法，聚类，KNN，SVM一定要做规范化处理。</p><ul><li>最大 - 最小规范化：将数据映射到[0,1]区间，$x_{new}=\frac{x-x_{min}}{x_{max}-x_{min}}$</li><li>Z-Score标准化：处理后的数据均值为0，方差为1，$x_{new}=\frac{x-\overline{x}}{\sigma}$</li><li>Log变换：在时间序列数据中，对于数据量级相差较大的变量，通常做Log函数的变换，$x_{new}=logx$</li></ul><h3 id="2、离散化处理"><a href="#2、离散化处理" class="headerlink" title="2、离散化处理"></a>2、离散化处理</h3><p>数据离散化是指将连续的数据进行分段，使其变为一段段离散化的区间。分段的原则有基于等距离、等频率或优化的方法。数据离散化的原因主要有以下几点：</p><ul><li>模型需要：比如决策树、朴素贝叶斯等算法，都是基于离散型的数据展开的。如果要使用该类算法，必须将离散型的数据进行。有效的离散化能减小算法的时间和空间开销，提高系统对样本的分类聚类能力和抗噪声能力。</li><li>离散化的特征相对于连续型特征更易理解。</li><li>可以有效的克服数据中隐藏的缺陷，使模型结果更加稳定。<br>等频法：使得每个箱中的样本数量相等，例如总样本n=100，分成k=5个箱，则分箱原则是保证落入每个箱的样本量=20。</li></ul><p>等宽法：使得属性的箱宽度相等，例如年龄变量（0-100之间），可分成 [0,20]，[20,40]，[40,60]，[60,80]，[80,100]五个等宽的箱。</p><p>聚类法：根据聚类出来的簇，每个簇中的数据为一个箱，簇的数量模型给定。</p><h3 id="3、稀疏化处理："><a href="#3、稀疏化处理：" class="headerlink" title="3、稀疏化处理："></a>3、稀疏化处理：</h3><p>针对离散型且标称变量，无法进行有序的LabelEncoder时，通常考虑将变量做0，1哑变量的稀疏化处理，例如动物类型变量中含有猫，狗，猪，羊四个不同值，将该变量转换成is_猪，is_猫，is_狗，is_羊四个哑变量。若是变量的不同值较多，则根据频数，将出现次数较少的值统一归为一类’rare’。稀疏化处理既有利于模型快速收敛，又能提升模型的抗噪能力。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归一化算法</title>
      <link href="/2019/09/23/suan-fa/gui-yi-hua-suan-fa/"/>
      <url>/2019/09/23/suan-fa/gui-yi-hua-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="归一化算法"><a href="#归一化算法" class="headerlink" title="归一化算法"></a>归一化算法</h2><p>归一化是一种简化计算的方法，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为标量。</p><hr><ol><li><p>线性归一化——Min-Max归一化</p><p>$X_{norm}=\frac{X-X_{min}}{X_{max}-X_{min}}$</p><p>该方法将数据压缩到区间[0,1]之间，是原数据的等比缩放。</p><p>P.S：<em>最大值与最小值相等时没法归一化</em>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算编码阅读笔记</title>
      <link href="/2019/09/06/yun-ji-suan/yun-ji-suan-bian-ma-yue-du-bi-ji/"/>
      <url>/2019/09/06/yun-ji-suan/yun-ji-suan-bian-ma-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="云计算编码阅读笔记"><a href="#云计算编码阅读笔记" class="headerlink" title="云计算编码阅读笔记"></a>云计算编码阅读笔记</h2><h3 id="第一章-云计算概述"><a href="#第一章-云计算概述" class="headerlink" title="第一章 云计算概述"></a>第一章 云计算概述</h3><ul><li><p>摩尔定理：集成电路上可容纳的晶体管数目，约每隔18个月便会增加1倍，性能也会提升1倍。</p></li><li><p>Web1.0 由网站编辑产生内容，用户单向获取信息。</p></li><li><p>Web2.0 由用户产生内容，信息双向互动。</p></li><li><p>Web3.0 互联网成为数字枢纽，形成多维度信息交互和语义网。</p></li><li><p>云计算的云指的是通过计算池提供资源。</p></li><li><p>计算池需满足：统一管理和调度、较大的规模、良好的可拓展性（针对计算池）、良好的可伸缩性（针对单一用户）、及时提供、更对的成本。</p></li><li><p>云计算：基于互联网将规模化资源池的计算、存储、开发平台和软件能力提供给用户，实现自动化、低成本、快速提供和灵活伸缩的IT服务。</p></li><li><p>效用计算：将主机资源基于网络出租给用户，并按用户的资源使用量进行收费。</p></li><li><p>传统分布式计算存在的主要问题是没有统一的编程模型，针对不容应用领域，需要相关专业的人员进行复杂的开发，限制了应用。</p></li><li><p>网格计算试图解决的是异构问题，由跨网络、跨组织（虚拟组织）、异构节点构成网络，统一提供计算和存储能力。</p></li><li><p>复本收费：按用户能用的全部内容收取固定费用。</p></li><li><p>云计算使得整个信息产业从传统的产品交付模式转变为服务交付模式，还原网络化信息的自然本质：让复本流动起来，然后按照每一次使用进行收费。</p></li></ul><h3 id="第二章-云计算产业分析"><a href="#第二章-云计算产业分析" class="headerlink" title="第二章 云计算产业分析"></a>第二章 云计算产业分析</h3><ul><li>互联网的哲学：网络是中立和无控制的，任何人都没有决定权；网络是应用无关的，它的任务就是如何更好的传输数据包。</li><li>互联网的价值体现在使用外部性（Adoption Externality）。实现“胜者全得”的市场。</li><li>万维网&gt;互联网</li><li>$信息价值\begin{cases}充足的信息–&gt;免费\稀缺的信息或者定制的信息–&gt;收费\end{cases}$</li><li>在信息经济中，信息流的方向就是金钱流动的方向。需要注意<strong>注意力经济</strong>和<strong>声誉经济</strong>。</li><li>互联网的信息经济市场是一个多方共存的生态系统，只在某些方面直接进行现金交易。整个市场是同分结合的双层结构：“统”的一层是基础业务平台，是免费生态系统；”分”的一层是多元增值业务，直接进行现金交易。参考免费游戏的运营方式。</li><li>私有云注重的是安全性，公有云侧重性价比。混合云的真正竞争力在于私有云和公有云的无缝集成和协同。</li></ul><h3 id="第三章-云计算技术体系架构"><a href="#第三章-云计算技术体系架构" class="headerlink" title="第三章 云计算技术体系架构"></a>第三章 云计算技术体系架构</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_1.png" alt="云计算编码阅读笔记_1.png"></li><li>云计算系统架构的核心部分是操作系统及其拥有的资源管理功能。主要是分布式技术和虚拟化技术。</li><li>新一代的分布式主要特点是：节点同构且对对单节点可靠性要求不高、节点之间有高速网络互联、系统运行时信令流和数据流分离、针对大规模数据处理进行存储管理优化以及结合数据存储提出创新的计算模型等。</li><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_2.png" alt="云计算编码阅读笔记_2.png"></li><li>虚拟化体现了一种“分裂”的思想，分布式体现了“聚合”的思想。</li><li> IaaS服务主要依托于云计算基础架构层，向外提供基础资源服务，如弹性计算、弹性存储等；PaaS服务主要依托于云计算应用开发与执行环境，向外提供应用开发与运行托管服务；SaaS服务主要通过云计算应用软件层向外提供应用软件服务。只是层次不同，没有必然的上下层关系。</li><li> 分布式技术体系包括：分布式文件系统（位置透明性和性能透明性）、分布式数据库、并行计算模型（通过将计算到存储节点的方式完成数据处理任务）、分布式同步（确保系统一致性）等。</li><li> CDN(Content Delivery Network，内容分发网络)位于IP网络与互联网应用之间，将网站内容推送到离用户最近的地方，从而实现用户就近访问，降低时延。关键技术为：用户访问制度、内容缓存管理。  采用同构节点，提供系统冗余，并将业务流与数据流分离，在设计思想上与分布式架构类似。</li><li>$CDN的技术实现\begin{cases}分发服务系统\负载均衡和调度系统\运营管理系统\end{cases}$<ul><li> 分布服务系统的作用是<strong>实现将内容从内容源中心向边缘推送和存储，承担实际的内容数据流的全网分发工作和面向最终用户的数据请求服务</strong>。最基本的工作单元是Cache设备（缓存服务器）。</li><li> 负载均衡是CDN的神经中枢，主要功能是父子啊对所有发起服务请求的用户进行调度访问，确定提供给用户的实际访问地址。</li><li> 运营管理系统负责整个系统的维护管理和业务计费等工作。</li></ul></li><li>$云计算四层架构\begin{cases}底层基础设施资源（即“池”化的物理资源和虚拟化资源）\操作系统（负责底层基础资源的管理和调度，调度粒度包括虚拟机和计算任务两种方式）\系统软件（支持应用的开发和运行）\应用软件层（基于多租户架构和Web技术，向用户提供云端SaaS应用）\end{cases}$</li><li>IaaS核心：虚拟化和资源管理和资源调度</li><li>PaaS核心：分布式系统</li><li>SaaS核心：多租户和Web技术</li><li>DaaS核心：桌面交付协议</li><li>CDN核心：Cache缓存和内容分发调度</li></ul><h3 id="第四章-IaaS及关键实现技术"><a href="#第四章-IaaS及关键实现技术" class="headerlink" title="第四章 IaaS及关键实现技术"></a>第四章 IaaS及关键实现技术</h3><ul><li><p>Guest OS：运行在虚拟机里的操作系统</p></li><li><p>VMM或者Hypervisor：负责管理虚拟机中的软件</p></li><li><p>$虚拟化架构\begin{cases}寄生架构(Hosted，即VMM安装在宿主操作系统上)\裸金属架构(Bare-metal，即VMM直接安装在物理服务器上)\end{cases}$</p></li><li><p>裸金属架构无法说明VMM能够抛开Host OS运行在硬件之上。Xen的裸金属版本内部包含Domain0其中包含了一个剪裁过的Linux内核。即使是寄生架构的产品，在宿主系统中有一个运行在核心态的驱动程序，直接与物理设备打交道。</p></li><li><p><strong>裸金属架构本身不会给Guest OS的性能带来任何提升。</strong></p></li></ul><h4 id="CPU虚拟化"><a href="#CPU虚拟化" class="headerlink" title="CPU虚拟化"></a>CPU虚拟化</h4><ul><li><p>虚拟CPU分时复用物理CPU，由VMM为虚拟CPU分配时间片，并同时对虚拟CPU的状态进行管理。</p></li><li><p>$x86指令特权级\begin{cases}第0级：具有最高的特权，用于运行操作系统\第1级\第2级\第3级：最低的特权级，用于运行用户程序\end{cases}$</p></li><li><p>CPU特权指令的虚拟化：模拟执行、操作系统辅助、<strong>硬件辅助</strong>（主流）</p><ul><li><p>$模拟执行\begin{cases}解释执行(读取源指令并进行分析，执行操作，逐条)\二进制翻译(将一段源指令翻译成被执行的目标指令并保存，冲重复使用)\end{cases}$</p></li><li><p>模拟执行适用于虚拟化CPU和本地物理CPU的指令集不同的应用场景。对特权指令的模拟执行需要<strong>较高的性能开销</strong>。是完全虚拟化。</p></li><li><p>基于操作系统辅助的CPU虚拟化直接在Guest OS进行修改，将其与特权指令执行相关的操作调用Hypercall（类似系统调用，但并不是针对操作系统进行操作的，而是直接与VMM通信，并在其管理下执行特权指令）的形式改写。提供的是与真实的物理设备有一定差异的CPU指令集接口，然后通过改写Guest OS调用该接口，使Guest OS的相关操作可以直接在底层硬件上实现。最大优点：有效的使Guest OS的运行获得与其在本地物理CPU上直接执行相接近的性能。最大缺点：需要对Guest OS进行改进，可移植性差。早期Xen所使用的技术。</p></li><li><p>上述两种方法都是因为传统的X86CPU不支持硬件虚拟化，只能采用软件层面的虚拟化。</p></li><li><p>基于硬件辅助的CPU虚拟化得益于现行的X86CPU支持硬件层面的虚拟化。</p></li><li><p>$X86CPU硬件辅助虚拟化技术\begin{cases}Intel\ VT-x\AMD\ SVM\end{cases}$</p></li><li><p>$Intel\quad VT-x–&gt;VMX处理模式\begin{cases}VMX\ root \ operation\VMX\ non-root\ operation\end{cases}$</p><ul><li><p>VMX root operation：专为VMM，行为与不带VT-x的技术的x86CPU相同</p></li><li><p>VMX non-root operation：提供了一个在VMM控制下用于支撑虚拟机运行的CPU环境。</p></li><li><p>都具有四个特权级</p></li><li><p>VMX root operation-&gt;VMX non-root operation：VM exit</p></li><li><p>VMX non-root operation-&gt;VMX root operation：VM entry</p></li><li><pre class="mermaid">      graph TDA[CPU正常模式启动]--&gt;|vmxon指令|B[CPU进入VMX模式]B--&gt;C[VMM执行VMX root operation]C--&gt;D[VMM为虚拟机设置环境]D--&gt;|vmlaunch指令|E[启动虚拟机]E--&gt;F[CPU处于VMX non-root operation状态,并由虚拟机执行VMX non-root operation]F--&gt;K{虚拟机管理相关操作}K--&gt;G[虚拟机将CPU控制权让给VMM]G--&gt;|vmcall指令|H[CPU进入VMX root operation]H--&gt;|vmresume指令|I[重新唤起虚拟机]I--&gt;FF--&gt;L{退出VMX模式}L--&gt;J[执行vmxoff指令]J--&gt;AZ[VT-x应用过程]</pre></li><li><p>VMM位于比第0级更高的特权级，且不会影响Guest OS对特权指令的执行。</p><p>优点：有效避免特权指令模拟执行产生的性能消耗，以及操作系统辅助虚拟化对所需的Guest OS的改写。</p><p>缺点：在VMX模式进行模式切换时会消耗大量的 CPU周期。</p><p>发展方向：减少每次切换消耗的周期数以及切换次数。</p></li></ul></li></ul></li></ul><h4 id="内存虚拟化"><a href="#内存虚拟化" class="headerlink" title="内存虚拟化"></a>内存虚拟化</h4><ul><li>$内存系统中的地址种类\begin{cases}机器地址(MA)：真实硬件的机器地址，在地址总线上可以看到的地址信号\虚拟机物理地址(GPA):经过VMM抽象后虚拟机看到的伪物理地址\虚拟地址(VA)：Guest OS提供给其应用使用的线性地址空间\end{cases}$</li><li>操作系统的内存管理单元(MMU)只能完成一次虚拟地址到物理地址的映射。</li><li>$VMM的复合映射方式\begin{cases}MMU半虚拟化(MMU\  Paravirtualization):直接将映射关系f<em>g直接写入Guest OS页表中\影子页表:将f</em>g的映射关系写入影子页表，Guest OS的页表内容保持不变VMM影子页表写入MMU\end{cases}$</li><li>影子页表的缺陷：时间上，Guest OS构建页表时不会主动通知VMM，只能在Guest OS发生缺页中断时补全影子页表；在空间上，每台虚拟机的Guest OS通常都会在其上运行的每个进程创建一套页表系统，空间开销随着线程数量的增多而增大。</li><li>对于上述问题的解决方法是采用影子页表缓存技术。VMM在内存中维护部分最近使用的影子页表，只有当影子页表在缓存中无法命中的时候，才创建新的影子页表。</li></ul><h4 id="I-O虚拟化"><a href="#I-O虚拟化" class="headerlink" title="I/O虚拟化"></a>I/O虚拟化</h4><ul><li>$I/O虚拟化技术\begin{cases}全虚拟化:对设备进行模拟，Guest OS陷入VMM,VMM解析并映射到实际物理设备\半虚拟化:在Guest OS中安装虚拟I/O前端驱动，VMM提供后端驱动。前端驱动接收请求通过\ VMM定义的系统调用与后端驱动通信，后端驱动验证其有效性，并映射到物理设备上。往往和基于\ 操作系统辅助的CPU辅助虚拟化一同使用。\软件模拟:VMM捕捉I/O请求转交给Host OS的用户态进程，然后通过系统调用来模拟设备的行为，\ 性能低，和CPU基于模拟执行的虚拟化技术一同使用\直接划分:将物理I/O设备分配给指定的虚拟机，往往与CPU基于硬件辅助的虚拟化技术一同使用\end{cases}$</li></ul><h4 id="网卡虚拟化"><a href="#网卡虚拟化" class="headerlink" title="网卡虚拟化"></a>网卡虚拟化</h4><ul><li>$网卡虚拟化\begin{cases}虚拟网卡:链接物理机的物理网卡和虚拟机的物理网卡\虚拟网桥:使多张虚拟网卡在同一台物理服务器中共享一块物理网卡的同时对外仍然表现为多张物理网卡\end{cases}$</li></ul><h4 id="存储虚拟化"><a href="#存储虚拟化" class="headerlink" title="存储虚拟化"></a>存储虚拟化</h4><ul><li><p>$存储域\begin{cases}文件/记录层:上层应用与存储资源之间的接口\块聚合层:将多个底层存储设备的存储资源块聚合为能够被统一的存储资源\存储设备层:对数据块存储的物理位置进行识别并进行读写操作，可以直接为文件/记录层提供接口\end{cases}$</p><ul><li><p>$磁盘的存储信息\begin{cases}柱面(Cluster)\磁头(Head)\扇区(Section)\end{cases}$</p></li><li><p>存储设备的虚拟化体现在磁盘固件将CHS地址信息转换成具有连续编号的逻辑块供上层使用，同时保证了磁盘的零缺陷。</p></li><li><p>$块聚合层存储虚拟化技术\begin{cases}带内虚拟化：虚拟化控制器在服务器和存储设备的路径上\带外虚拟化：虚拟化控制器在传输路径之外,每台服务器需安装虚拟化代理程序\end{cases}$</p></li><li><table><thead><tr><th align="center">DAS</th><th align="center">SAN</th></tr></thead><tbody><tr><td align="center">直接附加存储</td><td align="center">存储区域网络</td></tr><tr><td align="center">只能访问直接挂载的存储资源</td><td align="center">访问存储网络的所有存储资源</td></tr></tbody></table></li></ul></li></ul><h4 id="IaaS云计算管理平台"><a href="#IaaS云计算管理平台" class="headerlink" title="IaaS云计算管理平台"></a>IaaS云计算管理平台</h4><ul><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_3.png" alt="云计算编码阅读笔记_3.png"></li><li>将一台没有运行的虚拟机部署到一台物理机上并使其运行起来，称之为初次部署。</li><li>将一台正在运行的虚拟机迁移到另一台物理机上，称之为迁移。</li><li>服务器虚拟化本质上是一种纯软件的技术，VMM可以认为是服务器“操作系统”的程序，虚拟机可以认为是该“操作系统”上的一种特定“进程”。</li><li>选择合理物理服务器的因素$\begin{cases}尽可能不启动新的物理服务器\尽可能让CPU和I/O资源互补\end{cases}$</li><li>通常系统模板会自带一个软件，使其在操作系统第一次启东市从服务端动态获得IP和主机名。关机后释放IP，主机名保留。</li><li>要实现跨物理机的实施迁移，一般来说，需要虚拟机自身能够支持迁移功能且物理服务器之间有共享存储。</li><li>虚拟机实时迁移时产生内存中的“脏”读写，通过重复迁移来解决。直至最后一次迁移的脏数据非常少，停顿时间非常短，对于业务和应用来说基本可以忽略不计。</li><li>$弹性能力模式\begin{cases}资源向上/下扩展(Scale Up/Dowm),即动态的增大/缩小系统的配置(小型机)\资源向外/扩展(Scale Out/In)，即动态的创建/减少虚拟服务器数量\end{cases}$</li><li>为实现弹性能力提供，需设定资源监控阈值（包括监控项目和阈值）、弹性资源提供策略（包括弹性资源提供模式、资源扩展规模等）。</li><li>$虚拟化监控的目的与复杂性\begin{cases}状态监控：监控所有物理资源和虚拟资源的工作状态\性能监控：基本性能监控和与虚拟化相关的性能监控\容量监控：宏观角度的长期系统性能监控\安全监控\begin{cases}传统安全监控\虚拟机蔓生活动监控\合规监控\访问控制监控\end{cases}\使用量度量：度量不同组织、团体、个人使用资源和服务的情况\end{cases}$</li><li>$系统资源监控方法\begin{cases}日志分析\包嗅探\探针采集\end{cases}$</li><li><strong>云资源调度策略的方向1：对应用的资源分配进行分析和预测。在运行时动态的捕捉各个应用在不同时段的执行行为和资源需求，将这两方面的信息进行分析以发现它们各自内在以及彼此之间可能存在的逻辑关联，进而利用发掘出的关联关系进行应用的后续行为和资源需求的预测，并按照预测结果为其提前准备资源调度方案。</strong></li><li><strong>云资源调度策略的方向2：鉴于“云”是分布式计算和存储架构，所以网络因素也相当重要，需要采用位置相关的调度策略。考虑用户和资源之间的网络情况以及分配给同一应用的资源之间的网络情况。</strong></li><li><strong>云资源调度策略的方向3：注重负载均衡，可以体现在计算密集型和存储密集型应用上，通过合理的配比将其部署到特性不同的服务器上。扬长避短</strong></li><li><strong>云资源调度策略的方向4：基于能源的角度考虑，将多个运行在不同服务器上的应用在满足SLA的前提下，迁移至一台服务器上，进而减少不必要的能耗，降低运营成本。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算编码 </tag>
            
            <tag> Book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析</title>
      <link href="/2019/09/04/cheng-xu-she-ji/shu-ju-fen-xi/"/>
      <url>/2019/09/04/cheng-xu-she-ji/shu-ju-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>anaconda 安装软件的步骤：</p><ol><li><code>anaconda search -t conda 包名</code> 查找所需包的信息</li><li><code>ananconda show 完整包名</code> 查看包的安装命令</li><li>使用3中显示的命令进行安装</li><li><code>conda install 包名</code> 安装包</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux</title>
      <link href="/2019/08/02/jing-yan-zong-jie/tmux/"/>
      <url>/2019/08/02/jing-yan-zong-jie/tmux/</url>
      
        <content type="html"><![CDATA[<h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建session：tmux new -s <code>session_name</code>。</p><p>直接退出在终端输入<code>exit</code>即可。</p><span id="more"></span><p>暂时退出tmux，按ctrl+b+d。或者输入tmux detach。</p><p><code>tmux ls</code>显示所有tmux的session。</p><p>使用<code>tmux kill-session -t session_name</code>kill掉不要的session。</p><p>当后台只有一个session时，直接输入<code>tmux attach</code>即可返回session。</p><p>当后台session数不唯一时，输入<code>tmux attach -t session_name</code>返回相应session。可以将<code>attach</code>简写为a。</p><p>如果刚好处于会话中怎么办？别担心，我们可以使用对应的tmux快捷键<code>Ctrl+b</code> + <code>s</code>，此时tmux将打开一个会话列表，按上下键(⬆︎⬇︎)或者鼠标滚轮，可选中目标会话，按左右键（⬅︎➜）可收起或展开会话的窗口，选中目标会话或窗口后，按回车键即可完成切换。</p><p>在进入tmux后：</p><ul><li>系统指令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>?</code></td><td align="center">显示快捷键帮助文档</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>d</code></td><td align="center">断开当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>D</code></td><td align="center">选择要断开的会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+z</code></td><td align="center">挂起当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>r</code></td><td align="center">强制重载当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>s</code></td><td align="center">显示会话列表用于选择并切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>:</code></td><td align="center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>[</code></td><td align="center">进入复制模式，按<code>q</code>退出</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>]</code></td><td align="center">粘贴复制模式中复制的文本</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>~</code></td><td align="center">列出提示信息缓存</td></tr></tbody></table><ul><li>窗口指令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>c</code></td><td align="center">新建窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&amp;</code></td><td align="center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>0~9</code></td><td align="center">切换到指定窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>p</code></td><td align="center">切换到上一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>n</code></td><td align="center">切换到下一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>w</code></td><td align="center">打开窗口列表，用于且切换窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>,</code></td><td align="center">重命名当前窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>.</code></td><td align="center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>f</code></td><td align="center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><ul><li>面板命令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>"</code></td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>%</code></td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>x</code></td><td align="center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>z</code></td><td align="center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>!</code></td><td align="center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>;</code></td><td align="center">切换到最后一次使用的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>q</code></td><td align="center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>{</code></td><td align="center">向前置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>}</code></td><td align="center">向后置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+o</code></td><td align="center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>方向键</code></td><td align="center">移动光标切换面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>o</code></td><td align="center">选择下一面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>空格键</code></td><td align="center">在自带的面板布局中循环切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Alt+方向键</code></td><td align="center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+方向键</code></td><td align="center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>t</code></td><td align="center">显示时钟</td></tr></tbody></table><p>默认的tmux风格比较朴素甚至有些丑陋。如果希望做一些美化和个性化配置的话，建议使用<a href="https://github.com/gpakosz/.tmux">gpakosz的tmux配置</a>。它的本质是一个tmux配置文件。</p><h3 id="开启Home和END键"><a href="#开启Home和END键" class="headerlink" title="开启Home和END键"></a>开启Home和END键</h3><p>在.zshrc中添加<code> export TERM="screen-256color"</code>。</p><h3 id="在Tmux中复制"><a href="#在Tmux中复制" class="headerlink" title="在Tmux中复制"></a>在Tmux中复制</h3><p>开启鼠标支持，配置后可以直接<code>Ctrl+a m</code>。</p><p>或者文件配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#开启鼠标支持</span>set-option -g mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制 按住<code>shift</code>键,然后拖动鼠标复制要选择的内容，然后按下<code>shift+ctrl+c</code>,复制到系统剪贴板<br> 粘贴 按下<code>shift+ctrl+v</code> 粘贴系统剪贴板中的内容到tmux中<br> 需要注意的是<br> <code>shift+ctrl+v</code>是在终端设置的粘贴快捷键<br> <code>shift+ctrl+c</code>是在终端设置的复制快捷键</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2019/07/18/yun-ji-suan/wei-fu-wu/"/>
      <url>/2019/07/18/yun-ji-suan/wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-k8s微服务"><a href="#Docker-k8s微服务" class="headerlink" title="Docker+k8s微服务"></a>Docker+k8s微服务</h2><ul><li><p>什么是软件架构？</p><p>软件架构是在软件内部，经过综合各种因素的考量、权衡，选择特定的技术，将系统划分成不同的部分并使这些部分相互分工，彼此协作，为用户提供需要的价值。</p></li><li><p>什么是微服务？</p><p>使用一套小服务来开发单个应用的方式，每个服务运行在独立的进程中，一般采用轻量级的通讯机制互联，并且它们可以通过自动化的方式部署。</p><p>特点：单一职责；轻量级通信（语言无关、平台无关）；隔离性；有自己的数据；技术多样性。</p></li><li><p>什么是单体架构？</p><p>功能、业务集中在一个发布包里，部署运行在同一进程中。</p><p>优点：易于开发、易于部署、易于测试、易于水平伸缩。</p><p>缺点：代码膨胀，难以维护；创新困难；构建、部署成本大；可扩展性差。</p></li><li><p>微服务之间如何通讯？</p><p>从通讯模式角度考虑：</p><table><thead><tr><th align="center"></th><th align="center">一对一</th><th align="center">一对多</th></tr></thead><tbody><tr><td align="center">同步</td><td align="center">请求响应模式，最常见</td><td align="center"></td></tr><tr><td align="center">异步</td><td align="center">通知/请求异步响应</td><td align="center">发布订阅/发布异步响应</td></tr></tbody></table><p>从通讯协议角度考虑：</p><ul><li>REST API</li><li>RPC:Dubbo/Dubbox、Thrift、Motan、Grpc</li><li>MQ</li></ul></li><li><p>RPC框架要向调用方屏蔽各种复杂性，要向服务提供方也屏蔽各类复杂性：</p><ul><li>调用方感觉就像调用本地函数一样</li><li>服务提供方感觉就像实现一个本地函数一样来实现服务</li></ul></li><li><p>Dubbo的架构为：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_architecture.png"></p></li><li><p>Motan</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_Motan.png"></p></li><li><p>Thrift</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_Thrift.png"></p></li><li><p>Grpc</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_GRPC.png"></p><table><thead><tr><th align="center">RPC对比</th><th align="center">Dubbo</th><th align="center">Motan</th><th align="center">Thrift</th><th align="center">Grpc</th></tr></thead><tbody><tr><td align="center">开发语言</td><td align="center">Java</td><td align="center">Java</td><td align="center">跨语言</td><td align="center">跨语言</td></tr><tr><td align="center">服务治理</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">多种序列化</td><td align="center">√</td><td align="center">√</td><td align="center">只支持thrift</td><td align="center">只支持protobuf</td></tr><tr><td align="center">多种注册中心</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">管理中心</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">跨语言通讯</td><td align="center">χ</td><td align="center">χ</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">整体性能</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">3</td></tr></tbody></table></li><li><p>服务发现</p><ul><li><p>传统服务</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E4%BC%A0%E7%BB%9F%E6%9C%8D%E5%8A%A1.png"></p></li><li><p>微服务的客户端发现</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E7%8E%B0.png"></p></li><li><p>微服务的服务端发现</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E7%8E%B0.png"></p></li></ul></li><li><p>流行的服务编排工具：Mesos、Docker Swarm、Kubernetes。</p></li><li><p>Spring Cloud vs Spring Boot：</p><ul><li>Spring Boot意在简化，是一种开发、配置风格。</li><li>Spring Cloud意在简化分布式，是功能的集合，风格的统一。</li></ul></li><li><p>Spring Cloud核心组件：</p><ul><li>Netflix Eureka 服务发现组件</li><li>Netflix Ribbon 客户端负载均衡组件</li><li>Netflix Hystrix 容错组件</li><li>Netflix Zuul 服务网关</li><li>Spring Cloud Config 分布式配置</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python OOP</title>
      <link href="/2019/07/17/cheng-xu-she-ji/python-oop/"/>
      <url>/2019/07/17/cheng-xu-she-ji/python-oop/</url>
      
        <content type="html"><![CDATA[<h2 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h2><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">class ClassName(继承的类名):    def __init__(变量):        self.类内变量=变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。创建实例是通过类名+()实现的。可以自由的给一个实例变量绑定一个属性。</p></li><li><p><strong>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</strong></p><span id="more"></span></li><li><p><strong>在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>。并且，调用时，不用传递该参数。</strong></p></li><li><p>类里面定义的数据成员可以将变量名通过加上<code>__</code>变成私有变量。如果硬是要访问，可以通过<code>_类名__变量名</code></p></li><li><p>单<code>_</code>表示的变量意思是，虽然我可以被访问，但请不要访问我。</p></li><li><p>相较于一般的静态语言中的多态，python不强制要求传入的参数必须属于同一父类，而是只要你有所调用的方法，那么你就可以传入，都被视为“file-like object“。</p></li><li><p>通过<code>type()</code>函数判断对象所属类型。判断函数类型时通过<code>type()</code>的内置常量。如：<code>FunctionType</code>、<code>BuiltinFunctionType</code>、<code>LambdaType</code>、<code>GeneratorType</code>。</p></li><li><p><code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。<strong>总是优先使用<code>isinstance()</code>判断类型，可以将指定类型及其子类“一网打尽”。</strong></p></li><li><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list。</p></li><li><p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法。</p></li><li><p>配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态。</p></li><li><p>直接在class中定义属性，此时的属性就是类属性，所有对象都可以访问到类属性。但是如果给对象的类属性重新赋值，会覆盖这个对象的类属性，但其他对象依然可以访问到。当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p></li><li><p>因为动态语言的特殊性，可以在创建实例后，动态的给对象添加属性或者方法。动态给对象绑定方法的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义一个函数作为实例方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> types <span class="token keyword">import</span> MethodType<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>set_age <span class="token operator">=</span> MethodType<span class="token punctuation">(</span>set_age<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment"># 给实例绑定一个方法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment"># 调用实例方法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>age <span class="token comment"># 测试结果</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想给所有类对象绑定函数使用如下代码:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Student<span class="token punctuation">.</span>set_score <span class="token operator">=</span> set_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性，对子类不起作用。</strong></p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; class Student(object):...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰<code>@变量名.setter</code>，负责把一个setter方法变成属性赋值。</p></li><li><p>只定义getter方法，不定义setter方法就是一个只读属性。</p></li><li><p>Python支持多继承，可以将共有的方法定义成一个方法类。基于Python的动态特性，只要拥有相同方法名的类，即可体现出类的多态性。</p></li><li><p><code>MixIn</code>设计模式是主线通过单一继承实现，但是需要“混入”额外的功能，可以通过多重继承来实现。</p></li><li><p>直接打印一个对象的信息，会调用类中的<code>__str__()</code>。直接显示变量调用，会调用类中的<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。样例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Student object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment"># 初始化两个计数器a，b</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self <span class="token comment"># 实例本身就是迭代对象，故返回自己</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token comment"># 计算下一个值</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&gt;</span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token comment"># 退出循环的条件</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token comment"># 返回下一个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要表现得像list那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要使用切片功能，需要在<code>__getitem__()</code>函数中对传入的参数类型进行判断。使用<code>if isinstance(参数，slice)：</code>，可以获取切片的start参数和stop参数。</p></li><li><p>对于在类中找不到的属性，python会调用<code>__getattr__</code>函数。默认返回None。可以用于url的动态调用，如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_path <span class="token operator">=</span> path    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Chain<span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_path    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p></li><li><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p></li><li><p>枚举类，<code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> EnumMonth <span class="token operator">=</span> Enum<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Mar'</span><span class="token punctuation">,</span> <span class="token string">'Apr'</span><span class="token punctuation">,</span> <span class="token string">'May'</span><span class="token punctuation">,</span> <span class="token string">'Jun'</span><span class="token punctuation">,</span> <span class="token string">'Jul'</span><span class="token punctuation">,</span> <span class="token string">'Aug'</span><span class="token punctuation">,</span> <span class="token string">'Sep'</span><span class="token punctuation">,</span> <span class="token string">'Oct'</span><span class="token punctuation">,</span> <span class="token string">'Nov'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> member <span class="token keyword">in</span> Month<span class="token punctuation">.</span>__members__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'=&gt;'</span><span class="token punctuation">,</span> member<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。自定义枚举类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@unique</span><span class="token keyword">class</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    Sun <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># Sun的value被设定为0</span>    Mon <span class="token operator">=</span> <span class="token number">1</span>    Tue <span class="token operator">=</span> <span class="token number">2</span>    Wed <span class="token operator">=</span> <span class="token number">3</span>    Thu <span class="token operator">=</span> <span class="token number">4</span>    Fri <span class="token operator">=</span> <span class="token number">5</span>    Sat <span class="token operator">=</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>type()</code>函数可以查看一个类型或变量的类型，还可以创建class。</p></li><li><p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p><ol><li><p>class的名称；</p></li><li><p>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</p></li><li><p>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 先定义函数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s.'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Hello <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建Hello class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>可以使用metaclass控制类的创建行为，你可以把类看成是metaclass创建出来的“实例”。按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在子类中调用父类方法时，可以通过如下语句进行编写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">super</span><span class="token punctuation">(</span>child_class<span class="token punctuation">,</span>child_object<span class="token punctuation">)</span><span class="token punctuation">.</span>parent_attribute<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数表示调用父类的起始处，也就是子类的名字。</p><p>第二个参数表示类实例（一般使用self）。</p><p>第三个参数表示需要传入父类函数的参数，只有self是可以不用传入。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模块</title>
      <link href="/2019/07/17/cheng-xu-she-ji/python-mo-kuai/"/>
      <url>/2019/07/17/cheng-xu-she-ji/python-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h2><ul><li><p>在Python中，一个.py文件就是一个模块。好处是<strong>提高了代码的可维护性，避免函数名和变量名的冲突，便于使用</strong>。模块名与文件名相同。</p></li><li><p>利用包名来避免模块名相同的情况。<strong>每个包下面都必须要有一个<code>__int__.py</code>文件</strong>，否则就是只是一个普通文件夹，而非一个包。<code>__int__.py</code>文件本身就是一个模块，模块名为当前文件夹的名字。</p></li><li><p>任何模块代码的第一个字符串都被视为模块的文档注释。</p></li><li><p>进行模块测试时，使用以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><code>if __name__ == '__main__'</code> 的意思是：当 <code>.py</code> 文件被直接运行时，<code>if __name__ =='__main__'</code> 之下的代码块将被运行；当 <code>.py</code> 文件以模块形式被导入时，<code>if __name__ =='__main__'</code>之下的代码块不会被运行。</p><ul><li><code>__author__</code>、<code>__name__</code>等是特殊变量，模块定义的文档注释可以用特殊变量<code>__doc__</code>访问。变量名前面加上下划线的变量不应该直接被引用。</li><li>默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数式编程</title>
      <link href="/2019/07/16/cheng-xu-she-ji/python-han-shu-shi-bian-cheng/"/>
      <url>/2019/07/16/cheng-xu-she-ji/python-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Python函数式编程"><a href="#Python函数式编程" class="headerlink" title="Python函数式编程"></a>Python函数式编程</h2><ul><li><p>函数式编程没有变量，在确定输入时，输出就已经确定了，没有因为变量的不确定导致的副作用。允许将番薯本身作为参数传入另一个函数，允许返回一个函数。</p></li><li><p>一个函数可以接收另一个函数作为参数，称之为高阶函数。</p></li><li><p><code>map()</code>函数接收两个参数，一个是函数，一个是Iterable。<code>map()</code>将传入的函数传入到序列的每一个元素，并将结果作为新的<code>Iterator</code>返回。</p><span id="more"></span></li><li><p><code>reduce()</code>函数接收两个参数，将结果继续和序列的下一个元素做累计运算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre><code class="python">from functools import reduceDIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}def char2num(s):    return DIGITS[s]def str2int(s):    return reduce(lambda x, y: x * 10 + y, map(char2num, s))<pre class="line-numbers language-none"><code class="language-none">- `filter()`函数用于过滤序列，接收一个函数和一个序列。`filter()`把传入的函数依次作用于每个元素，然后根据返回值是`True`还是`False`决定保留还是丢弃该元素，返回的是一个惰性序列。需要用`list()`强制取出。- 埃式筛法实现获取素数，思想是通过了除去所有数字的倍数，获得素数。实现代码如下：  ```python  def _odd_iter():      n = 1      while True:          n = n + 2          yield n  def _not_divisible(n):      return lambda x: x % n &gt; 0  def primes():      yield 2      it = _odd_iter() # 初始序列      while True:          n = next(it) # 返回序列的第一个数          yield n          it = filter(_not_divisible(n), it) # 构造新序列  for x in primes():      print(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p><code>sorted()</code>函数可以对list进行排序，接收一个list和一个key来定义自定义的序列，如<code>key=abs</code>，还有一个参数<code>reverse=True</code>。</p></li><li><p>当返回值为一个函数时，调用时需要加上参数后再加上()才能调用。参数会传入函数内部的函数，返回一个装有数据的函数闭包，调用外函数时，每次调用都会返回一个新的函数。返回的函数并不会立即执行，而是知道调用了f()才执行。<strong>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p></li><li><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p></li><li><p>函数对象有一个<code>_name_</code>属性，可以获取到函数的名字。</p></li><li><p>在代码运行期间动态增加功能的方式，称之为装饰器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#由于此装饰器需要参数，所以要再套一层</span>    <span class="token keyword">def</span> <span class="token function">myDecorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#装饰器的核心，接受函数对象做参数，返回包装后的函数对象</span>        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">myWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#包装的具体过程</span>            sign <span class="token operator">=</span> <span class="token string">"&lt;"</span> <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">"&gt;"</span>            <span class="token keyword">return</span> sign <span class="token operator">+</span> func<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> sign        <span class="token keyword">return</span> myWrapper    <span class="token keyword">return</span> myDecorator<span class="token decorator annotation punctuation">@setTag</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token comment">#用@标签在定义函数时套上装饰器</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">    此时被装饰的函数的属性会被修改，改成装饰器的包装的具体函数的名字。可以使用`@functools.wraps(func)`，放在第二层嵌套后面。  - 偏函数可以降低函数的使用难度，由`functools`提供。作用是把一个函数的某些参数固定住（设置默认值），返回一个新的函数。可以接收函数对象、`*args`、`**kw`。如下所示：  ```python  int2=functools.partial(int,base=2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级特性</title>
      <link href="/2019/07/15/cheng-xu-she-ji/python-gao-ji-te-xing/"/>
      <url>/2019/07/15/cheng-xu-she-ji/python-gao-ji-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Python语法糖"><a href="#Python语法糖" class="headerlink" title="Python语法糖"></a>Python语法糖</h2><hr><ul><li><p>对于取制定索引范围的操作，Python提供了切片(Slice)实现。例如：<code>L[0:3]</code>，这里表示的是从索引0开始取，知道索引3为止，<strong>左闭右开的区间</strong>。<em>如果第一个数是0，还可以省略</em>。<code>[:10:2]</code>其中的2表示每两位取一个。<code>[:]</code>表示原样复制一个list。</p></li><li><p>默认情况下，dict迭代的是key。如果要迭代value，可以使用<code>for value ind.values()</code>。如果需要同事迭代key和value，可以使用<code>for k,v in d.items()</code>。</p><span id="more"></span></li><li><p>通过collections模块的Iterable类型判断是否是一个可迭代对象。<code>isinstance(变量,Iterable)</code>，这会返回一个布尔值。</p></li><li><p><code>enumerate</code>函数可以将一个list变成一个索引-元素树。</p></li><li><p>使用列表生成器来生成有一定复杂度的list。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; [x * x for x in range(1, 11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中还可以加入if判断</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以嵌套使用</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">&gt;&gt;&gt; [m + n for m in 'ABC' for n in 'XYZ']['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>要善于使用生成器，避免存有大量有规律的数组存在。启用方法就是将列表生成器的<code>[]</code>替换成<code>()</code>。可以通过<code>next()</code>函数来获取生成器的下一个返回值。generator是一个可迭代对象。直接调用返回的是一个生成器对象。</p></li><li><p>可以使用<code>yield</code>定义generation。每次调用<code>next()</code>时执行generation，遇到<code>yield</code>语句返回，再次执行从上次返回<code>yield</code>处继续执行。</p></li><li><p>用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p></li><li><p><code>a, b = b, a + b</code>本质上等于a=b，同时b=a+b。先赋值，后改变a、b值。</p></li><li><p>生成器是<code>Iterator</code>对象，而<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，但不是<code>Iterator</code>。若想将其变成<code>Iterator</code>可以使用<code>iter()</code>函数。本质上**<code>Iterator</code>是一个数据流，可以被<code>next()</code>函数调用并不断返回下一个数据，直至抛出<code>StopIteration</code>错误。期间无法获知序列长度，惰性计算。**凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型，凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列。</p></li><li><p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QoS知识</title>
      <link href="/2019/07/13/yun-ji-suan/qos-zhi-shi/"/>
      <url>/2019/07/13/yun-ji-suan/qos-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>QoS(Quality of Service)表示的是服务质量。广义上讲，服务质量涉及网络应用的方方面面，只要是对网络应用有利的措施，其实都是在提高服务质量。</p><h3 id="2-QoS模型"><a href="#2-QoS模型" class="headerlink" title="2. QoS模型"></a>2. QoS模型</h3><ol><li><p>Best Effort<br>应用可以在任何时候，发出任意数量的报文，网络尽最大可能来发送报文，对带宽、时延、抖动和可靠性等不提供任何保证。<br>Best Effort是Internet的缺省服务模型，通过FIFO（First In First Out，先进先出）队列来实现。<br>尽力而为的服务实质上并不属于QoS的范畴，因为在转发尽力而为的通信时，并没有提供任何服务或转发保证。</p></li><li><p>2.DiffServ</p><p>根据服务要求对不同任务的数据进行分类，对报文按类进行优先级标记，然后有差别的提供服务。为重要的应用提供端对端的ＱoS。通过以下技术实现： </p></li></ol><ul><li>流量标记与控制技术：它根据报文的CoS（Class of Service，服务等级）域、ToS域（对于IP报文是指IP优先级或者DSCP）、IP报文的五元组（协议、源地址、目的地址、源端口号、目的端口号）等信息进行报文分类，完成报文的标记和流量监管。目前实现流量监管技术多采用令牌桶机制。</li><li>拥塞管理与拥塞避免技术：WRED、PQ、CQ、WFQ、CBQ等队列技术对拥塞的报文进行缓存和调度，实现拥塞管理与拥塞避免。</li></ul><ol start="3"><li><p>IntServ</p><p>Integrated Service，综合服务。在这种模型中，节点在发送报文前，需要向网络申请资源预留，确保网络能够满足数据流的特定服务要求。</p><p>IntServ可以提供保证服务和负载控制服务两种服务，保证服务提供延迟和带宽来满足应用程序的要求；负载控制服务保证即使在网络过载的情况下，也能对报文提供与网络未过载时类似的服务。</p><p>在IntServ模型中，网络资源的申请是通过信令来完成的，应用程序首先通知网络它自己的流量参数和需要的特定服务质量请求，包括带宽、时延等，应用程序一般在收到网络的确认信息，即确认网络已经为这个应用程序的报文预留了资源后，才开始发送报文。同时应用程序发出的报文应该控制在流量参数描述的范围以内。负责完成保证服务的信令为RSVP（Resource Reservation Protocol，资源预留协议），它通知网络设备应用程序的QoS需求。RSVP是在应用程序开始发送报文之前来为该应用申请网络资源的，所以是带外信令。</p><p>保证服务要求为单个流预先保留所有连接路径上的网络资源，而当前在Internet主干网络上有着成千上万条应用流，保证服务如果要为每一条流提供QoS服务就变得不可想象了。因此，IntServ模型很难独立应用于大规模的网络，目前主要与MPLS TE（Traffic Engineering，流量工程）结合使用。</p></li></ol><h3 id="3-QoS基本原理"><a href="#3-QoS基本原理" class="headerlink" title="3. QoS基本原理"></a>3. QoS基本原理</h3><ol><li><p>流量分类与标记</p><p>将流量划分成多个优先级或多个服务类。如使用以太网帧中802.1Q头保留的User Priority(用户优先级)字段标记服务级别，可以将以太网帧最多分成23 = 8类；使用IP报文头的ToS（Type of service，服务类型）字段的前三位（即IP优先级）来标记报文，可以将报文最多分成23 = 8类；使用DSCP（Differentiated Services Codepoint，区分服务编码点，ToS域的前6位），则最多可分成26 = 64类。在报文分类后，就可以将其它的QoS特性应用到不同的分类，实现基于类的拥塞管理、流量整形等。</p><p>对于MPLS网络报文，则一般是根据MPLS报文中的EXP域进行处理。EXP域包括3位，虽然RFC 3032把它叫做实验域，但它通常作为MPLS报文的CoS域，与IP网络的ToS或DSCP域等效。</p><p>对于流量的分类，上面提到的关于以太网帧的Cos域、IP报文的ToS域等与MPLS报文的EXP域等仅是分类的一种情况，其实几乎可以对报文的任何信息段进行分类，比如也可以根据源IP地址、目的IP地址、源端口号、目的端口号、协议ID等进行流量的分类。</p><p>虽然流量分类几乎可以根据报文的任何字段进行，但是流量分类标记则一般只对802.1Q 以太网帧的CoS域、IP报文的ToS域、MPLS报文的EXP域进行标记。<strong>流量的标记主要的目的就是让其他处理此报文的应用系统或设备知道该报文的类别，并根据这种类别对报文进行一些事先约定了的处理。</strong></p><p>例如，在网络的边界做如下分类和标记：</p><p>1）所有VoIP数据报文聚合为EF业务类，将报文的IP优先级标记为5，或者将DSCP值标记为EF；</p><p>2）所有VoIP控制报文聚合AF业务类，将报文的IP优先级标记为4，或者将DSCP值标记为AF31。</p><p>当报文在网络边界被标记分类之后，在网络的中间节点，就可以根据标记，对不同类别的流量给予差别服务了。例如：对上述例子中的EF类业务保证时延和减少抖动，同时进行流量监管；对AF业务类在网络拥塞时仍然保证一定的带宽，等等。</p></li><li><p>拥塞管理技术原理</p><ol><li><p>拥塞管理的基本概念</p><p>在计算机数据通信中，通信信道是被多个计算机共享的，并且，广域网的带宽通常要比局域网的带宽小，这样，当一个局域网的计算机向另一个局域网的计算机发送数据时，由于广域网的带宽小于局域网的带宽，数据将不可能按局域网发送的速度在广域网上传输。此时，处在局域网和广域网之间的路由器将不能发送一些报文，即网络发生了拥塞。</p><p>如下图所示，当公司分支1向公司总部以100M的速度发送数据时，将会使Router2的串口S0/1发生拥塞。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_%E7%BD%91%E7%BB%9C%E6%8B%A5%E5%A1%9E.png"></p><p>拥塞管理是指网络在发生拥塞时，如何进行管理和控制。处理的方法是使用队列技术。将所有要从一个接口发出的报文进入多个队列，按照各个队列的优先级进行处理。不同的队列算法用来解决不同的问题，并产生不同的效果。常用的队列技术有FIFO、PQ、CQ、WFQ、CBWFQ等，下文逐一介绍这些常用队列技术的基本原理。</p></li><li><p>FIFO</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_FIFO.png"></p><p>FIFO队列不对报文进行分类，当报文进入接口的速度大于接口能发送的速度时，FIFO按报文到达接口的先后顺序让报文进入队列，同时，FIFO在队列的出口让报文按进队的顺序出队，先进的报文将先出队，后进的报文将后出队。</p><p>FIFO队列具有处理简单，开销小的优点。但FIFO不区分报文类型，采用尽力而为的转发模式，使对时间敏感的实时应用（如VOIP）的延迟得不到保证，关键业务的带宽也不能得到保证。</p></li><li><p>PQ(Priority Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_PQ.png"></p><p>优先队列是针对关键业务应用设计的。关键业务有一个重要特点，在拥塞发生时根据优先获得服务以减少响应的延迟。PQ可以根据网络协议（如IP、IPX）、数据流入接口、报文长短、IP报文的ToS、五元组（协议ID、源IP地址、目的IP地址、源端口号、目的端口号）等条件进行分类，对于MPLS网络，则根据MPLS报文EXP域值进行分类。最终将所有报文分成最多4类，分别属于PQ的4个队列中的一个，然后，按报文所属类别将报文送入相应的队列。</p><p>$$PQ队列\begin{cases}\text{高优先级队列}\\text{中优先级队列}\\text{正常优先级队列}\\text{低优先级队列}\end{cases}$$</p><p>它们的优先级依次降低。在报文出队的时候，PQ首先让高优先队列中的报文出队并发送，直到高优先队列中的报文发送完，然后发送中优先队列中的报文，同样，直到发送完，然后是正常优先队列和低优先队列。这样，分类时属于较高优先级队列的报文将会得到优先发送，而较低优先级的报文将会在发生拥塞时被较高优先级的报文*<em>抢占**</em>。这样会使得实时业务（如VoIP）的报文能够得到优先处理，非实时业务（如E-Mail）的报文在网络处理完关键业务后的空闲间隙得到处理，既保证了实时业务的优先，又充分利用了网络资源。</p><p>缺点：当较高优先级队列中总有报文存在时，则低优先级队列中的报文将一直得不到服务，出现队列“饿死”现象。</p></li><li><p>CQ(Custom Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_CQ.png"></p><p>CQ的分类方法和PQ基本相同，不同的是它最终将所有报文分成最多至17类，每类报文对应CQ中的一个队列，接口拥塞时，报文按匹配规则被送入对应的队列；如果报文不匹配任何规则，则被送入缺省队列（缺省队列默认为1，可配置修改缺省队列）。</p><p>CQ的17个队列中，0号队列是优先队列，路由器总是先把0号队列中的报文发送完，然后才处理1到16号队列中的报文，所以0号队列一般作为<strong>系统队列</strong>，把实时性要求高的交互式协议报文放到0号队列。1到16号队列调度采用<strong>轮询</strong>方式，按照用户预先配置的额度依次从1到16号用户队列中取出一定数量的报文发送。如果轮询到某队列时该队列恰好为空，则立即转而轮询下一个队列。</p><p>优点：既保证关键业务能获得较多的带宽，又不至于使非关键业务得不到带宽。</p><p>缺点：由于采用轮询调度各个队列，CQ无法保证任何数据流的延迟。</p></li><li><p>WFQ(Weighted Fair Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_WFQ.png"></p><p>加权公平队列对报文按流特征进行分类，对于IP网络，相同源IP地址、目的IP地址、源端口号、目的端口号、协议号、ToS的报文属于同一个流，而对于MPLS网络，具有相同的标签和EXP域值的报文属于同一个流。每一个流被分配到一个队列，该过程称为<strong>散列</strong>，采用HASH算法来自动完成，这种方式会尽量将不同特征的流分入不同的队列中。每个队列类别可以看作是一类流，其报文进入WFQ中的同一个队列。<em>WFQ允许的队列数目是有限的，用户可以根据需要配置该值。</em></p><p>在出队的时候，WFQ按流的优先级（precedence）来分配每个流应占有出口的带宽。优先级的数值越小，所得的带宽越少。优先级的数值越大，所得的带宽越多。这样就保证了相同优先级业务之间的公平，体现了不同优先级业务之间的权值。</p><p>优点：在于配置简单，有利于小包的转发，每条流都可以获得公平调度，同时照顾高优先级报文的利益，WFQ均衡各个流的延迟与抖动。</p><p>缺点：由于流是自动分类，无法手工干预，故缺乏一定的灵活性，且受资源限制，当多个流进入同一个队列时无法提供精确服务，无法保证每个流获得的实际资源量，不适合延迟敏感的业务应用。</p></li><li><p>CBQ(Class Bases Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_CBQ.jpg"></p><p>基于类的队列首先根据IP优先级或者DSCP、输入接口、IP报文的五元组等规则来对报文进行分类；对于MPLS网络的LSR，主要是根据EXP域值进行分类。然后让不同类别的报文进入不同的队列。对于不匹配任何类别的报文，报文被送入系统定义的缺省类。</p><p>CBQ包括一个低时延队列LLQ（Low Latency Queuing，低时延队列），用来支撑EF（Expedited Forwarding，快速转发）类业务，绝对优先发送，保证时延。进入EF的报文在接口没有发生拥塞的时候（此时所有队列中都没有报文），所有属于EF的报文都可以被发送。在接口发生拥塞的时候（队列中有报文时），进入EF的报文被限速，超出规定流量的报文将被丢弃。另外有64个BQ队列（Bandwidth Queuing，带宽保证队列），用来支撑AF（Assured Forwarding，确保转发）类业务，可以保证每一个队列的带宽及可控的时延。系统调度报文出队列的时候，按用户为各类报文设定的带宽将报文出队发送。这种队列技术应用了先进的队列调度算法，可以实现各个类的队列的公平调度。当接口中某些类别的队列没有报文时，BQ队列的报文还可以公平地得到空闲的带宽，和时分复用系统相比，大大提高了线路的利用率。同时，在接口拥塞的时候，仍然能保证各类报文得到用户设定的最小带宽。</p><p><em>AF业务类型着重定义了确保带宽的服务质量，EF业务则在确保带宽的基础 之上，增加了低时延、低抖动等服务质量定义。BE业务顾名思义，没有特殊的服务质量要求</em></p><p>最后还有一个WFQ队列，对应BE（Best Effort，尽力传送）业务，使用接口剩余带宽进行发送。</p><p>CBQ可根据报文的输入接口、满足ACL情况、IP Precedence、DSCP、EXP、Label等规则对报文进行分类、进入相应队列。对于进入EF和AF的报文，要进行测量；考虑到链路层控制报文的发送、链路层封装开销及物理层开销（如ATM信元头），建议EF与AF占用接口的总带宽不要超过接口带宽的75%。</p><p>优点：CBQ可为不同的业务定义不同的调度策略（如带宽、时延等）。</p><p>缺点：由于涉及到复杂的流分类，对于高速接口（GE以上）启用CBQ特性系统资源存在一定的开销。</p></li><li><p>RTP(Real Time Protocol Priority Queuing) </p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_RTP.jpg"></p><p>RTP优先队列是一种保证实时业务（包括语音与视频业务）服务质量的简单队列技术。其原理就是将承载语音或视频的RTP报文送入高优先级队列，使其得到优先发送，保证时延和抖动降低为最低限度，从而保证了语音或视频这种对时延敏感业务的服务质量。</p><p>RTP优先队列将RTP报文送入一个具有较高优先级的队列，RTP报文是端口号在一定范围内为偶数的UDP报文，端口号的范围可以配置，一般为16384~32767。RTP优先队列可以同前面所述的任何一种队列（包括FIFO、PQ、CQ、WFQ与CBQ）结合使用，它的优先级是最高的。由于CBQ中的EF完全可以解决实时业务，所以不推荐将RTP优先队列与CBQ结合应用。</p><p>由于对进入RTP优先队列的报文进行了限速，超出规定流量的报文将被丢弃，这样在接口拥塞的情况下，可以保证属于RTP优先队列的报文不会占用超出规定的带宽，保护了其他报文的应得带宽，解决了PQ的高优先级队列的流量可能“饿死”低优先级流量的问题。</p></li></ol></li><li><p>拥塞避免原理</p><p>传统的丢弃策略采用尾部丢弃的方法，同等对待所有报文，不对报文进行服务等级的区分。对于TCP报文，如果大量的报文被丢弃，将造成TCP超时，从而引发TCP的慢启动和拥塞避免机制，使TCP减少报文的发送。当队列同时丢弃多个TCP连接的报文时，将造成多个TCP连接同时进入慢启动和拥塞避免，称之为：<strong>TCP全局同步</strong>。这样多个TCP连接发向队列的报文将同时减少，使得发向队列的报文的量不及线路发送的速度，减少了线路带宽的利用。并且，发向队列的报文的流量总是忽大忽小，使线路的上的流量总在极少和饱满之间波动。</p><p>为了避免这种情况的发生，队列可以采用加权随机早期检测<strong>WRED（Weighted Random Early Detection）</strong>的报文丢弃策略（WRED与RED的区别在于前者引入IP优先权，DSCP值，和MPLS EXP来区别丢弃策略）。采用WRED时，用户可以设定队列的阈值（threshold）。当队列的长度小于低阈值时，不丢弃报文；当队列的长度在低阈值和高阈值之间时，WRED开始随机丢弃报文（队列的长度越长，丢弃的概率越高）；当队列的长度大于高阈值时，丢弃所有的报文。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_WRED.png"></p></li><li><p>流量监控原理</p><p>流量监管（Commit Access Rate，简称CAR）的典型作用是限制进入某一网络的某一连接的流量与突发。在报文满足一定的条件时，如某个连接的报文流量过大，流量监管就可以对该报文采取不同的处理动作，例如丢弃报文，或重新设置报文的优先级等。通常的用法是使用CAR来限制某类报文的流量，例如限制HTTP报文不能占用超过50%的网络带宽。</p><p>CAR利用令牌桶（Token Bucket，简称TB）进行流量控制。下图所示为利用CAR进行流量控制的基本处理过程：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_CAR.png"></p><p>首先，根据预先设置的匹配规则来对报文进行分类，如果是没有规定流量特性的报文，就直接继续发送，并不需要经过令牌桶的处理；如果是需要进行流量控制的报文，则会进入令牌桶中进行处理。如果令牌桶中有足够的令牌可以用来发送报文，则允许报文通过，报文可以被继续发送下去。如果令牌桶中的令牌不满足报文的发送条件，则报文被丢弃。这样，就可以对某类报文的流量进行控制。</p><p>在实际应用中，CAR不仅可以用来进行流量控制，还可以进行报文的标记（mark）或重新标记（re-mark）。具体来讲就是CAR<strong>可以设置IP报文的优先级或修改IP报文的优先级，达到标记报文的目的</strong>。</p></li><li><p>流量整形原理</p><p>通用流量整形（Generic Traffic Shaping，简称GTS）可以对不规则或不符合预定流量特性的流量进行整形，以利于网络上下游之间的带宽匹配。</p><p>GTS与CAR一样，均采用了令牌桶技术来控制流量。GTS与CAR的主要区别在于：利用CAR在接口的出、入方向进行报文的流量控制，对不符合流量特性的报文进行丢弃；而GTS只在接口的出方向对于不符合流量特性的报文进行缓冲，减少了报文的丢弃，同时满足报文的流量特性，但增加了报文的延迟。</p><p>GTS的基本处理过程如下图所示，其中用于缓存报文的队列称为GTS队列。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_GTS.png"></p></li><li><p>物理接口总速率限制原理</p><p>利用物理接口总速率限制（Line Rate，简称LR）可以在一个物理接口上，限制接口发送报文（包括紧急报文）的总速率。</p><p>LR的处理过程仍然采用令牌桶进行流量控制。如果用户在路由器的某个接口上配置了LR，规定了流量特性，则所有经由该接口发送的报文首先要经过LR的令牌桶进行处理。如果令牌桶中有足够的令牌可以用来发送报文，则报文可以发送。如果令牌桶中的令牌不满足报文的发送条件，则报文入QoS队列进行拥塞管理。这样，就可以对通过该物理接口的报文流量进行控制。</p><p>LR的基本处理过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_LR.png"></p><h3 id="4-其他提高QoS的技术"><a href="#4-其他提高QoS的技术" class="headerlink" title="4. 其他提高QoS的技术"></a>4. 其他提高QoS的技术</h3></li><li><p>链路效率机制</p><p> 链路效率机制，用于改善链路的性能，间接提高网络的QoS，如降低链路发包的时延（针对特定业务）、调整有效带宽。链路效率机制有很多种，下面介绍两种比较典型的链路效率机制及其基本原理。</p><ol><li><p>链路分片与交叉（Link Fragment &amp; Interleave，LFI）</p><p>  对于低速链路，即使为语音等实时业务报文配置了高优先级队列（如RTP优先队列或LLQ），也不能够保证其时延与抖动，原因在于接口在发送其他数据报文的瞬间，语音业务报文只能等待，而对于低速接口发送较大的数据报文要花费相当长的时间。采用LFI以后，数据报文（非RTP实时队列和LLQ中的报文）在发送前被分片、逐一发送，而此时如果有语音报文到达则被优先发送，从而保证了语音等实时业务的时延与抖动。LFI主要用于低速链路。</p><p>  链路效率机制的工作原理图如下所示：</p><p>  <img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_LFI.png"></p><p>  如上图所示，应用LFI技术，在大报文出队的时候，可以将其分为定制长度的小片报文，这就使RTP优先队列或LLQ中的报文不必等到大片报文发完后再得到调度，它等候的时间只是其中小片报文的发送时间，这样就很大程度的降低了低速链路因为发送大片报文造成的时延。</p></li><li><p>RTP报文头压缩（RTP Header Compression，CRTP）</p><p> CRTP用于RTP（Real-time Transport Protocol）协议，对IP头、UDP头和RTP头进行压缩，通常在低速链路上使用。可将40字节的IP/UDP/RTP头压缩到2~4个字节（不使用UDP校验和可到2字节），提高链路带宽的利用率。CRTP主要得益于同一会话的语音分组头和语音分组头之间的差别往往是不变的，因此只需传递增量。</p><p> RTP协议用于在IP网络上承载语音、视频等实时多媒体业务。RTP报文包括头部分和数据部分，RTP的头部分包括：12字节的RTP头，加上20字节的IP头和8字节的UDP头，就是40字节的IP/UDP/RTP头；RTP数据部分典型载荷是20字节到160字节。为了避免不必要的带宽消耗，可以使用CRTP特性对报文头进行压缩。CRTP可以将IP/UDP/RTP头从40字节压缩到2～4字节，对于40字节的载荷，头压缩到4字节，压缩比为（40+40）/（40+4），约为1.82，可见效果是相当可观的，可以有效的减少链路带宽的消耗，尤其是低速链路。</p><p> RTP报文头压缩的处理过程如下图所示：</p><p> <img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/weiyouwozuiku.github.io@src/source/_posts/%E4%BA%91%E8%AE%A1%E7%AE%97/QoS%E7%9F%A5%E8%AF%86/QoS%E7%9F%A5%E8%AF%86_CRTP.png"></p></li></ol></li><li><p>链路层QoS技术</p><p> 链路层QoS技术主要针对ATM（Asynchronous Transfer Mode，异步传输模式）、帧中继等链路层协议支持QoS。ATM作为一种面向连接的技术，提供对QoS最强有力的支持，而且可以基于每个连接提供特定的QoS保证；帧中继网络确保连接的CIR（Committed Information Rate，承诺信息速率）最小，即在网络拥塞时，传输速度不能小于这个值。</p><ol><li><p>ATM QoS</p><p> ATM是异步传输模式（Asynchronous Transfer Mode）的简称，以信元为基本单位进行信息传输、复接和交换。ATM信元具有53字节的固定长度，其中5个字节构成信元头部，主要用来标识虚连接，另外也完成了一些功能有限的流量控制，拥塞控制，差错控制等功能，其余48个字节是有效载荷。ATM是面向连接的交换，其连接是逻辑连接，即虚电路。每条虚电路（Virtual Circuit，VC）用虚路径标识符（Virtual Path Identifier，VPI）和虚通道标识符（Virtual Channel Identifier，VCI）来标识。一个VPI/VCI值对只具有本地意义，不具有全局有效性。它在ATM节点上被翻译。当一个连接被释放时，与此相关的VPI/VCI值对也被释放，它被放回资源表，供其它连接使用。</p><p> ATM中每一条VC都有一定的QoS保障，这是由ATM的连接管理来实现的。当用户与网络或网络与网络建立一个连接的时候，双方就确定了一份通信契约，契约中包括流量参数和QoS参数两部分。此通信契约为双方所共识，双方必须遵守。流量参数包括峰值信元速率（PCR，Peak Cell Rate）、持续信元速率（SCR，Sustained Cell Rate）、最小信元速率（MCR，Minimum Cell Rate）以及最大突发量（MBS，Maximum Burst Size），它们描述业务本身的流量特性，又称为源流量参数。QoS参数主要包括最大信元传递时延（MCTD，MeanCell Transfer Delay）、信元抖动容限（CDVT，CellDelayVariationTolerance）和信元丢失率（CLR，Cell Loss Ratio）， MCTD是信元从一个端点到另一个端点所需要的时间， CDVT是信元间隔的上限， CLR是可以接受的因网络拥塞而导致信元丢失比例。</p><p> ATM端系统负责确保传输的流量符合QoS合同。ATM端系统通过缓冲数据来对流量进行整形，并按约定的QoS参数传输通信。ATM交换机控制每个用户的通信指标，并将其与QoS合同进行比较。对于超过了QoS合同的通信，ATM节点可以设置信元的CLP（Cell Loss Priority，信元丢弃优先级）位。在网络拥塞时，CLP置位的信元被丢弃的可能性更大。</p><p> ATM网络拥塞管理的基本思想在于：引入预防性控制措施，不再是出现拥塞之后再采取措施来消除拥塞，而是通过精心管理网络资源来避免拥塞的出现。</p></li><li><p>FR QoS</p><p> FR（Frame Relay，帧中继）是一种统计复用的协议，它能够在单一物理传输线路上提供多条虚电路。每条虚电路用DLCI（Data Link Connection Identifier，数据链路连接标识）来标识。每条虚电路通过LMI（Local Management Interface，本地管理接口）协议检测和维护虚电路的状态。</p><p> 帧中继采用VC（Virtual Circuit）虚电路技术，即帧中继传送数据使用的传输链路是逻辑连接，而不是物理连接。虚电路是面向连接的，可以保证用户帧按顺序传送至目的地。根据虚电路建立方式的不同，将帧中继虚电路分为两种类型：永久虚电路（PVC，Permanent Virtual Circuit）和交换虚电路（SVC，Switched Virtual Circuit）。PVC是手工设置产生的虚电路，而SVC是通过协议协商自动创建和删除的虚电路。</p><p> 帧中继报头中的3个位提供了帧中继网络中的拥塞控制机制，这3个位分别叫做向前显式拥塞通知（FECN，Forward Explicit Congestion Notification）位、向后显式拥塞通知（BECN，Backward Explicit Congestion Notification）位和丢弃合格（DE，Discard Eligible）位。可以通过帧中继交换机将FECN位置1来告知诸如路由器等目标数据终端设备（DTE，Data Terminal Equipment），在帧从源传送到目的地的方向发生了拥塞。帧中继交换机将BECN位置1则告知目标路由器，在帧从源传送到目的地的反方向上发生了拥塞。DE位由路由器或其他DTE设备设置，指出被标记的帧没有传输的其他帧那么重要，它在帧中继网络中提供了一种基本的优先级机制，如果发生拥塞时，DE位置位的帧会被优先丢弃。</p><p> 帧中继流量整形（FRTS，Frame Relay Traffic Shaping）对从帧中继VC输出的通信进行整形，使之与配置速率一致，它将超出平均速率的分组放到缓冲区来使突发通信变得平滑。根据配置的排队机制，当有足够的可用资源时，这些缓冲的分组出队并等候被传输。排队算法是基于单个VC配置的，它只能针对接口的出站通信进行设置。FRTS可对每个VC的流量进行整形，将其峰值速率整形为承诺信息速率（CIR，Committed Information Rate）或其他定义的值，如超额信息速率（EIR，Excess Information Rate）。自适应模式的FRTS还能够根据收到的网络BECN拥塞指示符降低帧中继VC的输出量，将PVC的输出流量整形为与网络的可用带宽一致。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QoS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数</title>
      <link href="/2019/07/13/cheng-xu-she-ji/python-han-shu/"/>
      <url>/2019/07/13/cheng-xu-she-ji/python-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h2><ul><li><p>调用函数时，如果传入的参数或者类型不对，Python会报TypeError的错误。</p></li><li><p><code>int(参数)</code>将参数转换成整数，其他类型也用类似的函数进行转换。</p></li><li><p>函数名是指向一个函数对象的引用。可以将函数赋值给另一个对象，效果是给这个函数起了别名。</p></li><li><p>函数定义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）：函数逻辑<span class="token keyword">return</span> 返回值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>没有返回值的函数，其实也会返回结果，是None。返回return None可以简写为return。</p></li></ul><span id="more"></span><ul><li><p>未实现的函数可以将函数体先写成<code>pass</code>。<code>pass</code>表示什么都不做，只有起占位符的作用。</p></li><li><p>定义函数时可以进行数据类型检查，使用<code>isinstance()</code>实现。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>需校验参数<span class="token punctuation">,</span><span class="token punctuation">(</span>数据类型集合或单一数据类型<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'bad operand type'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数return多个值，本质上是返回了一个tuple</p></li><li><p>默认参数同java。必选参数在前，默认参数在后。</p></li><li><p>当不按照顺序进行传参时，需要把参数名写上。</p></li><li><p><strong>默认参数必须指向不变对象！</strong></p></li><li><p>在参数名前面加上*，参数就变成了可变参数。如果传递的参数原本就是一个tuple或者list，那么需要在参数名前加上*，使其编程可变参数。</p></li><li><p>关键字参数就是在参数名前面加上<code>**</code>。如果传入一个dict集合，在参数前加上<code>**</code>。</p></li><li><p>命名关键字参数，可以限制关键字参数中只接收需要的关键字参数。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">def 函数名(参数1,参数2,*,参数三,参数四)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面那个例子的参数三、参数四就是命名关键字，传入时必须要传入参数名。可以有缺省值。</p></li><li><p>通过尾递归来优化递归造成的栈溢出。尾递归是指，在函数返回的时候，调用自身本身，并且，<code>return</code>语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。重点是把每一步计算的值传递到函数中去。如下所示：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> fact_iter<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">fact_iter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> product      <span class="token keyword">return</span> fact_iter<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">*</span> product<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云任务调度算法</title>
      <link href="/2019/07/12/yun-ji-suan/yun-ren-wu-diao-du-suan-fa/"/>
      <url>/2019/07/12/yun-ji-suan/yun-ren-wu-diao-du-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="云任务调度算法"><a href="#云任务调度算法" class="headerlink" title="云任务调度算法"></a>云任务调度算法</h2><p>云环境下评价任务调度性能主要取决于三个性能指标：<strong>完成时间、服务质量、资源利用率</strong>。</p><p>云计算通常将一个大规模计算任务进行分布式并行计算。逻辑上将一个完整的任务（job）通过Map/Reduce模型拆分成若干个子任务（task），依赖不同的调度算法，将子任务分配到不同的资源节点上运行。当所有子任务处理结束，系统将每个子任务执行完毕的任务结果汇总到用户那。</p><p>云计算调度的总目标函数为：</p><p>$$f(x)=min \displaystyle \sum^{n}<em>{i=1} \displaystyle \sum^{m}</em>{j=1}makespan_{ij}cost_{ij}$$</p><p>其中$makespan_{ij}=ECT_{ij}+start(r_{j})$，表示的是任务$t_i$在处理节点$r_j$上执行的最早完成时间。其中$ECT_{ij}$表示任务$t_i$在处理节点$r_j$上执行的预期执行时间，可以通过n×m的矩阵表示。$start(r_j)$表示处理节点的最早可用时间。而$cost_{ij}=ECT*q_j$,$q_j$表示处理节点$q_j$在单位时间上被使用的价格。</p><h3 id="基于网格计算的传统调度算法"><a href="#基于网格计算的传统调度算法" class="headerlink" title="基于网格计算的传统调度算法"></a>基于网格计算的传统调度算法</h3><h4 id="Min-min算法"><a href="#Min-min算法" class="headerlink" title="Min-min算法"></a>Min-min算法</h4><p>思想：<strong>尽可能将需要调度的任务分配给最早可用且执行速度最快的资源，通过获取任务执行的两个最小值，即任务最早执行开始时间和最快执行速度来完成选择</strong></p><p>通俗化理解：选取完成时间最短的任务在运行速度最快的机器上运行。</p><pre class="mermaid">graph TBA{判断任务集合是否为空}--&gt;|不为空|B[求出任务映射到所有可用机器上的最早完成时间]B--&gt;D[找出最早完成时间最小的任务和相应机器]D--&gt;E[将任务映射到机器上并将该任务从任务集合中删除]E--&gt;F[更新机器的期望就绪时间]F--&gt;G[更新其他任务在现在使用的机器上的最早完成时间]G--&gt;AA--&gt;|为空|C[退出程序]</pre><p>缺点：1. 容易导致负载过度集中在能力较强的节点，导致资源不均衡产生的浪费。</p><p>​           2. 长执行时间的任务得不到处理资源。</p><h4 id="Max-min算法"><a href="#Max-min算法" class="headerlink" title="Max-min算法"></a>Max-min算法</h4><p>思想：<strong>将某个任务分配给可用的资源时，将具有最大最早完成时间的任务$t_i$指派给具有最早执行时间的计算资源$r_j$ ，然后更新资源的最早可用时间和任务集，直到全部任务调度完成。</strong></p><p>通俗化理解：将执行时间最长的任务放在运行速度最慢的机器上。</p><pre class="mermaid">graph TBA{判断任务集合是否为空}--&gt;|不为空|B[求出任务映射到所有可用机器上的最早完成时间]B--&gt;C[找出最早完成时间最大的任务和对用的机器]C--&gt;D[任务映射到机器上并将任务从任务集合中删除]D--&gt;E[更新机器的期望就绪时间]E--&gt;F[更新其他任务在机器上的最早完成时间]F--&gt;AA--&gt;|为空|G[退出程序]</pre><p>优点：具有较好的负载均衡性。</p><h4 id="Sufferage算法"><a href="#Sufferage算法" class="headerlink" title="Sufferage算法"></a>Sufferage算法</h4><p>思想：<strong>以任务最小完成时间为调度目标．在Sufferage算法中，将任务的最早完成时间与次早完成时间之间的差值定义为 Sufferage。Sufferage值反映了某个任务如果不分配到完成时间最早的资源上将造成的损失．所以，用该算法调度时总是将资源分配到估计执行损失最大的资源节点上，否则将会遭受最大的损失．当任务发生竞争关系时，先比较各任务的执行损失，再将候选资源分配给损失最大的任务，从而使得调度结果逼近最优解。</strong></p><p>缺点：负载的平衡性不高。</p><hr><h3 id="Hadoop中的任务调度算法"><a href="#Hadoop中的任务调度算法" class="headerlink" title="Hadoop中的任务调度算法"></a>Hadoop中的任务调度算法</h3><p>Hadoop将云计算系统的用户、系统的主控节点、接收并完成计算任务的节点分别抽象为三个角色，即User、Master和Worker。</p><h4 id="FIFO算法"><a href="#FIFO算法" class="headerlink" title="FIFO算法"></a>FIFO算法</h4><p>思想：<strong>根据用户提交作业的先后时间和优先级的高低来进行任务调度。当系统中有空闲Worker请求任务时，Master会选择一个<em>最早提交并且优先级最高的任务</em>分配给该Worker节点。</strong></p><p>优点：易于实现，可保证系统的调度开销小。</p><p>缺点：不能及时相应小作业的请求；不支持抢占。</p><h4 id="公平调度算法-fair-scheduling"><a href="#公平调度算法-fair-scheduling" class="headerlink" title="公平调度算法(fair scheduling)"></a>公平调度算法(fair scheduling)</h4><p>思想：<strong>尽可能满足不同需求的用户能够有平等的机会使用系统资源。当只有一个作业提交到系统后，整个系统的所有计算资源都会被这个作业独占．当有新作业提交时，原作业所占资源中已经完成任务的worker会被释放，供那些新提交的作业使用。</strong></p><p>公平调度算法中，系统通过为用户建立作业池来管理和维护作业，并保证作业调度的公平性。在每个作业池中，各个作业<strong>平分</strong>池内的资源。</p><p>$$公平调度\begin{cases}\text{作业池间的调度            ⇒     最小共享额度及公平共享额度}\\text{作业池内资源槽的调度     ⇒   默认使用基于优先级的FIFO算法}\end{cases}$$</p><p>优点：支持抢占。保证小作业得到合理的响应。</p><p>缺点：不能保证多种类型服务质量需求的作业获得响应所需的资源。且达到较高的满意度。</p><h4 id="计算能力调度算法-capacity-scheduling"><a href="#计算能力调度算法-capacity-scheduling" class="headerlink" title="计算能力调度算法(capacity scheduling)"></a>计算能力调度算法(capacity scheduling)</h4><p>思想：<strong>按照各个队列不同的需求将相应的资源分配出去，保证各个作业都能占用各自需要的资源．当作业被提交给系统后，按照配置文件由系统放入指定的队列，也通过配置文件将系统资源分配给每个队列，各个队列获得指定数量计算资源来运行任务。</strong></p><p>该算法通过建立作业队列来管理和维护作业，对于分配出去但未完成计算任务的资源，或者处于空闲状态的资源，允许各个队列占用。</p><p>$$计算能力调度\begin{cases}\text{队伍间的调度        ⇒    选择一个具有最多空闲空间的队列 }\\text{队伍内的调度        ⇒     默认采用带有优先级的额FIFO}\end{cases}$$</p><p>缺点：不支持抢占；限制了用户占用资源的比例</p><p>优点：能够有效地处理各种类型的作业且考虑了一部分服务质量需求</p><hr><h3 id="智能化的任务调度算法"><a href="#智能化的任务调度算法" class="headerlink" title="智能化的任务调度算法"></a>智能化的任务调度算法</h3><h4 id="遗传算法-genetic-algorithm"><a href="#遗传算法-genetic-algorithm" class="headerlink" title="遗传算法(genetic algorithm)"></a>遗传算法(genetic algorithm)</h4><p>是一种基于生物遗传和进化机制、适合复杂系统优化的自适应概率优化技术。</p><p>思想：<strong>在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程求得最优解。</strong></p><p>$$标准的遗传算法\begin{cases}\text{种群}\\text{适应度函数♥   重要，直接影响收敛速度与最优解的查找}\\text{遗传操作}\end{cases}$$</p><h4 id="粒子群算法-particle-swarm-optimization"><a href="#粒子群算法-particle-swarm-optimization" class="headerlink" title="粒子群算法(particle swarm optimization)"></a>粒子群算法(particle swarm optimization)</h4><p>思想：<strong>采用速度－位置搜索模型，每个粒子代表解空间的一个候选解，解的优劣程度由适应度函数决定</strong></p><p>优点：保留了种群的全局搜索策略；避免了复杂的遗传操作；它特有的记忆使其可以跟踪当前整个种群的最优粒子。</p><h4 id="蚁群算法-ant-colony-optimization"><a href="#蚁群算法-ant-colony-optimization" class="headerlink" title="蚁群算法(ant colony optimization)"></a>蚁群算法(ant colony optimization)</h4><p>思想：是一种群体智能的模拟进化算法 </p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown流程图</title>
      <link href="/2019/07/12/jing-yan-zong-jie/markdown-liu-cheng-tu/"/>
      <url>/2019/07/12/jing-yan-zong-jie/markdown-liu-cheng-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="文字不如图"><a href="#文字不如图" class="headerlink" title="文字不如图"></a>文字不如图</h2><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>Markdown中的流程图都是通过代码实现的，即平时展示代码的地方写流程图代码，使用的语言是<strong>mermaid</strong>。</p><h4 id="连线选择"><a href="#连线选择" class="headerlink" title="连线选择"></a>连线选择</h4><table><thead><tr><th align="center">圆角</th><th align="center">方形</th><th align="center">条件</th><th align="center">圆形</th><th align="center">带箭头的连线</th><th align="center">不带箭头的连线</th></tr></thead><tbody><tr><td align="center">()</td><td align="center">[]</td><td align="center">{}</td><td align="center">(())</td><td align="center">–&gt;</td><td align="center">—</td></tr></tbody></table><table><thead><tr><th align="center">虚线连线</th><th align="center">带文字的虚线连线</th><th align="center">粗连线</th><th align="center">带文字的粗连线</th></tr></thead><tbody><tr><td align="center">-.-</td><td align="center">-. text .-</td><td align="center">==&gt;</td><td align="center">== text ==&gt;</td></tr></tbody></table><p><em>连线上的文字在连线代码后用||包裹</em></p><h4 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h4><pre class="mermaid">graph LRA["方形 ♥#9733;"]--&gt;B(圆角)B--&gt;C{条件a}C--&gt;|a=1|D[结果1]C--&gt;|a=2|E[结果2]F[横向流程图]</pre><h4 id="竖直流程图"><a href="#竖直流程图" class="headerlink" title="竖直流程图"></a>竖直流程图</h4><pre class="mermaid">graph TDA[方形]--&gt;B(圆角)B --&gt; C{条件a}C --&gt;|a=1| D&gt;结果1]C --&gt;|a=2| E((结果2))F[竖向流程图]</pre><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><pre class="mermaid">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</pre><hr><h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><pre class="mermaid">sequenceDiagram    participant A as Alice    participant J as John    A-&gt;&gt;J: Hello John, how are you?    J-&gt;&gt;A: Great!</pre><p>或者使用</p><pre class="mermaid">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    John--&gt;&gt;-Alice: Great!</pre><h4 id="连线选择-1"><a href="#连线选择-1" class="headerlink" title="连线选择"></a>连线选择</h4><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-&gt;</td><td align="center">没有箭头的实线</td></tr><tr><td align="center">–&gt;</td><td align="center">没有箭头的虚线</td></tr><tr><td align="center">-&gt;&gt;</td><td align="center">带箭头的实线</td></tr><tr><td align="center">–&gt;&gt;</td><td align="center">带箭头的虚线</td></tr><tr><td align="center">-x</td><td align="center">实线与末端的十字架（异步）</td></tr><tr><td align="center">–x</td><td align="center">最后用十字线的虚线（异步）</td></tr></tbody></table><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><pre class="mermaid">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    Alice-&gt;&gt;+John: John, can you hear me?    John--&gt;&gt;-Alice: Hi Alice, I can hear you!    John--&gt;&gt;-Alice: I feel great!</pre><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><pre class="mermaid">sequenceDiagram    participant John    Note right of John: Text in note</pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre class="mermaid">sequenceDiagram    Alice-&gt;John: Hello John, how are you?    loop Every minute        John--&gt;Alice: Great!    end</pre><hr><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre class="mermaid">gantt    title A Gantt Diagram    dateFormat  YYYY-MM-DD    section Section    A task           :a1, 2014-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2014-01-12  , 12d    another task      : 24d</pre><pre class="mermaid">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task in the critical line :crit, done, 2014-01-06,24h       Implement parser and jison          :crit, done, after des1, 2d       Create tests for parser             :crit, active, 3d       Future task in critical line        :crit, 5d       Create tests for renderer           :2d       Add to mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       Add gantt diagram to demo page      :after a1  , 20h       Add another diagram to demo page    :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       Add gantt diagram to demo page      :20h       Add another diagram to demo page    :48h</pre>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudSim能耗计算模型</title>
      <link href="/2019/07/12/yun-ji-suan/cloudsim-neng-hao-ji-suan-mo-xing/"/>
      <url>/2019/07/12/yun-ji-suan/cloudsim-neng-hao-ji-suan-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="CloudSim能耗计算模型的不同"><a href="#CloudSim能耗计算模型的不同" class="headerlink" title="CloudSim能耗计算模型的不同"></a>CloudSim能耗计算模型的不同</h2><h3 id="一：CloudSim能耗计算模型综述"><a href="#一：CloudSim能耗计算模型综述" class="headerlink" title="一：CloudSim能耗计算模型综述"></a>一：CloudSim能耗计算模型综述</h3><p>CloudSim定义了一个能耗计算模型接口类<code>PowerModel</code>，分别有5个子类继承，这个五个子类分别为：</p><ol><li>：<code>PowerModelLinear</code>，以线性增长的方式计算能耗。</li><li>：<code>PowerModelSquare</code>，以平方增长的方式计算能耗。</li><li>：<code>PowerModelCubic</code>，以立方增长的方式计算能耗。</li><li>：<code>PowerModelSqrt</code>，以平方根增长的方式计算能耗。</li><li>：<code>PowerModelSpecPower</code>，以基于SPECpower benchmark计算能耗。</li></ol><h3 id="二：CloudSim能耗计算模型分析"><a href="#二：CloudSim能耗计算模型分析" class="headerlink" title="二：CloudSim能耗计算模型分析"></a>二：CloudSim能耗计算模型分析</h3><p>​    2.1：<code>PowerModelLinear</code>类，其中定义了三个属性：</p><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗。</p><p>​    <code>PowerModelLinear</code>是以线性增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100)得出：</p><p>​    y=staticpower+constant*(utlization*100)</p><p>​    抽象可以得出:y=ax+b,可以得出PowerModelLinear类是以线性增长的方式计算能耗。</p><p>​    2.2：<code>PowerModelSquare</code>类，其中定义了三个属性：</p><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗。</p><p>​    <code>PowerModelSquare</code>是以平方增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100²)得出：</p><p>​    y=staticpower+constant*(utlization*100)²</p><p>​    抽象可以得出:y=ax²+b,可以得出PowerModelSquare类是以平方增长的方式计算能耗。</p><pre><code> 2.3：`PowerModelCubic`类，其中定义了三个属性：</code></pre><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗消耗。</p><p>​    <code>PowerModelCubic</code>是以立方增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100³)得出：</p><p>​    y=staticpower+constant*(utlization*100)³</p><p>​    抽象可以得出:y=ax³+b,可以得出PowerModelLinear类是以立方增长的方式计算能耗。</p><pre><code> 2.4：`PowerModelSqrt`类，其中定义了三个属性：</code></pre><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗消耗。</p><p>​    <code>PowerModelSqrt</code>是以平方根增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /√100)得出：</p><p>​    y=staticpower+constant<em>√(utlization</em>100)</p><p>​    抽象可以得出:y=a√x+b,可以得出PowerModelLinear类是以平方根增长的方式计算能耗</p><pre><code> 2.5：`PowerModelSpecPower`类其中底下还有七个子类分别为：</code></pre><p>​        (1)：PowerModelSpecPowerIbmX3550XeonX5675</p><p>​        (2)：PowerModelSpecPowerHpProLiantMl110G4Xeon3040</p><p>​        (3)：PowerModelSpecPowerHpProLiantMl110G3PentiumD930</p><p>​        (4)：PowerModelSpecPowerIbmX3250XeonX3480</p><p>​        (5)：PowerModelSpecPowerIbmX3550XeonX5670</p><p>​        (6)：PowerModelSpecPowerHpProLiantMl110G5Xeon3075</p><p>​        (7)：PowerModelSpecPowerIbmX3250XeonX3470</p><p>​    这七个子类不同的只是自身的powerData数组所存储的数组不同，其他没有区别，PowerModelSpecpower主要实现的过程是，首先传来一个utlization，让后根据utlization在不同的子类数组中选择两个返回值定义为power1和power2，定义一个变量delta=(power1-power2)/10，最终计算出</p><p>power=power1 + delta * (utilization - utilization1 / 10) * 100即为PowerModelSpecPower策略所测量出来的能耗。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudSim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装OpenCV</title>
      <link href="/2019/07/10/qian-ru-shi/shu-mei-pai-an-zhuang-opencv/"/>
      <url>/2019/07/10/qian-ru-shi/shu-mei-pai-an-zhuang-opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派安装OpenCV"><a href="#树莓派安装OpenCV" class="headerlink" title="树莓派安装OpenCV"></a>树莓派安装OpenCV</h2><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt updatesudo apt upgradesudo rpi-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装一些OpenCV相关工具"><a href="#安装一些OpenCV相关工具" class="headerlink" title="安装一些OpenCV相关工具"></a>安装一些OpenCV相关工具</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install git cmake build-essential pkg-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h3 id="安装四个常用的图像工具包"><a href="#安装四个常用的图像工具包" class="headerlink" title="安装四个常用的图像工具包"></a>安装四个常用的图像工具包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装视频IO包"><a href="#安装视频IO包" class="headerlink" title="安装视频IO包"></a>安装视频IO包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装gtk2-0"><a href="#安装gtk2-0" class="headerlink" title="安装gtk2.0"></a>安装gtk2.0</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install libgtk2.0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装优化函数包"><a href="#安装优化函数包" class="headerlink" title="安装优化函数包"></a>安装优化函数包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install libatlas-base-dev gfortran<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Python开发包"><a href="#安装Python开发包" class="headerlink" title="安装Python开发包"></a>安装Python开发包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt install python-dev python3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>这一步在新版的树莓派上不需要</em></p><h3 id="下载OpenCV源码"><a href="#下载OpenCV源码" class="headerlink" title="下载OpenCV源码"></a>下载OpenCV源码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -O opencv-3.4.6.zip https://github.com/opencv/opencv/archive/3.4.6.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载OpenCV-contrib包"><a href="#下载OpenCV-contrib包" class="headerlink" title="下载OpenCV_contrib包"></a>下载OpenCV_contrib包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -O opencv_contrib.3.4.6.tar.gz https://github.com/opencv/opencv_contrib/archive/3.4.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>将上面下载的两个OpenCV文件压缩包进行解压，并在OpenCV的主文件夹中新建一个release文件夹。进入release文件夹中，执行一下命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cmake -D CMAKE_BUILD_TYPE=RELEASE \-D CMAKE_INSTALL_PREFIX=/usr/local \-D OPENCV_EXTRA+MODULES_PATH=~/opencv_contrib-3.4.6/modules \-D INSTALL_PYTHON_EXAMPLES=ON \-D BUILD_EXAMPLES=ON ..screen -S opencvsudo make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo make install// 更新动态链接库sudo ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="树莓派连接隐藏网络"><a href="#树莓派连接隐藏网络" class="headerlink" title="树莓派连接隐藏网络"></a>树莓派连接隐藏网络</h3><p>修改/etc/wpa_supplicant/wpa_supplicant.conf，在相应的wifi设置中添加上scan_ssid=1即可。</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2019/07/10/cheng-xu-she-ji/python-ji-chu/"/>
      <url>/2019/07/10/cheng-xu-she-ji/python-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><ul><li><p><code>print()</code>函数可以接收多个字符串，之间用逗号隔开，python会将逗号打印成空格。</p></li><li><p>输入：直接将<code>input()</code>的值赋予需要被复制的变量。<code>input()</code>中可以放置提示用的文字，<em>获取的值是字符串类型，如果想要使用，注意将其转换成相应的格式。</em></p></li><li><p>可以直接使用%进行输出控制，采用与C类似的字符表现形式，用括号包裹，后面加上一个%，相应的变量放最后的括号中。</p></li><li><p>python的注释使用#符号。以冒号结尾时，缩进的语句视为代码块。python中的缩进是四个空格。<strong>注意将tab设置为四个空格</strong></p></li><li><p>十六进制使用0x开头。科学计数法中使用e代替底数10。</p></li><li><p>若是单引号需要放置在字符串中，需要用双引号进行包裹。实在不行，使用转义字符<code>\</code>。使用<code>r""</code>其中的字符都不进行转义。python使用<code>'''...'''</code>格式表示多行内容。</p></li><li><p>Python中使用<code>and、or、not</code>进行布尔运算。</p></li><li><p>Python中空值用<code>None</code>表示。</p></li><li><p>使用全部大写的变量名表示这是一个认知意义上的常亮，但Python不提供任何机制进行保障。</p></li><li><p><code>/</code>除法计算结果永远是浮点数。</p></li><li><p><code>//</code>除法结果为整数，只取结果的整数部分。使用%进行取余。</p></li><li><p>python中整数没有大小限制，浮点数也没有，但是超过一定大小直接显示为<code>inf（无限大）</code>。</p></li><li><p>Python3，字符串以Unicode编码。<code>ord()</code>函数获取字符的整数表现形式。<code>chr()</code>将编码转换成对应的字符。带b前缀的单引号或者双引号将指定字符串为bytes类型，每个字符只占用一个字节。<code>encode()</code>函数将字符串编码为指定的bytes，例如：<code>'ABC'.encode('utf-8')</code>。在bytes中，无法显示为ASCII字符的字节用<code>\x##</code>显示。使用<code>decode()</code>函数将bytes转换成相应编码下的文字，若是传来的数据中有一部分无效的字节，可以传入<code>errors='ignore'</code>忽略错误的字节。</p></li><li><p>使用<code>len()</code>函数计算字符数。例如:<code>len('haha')</code></p></li><li><pre><code class="python">#!/usr/bin/env python3# -*- coding: utf-8 -*-<pre class="line-numbers language-none"><code class="language-none">- 格式化字符，与c一致，用%实现。  | 占位符 |   提换内容   |  | :----: | :----------: |  |   %d   |     整数     |  |   %f   |    浮点数    |  |   %s   |    字符串    |  |   %x   | 十六进制整数 |  |   %%   |      %       |- `format()`函数同样可以格式化。例如'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)- |                             list                             |                   tuple（*推荐*）                    |  | :----------------------------------------------------------: | :--------------------------------------------------: |  | 有序集合，可以随时增删元素，元素之间的类型可以不同，使用内存小 | 一旦初始化不能修改，但可以存放list元素，固定的是指向 |  |                             [ ]                              |                         ( )                          |  |                       追加元素append()                       |                          无                          |  |           将元素插入到指定的位置insert(位置，元素)           |                          无                          |  | 删除末尾元素直接pop()，指定位置pop(位置)，用sort()函数进行排序 |                          无                          |  **可以使用负数直接访问容器中倒数的元素。**  **`len()`获取元素个数**。  **tuple只存放一个元素需在那一个元素之后加上一个逗号，消除歧义。**- 条件判断  ```python  if &lt;条件判断1&gt;:      &lt;执行1&gt;  elif &lt;条件判断2&gt;:      &lt;执行2&gt;  elif &lt;条件判断3&gt;:      &lt;执行3&gt;  else:      &lt;执行4&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>**注意if和else后面的冒号，还可以使用elif进行判断。**</code></pre></li><li><p>循环有两种方式：<code>for...in</code>循环，类似java中的foreach，注意最后有一个冒号。或者使用while循环</p></li><li><p>使用<code>range(参数1，参数2)</code>函数，可以生成一个从参数1到参数2-1的一个左闭右开整数list序列。</p></li><li><table><thead><tr><th align="center">dict</th><th align="center">set</th></tr></thead><tbody><tr><td align="center">键值对，极快的查找速度，占用大量内存</td><td align="center">不重复的key集合</td></tr><tr><td align="center">{ }</td><td align="center">set( )，或者使用frozenset()函数将列表转换成set字典</td></tr><tr><td align="center">可以初始化后，通过key值存放value；多次存放同一个key，会覆盖前面的value值</td><td align="center">使用add(key)函数添加</td></tr><tr><td align="center">可以通过in查看key是否存在字典中；或者通过get(需查询的key，自定义的返回值)函数</td><td align="center">可以使用&amp;或者|进行集合运算</td></tr><tr><td align="center">使用pop(key)删除元素</td><td align="center">remove(key)删除元素</td></tr><tr><td align="center">key值是不可变对象，不可以使用list作为key</td><td align="center">key值是不可变对象</td></tr></tbody></table></li><li><p>字符串使用<code>replace()</code>函数，将会返回一个新的字符串，而不是直接修改那个字符串。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop了解</title>
      <link href="/2019/07/09/yun-ji-suan/hadoop-liao-jie/"/>
      <url>/2019/07/09/yun-ji-suan/hadoop-liao-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ol><li>特点<ul><li>数据大</li><li>价值大</li><li>速度快（时效性）</li><li>多样性</li></ul></li><li>架构<ul><li>数据采集：Mysql</li><li>数据存储：HDFS、HBase、Hive</li><li>数据计算：Spark、MapReduce</li></ul></li></ol><hr><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop实现了HDFS分布式存储，下面介绍其中的八个相关部件：</p><ul><li><p>HDFS中NameNode管理DataNode</p><p><em>HDFS是分布式存储，具有数据备份和数据容错的优点。</em></p><p><strong>DataNode由block组成，其中的数据平行传递，不通过client，通过心跳检测（监测数据是否正常）。</strong></p><p><strong>每个block数据块大小都是128M，因此不适合小数据的存储。</strong></p><p>$$主从模式<br>\begin{cases}<br>\text{NameNode（master）}\<br>\text{DataNode（slave）}<br>\end{cases}$$</p></li><li><p>Yarn（资源管理器），负责创建RM（资源管理、作业调度）和AM（任务调度）</p><p><strong>先启动Hadoop，后启动Yarn。</strong></p></li><li><p>MapReduce，处理大规模数据集的编程模型。</p><p>Map:输入数据格式解析：InputFormat</p><p>​        输入数据处理：Mapper</p><p>​        输入数据分组：Partitioner</p><p><strong>总的来说，Map负责分割。</strong></p><p>Reduce：数据远程拷贝</p><p>​                数据按Key排序</p><p>​                数据处理：Reducer</p><p>​                数据输出格式：OutFormat</p><p><strong>总的来说，Reduce负责处理。</strong></p><p><em>其中有一个shuffle，可以打乱分组。</em></p></li><li><p>Hive 数据仓库工具，将SQL转换成MapReduce执行。</p></li><li><p>HBase 存放结构化的数据。</p></li><li><p>ZooKeeper 担任服务生产者和服务消费者的注册中心。</p><p>大致上分成<br>$$<br>\begin{cases} Leader\<br>Follower\<br>Obsever<br>\end{cases}<br>$$<br><strong>推荐使用奇数集群</strong></p></li><li><p>Flume 分布式日志收集系统</p></li><li><p>Storm 分布式流式计算的架构</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudSim学习</title>
      <link href="/2019/07/08/yun-ji-suan/cloudsim-xue-xi/"/>
      <url>/2019/07/08/yun-ji-suan/cloudsim-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudSim"><a href="#CloudSim" class="headerlink" title="CloudSim"></a>CloudSim</h1><h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><ul><li>Cloudlet 对应的是云端应用</li><li>Vm 对应的是虚拟机，其中封装了虚拟机相应的属性和行为</li><li>Broker 对应的是用户代理，是云端用户的代表，包括虚拟机和云应用在内的资源都要绑定到Broker上。</li><li>Host 对应的是物理主机</li><li>Datacenter 对应的是数据中心，所有物理主机资源必须绑定到数据中心，至少创建一个</li></ul><hr><h2 id="模拟实验步骤"><a href="#模拟实验步骤" class="headerlink" title="模拟实验步骤"></a>模拟实验步骤</h2><ol><li>初始化CloudSim</li><li>创建数据中心DataCenter</li><li>创建用户代理Broker</li><li>创建虚拟机Vm</li><li>创建应用Cloudlet</li><li>将云端应用绑定到指定的虚拟机上</li><li>开启模拟仿真</li><li>结束模拟仿真</li><li>打印输出仿真结果</li></ol><hr><h2 id="DataCenter中Host的创建"><a href="#DataCenter中Host的创建" class="headerlink" title="DataCenter中Host的创建"></a>DataCenter中Host的创建</h2><p>所需参数：</p><ul><li>主机编号</li><li>内存</li><li>网络带宽</li><li>外存容量</li><li>cpu列表</li><li>虚拟机调度策略（主机上的）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span>    hostId<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">RamProvisionerSimple</span><span class="token punctuation">(</span>ram<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">BwProvisionerSimple</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">,</span>    storage<span class="token punctuation">,</span>    peList<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">VmSchedulerTimeShared</span><span class="token punctuation">(</span>peList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数据中心的创建"><a href="#数据中心的创建" class="headerlink" title="数据中心的创建"></a>数据中心的创建</h2><p>首先创建数据中心特性：<br>需要的参数 @parameter :</p><ol><li>主机架构</li><li>操作系统</li><li>虚拟机监视器种类</li><li>时区</li><li>cpu的使用费用</li><li>内存的使用费用</li><li>外存的使用费用</li><li>带宽的使用费用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">DatacenterCharacteristics</span><span class="token punctuation">(</span>         arch<span class="token punctuation">,</span> os<span class="token punctuation">,</span> vmm<span class="token punctuation">,</span> hostList<span class="token punctuation">,</span> time_zone<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> costPerMem<span class="token punctuation">,</span>costPerStorage<span class="token punctuation">,</span> costPerBw         <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建数据中心：</p><ol><li>数据中心的名字</li><li>数据中心特性</li><li>虚拟机的创建策略</li><li>存储设备列表</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Datacenter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> characteristics<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VmAllocationPolicySimple</span><span class="token punctuation">(</span>hostList<span class="token punctuation">)</span><span class="token punctuation">,</span> storageList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="虚拟机的创建"><a href="#虚拟机的创建" class="headerlink" title="虚拟机的创建"></a>虚拟机的创建</h2><p>需要的参数 @parameter:</p><ol><li>虚拟机编号</li><li>用户</li><li>MIPS（Tips:CPU是由MIPS来标定其计算能力的）</li><li>镜像大小（MB）</li><li>内存大小（MB）</li><li>网络带宽</li><li>cpu数量</li><li>虚拟机监视器类型</li><li>应用调度策略（虚拟机上的）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Vm</span><span class="token punctuation">(</span>vmid<span class="token punctuation">,</span> brokerId<span class="token punctuation">,</span> mips<span class="token punctuation">,</span> pesNumber<span class="token punctuation">,</span> ram<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> size<span class="token punctuation">,</span> vmm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CloudletSchedulerTimeShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="应用的创建"><a href="#应用的创建" class="headerlink" title="应用的创建"></a>应用的创建</h2><p>需要的参数 @parameter ：</p><ol><li>应用编号</li><li>执行时的应用长度(MI)</li><li>要使用到的处理器数量</li><li>提交应用前的文件大小（byte）</li><li>应用执行完成后的文件大小(byte)</li><li>cpu的使用模型/策略</li><li>ram的使用模型/策略</li><li>网络带宽的使用模型/策略</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Cloudlet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> length<span class="token punctuation">,</span> pesNumber<span class="token punctuation">,</span> fileSize<span class="token punctuation">,</span> outputSize<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="用户的创建"><a href="#用户的创建" class="headerlink" title="用户的创建"></a>用户的创建</h2><p>一般情况下，Broker的创建需要自定义以适应不同的用户策略.</p><h2 id="暂停仿真"><a href="#暂停仿真" class="headerlink" title="暂停仿真"></a>暂停仿真</h2><ul><li>覆盖Runnable接口的run方法;</li><li>将要运行的代码放在run方法中;</li><li>向cloudsim核心引擎层提交暂停仿真事件;</li><li>Cloudsim仿真暂停5秒钟后,动态创建数据中心代理broker_1;</li><li>创建虚拟机和云任务并提交到broker_1代理中;</li><li>提交虚拟机列表和云任务列表;</li><li>重启Cloudsim仿真;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// A thread that will create a new broker at 200 clock time</span><span class="token class-name">Runnable</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment">//TODO 仿真暂停的代码</span>        <span class="token comment">//动态创建数据中心代理代码</span>        <span class="token comment">//以下代码为一个样例</span>        <span class="token comment">//仿真暂停到第200个时钟时间</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//在CLoudsim中的clock到200时暂停Cloudsim</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">pauseSimulation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">isPaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"Cloudsim暂停中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"线程睡眠100ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"\n\n\n"</span> <span class="token operator">+</span> <span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": The simulation is paused for 5 sec \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//主程序暂停运行5秒</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">DatacenterBroker</span> broker <span class="token operator">=</span> <span class="token function">createBroker</span><span class="token punctuation">(</span><span class="token string">"Broker_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> brokerId <span class="token operator">=</span> broker<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Create VMs and Cloudlets and send them to broker</span>vmlist <span class="token operator">=</span> <span class="token function">createVM</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//creating 5 vms</span>cloudletList <span class="token operator">=</span> <span class="token function">createCloudlet</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// creating 10 cloudlets</span>broker<span class="token punctuation">.</span><span class="token function">submitVmList</span><span class="token punctuation">(</span>vmlist<span class="token punctuation">)</span><span class="token punctuation">;</span>broker<span class="token punctuation">.</span><span class="token function">submitCloudletList</span><span class="token punctuation">(</span>cloudletList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CloudSim</span><span class="token punctuation">.</span><span class="token function">resumeSimulation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改写仿真事件"><a href="#改写仿真事件" class="headerlink" title="改写仿真事件"></a>改写仿真事件</h2><h4 id="processEvent"><a href="#processEvent" class="headerlink" title="processEvent"></a>processEvent</h4><ul><li>继承SimEntity类</li><li>创建代理</li><li>创建虚拟机和云任务并提交虚拟机列表和云任务列表</li><li>Cloudsim.resumeSimulation();</li></ul><h4 id="startEntity"><a href="#startEntity" class="headerlink" title="startEntity"></a>startEntity</h4><ul><li>调用schedule()</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络拓扑的信息包括:</p><ul><li>节点的位置</li><li>节点的有向边</li><li>边时延</li><li>边带宽等信息</li></ul><p>调用<code>org.cloudbus.cloudsim.NetworkTopology</code>构建网络拓扑图,然后把Cloudsim实体与拓扑图的节点进行映射.生成延迟矩阵(利用FloydWarshall计算的最短路径之后得出的)和带宽矩阵.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Sixth step: configure network</span><span class="token comment">//load the network topology file</span><span class="token class-name">NetworkTopology</span><span class="token punctuation">.</span><span class="token function">buildNetworkTopology</span><span class="token punctuation">(</span><span class="token string">"modules/cloudsim-examples/src/main/java/org/cloudbus/cloudsim/examples/network/topology.brite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//maps CloudSim entities to BRITE entities</span><span class="token comment">//PowerDatacenter will correspond to BRITE node 0</span><span class="token keyword">int</span> briteNode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">NetworkTopology</span><span class="token punctuation">.</span><span class="token function">mapNode</span><span class="token punctuation">(</span>datacenter0<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>briteNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Broker will correspond to BRITE node 3</span>briteNode<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">NetworkTopology</span><span class="token punctuation">.</span><span class="token function">mapNode</span><span class="token punctuation">(</span>broker<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>briteNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在brite文件中,程序寻找标记<code>Nodes</code>和<code>Edges</code>.从其下一行开始执行.</p><p>Node的格式(列)为:NodeID,xpos,ypos,indegree,outdegree,ASid(AS应用服务器,如果分层,节点属于的ASid),type(router/AS)</p><p>Edge的格式(列)为:边序号,始节点序号,终节点序号,边长度,边时延,边带宽.</p><p>通过事件管理引擎实现实体i到实体j的传递总共的仿真时间是t+d,其中t表示消息传送最初的仿真时间,d代表实体i与j之间的网络延时.</p><p>在<code>network</code>的<code>datacenter</code>中<code>AppCloudlet</code>可以理解为一个完整的工作流程,<code>NetworkCloudlet</code>可以理解为工作流程中的一个功能.</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudSim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
