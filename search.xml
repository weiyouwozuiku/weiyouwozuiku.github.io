<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Esp32蓝牙指纹开发</title>
      <link href="2020/11/18/esp32-lan-ya-zhi-wen-kai-fa/"/>
      <url>2020/11/18/esp32-lan-ya-zhi-wen-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>因为Linux系统每次开机或者执行一些需要权限的命令时要输入密码，但是本身输入密码这件事就不太安全。综合现有情况，windows可以很方便的使用人脸识别，但是linux上指纹都不方便，也怕破坏启动配置。于是决定使用外部硬件的方式实现指纹识别后自动输入密码的功能。相对安全了点。</p><p>功能逻辑：</p><ol><li>通过蓝牙连接Esp32</li><li>通过AS608校验指纹</li><li>指纹校验通过则模拟成蓝牙键盘发送密码</li></ol><p>硬件方面：</p><ul><li>采用的Esp32作为主控，其本身自带wifi和蓝牙，非常便于之后的功能改善。</li><li>AS608作为指纹传感器，负责指纹的录入和校验。</li><li>oled ssd1306作为屏幕进行必要的显示，方便了解处理进度。</li></ul><p>IDE图方便选择的是Arduino的环境，在板子管理处添加如下字段，添加Esp32板子信息：</p><p><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code>。</p><p>选择开发版<code>ESP32 Dev Module</code>。</p><p>安装库：<code>ESP8266 and ESP32 OLED driver for SSD1306 displays</code>。</p><p>安装第三方库：从<code>https://github.com/T-vK/ESP32-BLE-Keyboard</code>下载并添加。</p><p>oled 的vcc接3.3v，SCL接D22，SDA接D21。</p><p>代码如下:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SSD1306Wire.h"</span>        </span><span class="token comment" spellcheck="true">// legacy: #include "SSD1306.h"</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h></span>     </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;BleKeyboard.h></span></span>BleKeyboard bleKeyboard<span class="token punctuation">;</span>SSD1306Wire <span class="token function">display</span><span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">flipScreenVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bleKeyboard<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>TEXT_ALIGN_LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>ArialMT_Plain_16<span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"Send!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  display<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bleKeyboard<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    bleKeyboard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要修改默认的蓝牙名称需要在默认<code>C:\Users\11048\Documents\Arduino\libraries\ESP32-BLE-Keyboard</code></p><p>的<code>BleKeyboard.h</code>的第101行进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Esp32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++复习笔记</title>
      <link href="2020/11/10/cpp-fu-xi-bi-ji/"/>
      <url>2020/11/10/cpp-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>本文为自己复习C++时知识的补充与记录。</p><hr><p>sizeof运算符返回变量的大小。</p><p>逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。</p><p>补码范围：</p><table><thead><tr><th>数</th><th>8</th><th>16</th><th>32</th></tr></thead><tbody><tr><td>$UMax_w$</td><td>0xFF<br>255</td><td>0xFFFF<br>65535</td><td>0xFFFFFFFF<br>4294967295</td></tr><tr><td>$TMin_w$</td><td>0x80<br>-128</td><td>0x8000<br>-32768</td><td>0x80000000<br>-2147483648</td></tr><tr><td>$TMax_w$</td><td>0x7F<br>127</td><td>0x7FFF<br>32767</td><td>0x7FFFFFFF<br>2147483647</td></tr><tr><td>-1<br>0</td><td>0xFF<br>0x00</td><td>0xFFFF<br>0x0000</td><td>0xFFFFFFFF<br>0x00000000</td></tr></tbody></table><p><strong>对有符号数，仅不要使用右移运算，因为到底是逻辑右移还是算术右移取决于编译器。</strong></p><p>对于二维数组的循环，尽管可以按照列进行遍历，但是不推荐。<strong>循环时尽可能满足“空间局部性”</strong>:</p><ol><li>在一个小的时间窗口内，访问的变量地址越接近越好，这样执行速度快。</li><li>一般来说，需要将最长的循环放在最内层，最短的循环放在最外层，以减少CPU跨切循环层的次数。</li></ol><p><code>vector</code>是面向对象方式的动态数组。可以使用<code>capacity</code>和<code>size</code>方法来查看vector当前的容量和已经存储的元素个数。<code>insert</code>方法两个参数，第一个是位置的指针，第二个是插入的值。<code>pop_back()</code>从尾部删除，<code>push_back()</code>从尾部插入元素，<code>erase()</code>一个参数，删除元素的指针位置。**<code>end()</code>返回的是vector最后一个元素之后的位置，操作时注意是否-1。**</p><hr><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>字符常量：括在<code>单引号</code>中。如果常量以L（仅当大写）开头，则表示它是一个宽字符常量(例如L’x’)，此时必须被存储在<code>wchar_t</code>类型的变量中。否则就是一个窄字符变量。</p><p>字符串是以空字符<code>\0</code>结束的字符数组。</p><table><thead><tr><th align="center">二进制</th><th align="center">十进制</th><th align="center">对应字符</th></tr></thead><tbody><tr><td align="center">0x41</td><td align="center">65</td><td align="center">A</td></tr><tr><td align="center">0x61</td><td align="center">97</td><td align="center">a</td></tr><tr><td align="center">0x30</td><td align="center">48</td><td align="center">0</td></tr><tr><td align="center">0x7F</td><td align="center">127</td><td align="center">DEL</td></tr></tbody></table><p>为了表示Unicode字符集，有三种Unicode的编码方式：</p><ul><li>UTF-8：1byte来表示字符，兼容ASCII码。特点存储效率高，变长(不方便内部随机访问)，无字节序问题(可作为外部编码)</li><li>UTF-16：分为UTF-16BE(big endian),UTF-16LE(little endian)。特点定长(方便内部随机访问)，有字节序问题(不可作为外部编码)</li><li>UTF-32：分为UTF-32BE(big endian),UTF-32LE(little endian)。特点定长(方便内部随机访问)，有字节序问题(不可作为外部编码)</li></ul><h4 id="stdio"><a href="#stdio" class="headerlink" title="stdio"></a>stdio</h4><p>字符串常见操作：</p><ul><li>字符串长度:strlen(s)，不包括<code>\0</code>。</li><li>字符串比较:strcmp(s1,s2),相同返回0，s1&lt;s2返回值小于0，s1&gt;s2返回值大于0。按照ASCII码进行比较。</li><li>字符串拷贝:strcpy(s1,s2)，字符串s2复制到s1中。</li><li>复制指定长度字符串:strncpy(s1,s2,n)。将字符串s2中前n个字符拷贝到s1中。</li><li>字符串拼接:strcat(s1,s2)。将字符串s2接到s1后面。</li><li>查找字符串:strchr(s1,ch)。指向字符串s1中字符ch的第一次出现的位置。</li><li>查找字符串strstr(s1,s2)。指向字符串s2的第一次出现的位置。</li></ul><p>推荐使用strnlen_s,strcpy_s,strncpy_s,strcat_s等API函数，更安全。</p><p>在进行底层代码安全性测试的时候需要加上<code>CRT_SECURE_NO_WARNINGS</code>让编译器忽略错误。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>获得字符串长度：<code>s.length</code>或<code>s.size()</code>二者等价。<code>s.capacity()</code>查看字符串总空间。</p><p>转换为C风格的字符串使用如下代码：</p><pre class="line-numbers language-Cpp"><code class="language-Cpp">const char *c_str = s1.c_str();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><code>const</code>和<code>*</code>修饰的部分：1.先看左侧最近的部分;2.如果左侧没有，则看右侧。</p><p><code>*</code>操作符具有从右往左的结合性。<code>**</code>这个表达式相当于<code>*(*c)</code>，必须从里向外逐层求值。 </p><h4 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h4><p>直接使用未初始化或非法指针，可能发生两种情况：<strong>1.定位到非法地址，程序出错，从而终止。2.定位到一个可以访问的地址，无意修改了它，这样的错误难以捕捉，引发的错误可能与原先用于操作的代码完全不相干！</strong></p><p>用指针进行间接访问之前，一定要非常小心，<strong>确保它已经初始化，并被恰当的赋值。</strong></p><p>对于一个指针，如果已经知道将被初始化为什么地址，那么请赋值给它，否则请将它<strong>设置为NULL</strong>。</p><p>在对一个指针进行间接引用前，请先判断这个指针的值是否为NULL。</p><p>野指针是指向”垃圾”内存的指针。if判断对它们不起作用，因为没有置NULL。一般有三种情况：</p><ol><li>指针变量没有初始化;</li><li>已经释放不用的指针没有置NULL,如delete和free之后的指针；</li><li>指针操作超越了变量的作用范围;</li></ol><p>没有初始化的，不用的或者超出范围的指针请置为NULL。</p><p>编译器程序分解成符号的方法是：一个字符一个字符的读入，一直到读入的字符不再能组成一个有意义的符号。这个处理过程称为”贪心法”。</p><p>栈内分配内存从高地址向低地址分配，堆区分配内存是从低地址到高地址。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_Cpp%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"></p><p>主流的编程语言中，C++是唯一一个依赖RAII(Resource Acquisition Is Initialization)来做资源管理的。</p><p>RAII依托栈和析构函数，来对所有资源——包括堆内存在内进行管理。对RAII的使用，使得C++不需要类似于Java那样的垃圾收集方法，也能有效的对内存进行管理。RAII的存在，也是垃圾收集虽然理论上可以在C++使用，但从来没有真正流行的原因。</p><p>RAII有些比较成熟的智能指针代表：如<code>std:auto_ptr</code>和<code>boost:shared_ptr</code>。</p><p>栈和堆中变量对比：</p><table><thead><tr><th></th><th>stack</th><th>heap</th></tr></thead><tbody><tr><td>作用域</td><td>函数体内，语句块{}作用域</td><td>整个程序范围内，由new,malloc开始，delete,free结束</td></tr><tr><td>编译期大小确定</td><td>变量大小范围确定</td><td>变量大小范围不确定，需要在运行期确定</td></tr><tr><td>大小范围</td><td>Windows系统默认栈大小是1M,linux常见的默认的栈大小是8M或10M(通过ulimit -s查看，不同的linux发行版本不保证相同)Manjaro就是8M</td><td>所有系统的堆空间上限是接近内存(虚拟内存)的总大小的(一部分被OS占用)</td></tr><tr><td>内存分配方式</td><td>地址由高到低减少</td><td>地址由低到高增加</td></tr><tr><td>内容是否可变</td><td>可变</td><td>可变</td></tr></tbody></table><p>全局静态存储区和常量存储区的变量对比：</p><table><thead><tr><th></th><th>全局静态存储区</th><th>常量存储区</th></tr></thead><tbody><tr><td>存储内容</td><td>全局变量</td><td>常量</td></tr><tr><td>编译期间大小是否确定</td><td>确定</td><td>确定</td></tr><tr><td>内容是否可变</td><td>可变</td><td>不可变</td></tr></tbody></table><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>内存泄漏指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><h5 id="发生原因和排查方式"><a href="#发生原因和排查方式" class="headerlink" title="发生原因和排查方式"></a>发生原因和排查方式</h5><ol><li>内存泄漏主要发生在堆内存分配方式中，即“配置了内存后，所有指向该内存的指针都遗失了”。若缺乏语言这样的gc机制，这样的内存片就无法归还系统。</li><li>因为内存泄漏属于程序运行中的问题，无法通过编译识别，所以只能在程序运行过程中来识别和诊断。</li></ol><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p> <strong>C++11之后对空指针的判断推荐使用nullter，避免NULL的二义性。</strong></p><p><code>unique_ptr</code>、<code>shared_ptr</code>、<code>weak_ptr</code>和C++11中已经废弃的<code>auto_ptr</code>，在C++17中被正式删除。需要导入头文件<code>&lt;memory&gt;</code></p><h4 id="auto-ptr-不推荐使用"><a href="#auto-ptr-不推荐使用" class="headerlink" title="auto_ptr(不推荐使用)"></a>auto_ptr(不推荐使用)</h4><p>由new expression获得对象，在auto_ptr对象销毁时，他所管理的对象也会自动被delete掉。</p><p>所有权转移：不小心把它传递给另外的智能指针，原本的指针就不再拥有这个对象了。在拷贝/赋值过程中，会直接剥夺指针对原对象对内存的控制权，转交给新对象，然后再将原对象指针置为nullptr。</p><p><strong>当拷贝/赋值时发生所有权转移，再次访问原对象时程序就会报错。</strong></p><h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p>unique_ptr是专属所有权，所以uniqure_ptr管理的内存，只能被一个对象持有，不支持复制和赋值。</p><p>移动语义：unique_ptr禁止了拷贝语义，但有时我们也需要能够转移所有权，于是提供了移动语义，即可以使用std::move()进行控制所有权的转移。</p><p>语法: std::make_unique<int>(10)或unique_ptr<int>(new int(10))</int></int></p><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p>shared_ptr通过一个引用计数共享一个对象，代表的是共享所有权，即多个shared_ptr可以共享同一块内存。</p><p>shared_ptr是为了解决auto_ptr在对象所有权上的局限性，在使用引用计数的机制上提供了可以共享所有权的智能指针，当然这需要额外的开销。当引用计数为0时，该对象没有被使用，可以进行析构。</p><p>但是可能存在一些问题：</p><ul><li><p>循环引用:引用计数会带来循环引用的问题</p><p>循环引用会导致堆里的内存无法被正常回收，造成内存泄漏。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/Cpp%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0_%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98.png"></p><h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p>weak_ptr被设计为与shared_ptr共同工作，用一种观察者模式工作。</p><p>作用是协助shared_ptr工作，可获得资源的观测权，像旁观者那样观测资源的使用情况。观察者意味着weak_ptr只对shared_ptr进行引用，而不改变其引用计数，当被观察的shared_ptr失效后，相应的weak_ptr也相应失效。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用引用的优点：</p><ol><li>不存在空引用，避免了空指针的出现。</li><li>必须初始化，避免了野指针的出现。</li><li>一个引用必须永远指向它初始化的那个对象</li></ol><p><strong>有了指针为什么还需要引用？</strong>为了支持函数运算符重载。</p><p>**有了引用为什么还需要指针?**为了兼容C语言。</p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>switch分支与if分支比较：</p><p>使用场景：</p><ol><li>switch只支持尺量值固定相等的分支判断;</li><li>if还可以判断区间范围;</li><li>用switch能做的，用if都能做，但反过来则不行;</li></ol><p>性能比较：</p><ol><li>分支少时，差别不是很大;分支多时，switch性能较高;</li><li>if开始几个分支效果高，之后效率递减;</li><li>switch所有case的速度几乎一样;</li></ol><h3 id="自定义结构"><a href="#自定义结构" class="headerlink" title="自定义结构"></a>自定义结构</h3><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>使用<code>#define</code>和<code>const</code>创建符号变量，使用<code>enum</code>不仅能够创建符号常量，还能定义新的数据类型。</p><p>枚举类型enum(enumeration)的声明和定义：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> wT<span class="token punctuation">{</span>Monday<span class="token punctuation">,</span>Tuesday<span class="token punctuation">,</span>Wednesday<span class="token punctuation">,</span>Thursday<span class="token punctuation">,</span>Friday<span class="token punctuation">,</span>Saturday<span class="token punctuation">,</span>Sunday<span class="token punctuation">}</span><span class="token punctuation">;</span>wT weekday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>使用<code>struct</code>定义</p><pre class="line-numbers language-cpp"><code class="language-cpp">strcut Student<span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构体的内存布局需要综合考虑CPU的位数和当前结构体中最大的类型所占空间。不同的结构体中数据的排序也会导致结构体占用空间的不同。结构体所占的空间必然是最大元素所占空间的整数倍。</strong></p><p>结构体中数据——缺省对齐原则</p><p>针对32位CPU：</p><ul><li>char：任何地址</li><li>short：偶数地址</li><li>int：4的整数倍地址</li><li>double ：8的整数倍地址</li></ul><p>修改默认编译选项：</p><ul><li><p>Visual C++:</p><p>#pragma pack(n)</p></li><li><p>g++:</p><p>_attribute_(aligned(n))</p><p>_attribute_(_packed_)</p></li></ul><p><strong>此处的n表示是n的倍数进行分配。</strong></p><p><strong>推荐把小的元素分配在一起！！！！</strong></p><h4 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h4><p>使用<code>union</code>定义</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">union</span> Score<span class="token punctuation">{</span>    <span class="token keyword">double</span> sc<span class="token punctuation">;</span>    <span class="token keyword">char</span> level<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>联合体的空间按照最大元素所占空间决定。</strong></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>从汇编的角度来看，<code>do while</code>效率高于<code>while</code>更高于<code>for</code>。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数名与参数列表一起构成了函数签名。</p><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><p>指向函数入口地址的指针就是函数指针。</p><p>一般形式：<code>数据类型 (*指针变量名)(参数表)</code></p><p>区分：</p><p>​    <code>int(*p)int</code>//是指针，指向一个函数入口地址</p><p>​    <code>int* p(int)</code>//是函数，返回的值是一个指针</p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>命名空间可作为附加信息来区分不同库中相同名称的函数、类、变量等，命名空间即定义了上下文。本质上，命名空间就是定义了一个范围。</p><p>用法:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//定义函数时</span><span class="token keyword">namespace</span> <span class="token operator">&lt;</span>自定义空间名<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义函数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//函数实现时</span><span class="token keyword">namespace</span> <span class="token operator">&lt;</span>自定义空间名<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode刷题记录</title>
      <link href="2020/11/10/leetcode-shua-ti-ji-lu/"/>
      <url>2020/11/10/leetcode-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录本人刷Leetcode过程的收获和代码。语言选择C++。</p><h2 id="1～100"><a href="#1～100" class="headerlink" title="1～100"></a>1～100</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> heap<span class="token punctuation">;</span>        <span class="token keyword">int</span> r<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            r<span class="token operator">=</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//heap.count(key)返回的是key的下标</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>heap<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>heap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//防止报错</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2020/10/28/java-ji-chu/"/>
      <url>2020/10/28/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><h3 id="static、final、static-final的区别"><a href="#static、final、static-final的区别" class="headerlink" title="static、final、static final的区别"></a>static、final、static final的区别</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>可以修饰属性、方法、类、局部变量。</p><p>初始化可以在编译期或者运行期，<strong>初始化后不能改变。</strong></p><p>与具体对象有关，在运行期初始化的final属性，不同对象可以有不同值。</p><p>final类无法被继承，没有子类，final类中的方法默认是final的。</p><p>final方法不能被子类的方法覆盖，但是可以被继承。</p><p><strong>final成员变量表示常量，只能被赋值一次。其后不能改变。</strong></p><p>不能用于修饰构造方法。</p><p>private类型的方法默认是final类型的。</p><ul><li>对于基本数据类型：是常量，创建后不能修改。</li><li>对于对象句柄：final将句柄变成常数（在声明时，必须将句柄初始化到一个具体的对象，而且不能再将句柄指向另一个对象。<strong>但是对象本身是可以修改的</strong>）</li><li>对于数组：数组属于对象，数组本身也可以改。同对象。</li><li>对于方法参数中的final句柄：在该方法内部不能改变参数句柄指向的实际东西，不能给形参句柄再赋值。</li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>可以修饰属性、方法、代码段、内部类（静态或嵌套内部类）</p><p>初始化在编译期，初始化后能改变。</p><p>static与具体对象无关。</p><p>不可以修饰局部变量。</p><p><strong>被static修饰的成员变量和成员方法独立于该类的任何对象。</strong>被所有类的实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内找到它们。可以在任意对象创建之前访问，无需引用任何对象。</p><h4 id="final-static"><a href="#final-static" class="headerlink" title="final static"></a>final static</h4><p><strong>static修饰的属性强调它们只有一个，final修饰的属性强调是一个常数</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java架构之旅--单体</title>
      <link href="2020/09/29/java-jia-gou-zhi-lu-dan-ti/"/>
      <url>2020/09/29/java-jia-gou-zhi-lu-dan-ti/</url>
      
        <content type="html"><![CDATA[<p>大型互联网网站特点：</p><ul><li>高流量，流量大</li><li>高可用</li><li>大数据</li><li>敏捷开发，迭代快</li><li>用户体系庞大</li><li>可持续升级</li><li>安全防范</li><li>弹性扩展</li><li>吞吐量高，响应速度快</li></ul><p>maven项目的打包方式分为三种：pom(用在父级工程或聚合工程)、jar(用于jar包使用)、war(打包成war，发布在服务器上的工程)。</p><p>聚合工程里可以分为顶级工程和子工程。这两者的关系是父子继承关系。子工程在maven中称之为模块(module)，模块之间是平级的，可以相互依赖(在相应的子模块pom文件中添加依赖关系)。</p><p>子模块可以使用顶级工程了所有的资源(依赖)，子模块之间如果要使用资源，必须构建依赖(构建关系)。</p><p>一个顶级工程是可以有多个不同的子工程共同组合而成，在项目中打包成jar包的形式。</p><p>顶级工程创建后，需要在创建子工程后检查顶级工程的pom文件中moduels标签中是否存在子工程module。</p><p>pom中的依赖具有传递性。</p><p>创建完顶级工程与子工程后，但是此时项目还是没有依赖关系还没有真正的建立。需要使用maven工具中lifecycle中的install，建立其中的依赖关系。</p><p><strong>不推荐使用数据库外键</strong>，原因如下：</p><ul><li>性能影响</li><li>热更新。但是外键会导致新更新的代码无法热更新</li><li>保留逻辑外键，但是不推荐物理外键，降低耦合度</li><li>数据库分库分表，物理外键不适合分布式数据库的分库分表</li></ul><h2 id="项目设置成SpringBoot项目"><a href="#项目设置成SpringBoot项目" class="headerlink" title="项目设置成SpringBoot项目"></a>项目设置成SpringBoot项目</h2><ol><li>在<code>pom.xml</code>文件中添加如下字段可以添加相关基础依赖：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>设置资源属性</p><p>在<code>pom.xml</code>中添加如下字段：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加依赖</p><p>在<code>pom.xml</code>中添加如下字段：</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在相应项目的<code>src/main/java</code>中创建形如<code>com.wangzhengbest</code>的文件夹作为整个项目代码的存放空间。</p></li><li><p>创建<code>Application.java</code>文件，添加如下字段:</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//扫描mybatis通用mapper所在包</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.wangzhengbest.mapper"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描所有包，以及相关组件包</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.wangzhengbest"</span><span class="token punctuation">,</span><span class="token string">"org.n3r.idworker"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>在当前项目的<code>resources</code>文件夹下创建<code>application.yml</code>配置文件。</p></li><li><p>创建一个控制器，代码如下：</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <em>@RestController默认返回一个json对象</em></p><p>​    @RequestMapping(“api地址”)</p><p>​    在函数的传入参数中添加@RequestParam表示该传参是一个请求类型的参数，而不是一个路径参数。@RequestBody作用类似上个，但是接收的是一个对象。</p><p><strong>maven-site-plugin报错</strong></p><p>若IDEA报错，可以将其添加至pom.xml文件中</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-site-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>添加JUNIT测试</strong><br>在pom.xml文件中添加</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合数据库相关设置"><a href="#整合数据库相关设置" class="headerlink" title="整合数据库相关设置"></a>整合数据库相关设置</h2><ol><li><p>添加依赖</p><p>在整个工程的<code>pom.xml</code>文件中添加如下字段:</p></li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        mysql驱动--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        mybatis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>添加配置</p><p>在当前项目的<code>application.yml</code>中添加相应配置：</p></li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置数据源信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 数据源的相关设置</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 数据源类型:HikariCP</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token comment" spellcheck="true"># Mysql驱动</span>    <span class="token key atrule">drive-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//数据库ip或者域名<span class="token punctuation">:</span>mysql端口号/Project_Shop<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=UTF<span class="token punctuation">-</span>8<span class="token important">&amp;autoReconnect</span>=true    <span class="token key atrule">username</span><span class="token punctuation">:</span> 用户名    <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码  <span class="token key atrule">hikari</span><span class="token punctuation">:</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000 </span><span class="token comment" spellcheck="true"># 等待连接池分配链接的最大时长(毫秒)，超过这个时长还没有可用连接则发生SQLException,默认30秒</span>    <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 最小连接数</span>    <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20 </span><span class="token comment" spellcheck="true"># 最大连接数</span>    <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 自动提交</span>    <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">600000 </span><span class="token comment" spellcheck="true"># 连接超时的最大时长(毫秒),超时则被释放(retired),默认10分钟</span>    <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> DateSourceHikariCP <span class="token comment" spellcheck="true"># 连接池名字</span>    <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000 </span><span class="token comment" spellcheck="true"># 连接的生命时长(毫秒),超时而且没被使用则被释放,默认30分钟 1800000ms</span>    <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1<span class="token comment" spellcheck="true"># Mybatis配置</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.wangzhengbest.pojo <span class="token comment" spellcheck="true"># 所有POJO类所在包路径</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/*.xml <span class="token comment" spellcheck="true"># mapper映射文件,classpath表示项目的resources文件夹</span><span class="token comment" spellcheck="true"># 内置Tomcat配置</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span>  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token key atrule">max-http-header-size</span><span class="token punctuation">:</span> 80KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Restful Web Service</strong></p><ul><li>通信方式</li><li>信息传递</li><li>无状态</li><li>独立性</li></ul><h2 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>commons-lang3的StringUtils中有一个方法isNotBlank可以判断字符串是否为空且是否非空字符串。</p><h2 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h2><ul><li><p>基于POJO轻量级和最小侵入式开发</p><p>对于EJB、Struts2等一些传统的框架，通常是要实现特定的接口，继承特定的类才能增强功能。改变了Java类的结构。</p><p>对于Hibernate、Spring等框架，对现有的类结构没有影响，就能增强JavaBean的功能。</p></li><li><p>通过依赖注入和面向接口实现松耦合</p></li><li><p>基于切面和惯例进行声明式编程</p></li><li><p>通过切面和模板<strong>减少样版式代码</strong></p></li></ul><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转，简单来说就是对象的创建交给外部容器完成。对象与对象之间的依赖关系依靠依赖注入实现。</p><p>IOC思想最核心的地方在于<strong>资源不由使用资源的双方管理，而由不使用资源的第三方管理。</strong>这样的好处是<strong>1.资源集中管理，实现资源的可配置和易管理。2.降低了使用资源双方的耦合度。</strong></p><p>$$Spring \begin{cases} Core: Spring的核心功能 \ Web: Spring对Web模块的支持 \ DAO: Spring对JDBC操作的支持 \ ORM: Spring对ORM的支持 \ AOP: 切面编程 \ SpringEE: Spring对JAVAEE其他模块的支持 \end{cases} $$</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务概念可以描述成以下四个关键属性ACID：</p><ul><li>原子性：事务应当作为一个单独单元的操作。整个序列操作要么成功，要么失败。</li><li>一致性：这表示数据库的引用完整性的一致性，表中唯一的主键等。</li><li>隔离性：可能同时处理很多有相同的数据集的事务，每个事务应该与其他事务隔离，以防止数据损坏。</li><li>持久性：一个事务一旦完成全部操作后，这个事务的结果必须是永久性的，不能因系统故障而从数据库中删除。</li></ul><p>Spring中事务本质是数据库对事务的支持。当我们在配置文件中开启注解驱动，并在相关类和方法上通过注解<code>@Transactional</code>标识时，Spring会在启动时解析生成相关的bean，会查看拥有相关注释的类和方法，并且为这些类和方法生成代理。根据@Transactional的相关参数进行注入。真正的数据库层面的事务提交和回滚通过binlog或redo log实现。</p><p>数据访问技术及其实现：</p><table><thead><tr><th>数据库访问技术</th><th>实现</th></tr></thead><tbody><tr><td>JDBC</td><td>DataSourceTransactionManager</td></tr><tr><td>JPA</td><td>JpaTransactionManager</td></tr><tr><td>Hibernate</td><td>HibernateTransactionManager</td></tr><tr><td>JDO</td><td>JdoTransactionManager</td></tr><tr><td>分布式事务</td><td>JtaTransactionManager</td></tr></tbody></table><p>Spring事务抽象的关键是由 <em>org.springframework.transaction.PlatformTransactionManager</em> 接口定义，如下所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//根据指定的传播行为，该方法返回当前活动事务或创建一个新的事务。</span>    TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span>TransactionDefinition definition<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该方法提交给定的事务和关于它的状态。</span>   <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//该方法执行一个给定事务的回滚。</span>   <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。即向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。</strong></p><p>Spring中关于事务的配置总是由三个部分组成。</p><p>$Spring事务配置\begin{cases}DataSource \ TransactionManager \ 代理机制(一般变化的之后这部分)\end{cases}$</p><pre class="mermaid">graph LR    Spring事务配置--&gt;DataSource    DataSource--&gt;DataSource_ &amp; SessionFactory &amp; EntityManager    DataSource_-.JDBC配置.-&gt;DataSourceTransactionManager    SessionFactory-.Hibernate配置.-&gt;HibernateTranscationManager    EntityManager-.JPA配置.-&gt;JpaTransactionManager    Spring事务配置--&gt;TransactionManager    TransactionManager--&gt;DataSourceTransactionManager &amp; HibernateTranscationManager &amp; JpaTransactionManager    Spring事务配置--&gt;代理机制    代理机制--&gt;proxy[Bean和代理] &amp; 使用拦截器 &amp; 使用Tx标签配置的拦截器 &amp; 全注解配置    proxy--&gt;每个Bean有一个代理 &amp; 所有Bean共享一个代理基类</pre><h4 id="Spring事务的传播属性"><a href="#Spring事务的传播属性" class="headerlink" title="Spring事务的传播属性"></a>Spring事务的传播属性</h4><p>即定义存在多个事务的时候，spring应该如何处理这些事务的行为。</p><table><thead><tr><th>常量名称</th><th>常量解释</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>支持当前事务，如果当前没有事务，就新建一个。是Spring默认的事务传播。</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，则当前事务挂起，新建的事务将和被挂起的事务没有任何关系，是两个独立的事务。外层事务失败回滚之后，不能回滚内层事务执行的结果，内层事务失败抛出异常，外层事务捕获，也可以不处理回滚操作。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式运行。查询时可以使用。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务，如果当前没有事务，则抛出异常。强制存在一个事务。</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式运行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式运行，如果当前存在事务，则抛出异常。</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性运行，它使用了一个单独的事务。这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响，但是外部回滚会把内部事务一起回滚回去。它只对DataSourceTransactionManager事务管理器起效。</td></tr></tbody></table><h4 id="Spring中事务隔离级别"><a href="#Spring中事务隔离级别" class="headerlink" title="Spring中事务隔离级别"></a>Spring中事务隔离级别</h4><table><thead><tr><th>隔离级别</th><th>隔离级别的值</th><th>导致的问题</th></tr></thead><tbody><tr><td>Read-Uncommitted</td><td>0</td><td>导致脏读</td></tr><tr><td>Read-Committed</td><td>1</td><td>避免脏读，允许不可重复读和幻读</td></tr><tr><td>Repeatable-Read</td><td>2</td><td>避免脏读，不可重复读，允许幻读</td></tr><tr><td>Serializable</td><td>3</td><td>串行优读，事务只能一个一个执行，避免了脏读，不可重复读、幻读。执行效率慢，使用时慎重。</td></tr></tbody></table><p>脏读：一个事务对数据进行了增删改，但是未提交命令一个事务可以读取到未提交的数据。如果第一个事务此时进行了回滚，那么第二个事务就读到了脏数据。</p><p>不可重复读：一个事务中发生了两次读操作。第一次读操作和第二次读操作之间，另一个事务对数据进行了修改，此时两次读取的数据是不一致的。</p><p>幻读：第一个事务查询一定范围内的数据，第二个事务在这个范围i内insert一条数据，此时第一个事务会出现两次查询结果不一致的情况。</p><p>总结：</p><ul><li><strong>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</strong></li><li>大多数数据库默认隔离级别为Read Committed,如果SqlServer、Oracle。</li><li>少数数据库默认隔离级别为：Repeatable Read。如Mysql的InnoDB引擎。<strong>Mysql的InnoDB引擎下的RR隔离级别通过next-key lock解决了幻读问题。</strong></li></ul><table><thead><tr><th>常量</th><th>解释</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>这是个PlatfromTransactionManager默认的隔离级别。使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。</td></tr><tr><td>ISOLATION_READ_UNCOMMITED</td><td>这是事务最低的隔离级别，它允许另一个事务可以看到这个事务提交的数据。会导致脏读，不可重复读和幻读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>保证一个事务修改的数据提交后才能被另一个事务读取。另一个事务不能读取该事务未提交的数据。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>可以防止脏读，不可重复读，但是可能出现幻读。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>花费最高最为可靠的事务隔离级别，事务被顺序执行。</td></tr></tbody></table><p>@Transactional注解中可以设置事务的隔离级别，默认是ISOLATION_DEFAULT级别。</p><p>由属性接口TransactionDefinition可以看到，可返回四个基本事务属性：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传播行为。</span>    <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 隔离级别。事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据。</span>    <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 事务必须在多少秒内完成。</span>    <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 事务是否只读。事务管理器能够根据这个返回值进行优化，确保事务是只读的</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务的嵌套"><a href="#事务的嵌套" class="headerlink" title="事务的嵌套"></a>事务的嵌套</h4><p>假设外层事务 ServiceA的Method A() 调用内层ServiceB的Method B()</p><h5 id="PROPAGATION-REQUIRED-Spring默认"><a href="#PROPAGATION-REQUIRED-Spring默认" class="headerlink" title="PROPAGATION_REQUIRED(Spring默认)"></a>PROPAGATION_REQUIRED(Spring默认)</h5><p>如果ServiceB.methodB() 的事务级别定义为 PROPAGATION_REQUIRED，那么执行 ServiceA.methodA() 的时候Spring已经起了事务，这时调用 ServiceB.methodB()，ServiceB.methodB() 看到自己已经运行在 ServiceA.methodA() 的事务内部，就不再起新的事务。</p><p>假如 ServiceB.methodB() 运行的时候发现自己没有在事务中，他就会为自己分配一个事务。</p><p>这样，在 ServiceA.methodA() 或者在 ServiceB.methodB() 内的任何地方出现异常，事务都会被回滚</p><h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h5><p>比如我们设计 ServiceA.methodA() 的事务级别为 PROPAGATION_REQUIRED，ServiceB.methodB() 的事务级别为 PROPAGATION_REQUIRES_NEW。</p><p>那么当执行到 ServiceB.methodB() 的时候，ServiceA.methodA() 所在的事务就会挂起，ServiceB.methodB() 会起一个新的事务，等待 ServiceB.methodB() 的事务完成以后，它才继续执行。</p><p>它与 PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为 ServiceB.methodB() 是新起一个事务，那么就是存在两个不同的事务。如果 ServiceB.methodB() 已经提交，那么 ServiceA.methodA() 失败回滚，ServiceB.methodB() 是不会回滚的。如果 ServiceB.methodB() 失败回滚，如果他抛出的异常被 ServiceA.methodA() 捕获，ServiceA.methodA() 事务仍然可能提交(主要看B抛出的异常是不是A会回滚的异常)。</p><h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h5><p>现在的情况就变得比较复杂了， ServiceB.methodB() 的事务属性被配置为 PROPAGATION_NESTED，此时两者之间又将如何协作呢? ServiceB#methodB如果rollback，那么内部事务(即 ServiceB#methodB) 将回滚到它执行前的SavePoint而外部事务(即 ServiceA#methodA) 可以有以下两种处理方式：</p><p>a、捕获异常，执行异常分支逻辑</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         ServiceB<span class="token punctuation">.</span><span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SomeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行其他业务, 如 ServiceC.methodC(); </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式也是嵌套事务最有价值的地方， 它起到了分支执行的效果，如果 ServiceB.methodB()失败，那么执行 ServiceC.methodC()，而 ServiceB.methodB()已经回滚到它执行之前的 SavePoint，所以不会产生脏数据(相当于此方法从未执行过)，这种特性可以用在某些特殊的业务中， 而 PROPAGATION_REQUIRED 和 PROPAGATION_REQUIRES_NEW 都没有办法做到这一点。</p><p>b、外部事务回滚/提交 代码不做任何修改， 那么如果内部事务(ServiceB#methodB) rollback，那么首先 ServiceB.methodB()回滚到它执行之前的 SavePoint（在任何情况下都会如此）， 外部事务 ServiceA#methodA()将根据具体的配置决定自己是commit 还是 rollback。</p><p>另外三种事务传播属性基本用不到，在此不做分析。</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="java-security-MessageDigest"><a href="#java-security-MessageDigest" class="headerlink" title="java.security.MessageDigest"></a>java.security.MessageDigest</h3><p>功能：</p><ul><li>单向文本加密</li><li>不论输入的文本长度，输出固定长度的hash值</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getMD5Str</span><span class="token punctuation">(</span>String strValue<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        MessageDigest md5<span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String newStr<span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>strValue<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h2><p>使用Swagger2可以减少编写过多的文档，只需要通过代码就能生成API文档。</p><p>添加依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        swagger2配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建Swagger类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wangzhengbest<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @className: Swagger2 * @description: Swagger2配置 * @author: buer * @date: 2020/10/30 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置swagger2核心</span>    <span class="token comment" spellcheck="true">//访问地址为:http://ip:port/swagger-ui.html 这是官方ui</span>    <span class="token comment" spellcheck="true">//访问地址为:http://ip:port/doc.html 这是github中的第三方ui</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指定Api类型为swagger2,并定义Api文档汇总信息,设置扫描Api路径(controller层)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.wangzhengbest.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"架构演进电商项目"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"buer"</span><span class="token punctuation">,</span><span class="token string">"buerlog.top"</span><span class="token punctuation">,</span><span class="token string">"weiyouwozuiku@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"电商项目的Api文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"bpan.xyz"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要忽略注解的Api上添加注释<code>@ApiIgnore</code>。</p><p>在需要进行中文注释Api接口的java文件上添加注释<code>@Api(value = "",tags = {""})</code>，value约等于标题，tags进行详细描述。</p><p>对API方法进行描述在java方法上添加注释<code>@ApiOperation(value = "用户名是否存在",notes = "用户名是否存在",httpMethod = "GET")</code></p><p>对前端传来的对象在pojo中添加类似代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户对象BO"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"从客户端由用户传入的数据封装在此entity中"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserBo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"king"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"???"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"确认密码"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"confirmPassword"</span><span class="token punctuation">,</span>example <span class="token operator">=</span> <span class="token string">"???"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String confirmPassword<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跨域请求问题"><a href="#跨域请求问题" class="headerlink" title="跨域请求问题"></a>跨域请求问题</h2><p>当项目是前后端分离时，会涉及到跨域请求问题。可以在后端进行设置，创建CorsConfig类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wangzhengbest<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>CorsConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>UrlBasedCorsConfigurationSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CorsFilter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @className: CorsConfig * @description: 解决跨域请求以及资源获取权限 * @author: buer * @date: 2020/10/30 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CorsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.添加cors配置信息</span>        CorsConfiguration config<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许跨域</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"http://192.168.50.152:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置是否发送cookie信息</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置允许的请求方式</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置允许的header</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.为url添加映射路径</span>        UrlBasedCorsConfigurationSource corsConfigurationSource<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfigurationSource<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>corsConfigurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>调用API出现HTTP 405错误–method not allowed ，大多是因为前端的请求方法和后断的接受方法不一致。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校招准备</title>
      <link href="2020/09/02/xiao-zhao-zhun-bei/"/>
      <url>2020/09/02/xiao-zhao-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ol><li><p>并发</p><p> 并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p><p> 并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。</p><p> 操作系统通过引入进程和线程，使得程序能够并发运行。</p></li><li><p>共享</p><p> 系统中的资源可以被多个并发进程共同使用。两种方式：互斥共享(同步机制来实现临界资源的互斥访问)和同时共享。</p></li><li><p>虚拟</p><p> 将一个物理实体转换为多个逻辑实体。</p><p> 主要为时分复用(多个进程在同一处理器上并发执行)和空分复用(虚拟内存的页面置换)。</p></li><li><p>异步</p><p> 不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p></li></ol><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ol><li><p>进程管理</p><p> 进程控制、进程通信、进程同步、处理机调度、死锁处理等</p></li><li><p>内存管理</p><p> 内存分配、地址映射、内存保护和共享、虚拟内存等</p></li><li><p>文件管理</p><p> 存储空间的管理、文件读写管理和保护、目录管理等</p></li><li><p>设备管理</p><p> 完成IO请求，方便用户使用各种设备。</p><p> 主要包括缓冲管理、虚拟设备、设备分配、设备处理等</p></li></ol><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>如果一个进程在用户态需要使用内核态的功能，通过系统调用陷入内核态，由操作系统代为完成。</p><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><ul><li><p>外中断</p><p>  由CPU执行以外的事件引起。</p></li><li><p>异常</p><p>  由CPU执行指令的内部事件引起。</p></li><li><p>陷入</p><p>  在用户程序使用系统调用。</p></li></ul><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>进程是资源分配的基本单位，线程不拥有资源，只能访问隶属于进程的资源。</p><p>进程控制块(PCB)描述进程的基本信息与运行状态。创建进程和撤销进程都是对PCB的操作。</p><p>线程是独立调度的基本单位。同一进程中的线程切换不会引起进程切换。不同进程之间的线程切换会导致进程切换。</p><p>一个进程可以有多个线程，共享进程资源。</p><p>进程的系统开销远大于线程的系统开销。</p><p>线程之间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助IPC。</p><p>进程状态的切换中，主要有三种情况：就绪状态、运行状态、阻塞状态。只有就绪和运行之间可以相互切换（CPU时间片的切换），其他都是单向转换。</p><p>阻塞状态是缺少需要的资源由运行状态转换来的，但是其中的缺少的资源不包括CPU时间。</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>调度算法的目标是保证吞吐量和周转时间(从提交到终止的时间)。</p><hr><h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><p>$DBMS种类 \begin{cases} 层次数据库(HDB):使用树形结构进行表示 \ 关系数据库(RDB):由行列组成的二维表 \ 面向对象数据库(OODB):把数据以及对数据操作集合起来以对象为单位进行管理 \  XML数据库 \ 键值存储系统(KVS):单纯保存使用的主键和值 \end{cases}$</p><p>$SQl种类 \begin{cases} DDL 数据定义语言 \ DML 数据操纵语言 \ DCL数据控制语言 \end{cases}$</p><p>SQL书写规则：</p><ul><li>以分号结尾</li><li>SQL不区分关键词的大小写，插入到表中的数据区分大小写</li><li>推荐关键字大写，表名的首字母大写，其余(列名等)小写</li><li>常数用单引号进行包裹</li><li>单词之间需要使用半角空格或者换行符进行分隔</li></ul><h3 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h3><p>创建数据库：<code>CREATE DATABASE &lt;数据库名称&gt;;</code></p><p>创建表：<code>CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt; &lt;该类所需约束&gt;,...,&lt;该表的约束1&gt;，&lt;该表的约束2&gt;);</code></p><p>删除表：<code>DROP TABLE &lt;表名&gt;;</code></p><p>表定义的更新：</p><ul><li>添加列：<code>ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列名&gt; &lt;列类型&gt;;</code> Oracle和SQL Server中不用写COLUMN。，Oracle可以<code>ALTER TABLE &lt;表名&gt; ADD （ &lt;列名&gt;， &lt;列名&gt;，……）；</code></li><li>删除列：<code>ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;;</code>Oracle的特殊同上。</li></ul><p>只能使用半角英文字母（开头）、数字、下划线作为数据库、表、列的名称。</p><p>同一数据库表不能重名，同一个表里列也不能重名。</p><p>$数据类型 \begin{cases} INTEGER:整数，非小数 \ CHAR（在括号中指定存储的字符串的最大长度，不同的<br>RDBSM中可能长度单位是字符个数也可能是字节长度）\ VARCHAR：同CHAR，但是不是定长，需要给定长度,不会用半角的空格进行补位(Oracle中使用VARCHAR2) \ DATE:存储日期 \end{cases}$</p><p>对于<code>Mysql</code>来说，时间类型如下：</p><table><thead><tr><th align="center">时间类型</th><th align="center">占用空间</th><th align="center">日期格式</th><th align="center">最小值</th><th align="center">最大值</th><th align="center">零值表示</th></tr></thead><tbody><tr><td align="center">DATETIME</td><td align="center">8 bytes</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">1000-01-01 00:00:00</td><td align="center">9999-12-31 23:59:59</td><td align="center">0000-00-00 00:00:00</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">4 bytes</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">19700101080001</td><td align="center">2038 年的某个时刻</td><td align="center">00000000000000</td></tr><tr><td align="center">DATE</td><td align="center">4 bytes</td><td align="center">YYYY-MM-DD</td><td align="center">1000-01-01</td><td align="center">9999-12-31</td><td align="center">0000-00-00</td></tr><tr><td align="center">TIME</td><td align="center">3 bytes</td><td align="center">HH:MM:SS</td><td align="center">-838:59:59</td><td align="center">838:59:59</td><td align="center">00:00:00</td></tr><tr><td align="center">YEAR</td><td align="center">1 bytes</td><td align="center">YYYY</td><td align="center">1901</td><td align="center">2155</td><td align="center">0000</td></tr></tbody></table><p>一般建表时候，创建时间用datetime，更新时间用timestamp。</p><p>数据表重命名：</p><ul><li>Oracle、PostgreSQL：<code>ALTER TABLE &lt;表名&gt; RENAME TO &lt;新的表名&gt;</code></li><li>DB2：<code>RENAME TABLE &lt;表名&gt; TO &lt;新的表名&gt;</code></li><li>SQL SERVER:<code>sp_rename '表名','新的表名'</code></li><li>Mysql:<code>RENAME TABLE &lt;表名&gt; TO &lt;新的表名&gt;</code></li></ul><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>基本语法：<code>SELECT &lt;列名&gt;,... FROM &lt;表名&gt;</code>。列名之间用逗号分割。</p><p>使用<code>*</code>进行select无法设定列的显示顺序，按照CREATE TABLE语句的定义顺序。</p><p>插入空行会导致执行错误。</p><p>使用<code>AS</code>为列设置别名，格式如下：<code>SELECT &lt;列名&gt; AS &lt;别名&gt;...</code>。<strong>别名可以使用中文，但是要用双引号包裹。</strong></p><p>可以在<code>SELECT</code>语句中书写常量，如下所示。这些常量会显示在每条查询出的结果的前面。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'商品'</span> <span class="token keyword">AS</span> string<span class="token punctuation">,</span> <span class="token number">38</span> <span class="token keyword">AS</span> number<span class="token punctuation">,</span> <span class="token string">'2009-02-24'</span> <span class="token keyword">AS</span> <span class="token keyword">date</span><span class="token punctuation">,</span>product_id<span class="token punctuation">,</span> product_name<span class="token keyword">FROM</span> Product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>SELECT</code>语句中删除重复行时，使用关键词<code>DISTINCT</code>。DISTINCT 关键字只能用在第一个列名之前。<code>SELECT DISTINCT &lt;列名&gt; FROM &lt;表名&gt;</code>。<code>NULL</code>也会被合并。</p><p><code>SELECT</code>语句通过<code>WHERE</code>子句指定查询条件。WHERE子句要紧跟在FROM子句之后。</p><p>单行注释<code>--</code>，<strong>Mysql需要在<code>--</code>之后加上一个半角空格</strong>。多行注释使用<code>/* */</code>。</p><p><strong>所有包含NULL的运算，其结果都是NULL。</strong>即使除零也还是NULL。</p><p>FROM子句在SELECT中并不是必不可少，例如<code>SELECT (100 + 200) * 3 AS calculation;</code>Oracle不允许省略FROM。可以使用<code>DUAL</code>临时表。</p><p>不等于<code>&lt;&gt;</code>，<code>!=</code>不被标准SQL承认。</p><p>比较运算符可以对字符、数值和日期等几乎所有数据类型的列和值进行比较。</p><p>使用比较运算符时一定要注意不等号和等号的位置。</p><p>对字符串类型的数据进行大小比较时，规则是按照字典顺序。<strong>以相同字符开头的单词比不同字符开头的单词更相近</strong>。该规则对定长字符串和可变长字<br>符串都适用。</p><p><strong>不能对NULL使用比较运算符。</strong>专门用来判断是否为 NULL 的 IS NULL或 IS NOT NULL  运算符。</p><p>NOT运算符用来否定某一条件，但是不能滥用。</p><p>多个查询条件进行组合时，需要使用AND运算符或者OR运算符。</p><p>AND 运算符优先于 OR 运算符，可以使用<code>()</code>，改变优先级。</p><p>使用 AND 运算符进行的逻辑运算称为逻辑积，使用 OR 运算符进行的逻辑运算称为逻辑和。</p><p>SQL中除了真值和假值以外，存在第三种，即不确定NULL。即三值逻辑。</p><h3 id="聚合和排序"><a href="#聚合和排序" class="headerlink" title="聚合和排序"></a>聚合和排序</h3><p>通常，聚合函数会对NULL以外的对象进行汇总。但是只有COUNT函数例外，使用COUNT（*）可以查出包含NULL在内的全部数据的行数。</p><table><thead><tr><th align="center">函数</th><th align="center">用处</th></tr></thead><tbody><tr><td align="center">COUNT</td><td align="center">计算表中的记录数(行数)</td></tr><tr><td align="center">SUM</td><td align="center">计算表中数值列中数据的合计值</td></tr><tr><td align="center">AVG</td><td align="center">计算表中数值列中数据的平均值</td></tr><tr><td align="center">MAX</td><td align="center">计算表中数值列中数据的最大值</td></tr><tr><td align="center">MIN</td><td align="center">计算表中数值列中数据的最小值</td></tr></tbody></table><p><code>*</code>是COUNT函数特有的参数，其它函数不能使用其作为参数。COUNT(*)返回包含NULL的数据行数，COUNT(列名)则返回不包含NULL的数据行数。</p><p><strong>使用聚合函数时，NULL的数据会被排除在外，不能简单的理解为等价于0。</strong></p><p>SUM和AVG函数只对数值类型的列使用，MAX和MIN函数适用于任何数据类型的列。</p><p>去掉重复值的聚合函数，格式形如<code>SELECT COUNT (DISTINCT product_type) FROM Product</code>。</p><p>DISTINCT关键字必须写在括号中。写在外面会优先执行聚合函数，然后才是DISTINCT。</p><p>使用GROUP BY子句进行汇总：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在GROUP BY子句中指定的列称为聚合键或分组列。</p><p>GROUP BY子句必须写在FROM子句之后。如果有WHERE子句，需要卸载WHERE子句之后。</p><p>聚合键中包含NULL时，在结果中会以“不确定”行（空行）的形式表现出来。</p><p>使用 WHERE 子句进行汇总处理时，会先根据 WHERE 子句指定的条件进行过滤，然后再进行汇总处理。</p><p><strong>子句书写顺序：SELECT -&gt; FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; OREDER BY</strong></p><p><strong>子句执行顺序：FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT -&gt; OREDER BY</strong></p><p>与聚合函数和GROUP BY子句有关的常见错误：</p><ul><li>在SELECT子句中书写了多余的列。使用聚合函数时，SELECT子句只能存在以下三种元素：**常数，聚合函数，GROUP BY子句中指定的列名(也就是聚合键)**，MYSQL支持在多列候补中只要有一列满足要求就可以，其他RDBMS都不支持。因为聚合键和另外的列名不一定是一对一关系。</li><li>在GROUP BY子句中写了列的别名。在MYSQL中不算错误，但是不标准，因为标准SQL的执行顺序的影响，GROUP BY 时还未执行SELECT，系统也就不知道列的别名。</li><li>GROUP BY子句结果的显示是无序的。</li><li>只有在SELECT子句、HAVING子句和ORDER BY子句中能够使用COUNT等聚合函数。</li></ul><p>使用COUNT函数等对表中数据进行汇总操作时，为其指定条件的不是WHERE子句，而是HAVING子句。</p><p> HAVING子句要写在GROUP BY子句之后。</p><p><strong>WHERE子句用来指定数据行的条件， HAVING子句用来指定分组的条件。</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span> ……<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span> ……<span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>分组结果对应的条件<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>HAVING 子句中能够使用的 3 种要素:<strong>常数、聚合函数、GROUP BY子句中指定的列名</strong>。</p><p>在 WHERE 子句和 HAVING 子句中都可以使用的条件，最好写在 WHERE 子句中。WHERE在排序之前就删去了部分数据，且便于建立索引，执行速度也会更快。</p><p>若查询没有指定顺序，则返回的结果往往是随机的。</p><p>OREDER BY：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span> ……<span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序基准列<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>排序基准列<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span> ……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不论何种情况， ORDER BY 子句都需要写在 SELECT 语句的末尾。这是因为对数据行进行排序的操作必须在结果即将返回时执行。</p><p>OREDER BY默认是升序，也可以显式声明<code>ASC</code>，使用关键词<code>DESC</code>降序。</p><p><code>OREDER BY</code>指定多个排序键时，优先使用左侧的键，相同情况下在参考右侧的键。</p><p><strong>排序键中包含NULL时，会在开头或末尾进行汇总。</strong></p><p>在ORDER BY子句中可以使用SELECT子句中定义的别名。但是GROUP BY不可以。<strong>因为 SELECT 子句的执行顺序在 GROUP BY 子句之后， ORDER BY 子句之前</strong>。</p><p>在ORDER BY子句中可以使用SELECT子句中未使用的列和聚合函数。</p><hr><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2>]]></content>
      
      
      <categories>
          
          <category> 就业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试开发知识</title>
      <link href="2020/09/01/ce-shi-kai-fa-zhi-shi/"/>
      <url>2020/09/01/ce-shi-kai-fa-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>作为测试工程师，目标是要保证系统在各种应用场景下的功能是符合设计要求的。需要考虑的测试用例需要更多、更全面。</p><p>黑盒测试方法:</p><ul><li>等价类划分方法，将所有可能的输入数据划分为若干个子集。在每个子集中，如果任意一个输入数据对于揭露程序中潜在的错误都具有同等的效果，那么这样的子集就构成了一个等价类。后续只要从每个等价类中任意选取一个值进行测试，就可以用少量具有代表性的测试输入取得较好的测试覆盖结果。</li><li>边界值分析方法，选取输入、输出的边界值进行测试。通常大量的软件错误发生在输入或输出范围的边界上，所以需要对边界值进行重点测试。通常选取正好等于刚大于或刚小于边界的值作为测试数据。</li></ul><p>上述两种方法相互补充，故通常结合使用。</p><p>一个质量过硬的软件系统，除了显式功能性需求之外，其他的非功能性需求即隐式功能性需求也是极其关键的。</p><p>显式功能性需求(Functional requirement)指软件本身需要实现的具体功能。</p><p>非功能性需求(Non-functional requirement)主要涉及安全性、性能以及兼容性三大方面。这些往往决定软件质量的关键因素。</p><p>在绝大多数的软件工程实践中，测试由于受限于时间成本和经济成本，是不可能进行穷尽测试，而是采用基于风险驱动的模式，有所侧重的选择测试范围和设计测试用例，以寻求缺陷风险和研发成本之间的平衡。</p><blockquote><p>每一个解决方案都是下一个问题的来源，要真正理解问题，那至少对自己的解决方案提出三个可能出错的地方。–《你的灯亮着吗》</p></blockquote><p>“好的”测试用例一定是一个完备的集合。它能覆盖所有等价类以及各种边界值，而跟能否发现缺陷无关。需要具备一下三个特征:</p><ul><li><strong>整体完备性</strong>:”好的”测试用例一定是一个完备的整体，是有效测试用例组成的集合，能够完全覆盖测试需求。</li><li><strong>等价类划分的准确性</strong>:对于每个等价类都要保证只要其中一个输入测试通过，其他输入也一定测试通过。</li><li><strong>等价类集合的完备性</strong>:需要保证所有可能的边界值和边界条件都已经正确识别。</li></ul><p>常用的测试方法：<strong>等价类划分法，边界值分析法、错误推测方法</strong>、因果图方法、判定表驱动分析法、正交实验设计方法、功能图分析方法、场景设计方法、形式化方法、扩展有限状态机方法等等。实际使用的主要是前三个。</p><hr><h5 id="等价类划分方法"><a href="#等价类划分方法" class="headerlink" title="等价类划分方法"></a>等价类划分方法</h5><p>等价类中任意一个输入数据对于揭露程序中潜在错误都具有同等效果。只需从每个等价类中任意选取一个值进行测试，就可以用少量具有代表性的测试输入取得较好的测试覆盖结果。</p><h5 id="边界值分析方法"><a href="#边界值分析方法" class="headerlink" title="边界值分析方法"></a>边界值分析方法</h5><p>边界值分析是对等待类划分的补充。大量的错误发生在输入输出的边界值上，所以需要对边界值进行重点测试，通常选择正好等于、刚刚大于或刚刚小于边界的值作为测试数据。</p><h5 id="错误推测方法"><a href="#错误推测方法" class="headerlink" title="错误推测方法"></a>错误推测方法</h5><p>错误推测方法是指基于对被测试软件系统设计的理解、过往经验以及个人直觉，推测出软件可能存在的缺陷，从而有针对性的设计测试用例的方法。该方法强调的是对被测试软件的需求理解以及设计实现的细节把握，当然还有个人能力。</p><p>在企业的具体实践中，为了降低对个人能力的依赖，通常会建立常见缺陷知识库，在测试设计的过程中，会使用缺陷知识库作为检查点列表，去帮助优化补充测试用例的设计。</p><hr><p>在真实的项目实践中，不同的软件项目在研发生命周期的各个阶段都会有不同的测试类型。</p><p>在具体的用例设计中，首先需要搞清楚每一个业务需求所对应的多个软件功能需求点，然后分析出每个软件功能需求点对应的多个软件需求点，最后再针对每个测试需求点设计测试用例。</p><p>具体到测试用例本身的设计，有两个关键点需要注意：</p><ol><li>从软件功能需求出发，全面的、无遗漏的识别出测试需求是至关重要的，这将直接关系到用例的测试覆盖率。</li><li>对于识别出的每个测试需求点，需要综合运用等价类划分、边界值分析和错误推测方法来全面的设计测试用例。</li></ol><p>经验：</p><ul><li>只有深入理解被测试软件的架构，才能设计出“有的放矢”的测试用例集，去发现系统边界以及系统集成上的潜在缺陷。</li><li>必须深入理解被测软件的设计与实现细节，深入理解软件内部的处理逻辑。在具体实践中，可以通过代码覆盖率指标标出可能的测试遗漏点。<strong>切忌不要以开发代码的实现以依据设计测试用例，应该根据原始需求设计测试用例。</strong></li><li>需要引入需求覆盖率和代码覆盖率来衡量测试执行的完备性，并以此为依据来找出遗漏的测试点。</li></ul><p>单元测试:对软件中的最小可测试单元在与程序其他部分相隔离的情况下进行检查和验证的工作，这里的最小可测试单元通常指的是函数或者类。</p><p>单元测试的用例是一个“输入数据”和“预计输出”的集合。</p><p>“输入数据”：</p><ul><li>被测试函数的输入参数</li><li>被测试函数内部需要读取的全局静态变量或成员变量</li><li>函数内部调用子函数获取或改写的数据</li><li>嵌入式系统中，在中断调用时改写的数据</li><li>…</li></ul><p>“预计输出”（要严格按照代码的功能逻辑来设计定，不能通过阅读代码来推算预期输出）:</p><ul><li>被测试函数的返回值</li><li>被测试函数的输出函数</li><li>被测试函数改写的成员变量或全局变量</li><li>被测试函数中进行的文件更新或数据库更新</li><li>被测试函数中进行的消息队列更新</li><li>…</li></ul><p>注意等价类或边界值，容易在测试时被忽略。</p><p>软件测试从小到大的粒度进行划分：单元测试、集成测试、系统测试。</p><p>$被测函数\begin{cases} 驱动代码=&gt;调用被测函数的代码 \ 桩代码=&gt;替代真实代码的临时代码 \ Mock代码 \end{cases}$</p><p>驱动模块：被测函数前的数据准备+调用被测函数+验证相关结果</p><p>桩代码：具有隔离和不起的作用，使得被测代码能够独立编译、链接并独立运行，还具有控制被测函数执行路径的作用。</p><p>编写桩代码的三个原则</p><ol><li>桩函数具有与原函数完全一致的原型。</li><li>桩函数比较简单，只需保持原函数的声明，加上一个空的实现，目的是通过编译链接。</li><li>要根据测试用例的需要，输出合适的数据作为被测函数的内部输入。</li></ol><p>Mock代码和桩代码的区别：<strong>测试期待结果的验证</strong>。可以理解为关注点的不同。Mock代码关注的是Mock有没被调用，如何调用，调用次数，MOck的调用顺序。<strong>对结果验证在Mock函数中</strong>。桩代码关注的是被测函数的执行路径。<strong>对于结果验证在驱动代码</strong>。</p><p>不是所有代码都要进行单元测试，通常只有底层模块和核心模块。</p><p>单元测试款假的选型取决于开发语言。对于桩代码和Mock代码框架选型依据开发所采用的具体技术栈。</p><p>需要将单元测试执行、代码覆盖率统计和持续集成流水线做集成，以确保每次代码提交，自动触发单元测试，自动统计代码覆盖率，并决定本次代码提交是否能够被接受。</p><p>测试中的困难：</p><ul><li>紧密耦合的代码难以隔离</li><li>隔离后编译链运行困难</li><li>代码可测试性差，可测试性与代码规模呈正比</li><li>无法通过桩代码直接模拟系统底层函数的调用</li><li>代码覆盖率越往后越难提高</li></ul><p>自动化测试的本质就是先写一段代码，然后测试另一段代码。在自动化上，需要权衡利弊。</p><p>自动化的缺陷：</p><ul><li>自动化只能取代手工测试中执行频率高、机械化高的</li><li>自动化成本高，比手动测试脆弱，无法应对被测系统的变化</li><li>自动化测试的开发工作量远大于单次的手工测试。只有有效执行次数大于5次，才考虑进行自动化测试</li><li>测试效率依赖自动化测试用例的设计与实现质量</li><li>初期效率低，后期需要重构</li></ul><p>使用自动化测试的项目特点：</p><ul><li>需求稳定，不会频繁变更</li><li>研发和维护周期长，需要频繁执行回归测试</li><li>需要在多种平台上重复执行相同测试的场景</li><li>某项测试项目通过手工测试无法实现，或手工成本太高，如性能和压力测试。</li><li>被测软件开发规范，具有可测试性。</li><li>某些测试用例的自动化需要开发人员预留可测试接口，比如图形验证码。</li></ul><p>短期的一次性项目，选择手工探索性测试。中长期项目，对于较稳定的软件功能进行自动化测试，对于变化较大的或需求不明的采用手工测试。</p><p>单元测试阶段的“自动化”：</p><ul><li>测试用例执行的自动化</li><li>用例框架代码生成的自动化</li><li>部分测试输入数据的自动化生成</li><li>自动桩代码的生成</li><li>被测代码的自动化静态分析</li><li>测试覆盖率的自动统计与分析</li></ul><p>抽桩：比如在单元测试阶段，使用的是桩代码。但是在进行代码集成测试阶段需要调用真实代码，则需要“抽桩”。</p><p>代码的静态扫描的目的是识别出违反编码规则或编码风格的代码行。通常是结合项目具体的编码规则和编码风格，有自动化工具通过内建规则和用户自动以规则自动化完成。常用的工具有Sonar和Coverity。</p><p>代码行测试覆盖率、分支覆盖率、MC/DC覆盖率等可以帮助衡量单元测试用例集合的充分性和完备性，提供适当增补测试用例以提高测试覆盖率的依据。</p><p>代码级集成测试更加关注软件模块之间的接口调用和数据传递。被测函数内部调用的其它函数必须是真实的，不允许使用桩代码代替。单元测试可以。</p><p>现在软件追求系统复杂性的解耦，避免“大单体”应用，采用Web Service或者RPC调用的方式来协作完成各个软件功能。现在代码级集成测试基本不做了。</p><p>Web Service测试主要是SOAP API和REST API两种。手动常用SoapUI或Postman。</p><p>基于代码的API测试用例，通常包含三大步骤：</p><ol><li>准备API调用时需要的测试数据</li><li>准备API调用参数并发起API的调用</li><li>验证API调用的返回结果</li></ol><p>Web Service的自动化测试体现在：</p><ul><li>API测试用例执行的自动化</li><li>测试脚手架代码的自动化生成</li><li>部分测试输入数据的自动生成</li><li>Response验证的自动化，其核心思想是自动比较相同API调用的返回结果，并实现出有差异的字段值，比较过程可以通过规则配置来去掉一些动态值</li><li>基于SoapUI或者Postman的自动化脚本生成</li></ul><p>GUI测试的自动化技术核心思想是基于页面元素识别技术，对于页面元素进行自动化操作，以模拟实际终端用户的行为并验证软件功能的正确性。</p><p>$GUI自动化 \begin{cases} 传统Web浏览器=&gt;Selenium和Micro\quad Focus的UFT \ 移动端原生应用=&gt;Appium \end{cases}$</p><p>$测试覆盖率\begin{cases} 面向项目的需求覆盖率：指测试对需求的覆盖程度，常将每一条分解后的软件需求和对应的测试建立一对多的映射关系，保证测试可以覆盖每个需求 \ 偏向技术的代码覆盖率：至少被执行了一次的条目数占整个条目数的百分比 \end{cases}$</p><p>需求覆盖率属于传统瀑布模型下的软件工程实践，难以适应当前的敏捷开发。</p><p>$代码覆盖率 \begin{cases} 语句覆盖率 \ 判断覆盖率 \ 条件覆盖率 \end{cases}$</p><p><strong>统计代码覆盖率的根本目的是找出潜在的遗漏测试用例，并有针对性的进行补充，同时还可以识别出代码中那些由于需求变更等原因造成的不可达的废弃代码。</strong></p><p>单元测试可以最大化利用打桩技术来提高覆盖率。</p><p>MC/DC覆盖率是最高标准的代码覆盖率指标，除了直接关系人生命安全的软件以外，很少有项目会有严格的MC/DC覆盖率要求。</p><p><strong>即使测试用例达到100%的代码覆盖率，产品质量也不能说是万无一失。</strong>在于代码覆盖率是基于现有代码的，对于没有考虑到的某些输入或未处理的情况无法发现。</p><p>实现代码覆盖率的统计，最基本的方法就是<strong>注入</strong>。简单的说就是在被测代码中自动插入用于覆盖率统计的探针代码，并保证插入的探针代码不会给源代码带来任何影响。</p><p>实现技术<br>    Instrumentation<br>        Source Code<br>        Byte Code（主流）<br>            Offline：无需修改源代码，但是要在测试开始前对文件进行插桩，并实现生成插过桩的class文件。适用于不支持Java Agent的运行环境，以及无法使用自定义类装载器的情况。无法实时获取。<br>                Inject：直接修改原class文件<br>                Replace：生成新的class文件<br>            On-The-Fly：无需修改源代码，也无需进行字节码插桩。可以在系统不停机的情况下实时手机代码覆盖率信息。但是运行环境必须允许使用Java Agent。<br>                Java Agent：利用执行在main()方法之前的拦截器方法premain()插入探针。实际中需要在JVM添加”-javaagent”启动参数并指定用于实时字节码注入的代理程序。代理程序在装载每个class文件之前，先判断是否插入了探针。没有则将探针插入class文件中。<br>                Class Loader：在每次类加载前，在class文件中插入探针。</p><p>作为测试人员，<strong>必须深入理解业务，但业务知识不等同于测试能力。</strong></p><p>测试开发岗位的核心是<strong>测试</strong>，开发是为了更好的测试。</p><p>$传统测试工程师的核心竞争\begin{cases} 测试策略设计能力（重点） \ 测试用例设计能力 \ 快速学习能力 \ 探索性测试思维 \ 缺陷分析能力\ 自动化测试技术 \ 良好的沟通能力 \end{cases}$</p><p>测试策略设计能力:对于各种被测软件，能够快速准确的理解需求，并在有限的时间和资源下，明确测试重点和最适合的测试方法。</p><ol><li>测试要具体执行到什么程度；</li><li>测试需要借助于什么工具；</li><li>如何运用自动化测试以及自动化测试框架，以及如何选型；</li><li>测试人员资源如何合理分配；</li><li>测试进度如何安排；</li><li>测试风险如何应对</li></ol><p>测试用例设计能力：深入理解被测软件的业务需求和目标用户的使用习惯，熟悉软件的具体设计和运行环境。<strong>对常见的缺陷模式、典型的错误类型以及遇到的缺陷，进行归纳总结。阅读好的测试用例。</strong></p><p>快速学习能力：1.阅读官方文档 2.理解原理。</p><p>探索性测试思维：在执行测试的过程中不断学习被测系统，结合自己的经验猜测和逻辑推理，提出更多的有针对的测试关注点。</p><p>缺陷分析能力：</p><ul><li><p>对于已经发现的缺陷，结合发生错误的上下文以及后台日志，<strong>可以预测或者定位缺陷的发生原因，甚至可以明确指出具体出错的代码行</strong>，由此可以大幅缩短缺陷的修复周期，并提高开发工程师对于测试工程师的认可以及信任度；</p></li><li><p>根据已经发现的缺陷，结合探索性测试思维，<strong>推断同类缺陷存在的可能性</strong>，并由此找出所有相关的潜在缺陷；</p></li><li><p>可以对一段时间内所发生的缺陷类型和趋势进行合理分析，由点到面<strong>预估整体质量的健康状态，并能够对高频缺陷类型提供系统性的发现和预防措施，并以此来调整后续的测试策略</strong>。</p></li></ul><p>自动化测试技术：自动化是手段。</p><p>$测试开发工程师的核心竞争力\begin{cases} 测试系统需求分析能力：需要识别出测试架构的需求和提高效率的应用场景 \ 更宽广的知识体系 \end{cases}$</p><p>缺陷报告的组成：</p><ul><li>缺陷标题：概括性描述，在什么情况下发生了什么问题。应该尽量描述问题本质，而非停留在问题表面。</li><li>缺陷概述：除了描述清楚缺陷，还可以扩展，比如描述同一类型的缺陷可能出现的所有场景。<strong>目的是清晰简洁的描述缺陷，使开发工程师能够聚焦缺陷的本质</strong>。</li><li>缺陷影响：缺陷引起的问题对用户或者业务的影响范围以及严重程度。决定缺陷的优先级和严重程度。</li><li>环境配置：详细描述测试环境的配置细节。通常只描述那些重现缺陷的环境的敏感信息。</li><li>前置条件：测试步骤前系统应该处在的状态，目的是<strong>减少缺陷重现的步骤</strong>。</li><li><strong>缺陷重现步骤</strong>：<strong>目的在于用简洁的语言向开发工程师展示缺陷重现的具体操作步骤。</strong>确保缺陷的可重现性，找到最短的重现路径。</li><li>期望结果与实际结果：在描述重现步骤的过程中，需要明确说明期待结果(应该发生什么)和实际结果(发生了什么)。</li><li>优先级和严重程度：严重程度是缺陷本身的属性，优先级是缺陷的工程属性，随着项目进度、解决缺陷的成本等因素而变动。</li><li>变通方案：提供一种临时绕开当前缺陷而不影响产品功能的方式。</li><li>根原因分析：即RCA，定位出问题的根本原因，清楚的描述缺陷产生的原因。</li><li>附件：为缺陷的存在提供必要的证据支持，如：界面截图、测试用例日志、服务端日志、GUI测试视频等。</li></ul><p>测试计划的组成：</p><ul><li>测试范围：描述被测对象和主要的测试内容，明确“测什么”和“不测什么”</li><li>测试策略：明确测试的重点和各项测试的先后顺序，采用什么样的测试类型和测试方法，不仅要给出为什么选用这个测试类型，还要详细说明具体的实施方法<ol><li>功能测试：哪些测试点适合采用自动化测试，并采用什么样的框架技术。需要手工测试的测试点，决定采用什么类型的测试用例设计方法，如何准备相关的测试数据。</li><li>兼容性测试：既有产品测试Top30%的移动设备以及IOS/Android版本列表。全新产品：通过TalkingData这样的网站查看目前主流的移动设备、分辨率大小、IOS/Android版本等信息</li><li>性能测试</li></ol></li><li>测试资源：谁来测，在哪测。</li><li>测试进度：描述各类测试的开始时间、所需工作量、预计完成时间，并以此为依据来建议最终产品的上线发布时间。</li><li>测试风险评估：预估整个测试过程中可能存在的潜在问题，以及当这些风险发生时的应对策略。</li></ul><p>扩展知识：网络架构的核心知识(性能测试、稳定性测试、全链路压测、故障切换Failover测试、动态集群容量伸缩测试、服务降级测试、安全渗透测试、Memcached分布式缓存集群、缓存击穿、缓存雪崩、缓存预热、缓存集群扩容局限性、可伸缩性架构设计、负载均衡、数据库读写分离、故障切换、动态集群容量伸缩、服务降级)、容器技术(Selenium Grid、Docker、Kubernetes)、云计算技术(Appium+Selenium Grid)、DevOps思维(Jenkins，组合各种Plugin来完成流水性搭建，提供高效的CI/CD)、前端开发技术。</p><p>通常情况下，互联网产品要求回归测试的执行时间不能超过四个小时。</p><p>缩短测试执行时间的方法：</p><ul><li>引入测试的并发执行机制，用包含大量测试节点的测试执行集群来并发执行测试用例。</li><li>改进测试策略设计。<ol><li>单元测试</li><li>API测试</li><li>GUI测试</li></ol></li></ul><p>传统软件通常采用金字塔模型的测试策略，现今的互联网产品往往采用菱形模型：以中间层的API测试为重点做全面的测试；轻量级的GUI测试，支付高最核心直接影响主营业务流程的E2E场景；最上层的GUI测试通常利用探索式测试思维，以人工测试的方式发现尽可能多的潜在问题。</p>]]></content>
      
      
      <categories>
          
          <category> 测试开发 </category>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring实战学习</title>
      <link href="2020/08/13/spring-shi-zhan-xue-xi/"/>
      <url>2020/08/13/spring-shi-zhan-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录学习《Spring实战》(第五版)中的知识点。</p><blockquote><p>唯一不变的就是变化    —-希腊哲学家 赫拉克利特</p></blockquote><h2 id="第一部分-Spring基础"><a href="#第一部分-Spring基础" class="headerlink" title="第一部分 Spring基础"></a>第一部分 Spring基础</h2><p>Spring的核心提供了一个叫做Spring上下文(Spring application context)的容器，其创建和管理应用组件(bean)。将bean组装在一起的行为是通过基于依赖注入(dependency injection,DI)的模式实现。组件不会创建它所依赖的组件并管理它们的生命周期，使用依赖注入的应用依赖于单独的实体（容器）来创建和维护所有的组件，并将其注入到它们所需的bean中。</p><p>以往，使用一个或多个xml文件指导Spring上下文将bean装配在一起。现在推荐使用基于java的配置。<code>@Configuration</code>注释告知Spring这是一个配置类，为Spring应用提供上下文。使用<code>@Bean</code>注释标注，表明方法返回的对象会以bean的形式添加到Spring的上下文。(默认这些bean对应的bean ID与定义它们的方法名称相同)。</p><p>基于java的配置相较于xml有更强的类型安全性和更好的重构能力。</p><p><strong>只有当Spring不能进行自动配置时，才需要显示配置。</strong></p><p>$自动配置\begin{cases}\text{自动装配：Spring能够自动为组件注入所依赖的其他bean} \ \text{组件扫描:Spring自动发现应用路径下的组件，并将它们创建成Spring应用上下文的组件}\end{cases}$</p><p>Spring Initializr是一个能够生成Spring Boot项目的REST API。</p><p>Spring项目的目录结构：</p><ul><li>mvnw和mvnw.cmd：Maven包装器(wrapper)脚本。即使机器上没有安装Maven，也能构建项目。</li><li>pom.xml：Maven构建规范。</li><li>application.properties：最初该文件是空的，为我们提供制定配置属性的地方。</li><li>resources/static：存放任意为浏览器提供服务的静态内容。</li><li>resources/templates：存放用来渲染内容到浏览器的模板文件。</li></ul><p>Spring Boot starter依赖它们本身不包含库代码，而是传递性的拉取其他的库。这样做的好处如下：</p><ul><li>构建文件会显著减小并易于管理。不必为每个所需的依赖库都声明依赖。</li><li>能够根据它们所提供的功能来思考依赖，而不是库名称。</li><li>不必担心库版本问题。可以相信给定版本的Spring Boot，传递性引入的库的版本是兼容的。只要关心Spring Boot版本就行。</li></ul><p>Spring Boot maven plugin：1.提供一个maven goal，允许我们使用maven来运行应用。2.确保依赖的所有库都包含在可执行的jar文件中，并保证它们在运行时类路径下可用。3.它会在jar中生成一个manifest文件，将引导类声明为可执行jar主类。</p><p><code>@SpringBootApplication</code>是一个组合注释，如下：</p><ol><li><code>@SpringBootConfiguration</code>：将该类声明为配置类。实际上该注释是<code>@Configuration</code>的特殊形式。</li><li><code>@EnableAutoConfiguration</code>：启用Spring Boot的自动配置。</li><li><code>@ComponentScan</code>：启用组件扫描。</li></ol><p>测试类带有<code>@RunWith(SpringRunner.class)</code>注解。其是Junit的注解，它会运行一个测试运行器(runner)来指导JUnit如何运行测试。本例子中为JUnit提供的是SpringRunner，这个是一个Spring提供的测试运行器，它会创建测试运行所需的Spring应用上下文。<code>@SpringBootTest</code>告诉JUit在启动测试时添加上Spring Boot功能</p><p>SpringRunner是SpringJUit4ClassRunner的别名，于Spring4.3引入，移除了对特定JUit版本的关联。</p><p>Spring自带一个强大的Web框架，Spring MVC。其核心是控制器的理念(处理请求并以某种方式进行信息响应的类)。</p><p>在Spring Boot2.2之后，默认的测试工具变成了Junit5。有两种方法进行测试:1.直接写<code>@SpringBootTest</code>，如果测试MVC加上注释<code>@AutoConfigureMockMvc</code>，注入一个<code>Autowired</code>的<code>MockMvc</code>对象。2.声明<code>@ExtendWith(SpringExtension.class)</code>替换<code>@RunWith(SpringRunner.class)</code>。设置<code>@WebMvcTest(所需测试的Controller.class)</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span>Matchers<span class="token punctuation">.</span>containsString<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>content<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>view<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//@SpringBootTest</span><span class="token comment" spellcheck="true">//@AutoConfigureMockMvc</span><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span>SpringExtension<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span>HomeController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeControllerTest</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// &lt;3></span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// &lt;4></span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// &lt;5></span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>           <span class="token comment" spellcheck="true">// &lt;6></span>                        <span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">"Welcome to..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@RequestMapping</code>：注释到类级别的时候，它能够指定该控制器所处理的请求类型。</p><p>在方法上的<code>@GetMapping</code>注释对类级别的<code>@RequestMapping</code>细化。<code>GetMapping</code>是Spring4.3引入，之前的是<code>@RequestMapping(method=RequestMethod.GET)</code>。</p><table><thead><tr><th>Spring MVC 的请求注解</th><th>描述</th></tr></thead><tbody><tr><td>@RequestMapping</td><td>通用的请求处理</td></tr><tr><td>@GetMapping</td><td>处理HTTP GET请求</td></tr><tr><td>@PostMapping</td><td>处理HTTP POST请求</td></tr><tr><td>@PutMapping</td><td>处理HTTP PUT请求</td></tr><tr><td>@DeleteMapping</td><td>处理HTTP DELETE请求</td></tr><tr><td>@PatchMapping</td><td>处理HTTP PATCH请求</td></tr></tbody></table><p>在为控制器方法声明请求映射时，越具体越好。意味着至少要声明路径(或者从类级别的QRequestMapping继承一个路径)以及它所处理的HTTP方法。<strong>推荐在类级别上使用@RequestMapping以便于指定基本的路径。在每个处理器方法上，使用更具体的@GetMapping或@PostMapping注解。</strong></p><p>DevTools是Spring开发人员的开发期工具，包括：</p><ul><li>代码变更后应用自动重启。</li><li>当面向浏览器的资源（如模板、Js、样式表）等发生变化时，会自动刷新浏览器。</li><li>自动禁用模板缓存。</li><li>如果使用了H2数据库，内置H2控制台。</li></ul><p>当DevTools运行时，应用程序会被加载到Java虚拟机两个独立的类加载器中。其中一个类加载器会加载Jva代码、属性文件和项目中”src/main”路径下几乎所有的内容。另一个类加载器会加载依赖的库。当检测到变更时，DevTools只会重新加载包含项目代码的类加载器，并重启应用上下文。另一个类加载器和jvm保持不变，缩短应用启动时间。但<strong>导致自动重启无法反映依赖项的变化。需手动重新启动应用</strong>。DevTools在应用程序运行时，自启动一个LiveReload服务器。当LiveReload服务器与LiveReload浏览器插件结合时，有变化时自动刷新浏览器。</p><p><strong>推荐使用Idea中的插件JRBEL</strong></p><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><blockquote><p>Lombok是一种JAVA的实用工具，可用来帮助开发人员消除JAVA的冗长，通过注解实现这一目的。</p></blockquote><p>常见的Lombok注释：</p><ul><li><p>@Data：注解在类上。提供类所有属性的getter和setter方法，还提供了equals、canEqual、hashCode、toString方法。</p></li><li><p>@Setter：注解在属性上；为属性提供setting方法</p></li><li><p>@Getter：注解在属性上；为属性提供getting方法</p></li><li><p>@SneakyThrows：无需在签名处显式抛出异常</p></li><li><p>@Log4j：注释在类上；为类提供一个属性名为log的log4j日志对象</p></li><li><p>@Slf4j：同上。其作用同如下代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger log<span class="token operator">=</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>DesignTacoController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>@NoArgsConstructor：注释在类上；为类提供一个无参的构造方法</p></li><li><p>@AllArgsConstructor：注释在类上；为类提供一个全参的构造方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些算法</title>
      <link href="2020/05/14/yi-xie-suan-fa/"/>
      <url>2020/05/14/yi-xie-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="马尔可夫"><a href="#马尔可夫" class="headerlink" title="马尔可夫"></a>马尔可夫</h2><p>20世纪初,马尔可夫研究自然界有一类事物变化的过程仅与失误的近期状态有关,与事物过去的状态无关.即马尔可夫性.</p><p>一个马尔可夫过程是状态间的转移仅依赖前n个状态的过程.这个过程被称为n阶马尔可夫模型,其中n是影响下一个状态的(前)n个状态.</p><p>马尔可夫假设:假设模型的当前状态仅仅依赖前面的几个状态.</p><h3 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h3><ul><li>随机过程的本质就是对一系列随机变量的整体描述.</li><li>马尔可夫矩阵的性质,其中每个值大于等于0,且每行或者每列和为1(这取决于是左乘还是右乘).</li><li>马尔可夫的时齐性:从状态i转化到状态j的转义概率$p_{ij}(m)$仅仅依赖于时间的长短,与其他(比如起始状态等)均无关.</li></ul><h3 id="收敛的必要条件"><a href="#收敛的必要条件" class="headerlink" title="收敛的必要条件"></a>收敛的必要条件</h3><ul><li>可能的状态数是有限的</li><li>状态间的转移概率需要固定不变</li><li>从任意状态能够转变到任意状态</li><li>不能是简单的循环</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>T表示时间空间,E表示状态空间.</p><ul><li>T连续,E连续-&gt;连续Markov过程</li><li>T连续,E离散-&gt;离散Markov过程</li><li>T离散,E连续-&gt;Markov序列</li><li>T离散,E离散-&gt;Markov链</li></ul><h3 id="转移概率矩阵"><a href="#转移概率矩阵" class="headerlink" title="转移概率矩阵"></a>转移概率矩阵</h3><p>$P(m)=(p_{ij}(m))$为马尔可夫链的m步转移矩阵.</p><p>马尔可夫预测的核心在于转移概率矩阵的确定,获取方法可以是理论分析亦或实际统计结果给出的,甚至是猜测的.</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ol><li>$0\le p_{ij}(m)\le1$:概率在0~1之间.</li><li>对于任意的$i\in E$,$\sum_{j\in E}p_{ij}(m)$:概率之和为1.</li><li>对于任意的$i,j\in E$,$p_{ij}(0)=\begin{cases}\text{1,i=j}\ 0,i\neq j\end{cases}$:不发生转移的概率.</li></ol><h3 id="柯尔莫格洛夫-切普曼方程-k-c方程"><a href="#柯尔莫格洛夫-切普曼方程-k-c方程" class="headerlink" title="柯尔莫格洛夫-切普曼方程(k-c方程)"></a>柯尔莫格洛夫-切普曼方程(k-c方程)</h3><p>对于任意的$m,n\ge 0$,有$\begin{cases}p_{ij}(n+m)=\sum_{k\in E}p_{ik}(n)p_{kj}(m)\ P(n+m)=(P(1))^{n+m}\end{cases}$</p><h3 id="马尔可夫预测"><a href="#马尔可夫预测" class="headerlink" title="马尔可夫预测"></a>马尔可夫预测</h3><ol><li>对于一个马尔可夫链,其一步转移概率矩阵为P.</li><li>初始状态(初始分布)$\pi _j(0)=P{\xi_0=j}$,反映了马尔可夫链在初始时候的对于各个状态的概率分布情况,可以搁在一起写个向量$\pi(0)=(\pi_1(0),\pi_2(0),…)$.</li><li>同样有$\pi_j(n)=P{\xi_n=j}$,表示经过n步转移后,马尔可夫链对于各个状态的概率分布情况.同样的,把它们搁在一起写成一个向量:$\pi(n)=(\pi_1(n),\pi_2(n),…)$</li><li>预测方法:$\pi(n)=\pi(0)P^n$</li><li>$(\pi_1(n),\pi_2(n),…)$收敛到一个固定的向量,称之为马尔可夫链或转移矩阵P的不变分布(<strong>不是所有的马尔可夫链都有不变分布</strong>).当马尔可夫链有不变分布时,称之为马尔科夫链具有遍历性.</li></ol><h3 id="可观测马尔可夫模型"><a href="#可观测马尔可夫模型" class="headerlink" title="可观测马尔可夫模型"></a>可观测马尔可夫模型</h3><p>对于一个问题而言,我们有初始分布$\pi$,转移概率矩阵A,在给定的任意一个时刻t,我们都能有一个状态$q_t$,时间的变化,随一个状态转移到另一个状态,便能得到一个观测序列,即为状态序列$O=[q_1,q_2,q_3,q_4,…,q_m]$.且整个问题中一共有n个观测状态.出现这样的序列的概率是:$P(O|A,\pi)=P(q_1)\prod_{t=2}^mP(q_t|q_{t-1})$,所以一个可观测的马尔可夫模型由一个三元组描述:$(A,\pi,n)$,一般情况下简记为$(A,\pi)$.</p><p>如果穷举了所有的观测序列:</p><p>$\pi_i=\frac{以状态i开始的序列的数目}{序列总数}$</p><p>$p_{ij}=\frac{从状态i转移到状态j的序列数目}{从状态i开始转移的序列总数}$</p><h3 id="隐马尔可夫模型"><a href="#隐马尔可夫模型" class="headerlink" title="隐马尔可夫模型"></a>隐马尔可夫模型</h3><h4 id="两个基本假设"><a href="#两个基本假设" class="headerlink" title="两个基本假设"></a>两个基本假设</h4><ul><li>齐次马尔可夫性假设:$P(i_t|i_{t-1},o_{t-1},…,i_1,o_1)=P(i_t|i_{t-1}),t=1,2,…,T$.表示任意时刻t的状态只依赖前一时刻的状态,与其他状态和观测都无关.</li><li>观测独立性假设:$P(o_t|i_T,o_T,i_{T-1},o_{T-1},…,i_{t+1},o_{t+1},i_t,o_t,i_{t-1},o_{t-1},…,i_1,o_1)=P(o_t|i_t)$.对于任意时刻的观测,只依赖该时刻的状态,与其他时刻的观测和状态都无关.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img//BlogImage%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png"></p><p><img src="https://raw.githubusercontent.com/weiyouwozuiku/buerlog_img/master/BlogImage%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png" alt="https://raw.githubusercontent.com/weiyouwozuiku/buerlog_img/master/BlogImage%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img//BlogImage%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB_1.png"></p><h4 id="基本想法"><a href="#基本想法" class="headerlink" title="基本想法"></a>基本想法</h4><p>系统的状态S无法预测,但是可以观测到某个其他和状态相关联的事物,这个事物出现是伴随系统状态而出现的.</p><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><p>观测概率不依赖时间(马尔可夫过程)</p><ul><li>观测集合：$R={R_1,R_2,R_3,R_4,…,R_m}$</li><li>观测序列：$O=[o_1,o_2,o_3,o_4,…,o_l]$</li><li>状态集合：$S={S_1,S_2,S_3,S_4,..,S_n}$</li><li>状态序列：$Q=[q_1,q_2,q_3,q_4,…,q_l]$</li><li>观测概率：$P{o_i=R_k|q_t=S_j}=b_j(i)$，记$B=[b_j(i)]$,叫做发射概率矩阵</li><li>隐马尔可夫模型由一个五元组描述$(A,B,\pi,R,S)$，简记为$(A,B,\pi)$.初始分布属于状态集合.</li></ul><h4 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h4><ul><li><p><em>估计</em>:已知模型$(A,B,\pi)$,求观测序列出现的概率</p><p>  解决方法:前向后向算法</p></li><li><p><em>预测</em>:已知模型$(A,B,\pi)$和一个观测序列,求对应的不可观测的状态序列</p><p>  解决方法:Viterbi算法</p></li><li><p><em>学习</em>:已知一组观测序列,求模型$(A,B,\pi)$</p><p>  解决方法:Baum-Welch算法</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>不同的状态序列可以产生相同的观测序列(以不同的概率产生)</li><li>状态转移是随机的,系统在一个状态中产生的观测也随机的</li><li>可观测的马尔可夫模型是特殊的隐马尔可夫模型</li></ul><h3 id="吸收马尔可夫链"><a href="#吸收马尔可夫链" class="headerlink" title="吸收马尔可夫链"></a>吸收马尔可夫链</h3><p>在马尔可夫链中,称$P_{ij}=1$的状态是吸收状态.如果一个马尔可夫链中至少包含一个吸收状态,并且从每一个非吸收状态出发,都能到达某个吸收状态,那么这个马尔科夫链称为吸收马尔可夫链.</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img//BlogImage%E5%90%B8%E6%94%B6%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB.png"></p><p>对于吸收链P<em>的标准形式，矩阵I-Q具有可逆矩阵N，且$N=(I-Q)^{-1}=I+Q+Q^2+···$。N的元素nij是从非吸收状态$s_i$到另一非吸收状态$s_j$的平均转移次数。设c为元素全为1的列向量c=[1,1,···,1]’，则</em>t=Nc的第i个分量是从第i个非吸收态出发，到某个吸收状态的平均转移次数。从非吸收状态i出发终被吸收状态j吸收的概率由B=NR给出。</p><p>详细解释参考:<a href="https://www.cnblogs.com/guolei/p/3504931.html">https://www.cnblogs.com/guolei/p/3504931.html</a></p><h2 id="排队论"><a href="#排队论" class="headerlink" title="排队论"></a>排队论</h2><h3 id="符号表示"><a href="#符号表示" class="headerlink" title="符号表示"></a>符号表示</h3><table><thead><tr><th align="center">符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">X</td><td align="center">顾客到达流或者顾客到达间隔时间的分布</td></tr><tr><td align="center">Y</td><td align="center">服务时间的分布</td></tr><tr><td align="center">Z</td><td align="center">服务台数目</td></tr><tr><td align="center">A</td><td align="center">系统容量限制</td></tr><tr><td align="center">B</td><td align="center">顾客源数目</td></tr><tr><td align="center">C</td><td align="center">服务规则</td></tr></tbody></table><p>例如:银行服务系统为先到先服务,C即为FCFS.一般系统容量与顾客源数目均视为无限.指数分布具备无记忆性,即Markov性(M).在这个问题中服务台为1,问题就可以表述为M/M/1.</p><h3 id="运行指标"><a href="#运行指标" class="headerlink" title="运行指标"></a>运行指标</h3><ul><li>平均队长$L_s$:系统内顾客数的期望(可以理解为在处理的客户和还在等待中的客户)</li><li>平均排序长$L_q$:系统内等待服务的顾客数的期望</li><li>平均逗留时间$W_s$:顾客在系统内逗留时间的期望(可以理解为等待时间+处理时间)</li><li>平均等待时间$W_q$:顾客在排队中等待时间的期望</li></ul><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><ul><li>N(t)表示在时间区间[0,t)内到达的顾客数(t&gt;0)</li><li>$P_n(t_1,t_2)$表示在时间区间[$t_1,t_2$)内有n个顾客到达的概率.$P_n(t_1,t_2)=P{N(t_1)-N(t2)}=n$</li></ul><h3 id="输入过程"><a href="#输入过程" class="headerlink" title="输入过程"></a>输入过程</h3><ol><li><p>在不重叠时间区内顾客到达数相互独立;</p></li><li><p>充分小的$\Delta t$时间,在时间区间$[t,t+\Delta t)$内有一个顾客到达的概率与t无关,而大约和区间长$\Delta t$成正比,即:$P_1(t,t+\Delta t)=\lambda \Delta t+\omicron(\Delta t)$.用$\lambda &gt;0$表示单位时间内平均到达的顾客数 </p></li><li><p>对于充分小的,在时间区间内有两个或两个以上顾客到达的概率极小,可以忽略,即$\sum_{n=2}^\infty{P_n(t,t+\Delta t)=\omicron(\Delta t)}$</p><p> 符合以上的条件即服从泊松分布.</p><h3 id="服务过程"><a href="#服务过程" class="headerlink" title="服务过程"></a>服务过程</h3></li><li><p>充分小的$\Delta t$时间,在时间区间$[t,t+\Delta t)$内有一个顾客服务完的概率与t无关,而 大概与去区间长$\Delta t$成正比,即$P(T\le\Delta t)=\mu\Delta t+\omicron(\Delta t)$,T为服务时间,用$\mu&gt;0$表示单位时间内平均服务的顾客数.</p></li></ol><h2 id="最大熵"><a href="#最大熵" class="headerlink" title="最大熵"></a>最大熵</h2><p>克劳德 艾尔伍德 香农在1948年提出信息熵,用来描述信息的不确定程度.</p><p>最大熵原理其实就是指包含已知信息(约束条件),不做任何未知假设,把未知事件当成等概率事件处理.</p><p>一个系统的信息熵其实是系统中的每一个事件的概率乘上log概率,然后将所有事件相加取复数.</p><p>$H(P)=-\sum_XP(X)logP(X)$</p><table><thead><tr><th align="center">log底数的取值</th><th align="center">相应信息熵的单位取值</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">比特(bit)</td></tr><tr><td align="center">e</td><td align="center">奈特(nat)</td></tr><tr><td align="center">10</td><td align="center">哈托特(hat)</td></tr></tbody></table><p>因为概率总是在0-1之间,log之后小于0,加上负号才是正数.</p><h2 id="任务调度算法"><a href="#任务调度算法" class="headerlink" title="任务调度算法"></a>任务调度算法</h2><h3 id="Conservation-BackFilling算法"><a href="#Conservation-BackFilling算法" class="headerlink" title="Conservation BackFilling算法"></a>Conservation BackFilling算法</h3><p>在等待任务队列中选择任务进行回填，该任务必须保证不能使预约在其前面的任务延迟执行。步骤如下：</p><ol><li>寻找插入点<ol><li>对当前虚拟机的时空分布图进行扫描，如果发现可以满足该任务申请的处理器资源的第一个时间点作为该任务的插入点。</li><li>从插入点开始，扫描时空图，确保当前任务在插入点后的执行时间处理器都是可用的。</li><li>若条件2不满足，则返回1继续执行扫描，直到找到一个合适的插入点。</li></ol></li><li>更新虚拟机的时空图，及时反馈当前任务的调度情况，将当前任务提交到插入点执行。</li></ol><h3 id="Easy-BackFilling算法"><a href="#Easy-BackFilling算法" class="headerlink" title="Easy BackFilling算法"></a>Easy BackFilling算法</h3><p>该算法不需要考虑等待队列后面的任务对排在前面任务造成的延迟。回填时根据等待任务申请的处理器资源的大小尽可能提前将小任务回填至空闲资源中执行。在扫描虚拟机时空图前对所有的等待任务按照申请的处理器的资源大小升序排列，优先回填小任务。</p><h3 id="Improved-BackFilling算法"><a href="#Improved-BackFilling算法" class="headerlink" title="Improved BackFilling算法"></a>Improved BackFilling算法</h3><p>使用Balanced Spiral方法对等待任务进行分类，按照任务所申请的PE的大小进行升序排列，排序处理提交任务所申请的处理器核心数将任务排成V字形的趋势进行排序，然后对后续提交的任务进行回填作业。</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="显著性水平"><a href="#显著性水平" class="headerlink" title="显著性水平"></a>显著性水平</h3><p>假设检验是围绕对原假设内容的审定而展开的。如果原假设正确我们接受了（同时也就拒绝了备择假设），或原假设错误我们拒绝了（同时也就接受了备择假设），这表明我们作出了正确的决定。但是，由于假设检验是根据样本提供的信息进行推断的，也就有犯错误的可能。<em>有这样一种情况，原假设正确，而我们却把它当成错误的加以拒绝。犯这种错误的概率用α表示，统计上把α称为假设检验中的显著性水平  ，也就是决策中所面临的风险。</em></p><h3 id="小概率原理"><a href="#小概率原理" class="headerlink" title="小概率原理"></a>小概率原理</h3><p>小概率原理是指一个事件的发生概率很小，那么它在一次试验中是几乎不可能发生的，但在多次重复试验中是必然发生的。统计学上，把小概率事件在一次实验中看成是实际不可能发生的事件，一般认为等于或小于0.05或0.01的概率为小概率。</p><h3 id="离散程度指标"><a href="#离散程度指标" class="headerlink" title="离散程度指标"></a>离散程度指标</h3><p>离散指标的数据越小,说明数据的离散程度越小,反之亦然.</p><h4 id="全距-Range"><a href="#全距-Range" class="headerlink" title="全距(Range)"></a>全距(Range)</h4><p>又称极差,指数据中最大值与最小值的差.即$R=max-min$.是一个比较粗糙的测度指标。如果需要全面、精确地说明数据离散程度时，就不宜使用全距.</p><h4 id="平均差-Mean-Absolute-Deviation"><a href="#平均差-Mean-Absolute-Deviation" class="headerlink" title="平均差(Mean Absolute Deviation)"></a>平均差(Mean Absolute Deviation)</h4><p>各项数值与其均值绝对值之和的平均数,即$MAD=\frac{\sum|X-\overline{X}|}{n}$</p><p>虽然平均差简单易懂，但因为使用了绝对值，不便于进一步计算，所以在实际应用中不如其他离散指标应用那样广泛。但在预测领域，还常常使用该指标用于误差的说明。</p><h4 id="方差-Variance"><a href="#方差-Variance" class="headerlink" title="方差(Variance)"></a>方差(Variance)</h4><p>指全部数据离差平方的平均数,即$\sigma^2=\frac{\sum_{i=1}^n(X_i-\mu)^2}{n}$.</p><p>方差克服了平均差绝对值的问题，成为描述离散程度的一个重要指标。但是，在方差数值含义的解释上却遇到困难。因为方差的单位是数据单位的平方，夸大了数据的离散程度，使人不易直观理解数值意义.</p><h4 id="标准差-Standard-Deviation"><a href="#标准差-Standard-Deviation" class="headerlink" title="标准差(Standard Deviation)"></a>标准差(Standard Deviation)</h4><p>通常取方差的算数平方根作为描述离散程度的指标,即$\sigma=\sqrt{\frac{\sum_{i=1}^n(X_i-\mu)^2}{n}}$.</p><h4 id="样本的方差和标准差"><a href="#样本的方差和标准差" class="headerlink" title="样本的方差和标准差"></a>样本的方差和标准差</h4><p>分别用$S^2和S$表示.与总体的方差和标准差之间的唯一区别就是分数的分母是n-1,而不是n了.因为样本的方差和标准差在使用中，经常作为总体方差和标准差的估计量，如果直接除以样本容量n，得到的结果相对于总体方差和标准差来说是有偏的；除以自由度n-1可以得到总体方差和标准差的较好的估计量。</p><h4 id="离散系数-Coefficient-Of-Variation"><a href="#离散系数-Coefficient-Of-Variation" class="headerlink" title="离散系数(Coefficient Of Variation)"></a>离散系数(Coefficient Of Variation)</h4><p>为标准差与均值的比值.一般用V表示.总体的离散系数$V_\sigma=\frac{\sigma}{\mu}$.样本的离散系数$V_\sigma=\frac{S}{\overline X}$.</p><h4 id="异众比率"><a href="#异众比率" class="headerlink" title="异众比率"></a>异众比率</h4><p>异众比率指的是总体中非众数次数与总体全部次数之比，常常使用$V_r$来表示.假设有N个样本值,样本存在一个众数c,且众数的个数为n,则异众比率$V_r=\frac{N-n}{N}=1-\frac{n}{N}$.</p><h4 id="四分位距-interquartile-range-IQR"><a href="#四分位距-interquartile-range-IQR" class="headerlink" title="四分位距(interquartile range, IQR)"></a>四分位距(interquartile range, IQR)</h4><p>又称四分差,以确定第三四分位数(上分位数)和第一二分位数(下分位数)的区别.$IQR=Q_3-Q_1$.用来画出箱线图查看数据的异常点,数据的偏态和数据的大致形状.</p><h3 id="四分位数"><a href="#四分位数" class="headerlink" title="四分位数"></a>四分位数</h3><ul><li>第一四分位数$Q_1$，又称较小四分位数，等于该样本中所有数值由小到大排列后第25%的数字。</li><li>第二四分位数$Q_2$，又称中位数，等于该样本中所有数值由小到大排列后第50%的数字。</li><li>第三四分位数$Q_3$，又称较大四分位数，等于该样本中所有数值由小到大排列后第75%的数字。</li></ul><p>主要选择四分位的百分比值p，及样本总量n.有以下数学公式可以表示：</p><ul><li><p>情况1：如果L是一个整数，则取第L和第L+1的平均值.</p></li><li><p>情况2：如果L不是一个整数，则取向下取整.</p></li></ul><h4 id="四分位差-QD"><a href="#四分位差-QD" class="headerlink" title="四分位差(QD)"></a>四分位差(QD)</h4><p>$QD=\frac{Q_3-Q_1}{2}$.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>acwing学习</title>
      <link href="2020/04/15/acwing-xue-xi/"/>
      <url>2020/04/15/acwing-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前置Tip"><a href="#前置Tip" class="headerlink" title="前置Tip"></a>前置Tip</h2><h3 id="c-的io"><a href="#c-的io" class="headerlink" title="c++的io"></a>c++的io</h3><h4 id="cin和scanf速度"><a href="#cin和scanf速度" class="headerlink" title="cin和scanf速度"></a>cin和scanf速度</h4><p>cin、cout之所以效率低是因为先把要输出的东西存入缓冲区，再输出，导致效率降低，而<code>std::ios::sync_with_stdio(false);</code>可以来打消iostream的输入输出缓存，可以节省许多时间，使效率与scanf与printf相差无几。这样做了之后要注意不要同时混用cout和printf 之类。</p><p>应注意的是scanf与printf使用的头文件应是stdio.h而不是 iostream。</p><p>在默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。可以通过tie(0)（0表示NULL）来解除cin与cout的绑定，进一步加快执行效率。</p><h4 id="sync-with-stdio"><a href="#sync-with-stdio" class="headerlink" title="sync_with_stdio"></a>sync_with_stdio</h4><p>这个函数是一个“是否兼容stdio”的开关，C++为了兼容C，保证程序在使用了std::printf和std::cout的时候不发生混乱，将输出流绑到了一起。</p><h4 id="tie"><a href="#tie" class="headerlink" title="tie"></a>tie</h4><p>tie是将两个stream绑定的函数，空参数的话返回当前的输出流指针。如<code>std::cin.tie()</code>，默认返回cout，数据类型为std::ostream。</p><h3 id="java的io"><a href="#java的io" class="headerlink" title="java的io"></a>java的io</h3><p> java.util.Scanner类是一个简单的文本扫描类，它可以解析基本数据类型和字符串。它本质上是使用正则表达式去读取不同的数据类型。</p><p>Java.io.BufferedReader类为了能够高效的读取字符序列，从字符输入流和字符缓冲区读取文本。</p><p>Java的标准输入串是System.in。System.in提供的read方法是通过字节来读取数据的，不好处理。</p><p>java.util包中的Scanner读取数据是按空格符（这其中包括空格键，Tab键，Enter键）来分割数据的。只要遇到其中之一，Scanner的方法就会返回下一个输入（当然nextLine()方法的结束符为换行符，它    return 0;<br>}会返回换行符之前的数据）</p><p>BufferReader位于java.io包中，使用BufferReader就相对来说没有那么多方法来让你选择！读取数据比较固定，这样格式也就相对来说比较单一，只要记住就这一个读取数据的方法。<code>BufferedReader br = new BufferedReader (newInputStreamReader(System.in));</code>。这个BufferReader对象通过readLine()；方法来读取数据，readLine()是按Enter回车来读取一行数据的，只要在回车键之前的都会被readLine()方法返回。</p><p>readLine()方法返回的是字符串，因此要使用BufferReader输入一些字符之外的类型的数据，就要相对比较麻烦，需要通过一些XXXX.parseXxx()；来转换相应的数据类型，（例如：int类型的用Integer.parseInt（需要转换的字符串））。虽然麻烦一些，但通过BufferReader读入的效率要比Scanner高一倍，这个差距可想而知，而且读取的数据越多，效果就越明显。需要注意的是使用BufferReader对象的readLine()方法必须处理java.io.IOException异常。</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><ul><li>Scanner提供了一系列nextXxx()方法，当我们确定输入的数据类型时，使用Scanner更加方便。也正是因为这个BufferedReader相对于Scanner来说要快一点，因为Scanner对输入数据进行类解析，而BufferedReader只是简单地读取字符序列</li><li>BufferedReader是支持同步的，而Scanner不支持。如果我们处理多线程程序，BufferedReader应当使用。</li><li>Scanner和BufferedReader都设置了缓冲区，Scanner有很少的缓冲区(1KB字符缓冲)相对于BufferedReader(8KB字节缓冲)，但是这是绰绰有余的。</li><li>Scanner输入的一个问题：在Scanner类中如果我们在任何7个nextXXX()方法之后调用nextLine()方法，这nextLine()方法不能够从控制台读取任何内容，并且，这游标不会进入控制台，它将跳过这一步。nextXXX()方法包括nextInt()，nextFloat()， nextByte()，nextShort()，nextDouble()，nextLong()，next()。在BufferReader类中就没有那种问题。这种问题仅仅出现在Scanner类中，由于nextXXX()方法忽略换行符，但是nextLine()并不忽略它。如果我们在nextXXX()方法和nextLine()方法之间使用超过一个以上的nextLine()方法，这个问题将不会出现了；因为nextLine()把换行符消耗了。</li></ul><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>通俗地讲就是能保证排序前两个相等的数据其在序列中的先后位置顺序与排序后它们两个先后位置顺序相同。即：如，如果$A_i==A_j$，$A_i$原来在$A_j$位置前，排序后$A_i$仍然是在$A_j$位置前。</p><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本流程：</p><ol><li>确定分界点：通常随机选取q[l],q[(l+r)/2],q[r]</li><li><strong>调整区间，左边区间$\leq x$，右边区间$\geq x$。</strong></li><li>递归处理左右区间。</li></ol><p>时间复杂度：O(nlogn)</p><p><strong>随机取点时，不推荐使用边界点。</strong>当给定的序列有序时，如果每次选择区间左端点进行划分，每次会将区间[L, R]划分成[L, L]和[L + 1, R]，那么相当于每次递归右半部分的区间长度只会减少1，所以就需要递归n-1次了，时间复杂度会达到 $n^2$。但每次选择区间中点或者随机值时，划分的两个子区间长度会比较均匀，那么期望只会递归$logn$层。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断是否有元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为这里为了递归，在每次都直接将数组的指针进行加一，所以这里在声明的时候将范围左右各扩展一个</span>    <span class="token comment" spellcheck="true">//这里x也不能取到n[r]，理由和下面的类似</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断是否有元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为这里为了递归，在每次都直接将数组的指针进行加一，所以这里在声明的时候将范围左右各扩展一个</span>    <span class="token comment" spellcheck="true">//这里初值位置修改成这样是因为当下面递归使用i时，防止出现右边界死循环，用j的时候不会发生这个问题</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> std<span class="token operator">::</span><span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>要是觉得快排是不稳定的算法，可以将所有元素都变成二元组。这样每个元素都是不一样的了，就不涉及稳不稳定的问题了。</del>归并排序是稳定的。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>基本流程：</p><ol><li>确定分界点：mid=(l+r)/2</li><li>递归排序左右区间</li><li><strong>归并，合二为一</strong></li></ol><p>时间复杂度：O(nlogn)，且需要一个额外的辅助数组空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里也可以写成l+r>>1</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归处理</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里的k记录tmp数组中的位置</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果还有没有处理的元素，进行处理</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将tmp数组中的数组转移到原本的数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h4><p>最直接的方法的时间复杂度是$O(n^2)$，可以使用归并排序计算逆序对数量。</p><p>$逆序对数量=左区间的逆序对数量+右区间的逆序对数量+合并部分的逆序对数量$</p><p>若i是左区间的遍历索引，j为右区间的遍历索引。当数组[i]大于[j]时，此时逆序对数量为$mid-i+1$。进行累加即可。</p><p>对于测试数量级较大时，逆序对数量用long long 比较好。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            x<span class="token operator">+</span><span class="token operator">=</span>mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//for(int i=0;i &lt; n;i++) printf("%d ",q[i]);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h3><p><strong>二分的本质不是单调性，有单调性一定可以二分，但是没单调性也不一定不能使用二分。</strong></p><h4 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h4><p>将一个域划分为两个相反区间。</p><p>整数二分中没有交点。</p><ul><li><p>区间[l,r]被划分为[l,mid]和[mid+1,r]</p></li><li><p>$mid={\frac{l+r+1}{2}}$</p><p>  $if (check(mid)) \begin{cases} true&amp; \text {[mid,r]=&gt;l=mid} \ false&amp; \text {[l,mid+1]=&gt;r=mid-1} \end{cases} $</p></li><li><p>区间[l,r]被划分为[l,mid-1]和[mid,r]</p></li><li><p>$mid=\frac{l+r}{2}$</p><p>  $if(check(mid))\begin{cases}true \quad[l,mid]=&gt;r=mid \ false \quad [mid+1,r]=&gt;l=mid+1\end{cases}$</p></li></ul><p>**这里的mid是否加一,取决于当为true时是l=mid还是r=mid.如果是l=mid,默认的除法是下取整,在l和r之间只相差一个的时候导致一直是l=l,进而导致死循环.**写程序的时候先写成<code>l+r&gt;&gt;1</code>，之后再根据l和r，选择是否+1。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt; iostream ></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1 -1"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h4><p>浮点数二分不需要处理边界，所以相对简单。</p><p>下面是一个开方的函数,就是利用了浮点数的二分.如果精度要求是四位小数le-6,五位精度le-7类推.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kaifang</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> <span class="token number">1e-8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">*</span> mid <span class="token operator">>=</span> x<span class="token punctuation">)</span>r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个开三次方的例子，这里需要注意的是结果不一定是正数，所以需要放大搜索边界。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> l<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">,</span>r<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>x<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">>=</span><span class="token number">1e-8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">*</span>mid<span class="token operator">*</span>mid<span class="token operator">></span>x<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.6lf"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大整数计算"><a href="#大整数计算" class="headerlink" title="大整数计算"></a>大整数计算</h3><h4 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//t为当前操作位</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">+</span><span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">+</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> C<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法的第零位存放的是数字的个位。</p><h4 id="两数相减"><a href="#两数相减" class="headerlink" title="两数相减"></a>两数相减</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//当结果的位数>1时，去掉结果高位的无用0</span><span class="token keyword">void</span> <span class="token function">trimZero</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//C=A-B</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t<span class="token operator">-</span><span class="token operator">=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">trimZero</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//是否A>=b</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读入的数字存放进vector</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        C<span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C<span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法需要注意要去除多余的0。</p><h4 id="两数相乘"><a href="#两数相乘" class="headerlink" title="两数相乘"></a>两数相乘</h4><pre class="line-numbers language-c++"><code class="language-c++">//A是大正整数，B是相对小的正整数(直接定义为int型)vector<int> mul(vector<int> &A,int B){        vector<int> C;        int t=0;        for (int i = 0; i < A.size()||t; ++i) {            t+=A[i]*B;            C.push_back(t%10);            t/=10;        }        while(C.back()==0&&C.size()>1) C.pop_back();        return C;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="两数相除"><a href="#两数相除" class="headerlink" title="两数相除"></a>两数相除</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment" spellcheck="true">//A是被除数，B是除数，C是商，r是余数。注意这里的r需要被调用，记得加引用</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>A<span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> C<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> r <span class="token operator">%</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>C<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前缀与差分"><a href="#前缀与差分" class="headerlink" title="前缀与差分"></a>前缀与差分</h3><h5 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h5><p><strong>a[]和s[]数组的第0位都放0，之后进行存储运算从第1位开始。这样在进行计算s[]的时候可以直接用-1</strong></p><p>前缀和与差分是逆运算。</p><p>差分与前缀和可以使得一个数组区间加减一个数的时间复杂度从$O(n)$降低至$O(1)$。原本执行流程是遍历所有情况后</p><h6 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h6><p>int a[N],s[N]，其中a[i]表示真实数组中第i个元素的值，s[N]表示前i个元素的和。前缀和公式为$s=s[r]-s[l-1]$。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h6><p>结构原理同上，公式为$s=s[x_2][y_2]-s[x_1-1][y_2]-s[x_2][y_1-1]+s[x_1-1][y_1-1]$和$s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j]$。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>x1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><p><strong>一阶差分</strong></p><p>给定a[]数组，求一段区间内元素加上某一数值的和。</p><p>思路：假定前缀和数组a[]每个元素都是从0开始，差分数组b[]相应的也都是0。然后获取a[]每个元素的过程视为a[i]=(i,i)区间内加上$a_i$的值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    b<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二阶差分</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><p>双指针算法的核心是将朴素算法中的两层及其以上的嵌套循环优化到O(n)。</p><p>双指针的模板的大都类似这样：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>i<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每道题目的具体逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>最长连续不重复子序列</code>中朴素的算法如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种算法的时间复杂度在$O(n^2)$。</p><p>采用双指针算法时间复杂度能降低至$O(n+n)=O(2n)=O(n)$。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token operator">&amp;&amp;</span><span class="token function">check</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里i是终点，j是往右最远的距离就是答案。本题中j的移动是单调的。</p><p>下面是双指针实现的最长连续不重复子序列：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文总结</title>
      <link href="2020/02/24/lun-wen-zong-jie/"/>
      <url>2020/02/24/lun-wen-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇博客作为自身阅读论文的一个备忘。记录自己看过的论文中的所见、所思、所感。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h3><p>解释：QoS（Quality of Service，服务质量）指一个网络能够利用各种基础技术，为指定的网络通信提供更好的服务能力，是网络的一种<strong>安全机制</strong>， 是用来解决网络延迟和阻塞等问题的一种技术。QoS的保证对于容量有限的网络来说是十分重要的，特别是对于流多媒体应用，例如VoIP和IPTV等，因为这些应用常常需要固定的传输率，对延时也比较敏感。</p><p>定义：当网络发生拥塞的时候，所有的数据流都有可能被丢弃；为满足用户对不同应用不同服务质量的要求，就需要网络能根据用户的要求分配和调度资源，对不同的数据流提供不同的服务质量：对实时性强且重要的数据报文优先处理；对于实时性不强的普通数据报文，提供较低的处理优先级，网络拥塞时甚至丢弃。QoS应运而生。支持QoS功能的设备，能够提供传输品质服务；针对某种类别的数据流，可以为它赋予某个级别的传输优先级，来标识它的相对重要性，并使用设备所提供的各种优先级转发策略、拥塞避免等机制为这些数据流提供特殊的传输服务。配置了QoS的网络环境，增加了网络性能的可预知性，并能够有效地分配网络带宽，更加合理地利用网络资源。</p><h3 id="Best-Effort-service"><a href="#Best-Effort-service" class="headerlink" title="Best-Effort service"></a>Best-Effort service</h3><p>解释: 标准的因特网服务模式。在网络接口发生拥塞时，不顾及用户或应用，马上丢弃数据包，直到业务量有所减少为止。对Best-Effort服务模型，网络尽最大的可能性来发送报文。但对延时、可靠性等性能不提供任何保证。</p><p>Best-Effort服务模型是网络的缺省服务模型，通过<a href="https://baike.baidu.com/item/FIFO">FIFO</a>（first in first out 先入先出）<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97">队列</a>来实现。它适用于绝大多数网络应用，如FTP、<a href="https://baike.baidu.com/item/E-Mail">E-Mail</a>等。</p><h3 id="Integrated-service"><a href="#Integrated-service" class="headerlink" title="Integrated service"></a>Integrated service</h3><p>综合服务模型，简称Int-Serv</p><p>Int-Serv是一个综合服务模型，它可以满足多种QoS需求。该模型使用资源预留协议（RSVP），RSVP运行在从源端到目的端的每个设备上，可以监视每个流，以防止其消耗资源过多。这种体系能够明确区分并保证每一个业务流的服务质量，为网络提供最细粒度化的服务质量区分。但是，Inter-Serv模型对设备的要求很高，当网络中的数据流数量很大时，设备的存储和处理能力会遇到很大的压力。Inter-Serv模型可扩展性很差，难以在Internet核心网络实施。</p><h3 id="Differentiated-service"><a href="#Differentiated-service" class="headerlink" title="Differentiated service"></a>Differentiated service</h3><p>Diff-Serv服务模型是一个多服务模型，它可以满足不同的QoS需求。与Int-Serv不同，它不需要通知网络为每个业务预留资源。区分服务实现简单，扩展性较好。</p><h3 id="P、NP、NP-hard、NP-complete"><a href="#P、NP、NP-hard、NP-complete" class="headerlink" title="P、NP、NP-hard、NP-complete"></a>P、NP、NP-hard、NP-complete</h3><p>最简单的解释：<br>P：算起来很快的问题<br>NP：算起来不一定快，但对于任何答案我们都可以快速的验证这个答案对不对<br>NP-hard：比所有的NP问题都难的问题<br>NP-complete：满足两点：</p><ol><li>是NP hard的问题</li><li>是NP问题</li></ol><p>P就是能在多项式时间内解决的问题，NP就是能在多项式时间验证答案正确与否的问题。</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>模拟退火是一种通用概率算法，常用来在一定时间内寻找在一个很大搜寻空间中的近似最优解。</p><p>模拟退火来自冶金学的专有名词退火。退火是将材料加热后再经特定速率冷却，目的是增大晶粒的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使内能有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。</p><p>模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。</p><p>可以证明，模拟退火算法所得解依概率收敛到全局最优解。</p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>遗传算法（Genetic Algorithm）是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。遗传算法是从代表问题可能潜在的解集的一个种群（population）开始的，而一个种群则由经过基因（gene）编码的一定数目的个体(individual)组成。每个个体实际上是染色体(chromosome)带有特征的实体。染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现（即基因型）是某种基因组合，它决定了个体的形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如二进制编码，初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代（generation）演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度（fitness）大小选择（selection）个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉（crossover）和变异（mutation），产生出代表新的解集的种群。这个过程将导致种群像自然进化一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过解码（decoding），可以作为问题近似最优解。</p><p>过程如下：</p><ol><li>初始化：设置进化代数计数器t=0，设置最大进化代数T，随机生成M个个体作为初始群体P(0)。</li><li>个体评价：计算群体P(t)中各个个体的适应度。</li><li>选择运算：将选择算子作用于群体。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。选择操作是建立在群体中个体的适应度评估基础上的。</li><li>交叉运算：将交叉算子作用于群体。遗传算法中起核心作用的就是交叉算子。</li><li>变异运算：将变异算子作用于群体。即是对群体中的个体串的某些基因座上的基因值作变动。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。</li><li>终止条件判断：若t=T,则以进化过程中所得到的具有最大适应度个体作为最优解输出，终止计算。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img//BlogImage%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93_%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95"></p><p>基因型(genotype)：性状染色体的内部表现。</p><p>表现型(phenotype)：染色体决定的性状的外部表现，或者说，根据基因型形成的个体的外部表现。</p><p>进化(evolution)：种群逐渐适应生存环境，品质不断得到改良。生物的进化是以种群的形式进行的。</p><p>适应度(fitness)：度量某个物种对于生存环境的适应程度。</p><p>选择(selection)：以一定的概率从种群中选择若干个个体。一般，选择过程是一种基于适应度的优胜劣汰的过程。</p><p>复制(reproduction)：细胞分裂时，遗传物质DNA通过复制而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。</p><p>交叉(crossover)：两个染色体的某一相同位置处DNA被切断，前后两串分别交叉组合形成两个新的染色体。也称基因重组或杂交。</p><p>变异(mutation)：复制时可能（很小的概率）产生某些复制差错，变异产生新的染色体，表现出新的性状。</p><p>w编码(coding)：DNA中遗传信息在一个长链上按一定的模式排列。遗传编码可看作从表现型到基因型的映射。</p><p>解码(decoding)：基因型到表现型的映射。</p><p>个体（individual）：指染色体带有特征的实体。</p><p>种群（population）：个体的集合，该集合内个体数称为种群的大小。        </p><h2 id="Resource-allocation-algorithms-for-virtualized-service-hosting-platforms"><a href="#Resource-allocation-algorithms-for-virtualized-service-hosting-platforms" class="headerlink" title="Resource allocation algorithms for virtualized service hosting platforms"></a>Resource allocation algorithms for virtualized service hosting platforms</h2><p>author:Mark Stillwell a , David Schanzenbacha , Frédéric Vivienb , Henri Casanova a,∗</p><p>这片论文研究的是在具有多种资源类型的服务器在静态工作量的情况下进行资源分配方案。支持尽力而为和QoS混合场景，通过精确定义的目标函数来提升性能、公平性和集群利用率。</p><h3 id="论文的创新点"><a href="#论文的创新点" class="headerlink" title="论文的创新点"></a>论文的创新点</h3><ol><li>定义资源分配问题为静态服务负载，每个服务完全运行在一台VM实例上。这个定义考虑到了多个资源维度。</li><li>建立了问题的复杂度，并给出混合整数线性函数公式，到达最优的界限。</li><li>提出几种算法解决问题。</li><li>模拟评估算法。</li><li>讨论算法在服务运行在多台服务器上的情况。</li></ol><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>计算机群为同构服务器配有高速网络交换。每个服务包含一个或多个VM实例。每台服务器提供CPU、RAM、I/O、disk。</p><p>在第三章，假定每个服务只运行在一台VM实例上。在第六章讨论多VM的服务。</p><p>每个服务资源需求量固定。资源分为两类：<code>regid</code>(load-independent)和<code>fluid</code>(load-dependent)</p><table><thead><tr><th>rigid</th><th>fluid</th></tr></thead><tbody><tr><td>对资源的需求量提供的不能少，多也无法获益</td><td>对资源的需求量提供的少也能运行，多无法获益</td></tr></tbody></table><p>$yield=\frac{分配的资源量}{所需分配的最大资源量}$取值范围为[0,1]。当有QoS要求时，yield设置一个最低阈值。</p><p>假定所有资源的利用率与fluid需求之间呈现线性相关性。</p><p>一些没有QoS要求且采用的是尽力而为模式的任务，$constrained\quad fluid\quad need=一个服务的fluid\quad need×QoS要求$。</p><p>假定所有rigid资源需求都与fluid资源需求无关且彼此独立。</p><p>资源份额与响应时间或吞吐量之间的模型在[11],[33],[8],[45],[55],[64],[54]中有定义。这些都只能处理有QoS需求的服务。本论文方法可以处理具有QoS需求的服务和不具有QoS的尽力而为服务。</p><p>$scaled\quad yield=\frac{yield-minimum\quad yield}{1-minimum\quad yield}$</p><p>对于尽力而为服务，yield=scaled yield。yield最小为1时，sclaes yield为1。sclaes yield为负数则资源分配失败。</p><p>yield和传统的strtch相比，stretch适用于有时限的任务，而不是连续服务。stretch的定义是作业的流动时间，即作业提交和完成之间的时间，除以该作业在系统中所应达到的流动时间。 最小化最大拉伸被认为是优化平均流动时间的一种方法，同时确保作业不会经历较高的相对流动时间。 因此，这是一种同时优化性能和公平性的方法，而仅使平均拉伸量最小化则容易出现饥饿。</p><p>论文使用的是最大化最小yield。</p><p>虽然定期迁移可以提高最低收益[56]，但是会占用网络资源，具有开销，在本论文不进行考虑。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BA%E6%96%87%E6%80%BB%E7%BB%93_%E7%BA%A6%E6%9D%9F%E5%BD%A2%E5%BC%8F%E5%8C%96.png"></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>将服务进行排序。因为在装箱问题中，大多数情况下递增序列效果差于递减序列。所以排序采用递减序列。（S1）随机； （S2）通过递减最大fluid需求进行排序； （S3）通过递减fluid需求的总和； （S4）通过递减最大rigid需求和受约束的fluid需求;（S5）通过递减rigid需求和受约束的fluid需求的总和;（S6）通过递减最大资源需求（无论为fluid还是rigid）;（S7）通过递减rigid and fluid 需求。</p><p>从七个指标考虑服务器的选择。</p><h4 id="遗传算法-1"><a href="#遗传算法-1" class="headerlink" title="遗传算法"></a>遗传算法</h4><p>每个染色体为一个一维数组，索引为服务编号，对应值为服务器编号。</p><h2 id="Energy-aware-service-allocation"><a href="#Energy-aware-service-allocation" class="headerlink" title="Energy-aware service allocation"></a>Energy-aware service allocation</h2><p>author:Damien Borgettoa,∗ , Henri Casanova b , Georges Da Costa a , Jean-Marc Piersona</p><h2 id="CSL‑driven-and-energy‑efficient-resource-scheduling-in-cloud-data-center"><a href="#CSL‑driven-and-energy‑efficient-resource-scheduling-in-cloud-data-center" class="headerlink" title="CSL‑driven and energy‑efficient resource scheduling in cloud data center"></a>CSL‑driven and energy‑efficient resource scheduling in cloud data center</h2><p>DOI: 10.1007/s11227-019-03036-9</p><p>CSL: Customer Satisfaction Level </p><p>MSVR:metric based on SLA violation rate</p><p>MW:metric based on workload</p><p>MRT:metric based on response time</p><p>$CSL\begin{cases}imperceptible-&gt; energy;saving;strategy;达到最小能源消耗\tolerable-&gt;trade-off ;strategy;最大化每单位能源的CSL\unusable-&gt;CSL-driven; strategy;达到最大CSL\end{cases}$</p><h3 id="本文创新点"><a href="#本文创新点" class="headerlink" title="本文创新点"></a>本文创新点</h3><ul><li>设计了CSL-driven 高效调度框架以优化云数据中心的能源效率。同时考虑了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>V2ray</title>
      <link href="2020/02/15/v2ray/"/>
      <url>2020/02/15/v2ray/</url>
      
        <content type="html"><![CDATA[<h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><p>多入口多出口: 一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作。<br>可定制化路由: 入站流量可按配置由不同的出口发出。轻松实现按区域或按域名分流，以达到最优的网络性能。<br>多协议支持: V2Ray 可同时开启多个协议支持，包括 Socks、HTTP、Shadowsocks、VMess 等。每个协议可单独设置传输载体，比如 TCP、mKCP、WebSocket 等。<br>隐蔽性: V2Ray 的节点可以伪装成正常的网站（HTTPS），将其流量与正常的网页流量混淆，以避开第三方干扰。<br>反向代理: 通用的反向代理支持，可实现内网穿透功能。<br>多平台支持: 原生支持所有常见平台，如 Windows、Mac OS、Linux，并已有第三方支持移动平台。</p><h3 id="Linux终端环境"><a href="#Linux终端环境" class="headerlink" title="Linux终端环境"></a>Linux终端环境</h3><ol><li><p>获取安装脚本</p><pre class="line-numbers language-shell"><code class="language-shell">curl -L-s https://install.direct/go.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>由于该脚本默认执行时，需要访问国外的服务器下载<code>v2ray-linux-64.zip</code>文件，可以提前下载下来，地址<code>https://github.com/v2ray/v2ray-core/releases/download/${NEW_VER}/v2ray-linux-${VDIS}.zip</code>。</p></li><li><p>下载完之后，将<code>go.sh</code>和<code>v2ray-linux-64.zip</code>放在同一个文件夹中。</p></li><li><p>使用命令<code>sudo bash go.sh --local ./v2ray-linux-64.zip</code>安装。</p></li><li><p>配置文件在<code>/etc/v2ray/config.json</code>中。可以先用其他平台生成的<code>config.json</code>文件复制覆盖这个文件。</p></li><li><p>使用命令<code>sudo service v2ray restart</code>，重启服务。</p></li><li><p>使用命令<code>export http_proxy="socks5://127.0.0.1:1088"</code>，将终端中的流量都走代理。</p></li><li><p>使用命令<code>curl www.cip.cc </code>查看当前ip所在位置。</p></li><li><p>可以将以上命令写入<code>.zshrc</code>文件中</p><pre class="line-numbers language-shell"><code class="language-shell">alias setproxy='export http_proxy="socks5://127.0.0.1:1088"'alias ipaddr='curl www.cip.cc'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="Linux桌面环境"><a href="#Linux桌面环境" class="headerlink" title="Linux桌面环境"></a>Linux桌面环境</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S qv2ray v2ray v2ray-geoip v2ray-domain-list-community<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用qv2ray即可。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>去<code>https://github.com/2dust/v2rayN/releases</code>上下载最新的v2rayN程序。</p><h3 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h3><p>去美区APP Store下载Shadowrocket软件。</p><h3 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h3><p>树莓派3B的架构是armv7，无法正常使用x86架构下打包的appiamge软件。解决方案是使用<br><a href="https://github.com/mzz2017/V2RayA%E3%80%82">https://github.com/mzz2017/V2RayA。</a> 这个项目的GUI是由网页提供的。语言是GO。直接在它的arm二进制包。运行。可以写入<code>/etc/rc.local</code>中作为自启服务。作为网关还行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> V2ray </tag>
            
            <tag> ios </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powerlevel10k设置及客制化</title>
      <link href="2020/02/15/powerlevel10k-she-zhi-ji-ke-zhi-hua/"/>
      <url>2020/02/15/powerlevel10k-she-zhi-ji-ke-zhi-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Powerlevel10k"><a href="#Powerlevel10k" class="headerlink" title="Powerlevel10k"></a>Powerlevel10k</h2><p><strong>Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience.</strong></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用操作系统软件管理器安装Zsh。</p><h3 id="安装Oh-My-Zsh主题"><a href="#安装Oh-My-Zsh主题" class="headerlink" title="安装Oh-My-Zsh主题"></a>安装Oh-My-Zsh主题</h3><pre class="line-numbers language-shell"><code class="language-shell"> sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wget不能走sock代理，推荐使用curl下载。</p><h3 id="基于Oh-My-Zsh的安装"><a href="#基于Oh-My-Zsh的安装" class="headerlink" title="基于Oh-My-Zsh的安装"></a>基于Oh-My-Zsh的安装</h3><pre class="line-numbers language-shell"><code class="language-shell">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>在<code>.zshrc</code>文件中设置主题</p><pre class="line-numbers language-shell"><code class="language-shell">ZSH_THEME="powerlevel10k/powerlevel10k"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>使用<code>p10k configure</code>配置Powerlevel10k。会自动根据选项生成<code>.p10k.zsh</code>文件。根据喜好设置配置文件。</p><h3 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h3><pre class="line-numbers language-shell"><code class="language-shell"> # The list of segments shown on the left. Fill it with the most important segments.  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    context    os_icon                 # os identifier    Greeting    public_ip    disk_usage    dir                     # current directory    vcs                     # git status    # =========================[ Line #2 ]=========================    newline                 # \n    prompt_char             # prompt symbol  )  # The list of segments shown on the right. Fill it with less important segments.  # Right prompt on the last prompt line (where you are typing your commands) gets  # automatically hidden when the input line reaches it. Right prompt above the  # last prompt line gets hidden if it would overlap with left prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    status                  # exit code of the last command    command_execution_time  # duration of the last command    background_jobs         # presence of background jobs    #direnv                  # direnv status (https://direnv.net/)    #asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)    #virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)    #anaconda                # conda environment (https://conda.io/)    #pyenv                   # python environment (https://github.com/pyenv/pyenv)    #goenv                   # go environment (https://github.com/syndbg/goenv)    #nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)    nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)    nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)    # node_version          # node.js version    # go_version            # go version (https://golang.org)    # rust_version          # rustc version (https://www.rust-lang.org)    # dotnet_version        # .NET version (https://dotnet.microsoft.com)    # php_version           # php version (https://www.php.net/)    # laravel_version       # laravel php framework version (https://laravel.com/)    #rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)    #rvm                     # ruby version from rvm (https://rvm.io)    #fvm                     # flutter version management (https://github.com/leoafarias/fvm)    #luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)    #jenv                    # java version from jenv (https://github.com/jenv/jenv)    #plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)    #phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)    kubecontext             # current kubernetes context (https://kubernetes.io/)    #terraform               # terraform workspace (https://www.terraform.io)    #aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.h    #aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)   # azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)    #gcloud                  # google cloud cli account and project (https://cloud.google.com/)    #google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/productio    #context                 # user@hostname    #nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)    ranger                  # ranger shell (https://github.com/ranger/ranger)    #nnn                     # nnn shell (https://github.com/jarun/nnn)    vim_shell               # vim shell indicator (:sh)    #midnight_commander      # midnight commander shell (https://midnight-commander.org/)    #nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)    vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)    # vpn_ip                # virtual private network indicator     load                  # CPU load     disk_usage            # disk usage     ram                   # free RAM     swap                  # used swap    #todo                    # todo items (https://github.com/todotxt/todo.txt-cli)    timewarrior             # timewarrior tracking status (https://timewarrior.net/)    time                    # current time    #my_weather    # =========================[ Line #2 ]=========================    newline                 # \n     ip                    # ip address and bandwidth usage for a specified network interface    # public_ip             # public IP address    # proxy                 # system-wide http/https/ftp proxy     battery               # internal battery    # wifi                  # wifi speed    # example               # example user-defined segment (see prompt_example function below)  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下<code>context</code>组件不显示，需要修改才能显示：</p><pre class="line-numbers language-shell"><code class="language-shell">##################################[ context: user@hostname ]##################################  # Context color when running with privileges.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178  # Context color in SSH without privileges.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND=180  # Default context color (no privileges, no SSH).  typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180  # Context format when running with privileges: bold user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'  # Context format when in SSH without privileges: user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_TEMPLATE='%n@%m'  # Default context format (no privileges, no SSH): user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'  # Don't show context unless running with privileges or in SSH.  # Tip: Remove the next line to always show context.  # 在这里开启了context一直显示的选项  #typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%246Fwith '<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况的IP组件无法显示，需要配置相应的网卡信息：</p><pre class="line-numbers language-shell"><code class="language-shell"> # Show information for the first network interface whose name matches this regular expression.  # Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.  typeset -g POWERLEVEL9K_IP_INTERFACE='wlp2s0*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  自己扩展功能的方式就是以shell中函数的方式定义。函数名需要以<code>prompt_my_</code>作为前缀。在前面的设置中直接写之后的函数就行。显示必须依托<code>p10k segment</code>才能显示在主题中。可以使用<code>p10k help segment</code>获取使用方法。</p><p>修改显示的系统图标：</p><pre class="line-numbers language-shell"><code class="language-shell">  #################################[ os_icon: os identifier ]##################################  # OS identifier color.  typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255  # Make the icon bold.  #typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT}'  # 修改显示的系统图标为Arch  typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION=%B$'\uF303 '     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>'\uF303'</code>为Arch图标，<code>'\uF17c'</code>为Linux图标。后面如果显示字符位不足的时候在编码后添加适量空格，<code>%B</code>表示加粗。</p><h3 id="自定义的问候语程序"><a href="#自定义的问候语程序" class="headerlink" title="自定义的问候语程序"></a>自定义的问候语程序</h3><p>实现思路：通过<code>date</code>程序获取当前小时数。通过小时数判断当前是哪一个时间段。</p><pre class="line-numbers language-shell"><code class="language-shell">function prompt_Greeting() {    local hour=`date "+%H"`    local name=",king"    if [ $hour -lt 12 -a $hour -gt 4  ]    then         local str="Morning"    elif [ $hour -eq 12 ]    then        local str="Noon"    elif [ $hour -gt 12 -a $hour -lt 19 ]                                                                                then        local str="Afternoon"    else        local str="Evening"    fi    p10k segment -f 208 -i '㋡' -t $str$name   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义的显示当前天气的程序"><a href="#自定义的显示当前天气的程序" class="headerlink" title="自定义的显示当前天气的程序"></a>自定义的显示当前天气的程序</h3><p>实现思路：先查询电脑是否连接网络。若连接，去<code>/tmp</code>路径中查找是否有一年中相同天数相同小时的文件。这个路径下的文件在关机后自动删除，所以在这不考虑重复的可能。每小时去获取一次当前天气。避免频繁获取造成的终端响应缓慢。获取后写入文件中，同一小时内，天气信息从文件中获取。</p><pre class="line-numbers language-shell"><code class="language-shell">function prompt_my_weather() {    ping -c1 114.114.114.114 &> /dev/null    if [ $? -eq 0 ]    then        local weatherDay=`date "+%j"`        local weatherHour=`date "+%H"`        local weatherPath="/tmp/"        local weatherName="my_weather"        local weatherFileType=".txt"        local weatherFile=$weatherPath$weatherName$weatherDay$weatherHour$weatherFileType        if [ ! -e $weatherFile -o ! -s $weatherFile ]        then            touch "$weatherFile"            local weather=`curl -s "wttr.in/?format=3 "`            echo $weather > $weatherFile        else            local weather=$(cat $weatherFile)        fi    else        local weather="无网络"    fi    p10k segment -f '#ffb44b' -t $weather }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2020/01/13/she-ji-mo-shi/"/>
      <url>2020/01/13/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h2><ul><li><p>Java接口不具有实现代码，继承接口无法达到代码复用。这意味着，无论何时你需要修改某个行为，你必须得往下追踪并在每一个定义此行为的类中修改它，一不小心，可能造成新的错误。</p></li><li><p>良好的OO设计必须具有可复用、可扩充、可维护三个特性。</p></li><li><p>模式被认为是历经验证的OO设计经验。</p></li><li><p>代码应该免于改变但是能够拓展。</p></li></ul><h2 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern)"></a>策略模式(Strategy Pattern)</h2><ul><li><strong>设计原则一：找出应用中可能需要变化之处，把它们独立出去，不要和那些不需要变化的代码混在一起。</strong></li><li><strong>设计原则二：针对接口编程，而不是针对实现编程。</strong></li><li>需要变化的模块将被放在分开的类中，此类专门提供某行为接口的实现，则相应的类不再需要知道行为的实现细节。</li><li>以前的做法是：行为来自超类的具体实现，或是继承某个接口并由子类自行实现而来。这两种做法都依赖于“实现”。被实现绑得死死的，没办法更改行为（除非写更多代码）。现行做法是特定的具体行为编写在相应的接口的具体实现类中。</li><li>针对接口编程指的是针对超类型(supertype)编程。优势是利用多态进而执行时会根据实际状态执行到真正的行为。更明确的说就是“变量的声明类型应该是超类型，通常是一个抽象类或者是一个接口。如此。只要是具体实现此超类型的类所产生的对象，都可以指定给这个变量。这意味者，声明类时不会理会以后执行时的真正对象类型。”</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_1.png"></p><ul><li><strong>设计原则三：多用组合，少用继承。</strong></li><li>使用组合建立系统具有很大的弹性，不仅可以将算法族封装成类，更可以在运行时动态的改变行为，只要组合的行为对象符合正确的接口标准。</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的用户。</p><h3 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><ol><li>首先在超类中将会变化的方法变成接口类型的变量，而不是具体实现类类型。</li><li>然后在超类的相应行为的方法中调用接口类型的实现方法名。</li><li>子类的构造函数中给接口类型的变量new一个具体实现类的实体，并通过这个实体定义一个方法不实现，只做调用相应实现类的方法。</li><li>生成超类的对接口类型变量成员的setter。从而支持在运行时对变化方法的修改。</li></ol><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>针对具体实现编程导致以后对修改时需要大量改动。</li><li>尽量将类似的接口进行封装统一。</li><li>主题是真正拥有数据的人，观察者是主题的依赖者，在数据变化时更新，这样比起让许多对象控制同一份数据来，可以得到更干净的OO设计。</li><li>松耦合：当两个对象之间松耦合，它们依然可以交互，但是不太清楚彼此的细节。</li><li>观察者模式提供了一种对象设计，让主题和观察者之间松耦合。松耦合设计更有弹性，更能应对变化。</li><li><strong>设计原则四：为交互对象之间的松耦合设计而努力。</strong></li><li>有多个观察者时，不可以依赖特定的通知次序。</li></ul><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_2.png"></p><ul><li>当新类型的观察者出现时，主题的代码不需要修改。假如有新的具体类需要当观察者，我们不需要为了兼容新类型而修改主题的代码，所有要做的就是在新的类里实现此观察者接口，然后注册为新的观察者即可。</li><li>改变主题或观察者其中一方，并不会影响另一方。因为松耦合，只要遵循它们之间的接口，我们就可以自由地改变他们。</li><li><strong>设计原则四：为了交互对象之间的松耦合设计而努力。</strong></li><li>subject在观察者具体类中保留，进行注册和删除。</li><li>JAVA API内置了观察者模式。java.util包(package)内包含最基本的Observer接口与Observable类。</li></ul><h3 id="具体实现方法-1"><a href="#具体实现方法-1" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><ol><li>创建一个subject接口，所有内容的提供者都要实现这个接口。该接口中需要定义三个函数：<code>registerObserver(Object o)</code>，<code>removeObserver(Object o)</code>和<code>notifyObservser()</code>。</li><li>具体内容提供者实现subject接口，且设置一个私有ArrayList变量来存放所有的观察者。在构造函数中初始化观察者列表。在相应接口方法的实现中操作观察者列表。</li><li>创建观察者的接口类，声明函数<code>update()</code>。其中变量列表为subject中所有内容。</li><li>创建具体的观察者实现观察者接口。设置一个私有的主题接口类型变量，方便进行注册或退出。自定义相应的update函数。</li></ol><h3 id="使用API的具体实现方法"><a href="#使用API的具体实现方法" class="headerlink" title="使用API的具体实现方法"></a>使用API的具体实现方法</h3><ul><li><strong>把对象变成观察者</strong>：实现观察者接口(java.util.Observer)，然后调用任何Observable对象的addObserver()方法。当不想再当观察者时，调用deleteObserver()方法即可。</li><li><strong>观察者送出通知</strong>：<ol><li>利用扩展java.util.Observable接口产生“可观察者类”。</li><li>调用setChanged()方法，标记状态已经改变的事实。</li><li>调用两种notifyObservers()方法中的一个：notifyObservers()或notifyObservers(Object arg)。</li></ol></li><li><strong>观察者接收通知</strong>：观察者实现update(Observable o,Object arg)方法。主题本身作为第一个变量，好让观察者知道是哪个主题通知它。第二个参数是传入notifyObservers()的数据对象，没有说明则为空。</li></ul><p><em>setChanged()方法用来标记状态已经改变的事实。如果调用notifyObservers()之前没有调用setChanged()，观察者就不会被通知。</em></p><p><em>hasChanged()方法获取changed标志的当前状态。</em></p><h3 id="JAVA-API实现的缺点"><a href="#JAVA-API实现的缺点" class="headerlink" title="JAVA API实现的缺点"></a>JAVA API实现的缺点</h3><p><em>java自带的可观察类是一个类，而不是一个接口，且没有实现一个接口。</em></p><ul><li>java不支持多继承，在继承Observable类的同时，无法继承另一个超类，限制了Observable的复用潜力。</li><li>没有相应的接口，无法创建自己的实现。</li><li>Observable API中的setChanged()方法是protected类型。除非继承自Observable，否则无法创建Observable实例并组合到你自己的对象中去。违反了多用组合，少用继承。</li></ul><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><ul><li><strong>设计原则五：类应该对扩展开放，对修改关闭。</strong></li><li>在选择需要被扩展的代码部分时要小心。每个地方都采用开放-关闭原则，是一种浪费，也没必要，还会导致代码变得复杂且难以理解。</li><li>装饰者和被装饰对象有着相同的超类型。</li><li>可以使用一个或者多个装饰者包装一个对象。</li><li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象(被包装的)的场合，可以用装饰过的对象代替它。</li><li><strong>装饰者可以在所委托被装饰者的行为之前与之后，加上自己的行为，甚至将被装饰者的行为整个替换掉，以达到特定的目的。</strong></li><li>对象可以在任何时候被装饰，所以可以在运行时动态的、不限量的用你喜欢的装饰者来装饰对象。</li><li>继承属于拓展形式之一，但不见得是达到弹性设计的最佳方式。</li><li>组合和委托可用于在运动时动态的加上新的行为。</li><li>除了继承，也可以使用像装饰者模式这样的链式扩展行为。</li><li>装饰者模式意味着一群装饰者类，这些类用来包装具体组件。</li><li>装饰者类反映出被装饰的组件类型。事实上，他们具有相同的类型，都经过接口或继承实现。</li><li>理论上，可以用无数个装饰者包装一个组件。</li><li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。</li></ul><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>装饰者模式动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_3.png"></p><ul><li>继承Component抽象类是为了有正确的类型，因为装饰者必须能取代被装饰者，而不是继承它的行为。在JAVA中可以使用接口，这里使用抽象类是因为装饰者模式通常使用抽象类。如果抽象类运行的好好的，还是别去修改它，</li><li>将代码针对特定种类的具体组件做特殊的行为，会造成一旦用装饰者包装特定种类就会造成类型改变，进而导致程序出现问题。<strong>只有在针对抽象组件类型编程时，才不会因为装饰者而受到影响。</strong></li><li>装饰者该做的事就是增加行为到被包装对象上。当需要窥视装饰者链中每一个装饰者时，这就超出他们的能力了。只能每一次装饰时，将装饰信息传递，最后进行统一解析。</li></ul><h3 id="JAVA类中的一个应用"><a href="#JAVA类中的一个应用" class="headerlink" title="JAVA类中的一个应用"></a>JAVA类中的一个应用</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_5.png"></p><h3 id="具体实现方法-2"><a href="#具体实现方法-2" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><ol><li>创建组件抽象类，设置相应属性。这些属性会继承到之后的所有组件，并设置相应的getter和setter。需要在组件类中具体重写的方法设置为抽象方法。</li><li>创建装饰类的抽象类，将装饰类中需要进行重写的方法设置为抽象方法。</li><li>创建相应的装饰类，继承2中的装饰类的抽象类，设置一个组件抽象类的对象。用以接收装饰链时传入对象，并进行相应抽象方法的重写。</li><li>创建相应的组件类，继承组件抽象类，并重写抽象方法。</li><li>使用时，用组件抽象类类型变量new相应的装饰类或者组件类。一个对象进行装饰时，将哪一个对象依次传入每一个装饰器或组件中。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>会在设计中加入大量小类，使人不容易理解设计方式。</li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>静态工厂：采用静态方法定义一个简单工厂。这样不需要使用创建对象的方法来实例化对象。但是不能通过继承来改变创建方法的行为。</li><li>设计模式中，所谓的“实现一个接口”并“不一定”是“写一个类，并利用implemennt关键词来实现某个java接口”。泛指“实现某个超类型（可以是类或接口）的某种方法”。</li></ul><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_6.png"></p><ul><li>简单工厂如上图所示，并不是“工厂模式”。只是一种编程习惯。本质就是将针对实现的代码提取出来，进行封装。这里封装成了工厂而已。</li></ul><h3 id="真正的工厂模式"><a href="#真正的工厂模式" class="headerlink" title="真正的工厂模式"></a>真正的工厂模式</h3><ul><li>所有工厂模式都用来封装对象的创建。</li><li>工厂模式方法通过让子类决定创建的对象是什么，来达到将对象创建的过程封装的目的。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_8.png"></p><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。这里的决定并不是指模式允许子类本身在运行时做决定，而是指在编写创建者类时，不需要知道实际创建的产品是哪一个。选择了使用哪个子类，自然就决定了实际创建的产品是什么。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_9.png"></p><ul><li>即使在只有一个ConcreteCreator的时候，工厂方法模式依然有用。可以有效的帮助将产品的“实现”从“使用”中解耦。如果增加产品或者改变产品的实现，Creator不会受影响。</li><li>工厂方法模式中的ConcreteCreator和Creator的实现类似见到简单工厂但是这里的ConcreteCreator扩展自Creator。每个ConcreteCreator自行负责具体实现方法。简单工厂中，Creator只是ConcreteCreator使用的对象。</li><li>工厂方法和创建者不一定总是抽象的。可以定义一个默认的工厂方法来产生某些具体的产品。这样，即使创建者没有任何子类，依然可以创建产品。</li><li><strong>设计原则六</strong>：(依赖倒置原则)要依赖抽象，不要依赖具体类。</li><li>设计原则六说明了不能让高层组件依赖低层组件，且都应该依赖抽象。所谓高层组件指的是低层组件定义其行为的类。</li></ul><h3 id="指导方针"><a href="#指导方针" class="headerlink" title="指导方针"></a>指导方针</h3><p>以下方法可以避免在OO设计中违反依赖倒置原则：</p><ul><li>变量不可以持有具体类的引用。如果使用new就会持有具体类的引用，使用工厂来避免。</li><li>不要让类派生自具体类。如果派生自具体类，就会依赖具体类。请派生一个接口或抽象类。</li><li>不要覆盖基类中已实现的方法。如果覆盖基类中已实现的方法，那么你的基类就不是一个真正适合被继承的抽象。基类中已实现的方法，应该由所有的子类共享。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_10.png"></p><p>抽象工厂的方法经常以工厂方法的方式实现。抽象工厂的任务是定义一个负责创建一组产品的接口。在这个接口内的每个方法都负责创建一个具体产品，同时利用实现抽象工厂的子类来提供这些具体的做法。</p><p>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。</p><p>工厂方法模式与抽象工厂模式的区别：</p><ul><li>抽象工厂使用的是对象之间的组合，对象的创建被实现在工厂接口所暴露出来的方法中。而工厂方法使用的是继承，把对象的创建委托给子类，子类实现工厂方法来创建对象。</li><li>利用工厂方法创建对象，需要扩展一个类，并覆盖它的工厂方法。整个工厂方法模式，只不过就是通过子类来创建对象。</li><li>抽象工厂提供一个用来创建一个产品家族的抽象类型，这个类型的子类定义了产品被产生的方法。要想使用这个工厂，必须先实例化它，然后将它传入一些针对抽象类型所写的代码中。可以把一群相关的产品结合起来。</li></ul><p>所有的工厂都是来封装对象的创建。</p><p>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_11.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_12.png"></p><h2 id="单件模型"><a href="#单件模型" class="headerlink" title="单件模型"></a>单件模型</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arduino和树莓派开发</title>
      <link href="2019/12/27/arduino-he-shu-mei-pai-kai-fa/"/>
      <url>2019/12/27/arduino-he-shu-mei-pai-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="实验室机器人控制代码"><a href="#实验室机器人控制代码" class="headerlink" title="实验室机器人控制代码"></a>实验室机器人控制代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO<span class="token keyword">import</span> serial<span class="token keyword">import</span> timeser<span class="token operator">=</span>serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span><span class="token string">"/dev/ttyACM0"</span><span class="token punctuation">,</span><span class="token number">115200</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    ser<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the number of steering engine:(1:left;2:right)"</span><span class="token punctuation">)</span>    engine<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the channel of steering engine:"</span><span class="token punctuation">)</span>    channel<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the angle of the steering engine:"</span><span class="token punctuation">)</span>    angle<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"please input the second of the steering engine:"</span><span class="token punctuation">)</span>    second<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>engine<span class="token operator">+</span><span class="token string">"#"</span><span class="token operator">+</span>channel<span class="token operator">+</span><span class="token string">"P"</span><span class="token operator">+</span>angle<span class="token operator">+</span><span class="token string">"T"</span><span class="token operator">+</span>second    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"send data:"</span><span class="token operator">+</span>data<span class="token punctuation">)</span>    ser<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#time.sleep(1)</span>    response<span class="token operator">=</span>ser<span class="token punctuation">.</span>readall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token operator">!=</span>None<span class="token punctuation">:</span>        result<span class="token operator">=</span>response<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"receiced data:"</span><span class="token operator">+</span>result<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(response)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        ser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;SoftwareSerial.h></span></span>SoftwareSerial <span class="token function">serial_1</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SoftwareSerial <span class="token function">serial_2</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serial_1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serial_2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">judge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      command<span class="token operator">=</span>command<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"left:"</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>serial_1<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      command<span class="token operator">=</span>command<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"right:"</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>serial_2<span class="token punctuation">,</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">moveSteeringEngine</span><span class="token punctuation">(</span>SoftwareSerial serial<span class="token punctuation">,</span>String command<span class="token punctuation">)</span><span class="token punctuation">{</span>  serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li><p>封装：元器件在电路板上的实际投影，包括外形、实际尺存和焊点。</p></li><li><p>DIP封装(Double Ln-line Package)：双列直插式封装</p></li><li><p>LQFP封装：薄型QFP(Low-profile Quad Flat Package)指封装本体厚度为1.4mm的QFP</p></li><li><p>不同元器件有不同封装形式，同一种封装形式也可以表示为不同元器件。</p></li><li><p>AD软件一般说<strong>两图两库</strong>：原理图库和PCB库，原理图和PCB图。</p>  <pre class="mermaid">    graph TD  A(建立工程)--&gt;B(建立两库两图)  B --&gt; C(保存整个工程)  F[AD项目建立流程]</pre></li></ul><h2 id="电容选择"><a href="#电容选择" class="headerlink" title="电容选择"></a>电容选择</h2><ul><li><p>1uf=1000nf,1nf=1000pf</p></li><li><p>在电源中要加电容滤波，在每个芯片的电源引脚放置一个0.1uf的电容去耦。</p></li><li><p>电容分两种：极性电容和非极性电容。极性电容</p></li></ul><p>等效电容示意图：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91_0.png"></p><p>ESR是电容的串联等效电阻，ESL是电容的串联等效电感，C是真正理想的电容。ESL和ESR是由电容的制作工艺和材料决定的，没法消除。ESR影响电源的纹波，ESL影响电容的滤波频率特性。</p><p>容抗计算公式：$X_c=\frac{1}{wc}=\frac{1}{2\pi fc}$  (w:角频率，f:频率，我国国家电网对工频是50Hz，C:电容值)</p><p>感抗计算公式：$X_l=wL=2\pi fL$  (L是线圈电感，单位是亨利)</p><p><strong>当频率很低的时候是电容起作用，而频率高到一定的时候电感的作用就不可忽视了，再高的时候电感就起主导作用了。电容就失去滤波的作用了。所以记住，高频的时候电容就不是单纯的电容了。</strong></p><p>实际电容的滤波曲线如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/arduino%E5%92%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91_1.png"></p><p>参见上图，我们想要的最好的滤波效果是在“谷”底，就是曲线凹进去的尖尖，在这个尖尖的时候，滤波效果做好，当我们的芯片IC内部的逻辑门在10-50Mhz范围内执行的时候，芯片内部产生的干扰也在10-50Mhz,（比如51单片机），仔细看上图的曲线，0.1uF电容 （有两种，一种是插件，一种是贴片）的谷底刚好落在了这个范围内，所以能够滤除这个频段的干扰，但是，看清楚，当频率很高的时候（50-100Mhz），就不是那么回事了，这个时候0.1uF电容个滤波效果就没有0.01uF好了，以此类推，频率再高，选用的滤波电容的量级还要变小。</p><p>参考如下：</p><p>DC-100K 10uF以上的钽电容或铝电解</p><p>100K-10M 100nF(0.1uF)陶瓷电容</p><p>10M-100M 10nF(0.01uF)陶瓷电容</p><p>&gt;100M 1nF(0.001uF)陶瓷电容和PCB的地平面与电源平面的电容</p><h2 id="磁珠"><a href="#磁珠" class="headerlink" title="磁珠"></a>磁珠</h2>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开发记录</title>
      <link href="2019/12/27/shu-mei-pai-kai-fa-ji-lu/"/>
      <url>2019/12/27/shu-mei-pai-kai-fa-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="无线计划"><a href="#无线计划" class="headerlink" title="无线计划"></a>无线计划</h2><p>因为最近在寝室远程连接电脑进行开发或者文档的编写，需要多台设备连网。但是由于学校”神奇”的网络状况，每个人只能有一个在线设备，且没有有线宽带。</p><p>与其找一台<code>pc</code>连接<code>wifi</code>再用软件开热点，效果并不好，且稳定性较差。于是想到的解决方案是将树莓派连接wifi,即树莓派的wifi作为wlan口，再将网络数据转发给树莓派的lan口，最后通过路由器做AP将rj45传来的数据做共享wifi。</p><p>步骤：</p><ol><li><p>配置网桥</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install bridge-utils #安装网桥管理工具brctl addbr br-lanbrctl addif br-lan eth0ifconfig br-lan 192.168.3.1 up #192.168.3.1就是树莓派在整个扩展网络中的地址ifconfig eth0 0.0.0.0 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置IP转发</p><p>一般的Linux发行版默认都不会开启ip_forward，因为正常的计算机都是作为终端，没有转发数据报的需求，因此需要手动打开。</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysctl.conf+ net.ipv4.ip_forward = 1#或sysctl net.ipv4.ip_forward = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置iptables</p><p>想让内网的所有设备共享一个IP，需要在wlan0网口启用nat。</p><pre class="line-numbers language-shell"><code class="language-shell">iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装DHCP/DNS服务器</p><pre class="line-numbers language-shell"><code class="language-shell">apt install dnsmasq -yvim /etc/dnsmasq.conf+'dhcp-range=192.168.3.50,192.168.3.150,255.255.255.0,12h' >> /etc/dnsmasq.conf #这里IP的网段跟之前配置的需要一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置开机自启</p><p>新建如下脚本:</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashbrctl addbr br-lanbrctl addif br-lan eth0ifconfig br-lan 192.168.3.1 up #这里的地址随便，和Wan侧不在一个网段就行ifconfig eth0 0.0.0.0 upsysctl net.ipv4.ip_forward=1iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>vim /usr/lib/systemd/system/&lt;自定义&gt;.service</code>命令创建执行计划</p><pre class="line-numbers language-shell"><code class="language-shell">[Unit]Description=autostart[Service]Type=oneshotExecStart=/home/pi/<上一步骤中脚本的名字>.sh[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>systemctl enable autostart.service</code></p></li></ol><hr><h2 id="顺风耳"><a href="#顺风耳" class="headerlink" title="顺风耳"></a>顺风耳</h2><p>列出所有的录音设备：</p><pre class="line-numbers language-shell"><code class="language-shell">arecord -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出所有的播放设备：</p><pre class="line-numbers language-shell"><code class="language-shell">aplay -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="5寸触摸屏"><a href="#5寸触摸屏" class="headerlink" title="5寸触摸屏"></a>5寸触摸屏</h2><p>硬件连接</p><ol><li>连接GPIO接口<br>Raspberry Pi引出了40个GPIO管脚，而屏幕引出了26个管脚，连接时注意对应屏幕管脚和树莓派管脚。</li><li>连接HDMI接口。把HDMI连接器接入屏幕和主板的HDMI接口。<br>Raspberry Pi Model B与Raspberry Pi Zero需另配HDMI连接线进行连接。</li><li>把LCD背后的Backlight拨到“ON”。</li></ol><p>在<code>config.txt</code>文件中添加</p><pre class="line-numbers language-shell"><code class="language-shell">max_usb_current=1hdmi_group=2hdmi_mode=87hdmi_cvt 800 480 60 6 0 0 0hdmi_drive=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载驱动程序：</p><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/waveshare/LCD-show.gitcd LCD-show/sudo ./LCD5-show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h2><p>安装Barrier：<code>sudo apt install barrier</code></p><p>自启动：在<code>～/.config/autostart/</code>下新建文件<code>barrier.desktop</code>，添加如下字段：</p><pre class="line-numbers language-shell"><code class="language-shell">[Desktop Entry]Type=ApplicationName=barrierNoDisplay=falseExec=/usr/bin/barrier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Docker笔记</title>
      <link href="2019/12/22/shen-ru-qian-chu-docker-bi-ji/"/>
      <url>2019/12/22/shen-ru-qian-chu-docker-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-容器发展之路"><a href="#第一章-容器发展之路" class="headerlink" title="第一章 容器发展之路"></a>第一章 容器发展之路</h2><p>运营成本:OPEX</p><p>资金性支出:CAPEX</p><p>容器模型与虚拟机的区别：容器的运行不会独占操作系统。运行在相同宿主主机上的容器是共享一个操作系统，节省大量的系统资源，节省在许可证上的花销，以及为OS打补丁等运维成本。启动快，便于迁移。</p><p>$$对容器影响较大的技术\begin{cases}\text{内核命名空间(Kernel \quad Namespace)}\\text{控制组(Control \quad Group)}\\text{联合文件系统(Union \quad File \quad System)}\\text{ Docker}\end{cases}$$</p><p>运行中的容器共享主机的内核。</p><p>Kubernetes提供热插拔的容器运行时接口CRI。默认容器为Docker。</p><h2 id="第二章-走进Docker"><a href="#第二章-走进Docker" class="headerlink" title="第二章 走进Docker"></a>第二章 走进Docker</h2><p>Docker是一种运行在Linux和Win上的软件，用于创建、管理和编排容器。</p><p>Docker引擎是用于运行和编排容器的基础设施工具，是运行容器的核心容器运行时。</p><p>Docker版本号遵循<code>YY.MM-xx</code>格式。</p><p>Docker公司的一个核心哲学通常称为”含电池，但可拆卸”(Batteries included but removable)。即许多Docker内置的组件都可以替换为第三方组件。</p><p>OCI(开放容器计划)是CoreOS和Docker共同成立的管理委员会，发布镜像规范和运行时规范。</p><h2 id="第三章-Docker安装"><a href="#第三章-Docker安装" class="headerlink" title="第三章 Docker安装"></a>第三章 Docker安装</h2><h4 id="Win版Docker"><a href="#Win版Docker" class="headerlink" title="Win版Docker"></a>Win版Docker</h4><ul><li>属于社区版，并不适用于生产环境。</li><li>通过启动一个独立的引擎来提供Docker环境。</li><li>某些版本特性可能延迟支持，稳定性第一，新特性其次。</li></ul><h4 id="Mac版Docker"><a href="#Mac版Docker" class="headerlink" title="Mac版Docker"></a>Mac版Docker</h4><ul><li>属于社区版，并不是为了生产环境进行设计的。</li><li>运行在一个轻量级的Linux VM之上。</li></ul><h4 id="Linux版Docker"><a href="#Linux版Docker" class="headerlink" title="Linux版Docker"></a>Linux版Docker</h4><p>$$\begin{cases}\text{社区版(Community Edition)}\\text{企业版(Enterprise Edition)}\end{cases}$$</p><p>Docker EE包含Docker CE中的全部功能，还包括了商业支持和其他Docker产品的集成。</p><p>使用shell脚本的安装步骤如下：</p><pre class="line-numbers language-shell"><code class="language-shell">wget -qO- https://get.docker.com/ | sh # 将用户加入Docker Unix组，通过非root用户使用Docker sudo usermod -aG docker your-name # 查看是否添加到docker组成功，执行完毕需要重新登录，组权限才能生效 cat /etc/group | grep docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看docker版本：</p><pre class="line-numbers language-shell"><code class="language-shell">docker --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看docker信息：</p><pre class="line-numbers language-shell"><code class="language-shell">docker system info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置docker开机自启：</p><pre class="line-numbers language-shell"><code class="language-shell">sudo systemctl enable dockersudo systemctl is-enabled docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查确保docker的容器和服务都已经重启成功：</p><pre class="line-numbers language-shell"><code class="language-shell">docker container lsdocker service ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="升级Docker引擎"><a href="#升级Docker引擎" class="headerlink" title="升级Docker引擎"></a>升级Docker引擎</h4><p>升级关键步骤：</p><ol><li>确保容器配置了正确的重启策略；在Swarm Mode模式下使用服务时，需要正确配置了draining node。</li><li>停止Docker守护程序</li><li>移除旧版本Docker</li><li>安装新版本Docker</li><li>配置新版本的Docker为开机自启动</li><li>确保容器重启成功</li></ol><h4 id="Docker存储驱动的选择"><a href="#Docker存储驱动的选择" class="headerlink" title="Docker存储驱动的选择"></a>Docker存储驱动的选择</h4><p>每个Docker容器都有一个本地存储空间，用于保存层叠的镜像层(Image Layer)以及挂载的容器文件系统。默认情况下，容器的所有读写操作发生在其镜像层上或挂载的文件系统中。</p><p>存储驱动在上层抽象设计中都采用了栈式镜像层存储和写时复制(Copy-on-Write)的设计思想。</p><p>存储驱动对Docker的性能和稳定性至关重要。</p><p>在Linux上，Docker可选择的一些存储驱动包括AUFS(最原始也是最老的)、Overlay2(可能是未来最佳选择)、Device Mapper、Btrfs和ZFS。</p><p>在Win上，Docker只支持Windows Filter一种存储驱动。</p><p>存储驱动的选择是节点级别的。即，每个docker主机只能选择一种存储驱动。不能为每个容器选择不同的存储驱动。在Linux上，修改<code>/etc/docker/deamon.json</code>文件来修改存储引擎配置。<em>修改完之后需要重启Docker才能生效。</em>如：</p><pre class="line-numbers language-shell"><code class="language-shell">{    "storage-driver":"overlay2"}# 如果配置所在行不是最后一行，则需要在行尾添加逗号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果修改了正在运行的docker主机的存储引擎类型，则现有的镜像和容器在重启之后将不可用，因为每种存储驱动在主机上存储镜像层的位置不一样(通常在/var/lib/<storage-driver>/…目录下)。</storage-driver></p><p>修改了存储驱动的类型，docker就无法找到原有的镜像和容器。切换回原本的存储驱动能继续使用之前的镜像和容器。如果在切换存储引擎之后，还想使用之前的镜像和容器，则需要将镜像保存为Docker格式，上传到某个镜像仓库，修改本地Docker引擎并重启，之后从镜像仓库将镜像拉取到本地，最后重启容器。</p><p>检查Docker当前的存储驱动类型：<code>docker system info</code>。</p><p>版本推荐选择：</p><ul><li>Red Hat Enterprise Linux：4.x版本内核或更高版本+Docker 17.06版本或更高版本，建议使用Overlay2。</li><li>Red Hat Enterprise Linux:低版本内核或低版本的Docker，建议使用Device Mapper。</li><li>Ubuntu Linux:4.x版本内核或更高版本，建议使用Overlay2。</li><li>Ubuntu Linux:更早的版本建议使用AUFS。</li><li>SUSE Linux Enterprise Server:Btrfs。</li></ul><h4 id="Device-Mapper配置"><a href="#Device-Mapper配置" class="headerlink" title="Device Mapper配置"></a>Device Mapper配置</h4><p>大部分Linux存储驱动不需要或需要很少的配置。</p><p>Device Mapper通常需要合理配置之后才能表现出良好的性能。</p><p>默认情况下，Device Mapper采用loopback mounted sparse file作为底层实现来为Docker提供存储支持。开箱即用，并不适用于生产环境，性能很差。</p><p>通过将底层修改为direct-lvm模式，可以获取更好的性能。这种规模下通过使用基于裸块设备(Raw Block Device)的LVM精简池(LVM thin pool)。暂时只能配置一个块设备，并且只有在第一次安装后才能设置生效。但是目前来说有一定的风险。</p><h4 id="Docker自动设置direct-lvm"><a href="#Docker自动设置direct-lvm" class="headerlink" title="Docker自动设置direct-lvm"></a>Docker自动设置direct-lvm</h4><p>如下步骤将Docker配置存储驱动为Device Mapper，并使用direct-lvm模式。</p><ol><li><p>将下面的存储驱动配置添加到<code>/etc/docker/daemon.json</code>当中。</p><pre class="line-numbers language-shell"><code class="language-shell">{"storage-driver":"devicemapper""storage-opts":[    "dm.directlvm_device=/dev/xdf", # 设置块设备的位置    "dm.thinp_percent=95", # 设置镜像和容器允许适应的最大存储空间占比    "dm.thinp_metapercent=1",# 设置元数据存储允许使用的存储空间大小    "dm.thinp_autoextend_threshold=80",# 设置LVM自动扩展精简池的阈值    "dm.thinp_autoextend_percent=20",# 当触发精简池自动扩容机制的时候，扩容大小应当占现有空间的比例    "dm.directlvm_device_force=false"# 是否将块设备格式化为新的文件系统]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启Docker。</p></li><li><p>确认Docker已成功运行，并块设备配置被成功加载。</p></li></ol><p>即使Docker在direct-lvm模式下只能设置单一块设备，其性能显著优于loopback模式。</p><h4 id="Docker手动设置direct-lvm"><a href="#Docker手动设置direct-lvm" class="headerlink" title="Docker手动设置direct-lvm"></a>Docker手动设置direct-lvm</h4><p>前置知识：</p><ul><li><p>块设备(Block Device)</p><p>在使用direct-lvm模式的时候，需要有可用的块设备。这些块设备应该位于高性能的存储设备之上，如：SSD或外部LUN存储。</p></li><li><p>LVM配置</p><p>Docker的Docker Mapper存储驱动底层利用LVM(Logical Volume Manager)来实现，需要配置LVM所需的物理设备、卷组、逻辑卷和精简池。应当使用专用的物理卷并将其配置在相同的卷组中。这个卷组不应当被Docker之外的工作负载所使用。此外还需要配置额外两个逻辑卷，分别存储存储数据和源数据信息。另外要创建LVM配置文件、指定LVM自动扩容的触发阈值，以及自动扩容的大小，并且为自动扩容配置相应的监控，保证自动扩容会被触发。</p></li><li><p>Docker配置</p><p>修改Docker配置文件之前要先保存原始文件(etc/docker/daemon.json)，然后进行修改。</p></li></ul><h2 id="第四章-纵观Docker"><a href="#第四章-纵观Docker" class="headerlink" title="第四章 纵观Docker"></a>第四章 纵观Docker</h2><h4 id="运维视角"><a href="#运维视角" class="headerlink" title="运维视角"></a>运维视角</h4><p>Docker安装主要涉及两个组件：Docker客户端、Docker daemon。</p><p>deamon实现了Docker引擎的API。</p><p>Linux默认安装时，客户端和daemon之间的通信是通过本地IPC/UNIX Socket完成的(/var/run/docker.sock)。Windows通过名为npipe:////./pipe/docker_engine的管道完成的。</p><p>Docker镜像可以理解为一个包含了OS文件系统和应用的对象。</p><p>虚拟机模板本质上是处于关机状态的虚拟机。</p><p><code>docker image ls</code>：查看镜像。</p><p>拉取(pulling)：在Docker主机上获取镜像的操作。</p><p>Docker的每个镜像都有自己唯一的ID。用户可以通过引用镜像的ID或名称来使用镜像。如果用户选择使用镜像ID，通常只需要输入ID开头的几个字符即可。</p><p><code>docker container run -it + 镜像名 运行的进程</code>：从镜像中来启动容器。例如：<code>docker container run -it ubuntu:latest /bin/bash</code>或<code>docker container run -it microsoft/powershell:nanoserver pwsh.exe</code>。<code>it</code>参数：开启容器的交互模式并将Shell链接到容器终端。</p><p>按Ctrl-PQ组合键，可以在退出容器的同时还保持容器运行。</p><p><code>docker container ls</code>：查看系统内部处于运行状态的容器。-a参数可以列出所有容器，包括处于停止状态的。</p><p><code>docker container stop + 容器对应名称或ID</code>：停止容器运行</p><p><code>docker container rm + 容器对应名称或ID</code>：杀死容器</p><p><code>docker container exec</code>：将shell链接到一个运行中的容器终端。例如：<code>docker container exec -it 容器名称或者id bash</code>。</p><h4 id="开发视角"><a href="#开发视角" class="headerlink" title="开发视角"></a>开发视角</h4><p>每个仓库都包含一个名为Dockerfile文件，这是一个纯文本文件，描述了如何将应用构建到Docker镜像中。 每一行代表一个用于构建镜像的指令。</p><p><code>docker image build -t 镜像名</code>：使用当前目录中的Dockerfile文件和应用代码创建新的镜像。构建时间长短是由构建过程中要拉取的镜像大小和复杂度决定的。</p><h2 id="第五章-Docker引擎"><a href="#第五章-Docker引擎" class="headerlink" title="第五章 Docker引擎"></a>第五章 Docker引擎</h2><p>Docker引擎是用来运行和管理容器的核心软件，通常将其代指为Docker或Docker平台。</p><p>Docker引擎是模块化的。</p><p>$Docker引擎组件\begin{cases}Docker\quad Client\Docker\quad daemon\containerd\runc\end{cases}$</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_Docker%E5%BC%95%E6%93%8E.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_Docker%E5%BC%95%E6%93%8E1.png"></p><p>runc是OCi容器运行时规范的参考实现。实质上是一个轻量级的、针对Libcontainer进行了包装的命令行交互工具(Libcontainer取代了早起的LXC)。</p><p>runc只有一个功能就是<strong>创建容器</strong>。本质是一个独立的容器运行时工具。</p><p>containerd的主要任务是容器的生命周期管理，也可以进行镜像管理等。containerd组件确保了Docker镜像能够以之后以正确的OCI Bundle的格式传递给runc。</p><p>containerd在linux和windows中以daemon的方式运行。Kubernetes可以通过cri-containerd使用containerd。</p><p>Daemon使用一种CRUD风格的API，通过gRPC与containerd进行通信。</p><p>Daemon的主要功能包括镜像管理、镜像构建、REST API、身份验证、安全、核心网络、编排。</p><p>一旦Daemon接收到创建新容器的命令，就会向containerd发出调用。containerd指挥runc去做。containerd将Docker镜像转换成OCI bundle，并让runc基于此创建一个新的容器。runc与操作系统内核接口进行通信，基于所有必要的工具(Namespace、CGroup等)来创建容器。容器进程作为runc的子进程启动。启动完毕后，runc退出。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_Docker%E5%90%AF%E5%8A%A8.png"></p><p>将所有的用于启动、管理容器的逻辑和代码从daemon中移除，以为者容器运行时与Docker daemon是解耦的，称之为“无守护进程的容器”。因此，Docker daemon的维护和升级不会影响运行中的容器。</p><p>每次创建容器<code>shim</code>fork一个新的runc实例。一旦容器创建完毕，对应的runc进程退出。</p><p>一旦容器进程的父进程runc进程退出，相关联的containerd-shim进程就会成为容器的父进程。</p><p>shim的部分职责：1.保持所有STDIN和STDout流是开启的，从而当daemon重启时，容器不会因为管道的关闭而终止。2.将容器的退出状态反馈给daemon。</p><h2 id="第六章-Docker镜像"><a href="#第六章-Docker镜像" class="headerlink" title="第六章 Docker镜像"></a>第六章 Docker镜像</h2><p>镜像由多层构成。内部是一个精简的操作系统，包括应用运行所必须的文件和依赖包。</p><p><code>docker container run</code>和<code>docker service create</code>命令从某个镜像启动一个或多个容器。</p><p>一旦容器从镜像启动后，二者之间变成相互依赖关系，并且在镜像上启动的容器全部停止之前，镜像是无法被删除的。</p><p>通常Docker镜像中只有一个精简的shell，甚至没有shell。镜像不包含内核，容器共享所在Docker主机的内核。</p><p>容器只包含必要的操作系统(通常只有操作系统文件和文件系统对象)。</p><p>Hyper-V容器运行在专业用的轻量级VM上，同时利用VM内部的操作系统内核。</p><p>Linux Docker主机本地镜像仓库通常位于/var/lib/docker/&lt;stroage-drivewr&gt;，Windows Docker主机是C:\ProgramData\docker\windowsfilter。</p><p><code>docker image pull &lt;repository&gt;:&lt;tag&gt;</code>：拉取镜像。如果用户没有指定具体的镜像标签，默认拉取标签为latest的镜像。Docker镜像存储在镜像仓库服务中。客户端中的镜像仓库服务默认是使用Docker Hub。</p><p><code>docker image pull &lt;所有者&gt;/&lt;repository&gt;:&lt;tag&gt;</code>：拉取非官方的Docker hub仓库的镜像。</p><p><code>docker image pull &lt;第三方镜像仓库服务的DNS名称&gt;/&lt;所有者&gt;/&lt;repository&gt;:&lt;tag&gt;</code>：从第三方仓库拉取镜像</p><p>以上拉取镜像的命令可以加-a参数，下载仓库中的全部镜像。如果镜像仓库中同时包含用于多个平台或者架构的镜像，那么命令可能会失败。</p><p>镜像仓库服务包含多个镜像仓库。一个镜像仓库包含多个镜像。</p><p>标有latest标签的镜像不保证是这个仓库最新的镜像。</p><p>标签是存放在镜像元数据中的任意数字或字符串。</p><p>一个镜像可以根据用户需要设置多个标签。</p><p>悬虚镜像：没有标签的镜像，在列表时显示为&lt;none&gt;:&lt;none&gt;。通常出现这种情况，是因为构建了一个新的镜像，然后为这个镜像打了一个已经存在的标签。Docker创建新的镜像，并赋予这个镜像标签。之前拥有这个标签的镜像会被移除这个标签。</p><p><code>docker image ls --filter dangling=true</code>：显示悬虚镜像。可以使用–format参数通过Go模板。–digest参数在本地查看镜像摘要。</p><p><code>docker image prune</code>：移除全部悬虚镜像。-a参数删除所有没有被任何容器使用的镜像。</p><p>Docker目前支持如下的过滤器：</p><ul><li>dangling：可以指定true或者false，仅返回悬虚镜像(true)，或非悬虚镜像(false)。</li><li>before：需要镜像名称或者ID作为参数，返回在之前被创建的全部镜像。</li><li>since：与before类似，不过返回的是指定镜像之后创建的全部镜像。</li><li>label：根据标注(label)的名称或者值，对镜像进行过滤。</li><li>其他过滤方式可以使用reference。例如：–filter=reference=”*:latest*”。</li></ul><p><code>docker search &lt;特定字符串&gt;</code>：搜索所有”NAME”字段中包含特定字符串的仓库。“NAME”字段是仓库名称，包含了Docker ID，或者非官方仓库的组织名称。–filter “is-official=true”参数使命令只显示官方镜像。–filter “is-automated=true”参数使命令只显示自动创建的仓库。–limit参数设置返回内容行数，默认25行，最多100行。</p><p><code>docker image inspect &lt;镜像名&gt;</code>：查看镜像分层。</p><p><code>docker histoy</code>：显示镜像的构建历史记录，但其不是严格意义上的镜像分层。有些Dockerfile中的指令并不会创建新的镜像层。但是会在镜像中添加元数据。</p><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像之上，创建新的镜像层。</p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合。</p><p>Docker采用快照机制实现镜像层堆栈，并保证多镜像层对外显示为统一的文件系统。</p><p>多个镜像之间可以共享镜像层。</p><p>每个镜像都有一个基于其内容的密码散列值，也被称为摘要(digest)。</p><p><code>docker image pull &lt;镜像名&gt;@&lt;sha256码&gt;</code>：通过镜像摘要拉取镜像。</p><p>镜像的唯一标识是一个加密ID，即配置对象本身的散列值。每个镜像层也由一个加密ID区分，其值为镜像层本身内容的散列值。也就是内容散列。</p><p>每个镜像层在拉取或推送时，包含一个分发散列值，这是一个压缩版镜像的散列值。该散列值用于校验拉取的镜像是否被篡改过。</p><p>为了实现多架构的方便使用，Docker的镜像仓库服务API支持两种重要的结构：Manifest列表和Mainfest。Manifest列表是指某个镜像标签支持的架构列表。其支持的每种架构，都有自己的Manifest定义。</p><p>Manifest列表是可选的。在没有Manifest列表的情况下，镜像仓库服务会返回普通的Manifest。</p><p><code>docker image rm</code>：删除镜像。</p><h2 id="第七章-Docker容器"><a href="#第七章-Docker容器" class="headerlink" title="第七章 Docker容器"></a>第七章 Docker容器</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>镜像是一堆只读层的统一视角。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_image-container.png"></p><p>统一文件系统：将多个只读层重叠在一起，并整合成一个文件系统，对用户隐藏。</p><p>在一个运行的容器内部，相应的文件层是不可见的。</p><p><strong>容器和镜像几乎一样，也是一堆层的统一视角。唯一区别在于容器最上面的一层是可读可写的。即，容器=镜像+可读写层</strong></p><p>运行态容器：可读写的统一文件系统加上隔离的进程空间和包含其中的进程。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_%E8%BF%90%E8%A1%8C%E6%80%81%E5%AE%B9%E5%99%A8.png"></p><p>一个文件层包含多信息：1.元数据(metadata)：关于这个层的额外信息，它不仅能够让Docker获取运行和构建时的信息，还包括父层的层次信息。<strong>只读层和读写层都包含元数据。</strong>2.指向父层的指针。如果没有这个指针，说明它处于最底层。3.id。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADocker%E7%AC%94%E8%AE%B0-%E4%B8%80_dockerrun.png"></p><p><code>docker ps </code>：；列出所有运行中的容器，隐藏非运行态的容器。-a参数可以列出所有容器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro系统配置</title>
      <link href="2019/12/12/manjaro-an-zhuang-ji-qi-pei-zhi/"/>
      <url>2019/12/12/manjaro-an-zhuang-ji-qi-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Manjaro安装及其配置"><a href="#Manjaro安装及其配置" class="headerlink" title="Manjaro安装及其配置"></a>Manjaro安装及其配置</h2><h3 id="Win与Manjaro并存"><a href="#Win与Manjaro并存" class="headerlink" title="Win与Manjaro并存"></a>Win与Manjaro并存</h3><p>在安装时，需要注意分配<code>/</code>和<code>/home</code>路径。将挂载点<code>/boot/efi</code>放置在windows启动盘的fat32格式的区分中。</p><p>若是Windows更新或其他原因导致Manjaro引导消失，请执行一下步骤：</p><ol><li>首先关闭Windows快速启动</li><li>用DG打开EFI分区，检查其中的文件是否有相应linux的启动引导，名称应该是<code>grubx64.efi</code>。Windows的引导文件为<code>bootmgfw.efi</code>。</li><li><code>win+x</code>+<code>a</code>进入管理员命令行</li><li>输入<code>bcdedit /set '{bootmgr}' path \EFI\Manjaro\grubx64.efi</code></li></ol><a id="more"></a><p>Win和Manjaro同时存在时会导致时间不同。原因在于电脑时间有两个:</p><ul><li>硬件时间：保存在主板中，信息少没有时区。</li><li>系统时间：独立于硬件时间，拥有时区、时令等信息。</li></ul><p>系统时间又因为系统不同，管理时间采用两种方法。</p><ul><li>localtime：本地时间，目前只有Windows使用。</li><li>UTC：是一种世界标准时间，Linux和Unix使用。UTC加减时区就是本地时间。</li></ul><p>Windows认为硬件时间就是UTC时间，而Linux会加减时区。使用<code>sudo timedatectl set-local-rtc true</code>即可。</p><hr><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="Pacman安装"><a href="#Pacman安装" class="headerlink" title="Pacman安装"></a>Pacman安装</h4><p>vim：文本软件，配合<a href="https://github.com/chxuan/vimplus">vimplus</a>更佳（若默认编辑器不是vim可以在<code>/etc/profile</code>中添加<code>export EDITOR=/usr/bin/vim</code>）</p><p>yay：优秀的社区包管理工具</p><p>gcc和base-devel可以方便的准备C++环境</p><p>go：go语言包</p><p>nodejs：nodejs</p><p>npm</p><p>nvm</p><p>jq：提供json解析功能</p><p>wireshark：wireshark-qt，分析网络之用</p><p>axel：多线程下载</p><p>wiznote：为知笔记</p><p>bmon：命令行查看网络情况</p><p>net-tools：查看网络，安装后可以使用ifconfig</p><p>wps-office ttf-wps-fonts：WPS</p><p>latte-dock：类MacOS的应用启动器</p><p>unzip：解压工具</p><p>visual-studio-code-bin：vscode</p><p>v2ray qv2ray：v2ray工具链</p><p>baidunetworkdisk-bin：百度网盘</p><p>annie：A fast, simple and clean video downloader written in Go</p><p>arduino：Arduino prototyping platform SDK</p><p>Gimp：Linux中的PS</p><p>cloc：Count lines of code</p><p>cool-retro-term：A good looking terminal emulator which mimics the old cathode display</p><p>evtest：Input device event monitor and query tool</p><p>fzf：Command-line fuzzy finder</p><p>feh：Fast and light imlib2-based image viewer</p><p>telegram-desktop：Official Telegram Desktop client </p><p>highlight：Fast and flexible source code highlighter (CLI version)</p><p>iease-music：Elegant neteaseMusic desktop app, Rock with NeteaseMusic.</p><p>kate： Advanced Text Editor</p><p>ncdu：Disk usage analyzer with an ncurses interface</p><p>neofecth：A CLI system information tool written in BASH that supports displaying images</p><p>netease-cloud-music：网易云</p><p>netease-musicbox：网易云命令行版</p><p>nmap：nmap</p><p>postman：Build, test, and document your APIs faster</p><p>rclone：Sync files to and from Google Drive, S3, Swift, Cloudfiles, Dropbox and Google Cloud Storage</p><p>simplescreenrecorder：优秀的录屏软件</p><p>smplayer：播放器</p><p>teamviewer：远程软件</p><p>tig：Text-mode interface for Git.</p><p>translate-shell：A command-line interface and interactive shell for Google Translate</p><p>typora：Markdown编辑器</p><p>flameshot：截图工具</p><p>zmap：快速的互联网那个扫描仪</p><p>mycli：支持自动补全和语法高亮的Mysql客户端</p><p>kvantum-qt5：主题美化工具</p><p>filezilla：sftp/ftp图形化软件</p><p>motrix：磁力下载器</p><p>zathura：vim风格的pdf阅读器</p><p>inkscape：适量图形编辑器</p><p>fd：搜索软件</p><p>ripgrep-all：搜索软件</p><p>bat：预览文件程序</p><p>unrar：解压软件爱</p><p>atool</p><p>xdman：下载软件</p><p>lolcat：终端文本渐变色</p><p>strace:追踪进程进行时的系统调用和接收的信号</p><h5 id="Goldendict"><a href="#Goldendict" class="headerlink" title="Goldendict"></a>Goldendict</h5><p>Feature-rich dictionary lookup program</p><p>可以添加自己的词库</p><p>设置程序翻译：</p><ol><li><p>sudo pacman -S translate-shell</p></li><li><p>编辑-&gt;词典-&gt;词典来源-&gt;程序-&gt;添加</p><pre class="line-numbers language-xml"><code class="language-xml">#  Trans-2-Chinesetrans -e google -s auto -t zh-CN -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation-phonetics n -show-prompt-message n -show-languages y -show-original-dictionary n -show-dictionary n -show-alternatives n “%GDWORD%”# Trans-2-Englishtrans -e google -s auto -t en-US -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation-phonetics n -show-prompt-message n -show-languages y -show-original-dictionary n -show-dictionary n -show-alternatives n “%GDWORD%”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="Alacritty"><a href="#Alacritty" class="headerlink" title="Alacritty"></a>Alacritty</h5><p>一款GPU实时渲染的终端</p><p>配置文件在<code>.config/alacritty/alacritty.yml</code>。</p><p>可以使用<code>fc-list</code>查看已安装的字体。</p><p>修改如下字段：</p><pre class="line-numbers language-shell"><code class="language-shell">background_opacity: 0.7# Font configurationfont:  size: 11    #Normal (roman) font face  normal:    # Font family    #      # Default:    #   - (macOS) Menlo    #   - (Linux/BSD) monospace    #   - (Windows) Consolas    family: JetBrainsMono Nerd Font Mono    #family: JetBrains Mono Regular Nerd Font Complete Mono    # The `style` can be specified to pick a specific face.    style: Regular<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h5><p>安装<code>sudo pacman -S tmux</code></p><p>配置基于<a href="https://github.com/gpakosz/.tmux">github</a></p><h5 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h5><p>多台主机之间共享键鼠，使用<code>sudo pacman -S barrier</code>或<code>sudo apt install barrier</code>。</p><p>配置时在服务端的屏幕和联结中创建新的屏幕并设置名称，此名称需要和连接的设备的barrier中的名称一致。</p><h5 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h5><p>推荐使用<code>fcitx5</code>。搜狗输入法每次启动都会花费大量时间。</p><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S fcitx5-im<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>~/.pam_environment</code></p><pre class="line-numbers language-shell"><code class="language-shell">INPUT_METHOD  DEFAULT=fcitx5GTK_IM_MODULE DEFAULT=fcitx5QT_IM_MODULE  DEFAULT=fcitx5XMODIFIERS    DEFAULT=\@im=fcitx5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>/usr/share/applications/fcitx5.desktop</code>复制到<code>~/.config/autostart  </code>，实现开机自启。</p><p>添加对中文支持</p><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S fcitx5-chinese-addons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加输入法模块</p><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S fcitx5-qt fcitx5-gtk <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加词库</p><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S fcitx5-pinyin-zhwiki fcitx5-pinyin-moegirl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装输入法皮肤</p><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S fcitx5-material-color<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    然后修改配置文件 <code>~/.config/fcitx5/conf/classicui.conf</code></p><pre class="line-numbers language-shell"><code class="language-shell"># 垂直候选列表Vertical Candidate List=False# 按屏幕 DPI 使用PerScreenDPI=False# Font (设置成你喜欢的字体)Font="思源黑体 CN Medium 13"# 主题 (自定义)Theme=Material-Color-Pink<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题名称：</p><ul><li>Material-Color-Pink</li><li>Material-Color-Blue</li><li>Material-Color-Brown</li><li>Material-Color-DeepPurple</li><li>Material-Color-Indigo</li><li>Material-Color-Red</li><li>Material-Color-Teal(不错)</li></ul><p>​    更新皮肤  </p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/.local/share/fcitx5/themes/Material-Colorgit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    单行模式</p><ul><li>对于 fcitx5 自带的 pinyin，请修改 <code>~/.config/fcitx5/conf/pinyin.conf</code></li><li>对于 fcitx5-rime，请新建/修改 <code>~/.config/fcitx5/conf/rime.conf</code></li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 可用时在应用程序中显示预编辑文本PreeditInApplication=True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h5><p>终端显示，能智能的显示一些信息，高定制性。</p><h6 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh-My-Zsh"></a>Oh-My-Zsh</h6><p><code>sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</code></p><h6 id="相应插件"><a href="#相应插件" class="headerlink" title="相应插件"></a>相应插件</h6><pre class="line-numbers language-shell"><code class="language-shell">plugins=(    git    z    extract    hitokoto    gitignore    cp    git-open    \#safe-paste //这个软件会导致zsh的命令回溯出现问题l   sudo    zsh-syntax-highlighting    zsh-autosuggestions    history    tmuxinator    tmux    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果相关插件提示无法使用，需要去寻找相应github仓库。将所需项目克隆至本地。</p><p>添加fzf设置：</p><pre class="line-numbers language-shell"><code class="language-shell">export FZF_DEFAULT_COMMAND='fd --hidden --follow -E ".git" -E "node_modules" -E ".idea" . /home'#export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview "[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500" --preview-windows=down'#export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border  --preview "[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (ccat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500" --preview-window=down'export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview "echo {} | ~/.config/file_preview.py" --preview-window=down'export FZF_COMPLETION_TRIGGER='\'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>file_preview.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 在使用这个插件之前你需要先安装以下程序</span><span class="token comment" spellcheck="true"># 压缩文件：atool unrar unzip p7zip-full</span><span class="token comment" spellcheck="true"># 网页文件：w3m</span><span class="token comment" spellcheck="true"># 种子文件：transmission</span><span class="token comment" spellcheck="true"># 文本文件：bat</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">path_transfer</span><span class="token punctuation">(</span>path_input<span class="token punctuation">)</span><span class="token punctuation">:</span>    rg_list <span class="token operator">=</span> path_input<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>rg_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        bat_range <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        bat_range <span class="token operator">=</span> rg_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    file_path_list <span class="token operator">=</span> rg_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> filep <span class="token keyword">in</span> zip<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>file_path_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file_path_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        path_space <span class="token operator">=</span> filep<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> path_space <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            file_path_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"'{}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>filep<span class="token punctuation">)</span>        file_path <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path_list<span class="token punctuation">)</span>    preview_nameandline <span class="token operator">=</span> <span class="token punctuation">[</span>file_path<span class="token punctuation">,</span> bat_range<span class="token punctuation">]</span>    <span class="token keyword">return</span> preview_nameandline<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    path_input <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> path_input <span class="token operator">==</span> None<span class="token punctuation">:</span>        path_input <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    preview_nameandline <span class="token operator">=</span> path_transfer<span class="token punctuation">(</span>path_input<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'ls -la {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.ZIP'</span><span class="token punctuation">,</span> <span class="token string">'.tar'</span><span class="token punctuation">,</span> <span class="token string">'.tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'rar'</span><span class="token punctuation">,</span> <span class="token string">'7z'</span><span class="token punctuation">,</span> <span class="token string">'RAR'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'als {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.torrent'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'transmission-show {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token string">'.htm'</span><span class="token punctuation">,</span> <span class="token string">'.xhtml'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'w3m -dump {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># elif preview_nameandline[0].replace("'", '').endswith(('.png')):</span>        <span class="token comment" spellcheck="true"># os.system('img2txt {}'.format(preview_nameandline[0]))</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'bat --style=numbers --color=always -r {}: {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>            preview_nameandline<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'echo {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>preview_nameandline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加执行权限。</p><p>设置power10k:</p><pre class="line-numbers language-shell"><code class="language-shell"># Generated by Powerlevel10k configuration wizard on 2020-02-16 at 19:30 CST.# Based on romkatv/powerlevel10k/config/p10k-classic.zsh, checksum 02588.# Wizard options: nerdfont-complete + powerline, large icons, classic, dark, time,# angled separators, blurred heads, sharp tails, 2 lines, dotted, right frame, compact,# many icons, concise, instant_prompt=quiet.# Type `p10k configure` to generate another config.## Config for Powerlevel10k with classic powerline prompt style. Type `p10k configure` to generate# your own config based on it.## Tip: Looking for a nice color? Here's a one-liner to print colormap.##   for i in {0..255}; do print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}; done# Temporarily change options.'builtin' 'local' '-a' 'p10k_config_opts'[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'() {  emulate -L zsh  setopt no_unset extended_glob  # Unset all configuration options. This allows you to apply configiguration changes without  # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.  unset -m 'POWERLEVEL9K_*'  autoload -Uz is-at-least && is-at-least 5.1 || return  zmodload zsh/langinfo  if [[ ${langinfo[CODESET]:-} != (utf|UTF)(-|)8 ]]; then    local LC_ALL=${${(@M)$(locale -a):#*.(utf|UTF)(-|)8}[1]:-en_US.UTF-8}  fi  # The list of segments shown on the left. Fill it with the most important segments.  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    context    os_icon                 # os identifier    Greeting    public_ip    disk_usage    dir                     # current directory    vcs                     # git status    # =========================[ Line #2 ]=========================    newline                 # \n    prompt_char             # prompt symbol  )  # The list of segments shown on the right. Fill it with less important segments.  # Right prompt on the last prompt line (where you are typing your commands) gets  # automatically hidden when the input line reaches it. Right prompt above the  # last prompt line gets hidden if it would overlap with left prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(    # =========================[ Line #1 ]=========================    status                  # exit code of the last command    command_execution_time  # duration of the last command    background_jobs         # presence of background jobs    #direnv                  # direnv status (https://direnv.net/)    #asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)    #virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)    #anaconda                # conda environment (https://conda.io/)    pyenv                   # python environment (https://github.com/pyenv/pyenv)    goenv                   # go environment (https://github.com/syndbg/goenv)    nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)    nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)    nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)    node_version          # node.js version    go_version            # go version (https://golang.org)     rust_version          # rustc version (https://www.rust-lang.org)    # dotnet_version        # .NET version (https://dotnet.microsoft.com)    # php_version           # php version (https://www.php.net/)    # laravel_version       # laravel php framework version (https://laravel.com/)    #rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)    #rvm                     # ruby version from rvm (https://rvm.io)    #fvm                     # flutter version management (https://github.com/leoafarias/fvm)    #luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)    jenv                    # java version from jenv (https://github.com/jenv/jenv)    #plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)    #phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)    kubecontext             # current kubernetes context (https://kubernetes.io/)    #terraform               # terraform workspace (https://www.terraform.io)    #aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)    #aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)   # azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)    #gcloud                  # google cloud cli account and project (https://cloud.google.com/)    #google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)    #context                 # user@hostname    #nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)    ranger                  # ranger shell (https://github.com/ranger/ranger)    #nnn                     # nnn shell (https://github.com/jarun/nnn)    vim_shell               # vim shell indicator (:sh)    #midnight_commander      # midnight commander shell (https://midnight-commander.org/)    #nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)    vi_mode                 # vi mode (you don't need this if you've enabled prompt_char)    # vpn_ip                # virtual private network indicator     load                  # CPU load     disk_usage            # disk usage     ram                   # free RAM     swap                  # used swap    #todo                    # todo items (https://github.com/todotxt/todo.txt-cli)    timewarrior             # timewarrior tracking status (https://timewarrior.net/)    time                    # current time    #my_weather    # =========================[ Line #2 ]=========================    newline                 # \n     ip                    # ip address and bandwidth usage for a specified network interface    # public_ip             # public IP address    # proxy                 # system-wide http/https/ftp proxy     battery               # internal battery    # wifi                  # wifi speed    # example               # example user-defined segment (see prompt_example function below)  )  # To enable default icons for all segments, don't define POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION  # or set it to '${P9K_VISUAL_IDENTIFIER}'.  #  # To remove trailing space from all default icons, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION  # to '${P9K_VISUAL_IDENTIFIER% }'.  #  # To enable default icons for one segment (e.g., dir), set  # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'.  #  # To assign a specific icon to one segment (e.g., dir), set  # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='⭐'.  #  # To assign a specific icon to a segment in a given state (e.g., dir in state NOT_WRITABLE),  # set POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'.  #  # Note: You can use $'\u2B50' instead of '⭐'. It's especially convenient when specifying  # icons that your text editor cannot render. Don't forget to put $ and use single quotes when  # defining icons via Unicode codepoints.  #  # Note: Many default icons cannot be displayed with system fonts. You'll need to install a  # capable font to use them. See POWERLEVEL9K_MODE below.  typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'  # This option makes a difference only when default icons are enabled for all or some prompt  # segments (see POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION above). LOCK_ICON can be printed as  # $'\uE0A2', $'\uE138' or $'\uF023' depending on POWERLEVEL9K_MODE. The correct value of this  # parameter depends on the provider of the font your terminal is using.  #  #   Font Provider                    | POWERLEVEL9K_MODE  #   ---------------------------------+-------------------  #   Powerline                        | powerline  #   Font Awesome                     | awesome-fontconfig  #   Adobe Source Code Pro            | awesome-fontconfig  #   Source Code Pro                  | awesome-fontconfig  #   Awesome-Terminal Fonts (regular) | awesome-fontconfig  #   Awesome-Terminal Fonts (patched) | awesome-patched  #   Nerd Fonts                       | nerdfont-complete  #   Other                            | compatible  #  # If this looks overwhelming, either stick with a preinstalled system font and set  # POWERLEVEL9K_MODE=compatible, or install the recommended Powerlevel10k font from  # https://github.com/romkatv/powerlevel10k/#recommended-meslo-nerd-font-patched-for-powerlevel10k  # and set POWERLEVEL9K_MODE=nerdfont-complete.  typeset -g POWERLEVEL9K_MODE=nerdfont-complete  # When set to true, icons appear before content on both sides of the prompt. When set  # to false, icons go after content. If empty or not set, icons go before content in the left  # prompt and after content in the right prompt.  #  # You can also override it for a specific segment:  #  #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false  #  # Or for a specific segment in specific state:  #  #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false  typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=  # Add an empty line before each prompt.  typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=false  # Connect left prompt lines with these symbols. You'll probably want to use the same color  # as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=  # Connect right prompt lines with these symbols.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX='%240F─╮'  typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX='%240F─┤'  typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX='%240F─╯'  # Filler between left and right prompt on the first prompt line. You can set it to ' ', '·' or  # '─'. The last two make it easier to see the alignment between left and right prompt and to  # separate prompt from command output. You might want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false  # for more compact prompt if using using this option.  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR='·'  typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=  if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then    # The color of the filler. You'll probably want to match the color of POWERLEVEL9K_MULTILINE    # ornaments defined above.    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=240    # Start filler from the edge of the screen if there are no left segments on the first line.    typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'    # End filler on the edge of the screen if there are no right segments on the first line.    typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'  fi  # Default background color.  typeset -g POWERLEVEL9K_BACKGROUND=236  # Separator between same-color segments on the left.  typeset -g POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR='%244F\uE0B1'  # Separator between same-color segments on the right.  typeset -g POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR='%244F\uE0B3'  # Separator between different-color segments on the left.  typeset -g POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR='\uE0B0'  # Separator between different-color segments on the right.  typeset -g POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR='\uE0B2'  # The right end of left prompt.  typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='▓▒░'  # The left end of right prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='░▒▓'  # The left end of left prompt.  typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL='\uE0B2'  # The right end of right prompt.  typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL='\uE0B0'  # Left prompt terminator for lines without any segments.  typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=  #################################[ os_icon: os identifier ]##################################  # OS identifier color.  typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255  # Make the icon bold.  #typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT}'  # 修改显示的系统图标为Arch  typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION=%B$'\uF303 '  ################################[ prompt_char: prompt symbol ]################################  # Transparent background.  typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=  # Green prompt symbol if the last command succeeded.  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=76  # Red prompt symbol if the last command failed.  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=196  # Default prompt symbol.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'  # Prompt symbol in command vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'  # Prompt symbol in visual vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='Ⅴ'  # Prompt symbol in overwrite vi mode.  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'  typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true  # No line terminator if prompt_char is the last segment.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=  # No line introducer if prompt_char is the first segment.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=  # No surrounding whitespace.  typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_{LEFT,RIGHT}_WHITESPACE=  ##################################[ dir: current directory ]##################################  # Default current directory color.  typeset -g POWERLEVEL9K_DIR_FOREGROUND=31  # If directory is too long, shorten some of its segments to the shortest possible unique  # prefix. The shortened directory can be tab-completed to the original.  typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique  # Replace removed segment suffixes with this symbol.  typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=  # Color of the shortened directory segments.  typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103  # Color of the anchor directory segments. Anchor segments are never shortened. The first  # segment is always an anchor.  typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=39  # Display anchor directory segments in bold.  typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true  # Don't shorten directories that contain any of these files. They are anchors.  local anchor_files=(    .bzr    .citc    .git    .hg    .node-version    .python-version    .go-version    .ruby-version    .lua-version    .java-version    .perl-version    .php-version    .tool-version    .shorten_folder_marker    .svn    .terraform    CVS    Cargo.toml    composer.json    go.mod    package.json  )  typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"  # If set to true, remove everything before the last (deepest) subdirectory that contains files  # matching $POWERLEVEL9K_SHORTEN_FOLDER_MARKER. For example, when the current directory is  # /foo/bar/git_repo/baz, prompt will display git_repo/baz. This assumes that /foo/bar/git_repo  # contains a marker (.git) and other directories don't.  typeset -g POWERLEVEL9K_DIR_TRUNCATE_BEFORE_MARKER=false  # Don't shorten this many last directory segments. They are anchors.  typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1  # Shorten directory if it's longer than this even if there is space for it. The value can  # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,  # directory will be shortened only when prompt doesn't fit or when other parameters demand it  # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).  # If set to `0`, directory will always be shortened to its minimum length.  typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80  # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this  # many columns for typing commands.  typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40  # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least  # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.  typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50  # If set to true, embed a hyperlink into the directory. Useful for quickly  # opening a directory in the file manager simply by clicking the link.  # Can also be handy when the directory is shortened, as it allows you to see  # the full directory that was used in previous commands.  typeset -g POWERLEVEL9K_DIR_HYPERLINK=false  # Enable special styling for non-writable directories.  typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true  # Show this icon when the current directory is not writable. POWERLEVEL9K_DIR_SHOW_WRITABLE  # above must be set to true for this parameter to have effect.  # typeset -g POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_DIR_PREFIX='%246Fin '  # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons for different directories.  # It must be an array with 3 * N elements. Each triplet consists of:  #  #   1. A pattern against which the current directory is matched. Matching is done with  #      extended_glob option enabled.  #   2. Directory class for the purpose of styling.  #   3. Icon.  #  # Triplets are tried in order. The first triplet whose pattern matches $PWD wins. If there  # are no matches, the directory will have no icon.  #  # Example:  #  #   typeset -g POWERLEVEL9K_DIR_CLASSES=(  #       '~/work(|/*)'  WORK     '(╯°□°）╯︵ ┻━┻'  #       '~(|/*)'       HOME     '⌂'  #       '*'            DEFAULT  '')  #  # With these settings, the current directory in the prompt may look like this:  #  #   (╯°□°）╯︵ ┻━┻ ~/work/projects/important/urgent  #  # Or like this:  #  #   ⌂ ~/best/powerlevel10k  #  # You can also set different colors for directories of different classes. Remember to override  # FOREGROUND, SHORTENED_FOREGROUND and ANCHOR_FOREGROUND for every directory class that you wish  # to have its own color.  #  #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=31  #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=103  #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=39  #  # typeset -g POWERLEVEL9K_DIR_CLASSES=()  #####################################[ vcs: git status ]######################################  # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.  typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126 '  POWERLEVEL9K_VCS_BRANCH_ICON=${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}  # Untracked files icon. It's really a question mark, your font isn't broken.  # Change the value of this parameter to show a different icon.  typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'  POWERLEVEL9K_VCS_UNTRACKED_ICON=${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}  # Formatter for Git status.  #  # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.  #  # You can edit the function to customize how Git status looks.  #  # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:  # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.  function my_git_formatter() {    emulate -L zsh    if [[ -n $P9K_CONTENT ]]; then      # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from      # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.      typeset -g my_git_format=$P9K_CONTENT      return    fi    if (( $1 )); then      # Styling for up-to-date Git status.      local       meta='%246F'  # grey foreground      local      clean='%76F'   # green foreground      local   modified='%178F'  # yellow foreground      local  untracked='%39F'   # blue foreground      local conflicted='%196F'  # red foreground    else      # Styling for incomplete and stale Git status.      local       meta='%244F'  # grey foreground      local      clean='%244F'  # grey foreground      local   modified='%244F'  # grey foreground      local  untracked='%244F'  # grey foreground      local conflicted='%244F'  # grey foreground    fi    local res    local where  # branch or tag    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then      res+="${clean}${POWERLEVEL9K_VCS_BRANCH_ICON}"      where=${(V)VCS_STATUS_LOCAL_BRANCH}    elif [[ -n $VCS_STATUS_TAG ]]; then      res+="${meta}#"      where=${(V)VCS_STATUS_TAG}    fi    # If local branch name or tag is at most 32 characters long, show it in full.    # Otherwise show the first 12 … the last 12.    (( $#where > 32 )) && where[13,-13]="…"    res+="${clean}${where//\%/%%}"  # escape %    # Display the current Git commit if there is no branch or tag.    # Tip: To always display the current Git commit, remove `[[ -z $where ]] &&` from the next line.    [[ -z $where ]] && res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"    # Show tracking branch name if it differs from local branch.    if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then      res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %    fi    # ⇣42 if behind the remote.    (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"    # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.    (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "    (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"    # ⇠42 if behind the push remote.    (( VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" ${clean}⇠${VCS_STATUS_PUSH_COMMITS_BEHIND}"    (( VCS_STATUS_PUSH_COMMITS_AHEAD && !VCS_STATUS_PUSH_COMMITS_BEHIND )) && res+=" "    # ⇢42 if ahead of the push remote; no leading space if also behind: ⇠42⇢42.    (( VCS_STATUS_PUSH_COMMITS_AHEAD  )) && res+="${clean}⇢${VCS_STATUS_PUSH_COMMITS_AHEAD}"    # *42 if have stashes.    (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"    # 'merge' if the repo is in an unusual state.    [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"    # ~42 if have merge conflicts.    (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"    # +42 if have staged changes.    (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"    # !42 if have unstaged changes.    (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"    # ?42 if have untracked files. It's really a question mark, your font isn't broken.    # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.    # Remove the next line if you don't want to see untracked files at all.    (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"    # "─" if the number of unstaged files is unknown. This can happen due to    # POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY (see below) being set to a non-negative number lower    # than the number of files in the Git index, or due to bash.showDirtyState being set to false    # in the repository config. The number of staged and untracked files may also be unknown    # in this case.    (( VCS_STATUS_HAS_UNSTAGED == -1 )) && res+=" ${modified}─"    typeset -g my_git_format=$res  }  functions -M my_git_formatter 2>/dev/null  # Don't count the number of unstaged, untracked and conflicted files in Git repositories with  # more than this many files in the index. Negative value means infinity.  #  # If you are working in Git repositories with tens of millions of files and seeing performance  # sagging, try setting POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY to a number lower than the output  # of `git ls-files | wc -l`. Alternatively, add `bash.showDirtyState = false` to the repository's  # config: `git config bash.showDirtyState false`.  typeset -g POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY=-1  # Don't show Git status in prompt for repositories whose workdir matches this pattern.  # For example, if set to '~', the Git repository at $HOME/.git will be ignored.  # Multiple patterns can be combined with '|': '~|~/some/dir'.  typeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'  # Disable the default Git status formatting.  typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true  # Install our own Git status formatter.  typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'  typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'  # Enable counters for staged, unstaged, etc.  typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1  # Icon color.  typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=76  typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244  # Custom icon.  # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_VCS_PREFIX='%246Fon '  # Show status of repositories of these types. You can add svn and/or hg if you are  # using them. If you do, your prompt may become slow even when your current directory  # isn't in an svn or hg reposotiry.  typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)  # These settings are used for respositories other than Git or when gitstatusd fails and  # Powerlevel10k has to fall back to using vcs_info.  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=76  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178  ##########################[ status: exit code of the last command ]###########################  # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and  # style them independently from the regular OK and ERROR state.  typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true  # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as  # it will signify success by turning green.  typeset -g POWERLEVEL9K_STATUS_OK=false  typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70  typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'  # Status when some part of a pipe command fails but the overall exit status is zero. It may look  # like this: 1|0.  typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70  typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'  # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as  # it will signify error by turning red.  typeset -g POWERLEVEL9K_STATUS_ERROR=false  typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160  typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='✘'  # Status when the last command was terminated by a signal.  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160  # Use terse signal names: "INT" instead of "SIGINT(2)".  typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false  typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='✘'  # Status when some part of a pipe command fails and the overall exit status is also non-zero.  # It may look like this: 1|0.  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160  typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='✘'  ###################[ command_execution_time: duration of the last command ]###################  # Show duration of the last command if takes longer than this many seconds.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3  # Show this many fractional digits. Zero means round to seconds.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0  # Execution time color.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=248  # Duration format: 1d 2h 3m 4s.  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'  # Custom icon.  # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='%246Ftook '  #######################[ background_jobs: presence of background jobs ]#######################  # Don't show the number of background jobs.  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false  # Background jobs color.  typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=37  # Custom icon.  # typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ direnv: direnv status (https://direnv.net/) ]########################  # Direnv color.  typeset -g POWERLEVEL9K_DIRENV_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_DIRENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ asdf: asdf version manager (https://github.com/asdf-vm/asdf) ]###############  # Default asdf color. Only used to display tools for which there is no color override (see below).  typeset -g POWERLEVEL9K_ASDF_FOREGROUND=66  # There are four parameters that can be used to hide asdf tools. Each parameter describes  # conditions under which a tool gets hidden. Parameters can hide tools but not unhide them. If at  # least one parameter decides to hide a tool, that tool gets hidden. If no parameter decides to  # hide a tool, it gets shown.  #  # Special note on the difference between POWERLEVEL9K_ASDF_SOURCES and  # POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW. Consider the effect of the following commands:  #  #   asdf local  python 3.8.1  #   asdf global python 3.8.1  #  # After running both commands the current python version is 3.8.1 and its source is "local" as  # it takes precedence over "global". If POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW is set to false,  # it'll hide python version in this case because 3.8.1 is the same as the global version.  # POWERLEVEL9K_ASDF_SOURCES will hide python version only if the value of this parameter doesn't  # contain "local".  # Hide tool versions that don't come from one of these sources.  #  # Available sources:  #  # - shell   `asdf current` says "set by ASDF_${TOOL}_VERSION environment variable"  # - local   `asdf current` says "set by /some/not/home/directory/file"  # - global  `asdf current` says "set by /home/username/file"  #  # Note: If this parameter is set to (shell local global), it won't hide tools.  # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SOURCES.  typeset -g POWERLEVEL9K_ASDF_SOURCES=(shell local global)  # If set to false, hide tool versions that are the same as global.  #  # Note: The name of this parameter doesn't reflect its meaning at all.  # Note: If this parameter is set to true, it won't hide tools.  # Tip:  Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_PROMPT_ALWAYS_SHOW.  typeset -g POWERLEVEL9K_ASDF_PROMPT_ALWAYS_SHOW=false  # If set to false, hide tool versions that are equal to "system".  #  # Note: If this parameter is set to true, it won't hide tools.  # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_SYSTEM.  typeset -g POWERLEVEL9K_ASDF_SHOW_SYSTEM=true  # If set to non-empty value, hide tools unless there is a file matching the specified file pattern  # in the current directory, or its parent diretory, or its grandparent directory, and so on.  #  # Note: If this parameter is set to empty value, it won't hide tools.  # Note: SHOW_ON_UPGLOB isn't specific to asdf. It works with all prompt segments.  # Tip: Override this parameter for ${TOOL} with POWERLEVEL9K_ASDF_${TOOL}_SHOW_ON_UPGLOB.  #  # Example: Hide nodejs version when there is no package.json and no *.js files in the current  # directory, in `..`, in `../..` and so on.  #  #   typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.js|package.json'  typeset -g POWERLEVEL9K_ASDF_SHOW_ON_UPGLOB=  # Ruby version from asdf.  typeset -g POWERLEVEL9K_ASDF_RUBY_FOREGROUND=168  # typeset -g POWERLEVEL9K_ASDF_RUBY_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_RUBY_SHOW_ON_UPGLOB='*.foo|*.bar'  # Python version from asdf.  typeset -g POWERLEVEL9K_ASDF_PYTHON_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_PYTHON_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PYTHON_SHOW_ON_UPGLOB='*.foo|*.bar'  # Go version from asdf.  typeset -g POWERLEVEL9K_ASDF_GO_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_GO_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_GO_SHOW_ON_UPGLOB='*.foo|*.bar'  # Node.js version from asdf.  typeset -g POWERLEVEL9K_ASDF_NODEJS_FOREGROUND=70  # typeset -g POWERLEVEL9K_ASDF_NODEJS_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_NODEJS_SHOW_ON_UPGLOB='*.foo|*.bar'  # Rust version from asdf.  typeset -g POWERLEVEL9K_ASDF_RUST_FOREGROUND=37  # typeset -g POWERLEVEL9K_ASDF_RUST_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_RUST_SHOW_ON_UPGLOB='*.foo|*.bar'  # .NET Core version from asdf.  typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_FOREGROUND=134  # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_DOTNET_CORE_SHOW_ON_UPGLOB='*.foo|*.bar'  # Flutter version from asdf.  typeset -g POWERLEVEL9K_ASDF_FLUTTER_FOREGROUND=38  # typeset -g POWERLEVEL9K_ASDF_FLUTTER_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_FLUTTER_SHOW_ON_UPGLOB='*.foo|*.bar'  # Lua version from asdf.  typeset -g POWERLEVEL9K_ASDF_LUA_FOREGROUND=32  # typeset -g POWERLEVEL9K_ASDF_LUA_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_LUA_SHOW_ON_UPGLOB='*.foo|*.bar'  # Java version from asdf.  typeset -g POWERLEVEL9K_ASDF_JAVA_FOREGROUND=32  # typeset -g POWERLEVEL9K_ASDF_JAVA_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_JAVA_SHOW_ON_UPGLOB='*.foo|*.bar'  # Perl version from asdf.  typeset -g POWERLEVEL9K_ASDF_PERL_FOREGROUND=67  # typeset -g POWERLEVEL9K_ASDF_PERL_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PERL_SHOW_ON_UPGLOB='*.foo|*.bar'  # Erlang version from asdf.  typeset -g POWERLEVEL9K_ASDF_ERLANG_FOREGROUND=125  # typeset -g POWERLEVEL9K_ASDF_ERLANG_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_ERLANG_SHOW_ON_UPGLOB='*.foo|*.bar'  # Elixir version from asdf.  typeset -g POWERLEVEL9K_ASDF_ELIXIR_FOREGROUND=129  # typeset -g POWERLEVEL9K_ASDF_ELIXIR_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_ELIXIR_SHOW_ON_UPGLOB='*.foo|*.bar'  # Postgres version from asdf.  typeset -g POWERLEVEL9K_ASDF_POSTGRES_FOREGROUND=31  # typeset -g POWERLEVEL9K_ASDF_POSTGRES_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_POSTGRES_SHOW_ON_UPGLOB='*.foo|*.bar'  # PHP version from asdf.  typeset -g POWERLEVEL9K_ASDF_PHP_FOREGROUND=99  # typeset -g POWERLEVEL9K_ASDF_PHP_VISUAL_IDENTIFIER_EXPANSION='⭐'  # typeset -g POWERLEVEL9K_ASDF_PHP_SHOW_ON_UPGLOB='*.foo|*.bar'  ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########  # NordVPN connection indicator color.  typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=39  # Hide NordVPN connection indicator when not connected.  typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=  typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'  #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################  # Ranger shell color.  typeset -g POWERLEVEL9K_RANGER_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################[ nnn: nnn shell (https://github.com/jarun/nnn) ]#######################  # Nnn shell color.  typeset -g POWERLEVEL9K_NNN_FOREGROUND=72  # Custom icon.  # typeset -g POWERLEVEL9K_NNN_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########################[ vim_shell: vim shell indicator (:sh) ]###########################  # Vim shell indicator color.  typeset -g POWERLEVEL9K_VIM_SHELL_FOREGROUND=34  # Custom icon.  # typeset -g POWERLEVEL9K_VIM_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######[ midnight_commander: midnight commander shell (https://midnight-commander.org/) ]######  # Midnight Commander shell color.  typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_FOREGROUND=178  # Custom icon.  # typeset -g POWERLEVEL9K_MIDNIGHT_COMMANDER_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ nix_shell: nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html) ]##  # Nix shell color.  typeset -g POWERLEVEL9K_NIX_SHELL_FOREGROUND=74  # Tip: If you want to see just the icon without "pure" and "impure", uncomment the next line.  # typeset -g POWERLEVEL9K_NIX_SHELL_CONTENT_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_NIX_SHELL_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##################################[ disk_usgae: disk usage ]##################################  # Colors for different levels of disk usage.  typeset -g POWERLEVEL9K_DISK_USAGE_NORMAL_FOREGROUND=35  typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_FOREGROUND=220  typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_FOREGROUND=160  # Thresholds for different levels of disk usage (percentage points).  typeset -g POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL=90  typeset -g POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL=95  # If set to true, hide disk usage when below $POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL percent.  typeset -g POWERLEVEL9K_DISK_USAGE_ONLY_WARNING=false  # Custom icon.  # typeset -g POWERLEVEL9K_DISK_USAGE_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ vi_mode: vi mode (you don't need this if you've enabled prompt_char) ]###########  # Text and color for normal (a.k.a. command) vi mode.  typeset -g POWERLEVEL9K_VI_COMMAND_MODE_STRING=NORMAL  typeset -g POWERLEVEL9K_VI_MODE_NORMAL_FOREGROUND=106  # Text and color for visual vi mode.  typeset -g POWERLEVEL9K_VI_VISUAL_MODE_STRING=VISUAL  typeset -g POWERLEVEL9K_VI_MODE_VISUAL_FOREGROUND=68  # Text and color for overtype (a.k.a. overwrite and replace) vi mode.  typeset -g POWERLEVEL9K_VI_OVERWRITE_MODE_STRING=OVERTYPE  typeset -g POWERLEVEL9K_VI_MODE_OVERWRITE_FOREGROUND=172  # Text and color for insert vi mode.  typeset -g POWERLEVEL9K_VI_INSERT_MODE_STRING=  typeset -g POWERLEVEL9K_VI_MODE_INSERT_FOREGROUND=66  # Custom icon.  # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################################[ ram: free RAM ]#######################################  # RAM color.  typeset -g POWERLEVEL9K_RAM_FOREGROUND=66  # Custom icon.  # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################################[ swap: used swap ]######################################  # Swap color.  typeset -g POWERLEVEL9K_SWAP_FOREGROUND=96  # Custom icon.  # typeset -g POWERLEVEL9K_SWAP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ######################################[ load: CPU load ]######################################  # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.  typeset -g POWERLEVEL9K_LOAD_WHICH=5  # Load color when load is under 50%.  typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=66  # Load color when load is between 50% and 70%.  typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=178  # Load color when load is over 70%.  typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=166  # Custom icon.  # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ todo: todo items (https://github.com/todotxt/todo.txt-cli) ]################  # Todo color.  typeset -g POWERLEVEL9K_TODO_FOREGROUND=110  # Hide todo when the total number of tasks is zero.  typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_TOTAL=true  # Hide todo when the number of tasks after filtering is zero.  typeset -g POWERLEVEL9K_TODO_HIDE_ZERO_FILTERED=false  # Todo format. The following parameters are available within the expansion.  #  # - P9K_TODO_TOTAL_TASK_COUNT     The total number of tasks.  # - P9K_TODO_FILTERED_TASK_COUNT  The number of tasks after filtering.  #  # These variables correspond to the last line of the output of `todo.sh -p ls`:  #  #   TODO: 24 of 42 tasks shown  #  # Here 24 is P9K_TODO_FILTERED_TASK_COUNT and 42 is P9K_TODO_TOTAL_TASK_COUNT.  #  # typeset -g POWERLEVEL9K_TODO_CONTENT_EXPANSION='$P9K_TODO_FILTERED_TASK_COUNT'  # Custom icon.  # typeset -g POWERLEVEL9K_TODO_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ timewarrior: timewarrior tracking status (https://timewarrior.net/) ]############  # Timewarrior color.  typeset -g POWERLEVEL9K_TIMEWARRIOR_FOREGROUND=110  # If the tracked task is longer than 24 characters, truncate and append "…".  # Tip: To always display tasks without truncation, delete the following parameter.  # Tip: To hide task names and display just the icon when time tracking is enabled, set the  # value of the following parameter to "".  typeset -g POWERLEVEL9K_TIMEWARRIOR_CONTENT_EXPANSION='${P9K_CONTENT:0:24}${${P9K_CONTENT:24}:+…}'  # Custom icon.  # typeset -g POWERLEVEL9K_TIMEWARRIOR_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##################################[ context: user@hostname ]##################################  # Context color when running with privileges.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178  # Context color in SSH without privileges.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_FOREGROUND=180  # Default context color (no privileges, no SSH).  typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180  # Context format when running with privileges: bold user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'  # Context format when in SSH without privileges: user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_{REMOTE,REMOTE_SUDO}_TEMPLATE='%n@%m'  # Default context format (no privileges, no SSH): user@hostname.  typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'  # Don't show context unless running with privileges or in SSH.  # Tip: Remove the next line to always show context.  #typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=  # Custom icon.  # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%246Fwith '  ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###  # Python virtual environment color.  typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=37  # Don't show Python version next to the virtual environment name.  typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false  # Separate environment name from Python version only with a space.  typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################[ anaconda: conda environment (https://conda.io/) ]######################  # Anaconda environment color.  typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=37  # Don't show Python version next to the anaconda environment name.  typeset -g POWERLEVEL9K_ANACONDA_SHOW_PYTHON_VERSION=false  # Separate environment name from Python version only with a space.  typeset -g POWERLEVEL9K_ANACONDA_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################  # Pyenv color.  typeset -g POWERLEVEL9K_PYENV_FOREGROUND=37  # Hide python version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PYENV_SOURCES=(shell local global)  # If set to false, hide python version if it's the same as global:  # $(pyenv version-name) == $(pyenv global).  typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ goenv: go environment (https://github.com/syndbg/goenv) ]################  # Goenv color.  typeset -g POWERLEVEL9K_GOENV_FOREGROUND=37  # Hide go version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_GOENV_SOURCES=(shell local global)  # If set to false, hide go version if it's the same as global:  # $(goenv version-name) == $(goenv global).  typeset -g POWERLEVEL9K_GOENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_GOENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########  # Nodenv color.  typeset -g POWERLEVEL9K_NODENV_FOREGROUND=70  # Don't show node version if it's the same as global: $(nodenv version-name) == $(nodenv global).  typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############  # Nvm color.  typeset -g POWERLEVEL9K_NVM_FOREGROUND=70  # Custom icon.  # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############  # Nodeenv color.  typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=70  # Don't show Node version next to the environment name.  typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false  # Separate environment name from Node version only with a space.  typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=  # Custom icon.  # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##############################[ node_version: node.js version ]###############################  # Node version color.  typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=70  # Show node version only when in a directory tree containing package.json.  typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ go_version: go version (https://golang.org) ]########################  # Go version color.  typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=37  # Show go version only when in a go project subdirectory.  typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################  # Rust version color.  typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=37  # Show rust version only when in a rust project subdirectory.  typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################  # .NET version color.  typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=134  # Show .NET version only when in a .NET project subdirectory.  typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #####################[ php_version: php version (https://www.php.net/) ]######################  # PHP version color.  typeset -g POWERLEVEL9K_PHP_VERSION_FOREGROUND=99  # Show PHP version only when in a PHP project subdirectory.  typeset -g POWERLEVEL9K_PHP_VERSION_PROJECT_ONLY=true  # Custom icon.  # typeset -g POWERLEVEL9K_PHP_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ laravel_version: laravel php framework version (https://laravel.com/) ]###########  # Laravel version color.  typeset -g POWERLEVEL9K_LARAVEL_VERSION_FOREGROUND=161  # Custom icon.  # typeset -g POWERLEVEL9K_LARAVEL_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'  #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############  # Rbenv color.  typeset -g POWERLEVEL9K_RBENV_FOREGROUND=168  # Hide ruby version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_RBENV_SOURCES=(shell local global)  # If set to false, hide ruby version if it's the same as global:  # $(rbenv version-name) == $(rbenv global).  typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################  # Rvm color.  typeset -g POWERLEVEL9K_RVM_FOREGROUND=168  # Don't show @gemset at the end.  typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false  # Don't show ruby- at the front.  typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false  # Custom icon.  # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ fvm: flutter version management (https://github.com/leoafarias/fvm) ]############  # Fvm color.  typeset -g POWERLEVEL9K_FVM_FOREGROUND=38  # Custom icon.  # typeset -g POWERLEVEL9K_FVM_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ luaenv: lua version from luaenv (https://github.com/cehoffman/luaenv) ]###########  # Lua color.  typeset -g POWERLEVEL9K_LUAENV_FOREGROUND=32  # Hide lua version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_LUAENV_SOURCES=(shell local global)  # If set to false, hide lua version if it's the same as global:  # $(luaenv version-name) == $(luaenv global).  typeset -g POWERLEVEL9K_LUAENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_LUAENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###############[ jenv: java version from jenv (https://github.com/jenv/jenv) ]################  # Java color.  typeset -g POWERLEVEL9K_JENV_FOREGROUND=32  # Hide java version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_JENV_SOURCES=(shell local global)  # If set to false, hide java version if it's the same as global:  # $(jenv version-name) == $(jenv global).  typeset -g POWERLEVEL9K_JENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_JENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ plenv: perl version from plenv (https://github.com/tokuhirom/plenv) ]############  # Perl color.  typeset -g POWERLEVEL9K_PLENV_FOREGROUND=67  # Hide perl version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PLENV_SOURCES=(shell local global)  # If set to false, hide perl version if it's the same as global:  # $(plenv version-name) == $(plenv global).  typeset -g POWERLEVEL9K_PLENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PLENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ############[ phpenv: php version from phpenv (https://github.com/phpenv/phpenv) ]############  # PHP color.  typeset -g POWERLEVEL9K_PHPENV_FOREGROUND=99  # Hide php version if it doesn't come from one of these sources.  typeset -g POWERLEVEL9K_PHPENV_SOURCES=(shell local global)  # If set to false, hide php version if it's the same as global:  # $(phpenv version-name) == $(phpenv global).  typeset -g POWERLEVEL9K_PHPENV_PROMPT_ALWAYS_SHOW=false  # Custom icon.  # typeset -g POWERLEVEL9K_PHPENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################[ terraform: terraform workspace (https://www.terraform.io) ]#################  # POWERLEVEL9K_TERRAFORM_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current terraform workspace gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_TERRAFORM_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_TERRAFORM_CLASSES defines the workspace class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current terraform workspace is "project_test", its class is TEST because "project_test"  # doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_TERRAFORM_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'  typeset -g POWERLEVEL9K_TERRAFORM_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_FOREGROUND=38  # typeset -g POWERLEVEL9K_TERRAFORM_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############  # Show kubecontext only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show kubecontext.  typeset -g POWERLEVEL9K_KUBECONTEXT_SHOW_ON_COMMAND='kubectl|helm|kubens|kubectx|oc'  # Kubernetes context classes for the purpose of using different colors, icons and expansions with  # different contexts.  #  # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current kubernetes context gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current kubernetes context is "deathray-testing/default", its class is TEST  # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'  typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134  # typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext  # segment. Parameter expansions are very flexible and fast, too. See reference:  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.  #  # Within the expansion the following parameters are always available:  #  # - P9K_CONTENT                The content that would've been displayed if there was no content  #                              expansion defined.  # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the  #                              output of `kubectl config get-contexts`.  # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the  #                              output of `kubectl config get-contexts`.  # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE  #                              in the output of `kubectl config get-contexts`. If there is no  #                              namespace, the parameter is set to "default".  # - P9K_KUBECONTEXT_USER       The current context's user. Corresponds to column AUTHINFO in the  #                              output of `kubectl config get-contexts`.  #  # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),  # the following extra parameters are available:  #  # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".  # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.  # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.  # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.  #  # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,  # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":  #  #   - P9K_KUBECONTEXT_CLOUD_NAME=gke  #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account  #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a  #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01  #  # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":  #  #   - P9K_KUBECONTEXT_CLOUD_NAME=eks  #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012  #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1  #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01  typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=  # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'  # Append the current context's namespace if it's not "default".  POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'  # Custom prefix.  # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%246Fat '  #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#  # Show aws only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show aws.  typeset -g POWERLEVEL9K_AWS_SHOW_ON_COMMAND='aws|awless|terraform|pulumi'  # POWERLEVEL9K_AWS_CLASSES is an array with even number of elements. The first element  # in each pair defines a pattern against which the current AWS profile gets matched.  # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)  # that gets matched. If you unset all POWERLEVEL9K_AWS_*CONTENT_EXPANSION parameters,  # you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_AWS_CLASSES defines the profile class. Patterns are tried in order. The  # first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_AWS_CLASSES=(  #     '*prod*'  PROD  #     '*test*'  TEST  #     '*'       DEFAULT)  #  # If your current AWS profile is "company_test", its class is TEST  # because "company_test" doesn't match the pattern '*prod*' but does match '*test*'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_AWS_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_AWS_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_AWS_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'  typeset -g POWERLEVEL9K_AWS_CLASSES=(      # '*prod*'  PROD    # These values are examples that are unlikely      # '*test*'  TEST    # to match your needs. Customize them as needed.      '*'       DEFAULT)  typeset -g POWERLEVEL9K_AWS_DEFAULT_FOREGROUND=208  # typeset -g POWERLEVEL9K_AWS_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#  # AWS Elastic Beanstalk environment color.  typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=70  # Custom icon.  # typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########  # Show azure only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show azure.  typeset -g POWERLEVEL9K_AZURE_SHOW_ON_COMMAND='az|terraform|pulumi'  # Azure account name color.  typeset -g POWERLEVEL9K_AZURE_FOREGROUND=32  # Custom icon.  # typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='⭐'  ##########[ gcloud: google cloud account and project (https://cloud.google.com/) ]###########  # Show gcloud only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show gcloud.  typeset -g POWERLEVEL9K_GCLOUD_SHOW_ON_COMMAND='gcloud|gcs'   # Google cloud color.  typeset -g POWERLEVEL9K_GCLOUD_FOREGROUND=32  # Google cloud format. Change the value of POWERLEVEL9K_GCLOUD_CONTENT_EXPANSION if the default  # is too verbose or not informative enough.  #  #   P9K_GCLOUD_ACCOUNT: the output of `gcloud config get-value account`  #   P9K_GCLOUD_PROJECT: the output of `gcloud config get-value project`  #   ${VARIABLE//\%/%%}: ${VARIABLE} with all occurences of '%' replaced with '%%'.  #  typeset -g POWERLEVEL9K_GCLOUD_CONTENT_EXPANSION='${P9K_GCLOUD_PROJECT//\%/%%}'  # Custom icon.  # typeset -g POWERLEVEL9K_GCLOUD_VISUAL_IDENTIFIER_EXPANSION='⭐'  #[ google_app_cred: google application credentials (https://cloud.google.com/docs/authentication/production) ]#  # Show google_app_cred only when the the command you are typing invokes one of these tools.  # Tip: Remove the next line to always show google_app_cred.  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_SHOW_ON_COMMAND='terraform|pulumi'  # Google application credentials classes for the purpose of using different colors, icons and  # expansions with different credentials.  #  # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES is an array with even number of elements. The first  # element in each pair defines a pattern against which the current kubernetes context gets  # matched. More specifically, it's P9K_CONTENT prior to the application of context expansion  # (see below) that gets matched. If you unset all POWERLEVEL9K_GOOGLE_APP_CRED_*CONTENT_EXPANSION  # parameters, you'll see this value in your prompt. The second element of each pair in  # POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES defines the context class. Patterns are tried in order.  # The first match wins.  #  # For example, given these settings:  #  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(  #     '*:*prod*:*'  PROD  #     '*:*test*:*'  TEST  #     '*'           DEFAULT)  #  # If your current Google application credentials is "service_account deathray-testing x@y.com",  # its class is TEST because it doesn't match the pattern '* *prod* *' but does match '* *test* *'.  #  # You can define different colors, icons and content expansions for different classes:  #  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_FOREGROUND=28  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'  #   typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_TEST_CONTENT_EXPANSION='$P9K_GOOGLE_APP_CRED_PROJECT_ID'  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_CLASSES=(      # '*:*prod*:*'  PROD    # These values are examples that are unlikely      # '*:*test*:*'  TEST    # to match your needs. Customize them as needed.      '*'             DEFAULT)  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_FOREGROUND=32  # typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use POWERLEVEL9K_GOOGLE_APP_CRED_CONTENT_EXPANSION to specify the content displayed by  # google_app_cred segment. Parameter expansions are very flexible and fast, too. See reference:  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.  #  # You can use the following parameters in the expansion. Each of them corresponds to one of the  # fields in the JSON file pointed to by GOOGLE_APPLICATION_CREDENTIALS.  #  #   Parameter                        | JSON key file field  #   ---------------------------------+---------------  #   P9K_GOOGLE_APP_CRED_TYPE         | type  #   P9K_GOOGLE_APP_CRED_PROJECT_ID   | project_id  #   P9K_GOOGLE_APP_CRED_CLIENT_EMAIL | client_email  #  # Note: ${VARIABLE//\%/%%} expands to ${VARIABLE} with all occurences of '%' replaced by '%%'.  typeset -g POWERLEVEL9K_GOOGLE_APP_CRED_DEFAULT_CONTENT_EXPANSION='${P9K_GOOGLE_APP_CRED_PROJECT_ID//\%/%%}'  ###############################[ public_ip: public IP address ]###############################  # Public IP color.  typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=94  # Custom icon.  # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ########################[ vpn_ip: virtual private network indicator ]#########################  # VPN IP color.  typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=81  # When on VPN, show just an icon without the IP address.  # Tip: To display the private IP address when on VPN, remove the next line.  typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=  # Regular expression for the VPN network interface. Run `ifconfig` or `ip -4 a show` while on VPN  # to see the name of the interface.  typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'  # Custom icon.  # typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  ###########[ ip: ip address and bandwidth usage for a specified network interface ]###########  # IP color.  typeset -g POWERLEVEL9K_IP_FOREGROUND=38  # The following parameters are accessible within the expansion:  #  #   Parameter             | Meaning  #   ----------------------+---------------  #   P9K_IP_IP         | IP address  #   P9K_IP_INTERFACE  | network interface  #   P9K_IP_RX_BYTES   | total number of bytes received  #   P9K_IP_TX_BYTES   | total number of bytes sent  #   P9K_IP_RX_RATE    | receive rate (since last prompt)  #   P9K_IP_TX_RATE    | send rate (since last prompt)  typeset -g POWERLEVEL9K_IP_CONTENT_EXPANSION='%70F⇣$P9K_IP_RX_RATE %215F⇡$P9K_IP_TX_RATE %38F$P9K_IP_IP'  # Show information for the first network interface whose name matches this regular expression.  # Run `ifconfig` or `ip -4 a show` to see the names of all network interfaces.  typeset -g POWERLEVEL9K_IP_INTERFACE='wlp2s0*'  # Custom icon.  # typeset -g POWERLEVEL9K_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'  #########################[ proxy: system-wide http/https/ftp proxy ]##########################  # Proxy color.  typeset -g POWERLEVEL9K_PROXY_FOREGROUND=68  # Custom icon.  # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'  ################################[ battery: internal battery ]#################################  # Show battery in red when it's below this level and not connected to power supply.  typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20  typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=160  # Show battery in green when it's charging or fully charged.  typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=70  # Show battery in yellow when it's discharging.  typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=178  # Battery pictograms going from low to high level of charge.  typeset -g POWERLEVEL9K_BATTERY_STAGES='\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'  # Don't show the remaining time to charge/discharge.  typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false  #####################################[ wifi: wifi speed ]#####################################  # WiFi color.  typeset -g POWERLEVEL9K_WIFI_FOREGROUND=68  # Custom icon.  # typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Use different colors and icons depending on signal strength ($P9K_WIFI_BARS).  #  #   # Wifi colors and icons for different signal strength levels (low to high).  #   typeset -g my_wifi_fg=(68 68 68 68 68)                           # <-- change these values  #   typeset -g my_wifi_icon=('WiFi' 'WiFi' 'WiFi' 'WiFi' 'WiFi')     # <-- change these values  #  #   typeset -g POWERLEVEL9K_WIFI_CONTENT_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}$P9K_WIFI_LAST_TX_RATE Mbps'  #   typeset -g POWERLEVEL9K_WIFI_VISUAL_IDENTIFIER_EXPANSION='%F{${my_wifi_fg[P9K_WIFI_BARS+1]}}${my_wifi_icon[P9K_WIFI_BARS+1]}'  #  # The following parameters are accessible within the expansions:  #  #   Parameter             | Meaning  #   ----------------------+---------------  #   P9K_WIFI_SSID         | service set identifier, a.k.a. network name  #   P9K_WIFI_LINK_AUTH    | authentication protocol such as "wpa2-psk" or "none"  #   P9K_WIFI_LAST_TX_RATE | wireless transmit rate in megabits per second  #   P9K_WIFI_RSSI         | signal strength in dBm, from -120 to 0  #   P9K_WIFI_NOISE        | noise in dBm, from -120 to 0  #   P9K_WIFI_BARS         | signal strength in bars, from 0 to 4 (derived from P9K_WIFI_RSSI and P9K_WIFI_NOISE)  #  # All parameters except P9K_WIFI_BARS are extracted from the output of the following command:  #  #   /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I  ####################################[ time: current time ]####################################  # Current time color.  typeset -g POWERLEVEL9K_TIME_FOREGROUND=66  # Format for the current time: 09:51:02. See `man 3 strftime`.  typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'  # If set to true, time will update when you hit enter. This way prompts for the past  # commands will contain the start times of their commands as opposed to the default  # behavior where they contain the end times of their preceding commands.  typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false  # Custom icon.  # typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Custom prefix.  # typeset -g POWERLEVEL9K_TIME_PREFIX='%246Fat '  # Example of a user-defined prompt segment. Function prompt_example will be called on every  # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or  # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.  #  # Type `p10k help segment` for documentation and a more sophisticated example.  function prompt_example() {    p10k segment -f 208 -i '⭐' -t 'hello, %n'  }  function prompt_Greeting() {    local hour=`date "+%H"`    local name=",king"    if [ $hour -lt 12 -a $hour -gt 4  ]    then         local str="Morning"    elif [ $hour -eq 12 ]    then        local str="Noon"    elif [ $hour -gt 12 -a $hour -lt 19 ]                                                                                then        local str="Afternoon"    else        local str="Evening"    fi    p10k segment -f 208 -i '㋡' -t $str$name   }  function prompt_my_weather() {    ping -c1 114.114.114.114 &> /dev/null    if [ $? -eq 0 ]    then        local weatherDay=`date "+%j"`        local weatherHour=`date "+%H"`        local weatherPath="/tmp/"        local weatherName="my_weather"        local weatherFileType=".txt"        local weatherFile=$weatherPath$weatherName$weatherDay$weatherHour$weatherFileType        if [ ! -e $weatherFile -o ! -s $weatherFile ]        then            touch "$weatherFile"            local weather=`curl -s "wttr.in/?format=3 "`            echo $weather > $weatherFile        else            local weather=$(cat $weatherFile)        fi    else        local weather="无网络"    fi    p10k segment -f '#ffb44b' -t $weather }  # User-defined prompt segments may optionally provide an instant_prompt_* function. Its job  # is to generate the prompt segment for display in instant prompt. See  # https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.  #  # Powerlevel10k will call instant_prompt_* at the same time as the regular prompt_* function  # and will record all `p10k segment` calls it makes. When displaying instant prompt, Powerlevel10k  # will replay these calls without actually calling instant_prompt_*. It is imperative that  # instant_prompt_* always makes the same `p10k segment` calls regardless of environment. If this  # rule is not observed, the content of instant prompt will be incorrect.  #  # Usually, you should either not define instant_prompt_* or simply call prompt_* from it. If  # instant_prompt_* is not defined for a segment, the segment won't be shown in instant prompt.  function instant_prompt_example() {    # Since prompt_example always makes the same `p10k segment` calls, we can call it from    # instant_prompt_example. This will give us the same `example` prompt segment in the instant    # and regular prompts.    prompt_example  }  # User-defined prompt segments can be customized the same way as built-in segments.  # typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208  # typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='⭐'  # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt  # when accepting a command line. Supported values:  #  #   - off:      Don't change prompt when accepting a command line.  #   - always:   Trim down prompt when accepting a command line.  #   - same-dir: Trim down prompt when accepting a command line unless this is the first command  #               typed after changing current working directory.  typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=off  # Instant prompt mode.  #  #   - off:     Disable instant prompt. Choose this if you've tried instant prompt and found  #              it incompatible with your zsh configuration files.  #   - quiet:   Enable instant prompt and don't print warnings when detecting console output  #              during zsh initialization. Choose this if you've read and understood  #              https://github.com/romkatv/powerlevel10k/blob/master/README.md#instant-prompt.  #   - verbose: Enable instant prompt and print a warning when detecting console output during  #              zsh initialization. Choose this if you've never tried instant prompt, haven't  #              seen the warning, or if you are unsure what this all means.  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet  # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.  # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload  # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you  # really need it.  typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true  # If p10k is already loaded, reload configuration.  # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.  (( ! $+functions[p10k] )) || p10k reload}(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}'builtin' 'unset' 'p10k_config_opts'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="终端音乐"><a href="#终端音乐" class="headerlink" title="终端音乐"></a>终端音乐</h5><p>推荐使用<code>ncmpcpp</code>作为前端，<code>mpd</code>作为后端，<code>mpc</code>作为控制端。</p><h6 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a><del>全局配置</del></h6><p>打开mpd的配置文件<code>/etc/mpd.conf</code></p><p>添加音乐目录</p><p>​    将<code>/etc/mpd.conf</code>中添加字段<code>music_directory "/path/to/music"</code>。这里的路径就是音乐存放的绝对路径。</p><pre class="line-numbers language-shell"><code class="language-shell"># gpasswd -a mpd <your login group>$ chmod 710 /home/<your home dir>gpasswd -a mpd audio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="单用户配置"><a href="#单用户配置" class="headerlink" title="单用户配置"></a>单用户配置</h6><pre class="line-numbers language-shell"><code class="language-shell">$ cp /usr/share/doc/mpd/mpdconf.example ~/.config/mpd/mpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>~/.config/mpd/mpd.conf</code> 并且指定所需文件：</p><pre class="line-numbers language-shell"><code class="language-shell"># Required filesdb_file            "~/.config/mpd/database"log_file           "~/.config/mpd/log"# Optionalmusic_directory    "~/Music"playlist_directory "~/.config/mpd/playlists"pid_file           "~/.config/mpd/pid"state_file         "~/.config/mpd/state"sticker_file       "~/.config/mpd/sticker.sql"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建所有上述配置中提及的文件和目录：</p><pre class="line-numbers language-shell"><code class="language-shell">$ mkdir ~/.config/mpd/playlists$ touch ~/.config/mpd/{database,log,pid,state,sticker.sql}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加如下</p><pre class="line-numbers language-shell"><code class="language-shell">audio_output {    type        "alsa"    name        "My ALSA Device"    device      "hw:0,0"    # optional    mixer_type      "hardware"  # optional    mixer_device    "default"   # optional    mixer_control   "Master"        # optional    mixer_index "0"     # optional}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的mixer控制mpd的音量调节。如果不知使用哪一个mixer,可以用<code>amixer</code>进行查看。</p><p>ncmpcpp实现可视化需要如下字段：</p><pre class="line-numbers language-shell"><code class="language-shell">audio_output {    type                    "fifo"    name                    "my_fifo"    path                    "/tmp/mpd.fifo"    format                  "44100:16:2"}     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建ncmpcpp的配置文件<code>~/.ncmpcpp/config</code>。从<code>/usr/share/doc/ncmpcpp/config</code>复制过来。</p><p>创建ncmpcpp的自定义按键的配置文件<code>~/.ncmpcpp/bindings</code>。从<code>/usr/share/doc/ncmpcpp/bindings </code>复制过来。</p><hr><h5 id="Ranger"><a href="#Ranger" class="headerlink" title="Ranger"></a>Ranger</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S ranger  #或者pip install ranger-fm --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><h6 id="开启自定义选项"><a href="#开启自定义选项" class="headerlink" title="开启自定义选项"></a>开启自定义选项</h6><pre class="line-numbers language-shell"><code class="language-shell">ranger --copy-config=all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在环境变量中添加<code>export RANGER_LOAD_DEFAULT_RC=FALSE </code></p><h6 id="设置文件图标"><a href="#设置文件图标" class="headerlink" title="设置文件图标"></a>设置文件图标</h6><p>首先安装nerd-font,详见下面的字体配置。</p><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加<code>default_linemode devicons</code> 到 <code>rc.conf</code>。即执行<code>echo "default_linemode devicons" &gt;&gt; $HOME/.config/ranger/rc.conf</code></p><p><del>若是不行，就在这个插件的文件夹下面<code>make install</code>。</del></p><h6 id="开启图片预览"><a href="#开启图片预览" class="headerlink" title="开启图片预览"></a>开启图片预览</h6><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S w3m #提供显示图像的组件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>rc.conf</code>中添加：</p><pre class="line-numbers language-shell"><code class="language-shell">set preview_images true # Be aware of version control systems and display information.将这里改成true,可以显示github目录的状态set vcs_aware true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看图片：</p><p><code>sudo pacman -S w3m</code></p><p>编辑配置文件<code>~/.config/ranger/rc.conf</code></p><pre class="line-numbers language-shell"><code class="language-shell"># Use one of the supported image preview protocolsset preview_images true set preview_images_method w3m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>～/.config/ranger/scope.sh</code>中，将相关格式代码的注释取消。</p><p>视频预览需要安装ffmpegthumbnailer。</p><p>docx预览需要安装pandoc。</p><h6 id="设置自定义的命令（压缩，mkcd，解压，fzf）"><a href="#设置自定义的命令（压缩，mkcd，解压，fzf）" class="headerlink" title="设置自定义的命令（压缩，mkcd，解压，fzf）"></a>设置自定义的命令（压缩，mkcd，解压，fzf）</h6><p>在<code>commands.py</code>文件中添加如下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> ranger<span class="token punctuation">.</span>core<span class="token punctuation">.</span>loader <span class="token keyword">import</span> CommandLoader<span class="token keyword">class</span> <span class="token class-name">mkcd</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :mkcd &lt;dirname>    Creates a directory with the name &lt;dirname> and enters it.    """</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> join<span class="token punctuation">,</span> expanduser<span class="token punctuation">,</span> lexists        <span class="token keyword">from</span> os <span class="token keyword">import</span> makedirs        <span class="token keyword">import</span> re        dirname <span class="token operator">=</span> join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>path<span class="token punctuation">,</span> expanduser<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> lexists<span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>            makedirs<span class="token punctuation">(</span>dirname<span class="token punctuation">)</span>            match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'^/|^~[^/]*/'</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span>            <span class="token keyword">if</span> match<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span>match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                dirname <span class="token operator">=</span> dirname<span class="token punctuation">[</span>match<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">'[^/]+'</span><span class="token punctuation">,</span> dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">'..'</span> <span class="token operator">or</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>settings<span class="token punctuation">[</span><span class="token string">'show_hidden'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">## We force ranger to load content before calling `scout`.</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span>schedule<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>execute_console<span class="token punctuation">(</span><span class="token string">'scout -ae ^{}$'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token string">"file/directory exists!"</span><span class="token punctuation">,</span> bad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">fzf_select</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    记得安装一下fzf:sudo pacman -S fzf    :fzf_select    Find a file using fzf.    With a prefix argument select only directories.    See: https://github.com/junegunn/fzf    """</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> subprocess        <span class="token keyword">import</span> os<span class="token punctuation">.</span>path        <span class="token keyword">if</span> self<span class="token punctuation">.</span>quantifier<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># match only directories</span>            command<span class="token operator">=</span>"find <span class="token operator">-</span>L <span class="token punctuation">.</span> \<span class="token punctuation">(</span> <span class="token operator">-</span>path <span class="token string">'*/\.*'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'dev'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'proc'</span> \<span class="token punctuation">)</span> <span class="token operator">-</span>prune \            <span class="token operator">-</span>o <span class="token operator">-</span>type d <span class="token operator">-</span><span class="token keyword">print</span> <span class="token number">2</span><span class="token operator">></span> <span class="token operator">/</span>dev<span class="token operator">/</span>null <span class="token operator">|</span> sed <span class="token number">1d</span> <span class="token operator">|</span> cut <span class="token operator">-</span>b3<span class="token operator">-</span> <span class="token operator">|</span> fzf <span class="token operator">+</span>m"        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># match files and directories</span>            command<span class="token operator">=</span>"find <span class="token operator">-</span>L <span class="token punctuation">.</span> \<span class="token punctuation">(</span> <span class="token operator">-</span>path <span class="token string">'*/\.*'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'dev'</span> <span class="token operator">-</span>o <span class="token operator">-</span>fstype <span class="token string">'proc'</span> \<span class="token punctuation">)</span> <span class="token operator">-</span>prune \            <span class="token operator">-</span>o <span class="token operator">-</span><span class="token keyword">print</span> <span class="token number">2</span><span class="token operator">></span> <span class="token operator">/</span>dev<span class="token operator">/</span>null <span class="token operator">|</span> sed <span class="token number">1d</span> <span class="token operator">|</span> cut <span class="token operator">-</span>b3<span class="token operator">-</span> <span class="token operator">|</span> fzf <span class="token operator">+</span>m"        fzf <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>command<span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> fzf<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> fzf<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            fzf_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cd<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>select_file<span class="token punctuation">(</span>fzf_file<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">compress</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Compress marked files to current directory """</span>        cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir        marked_files <span class="token operator">=</span> cwd<span class="token punctuation">.</span>get_selection<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> marked_files<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">def</span> <span class="token function">refresh</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>            cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>get_directory<span class="token punctuation">(</span>original_path<span class="token punctuation">)</span>            cwd<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span><span class="token punctuation">)</span>        original_path <span class="token operator">=</span> cwd<span class="token punctuation">.</span>path        parts <span class="token operator">=</span> self<span class="token punctuation">.</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        au_flags <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        descr <span class="token operator">=</span> <span class="token string">"compressing files in: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> CommandLoader<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'apack'</span><span class="token punctuation">]</span> <span class="token operator">+</span> au_flags <span class="token operator">+</span> \                <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>relpath<span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">,</span> cwd<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> marked_files<span class="token punctuation">]</span><span class="token punctuation">,</span> descr<span class="token operator">=</span>descr<span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>signal_bind<span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">,</span> refresh<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tab</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tabnum<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Complete with current folder name """</span>        extension <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.zip'</span><span class="token punctuation">,</span> <span class="token string">'.tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'.rar'</span><span class="token punctuation">,</span> <span class="token string">'.7z'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'compress '</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> ext <span class="token keyword">for</span> ext <span class="token keyword">in</span> extension<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">extracthere</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Extract copied files to current directory """</span>        copied_files <span class="token operator">=</span> tuple<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>copy_buffer<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> copied_files<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">def</span> <span class="token function">refresh</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>            cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>get_directory<span class="token punctuation">(</span>original_path<span class="token punctuation">)</span>            cwd<span class="token punctuation">.</span>load_content<span class="token punctuation">(</span><span class="token punctuation">)</span>        one_file <span class="token operator">=</span> copied_files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        cwd <span class="token operator">=</span> self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>thisdir        original_path <span class="token operator">=</span> cwd<span class="token punctuation">.</span>path        au_flags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-X'</span><span class="token punctuation">,</span> cwd<span class="token punctuation">.</span>path<span class="token punctuation">]</span>        au_flags <span class="token operator">+=</span> self<span class="token punctuation">.</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        au_flags <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'-e'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>copy_buffer<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>cut_buffer <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>copied_files<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            descr <span class="token operator">=</span> <span class="token string">"extracting: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>one_file<span class="token punctuation">.</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            descr <span class="token operator">=</span> <span class="token string">"extracting files from: "</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>one_file<span class="token punctuation">.</span>dirname<span class="token punctuation">)</span>        obj <span class="token operator">=</span> CommandLoader<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'aunpack'</span><span class="token punctuation">]</span> <span class="token operator">+</span> au_flags \                <span class="token operator">+</span> <span class="token punctuation">[</span>f<span class="token punctuation">.</span>path <span class="token keyword">for</span> f <span class="token keyword">in</span> copied_files<span class="token punctuation">]</span><span class="token punctuation">,</span> descr<span class="token operator">=</span>descr<span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        obj<span class="token punctuation">.</span>signal_bind<span class="token punctuation">(</span><span class="token string">'after'</span><span class="token punctuation">,</span> refresh<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fm<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h5><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S texstudiosudo pacman -S texlive-core  texlive-bin texlive-langcjk texlive-latex3 texlive-latexextra texlive-langchinesesudo pacman -S texlive-most<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>中文latex最简化模板</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">%!TEX program = xelatex</span><span class="token function selector">\documentclass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">ctex</span><span class="token punctuation">}</span><span class="token function selector">\title</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\author</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span class="token function selector">\maketitle</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span>    Hello World <span class="token function selector">\\</span>    你好，世界 <span class="token function selector">\\</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">abstract</span><span class="token punctuation">}</span><span class="token function selector">\section</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="yay安装"><a href="#yay安装" class="headerlink" title="yay安装"></a>yay安装</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><p>yay jdk15 和yay jdk8</p><p>若是需要安装jdk8，则先下载相应版本的jdk包到默认的下载文件夹。然后执行<code>yay jdk8</code>即可。</p><p><code>archlinux-java status</code>查看当前使用的JDK版本</p><p>easyconnect: yay easyconnect</p><p>burpsuite: yay burpsuite</p><p>gotop：一款命令行查看系统使用状况</p><p>bashtop:同上</p><p>termius：多平台终端软件</p><p>yay -S picgo-appimage:picgo图片上传工具</p><p><a href="https://www.archlinux.org/packages/community/x86_64/zathura-pdf-mupdf/"> zathura-pdf-mupdf</a>：zathura的pdf支持插件</p><p>the_silver_searcher：</p><p>touchegg：触控板程序，创建开机自启可以使用”/usr/bin/touchegg –daemon &amp; /usr/bin/touchegg –client”</p><h4 id="Appimage形式存在的软件"><a href="#Appimage形式存在的软件" class="headerlink" title="Appimage形式存在的软件"></a>Appimage形式存在的软件</h4><p>pdman：数据库设计软件</p><hr><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h4 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h4><p><strong>Http代理</strong></p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="http://localhost:port"export https_proxy="http://localhost:port"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Socket5</strong></p><pre class="line-numbers language-shell"><code class="language-shell">export http_proxy="socks5://127.0.0.1:1080"export https_proxy="socks5://127.0.0.1:1080"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ArchLinuxCN源"><a href="#ArchLinuxCN源" class="headerlink" title="ArchLinuxCN源"></a>ArchLinuxCN源</h4><p>在/etc/pacman.conf文件中添加以下两行</p><pre class="line-numbers language-shell"><code class="language-shell">[archlinuxcn]Server = https://repo.archlinuxcn.org/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者去<a href="https://github.com/archlinuxcn/mirrorlist-repo">官方</a>获取镜像站点。</p><h4 id="BlackArch源"><a href="#BlackArch源" class="headerlink" title="BlackArch源"></a>BlackArch源</h4><pre class="line-numbers language-shell"><code class="language-shell">[blackarch]SigLevel = Optional TrustAllServer = https://mirrors.ustc.edu.cn/blackarch/$repo/os/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="桌面毛玻璃"><a href="#桌面毛玻璃" class="headerlink" title="桌面毛玻璃"></a>桌面毛玻璃</h4><p><a href="https://www.youtube.com/watch?v=86ro5Q0Fi34">主题配置</a></p><h6 id="终端模糊"><a href="#终端模糊" class="headerlink" title="终端模糊"></a>终端模糊</h6><p>修改<code>.config/yakuakerc</code>，修改成:</p><pre class="line-numbers language-shell"><code class="language-shell">[Appearance]Blur=trueTranslucency=true                                                                                                                                                            [Favorite Profiles]Favorites=[Window]Height=100KeepOpen=falseWidth=100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>konsole的毛玻璃特效在外观-&gt;配色方法和字体中的背景透明度。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>nerd-fonts-hack ttf-meslo-nerd-font-powerlevel10k nerd-fonts-jetbrains-mono ttf-nerd-fonts-hack-complete-git</p><p>重点推荐<code>nerd-fonts-jetbrains-mono</code>。挺好的。</p><p>中文字体：<strong>yay</strong> -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei adobe-source-han-mono-cn-fonts adobe-source<br>-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</p><h4 id="安全软件"><a href="#安全软件" class="headerlink" title="安全软件"></a>安全软件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S john<span class="token function">sudo</span> pacman -S hydra<span class="token function">sudo</span> pacman -S nmap<span class="token function">sudo</span> pacman -S bettercap<span class="token function">sudo</span> pacman -S exploitdb<span class="token function">sudo</span> pacman -S metasploit<span class="token function">sudo</span> pacman -S hashcat<span class="token function">sudo</span> pacman -S nikto<span class="token function">sudo</span> pacman -S lynisyay -S dirbyay -S edb-debuggeryay -S halcyonyay -S charlesyay -S maltego<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开机蓝牙自启"><a href="#开机蓝牙自启" class="headerlink" title="开机蓝牙自启"></a>开机蓝牙自启</h4><p>实现登陆前可以使用蓝牙键盘。</p><p>修改<code>/etc/bluetooth/main.conf</code>，修改如下字段：</p><pre class="line-numbers language-shell"><code class="language-shell">[Policy]AutoEnable-true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> ranger </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7.6初始化安装步骤</title>
      <link href="2019/12/08/centos7.6-chu-shi-hua-an-zhuang-bu-zou/"/>
      <url>2019/12/08/centos7.6-chu-shi-hua-an-zhuang-bu-zou/</url>
      
        <content type="html"><![CDATA[<h2 id="安装python3-7和pip"><a href="#安装python3-7和pip" class="headerlink" title="安装python3.7和pip"></a>安装python3.7和pip</h2><h3 id="下载python源码包"><a href="#下载python源码包" class="headerlink" title="下载python源码包"></a>下载python源码包</h3><pre class="line-numbers language-shell"><code class="language-shell">wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h3 id="安装所需依赖关系"><a href="#安装所需依赖关系" class="headerlink" title="安装所需依赖关系"></a>安装所需依赖关系</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo yum -y groupinstall "Development tools"sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解压进入相应目录"><a href="#解压进入相应目录" class="headerlink" title="解压进入相应目录"></a>解压进入相应目录</h3><p>直接使用zsh的extract。</p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre class="line-numbers language-shell"><code class="language-shell">/configure --prefix=/usr/local/python3  make  sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建相应软连接命令"><a href="#创建相应软连接命令" class="headerlink" title="创建相应软连接命令"></a>创建相应软连接命令</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3sudo ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="升级相应的pip版本"><a href="#升级相应的pip版本" class="headerlink" title="升级相应的pip版本"></a>升级相应的pip版本</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo pip3 install --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装python依赖包"><a href="#安装python依赖包" class="headerlink" title="安装python依赖包"></a>安装python依赖包</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo pip3 install -r requestment.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python2与python3共存"><a href="#python2与python3共存" class="headerlink" title="python2与python3共存"></a>python2与python3共存</h3><p>将<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>文件的最首句最后的python改成python2。</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>（1）在执行 make 的时候没有出现问题，但是在 make install 的时候报错： ModuleNotFoundError: No module named ‘_ctypes’</p><p>原因：这是因为没有安装上 tk-devel、libffi-devel这两个包，可以重新使用 yum 安装。</p><p>（2）SyntaxError: invalid syntax  File “/usr/libexec/urlgrabber-ext-down” </p><p>原因：没有修改/usr/libexec/urlgrabber-ext-down 文件中python的环境为python2，因为现在安装了python3，它不知道应该使用哪一个，所以会报错。</p><hr><h2 id="安装mysql5-7"><a href="#安装mysql5-7" class="headerlink" title="安装mysql5.7"></a>安装mysql5.7</h2><h3 id="安装YUM-Repo"><a href="#安装YUM-Repo" class="headerlink" title="安装YUM Repo"></a>安装YUM Repo</h3><pre class="line-numbers language-shell"><code class="language-shell">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpmrpm -ivh mysql57-community-release-el7-9.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行完成后会在<code>/etc/yum.repos.d/</code>目录下生成两个repo文件<code>mysql-community.repo</code> <code>mysql-community-source.repo</code>。</p><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install mysql-serversudo systemctl start mysqld #启动MySQL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置Mysql"><a href="#配置Mysql" class="headerlink" title="配置Mysql"></a>配置Mysql</h3><p>获取初始密码</p><pre class="line-numbers language-shell"><code class="language-shell">grep 'temporary password' /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若是获取不到则删除原本的安装过的mysql残留数据。然后在启动mysql。</p><pre class="line-numbers language-shell"><code class="language-shell">rm -rf /var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class="line-numbers language-shell"><code class="language-shell">mysql -u root -p -P 3500 #这里之前设置了mysql的端口开放在3500端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-shell"><code class="language-shell">set password=password("yourpassword");flush privileges; #刷新设置好的设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Mysql状态设置"><a href="#Mysql状态设置" class="headerlink" title="Mysql状态设置"></a>Mysql状态设置</h3><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop mysqld #关闭MySQLsystemctl restart mysqld #重启MySQLsystemctl status mysqld #查看MySQL运行状态systemctl enable mysqld #设置开机启动systemctl disable mysqld #关闭开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql开启远程控制"><a href="#Mysql开启远程控制" class="headerlink" title="Mysql开启远程控制"></a>Mysql开启远程控制</h3><p>首先创建一个远程访问用的用户身份。</p><pre class="line-numbers language-shell"><code class="language-shell">grant all privileges on 数据库名.表名 to 创建的用户名(root)@"%" identified by "密码"; # 数据库名.表名 如果写成*.*代表授权所有的数据库 flush privileges; #刷新刚才的内容#如：grant all privileges on *.* to root@"113.64.243.1" identified by "123456789";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql配置修改"><a href="#Mysql配置修改" class="headerlink" title="Mysql配置修改"></a>Mysql配置修改</h3><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/my.cnf#添加[mysqld]character_set_server=utf8init_connect='SET NAMES utf8'port=3500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="配置终端"><a href="#配置终端" class="headerlink" title="配置终端"></a>配置终端</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install zsh gitsh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改.zshrc文件</p><pre class="line-numbers language-shell"><code class="language-shell">export TERM="screen-256color"POWERLEVEL9K_MODE='nerdfont-complete'ZSH_THEME="powerlevel9k/powerlevel9k"#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context disk_usage dir vcs)#POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context os_icon disk_usage dir_writable dir vcs)POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(ip status root_indicator background_jobs load battery history date time)POWERLEVEL9K_PROMPT_ON_NEWLINE=truePOWERLEVEL9K_RPROMPT_ON_NEWLINE=truePOWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX="↱"POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX="↳ "plugins=(  git  catimg  encode64  z  zsh-autosuggestions  history  extract)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习（基础篇）</title>
      <link href="2019/12/01/go-yu-yan-xue-xi-ji-chu-pian/"/>
      <url>2019/12/01/go-yu-yan-xue-xi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h4><p>Go语言很特别，没有对象，没有继承多态，没有泛型，没有try/catch。相反，有接口，函数式编程，CSP并发模型(goroutine+channel)。</p><p><code>go</code>语言仅支持封装，不支持继承和多态。没有<code>class</code>只有<code>struct</code>。面向对象使用接口来实现。</p><h2 id="Go语言的执行、编译"><a href="#Go语言的执行、编译" class="headerlink" title="Go语言的执行、编译"></a>Go语言的执行、编译</h2><h3 id="go文件的执行"><a href="#go文件的执行" class="headerlink" title="go文件的执行"></a>go文件的执行</h3><p>go语言可以直接使用<code>go run + 相应go文件名</code>。</p><p><strong>go语言原生支持Unicode，可以处理全世界任何语言的文本。</strong></p><h3 id="go文件的编译"><a href="#go文件的编译" class="headerlink" title="go文件的编译"></a>go文件的编译</h3><p><code>go build + 相应go文件名</code>，生成相应二进制可执行文件，且是静态编译，无需担心在系统库更新的时候冲突。</p><hr><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><code>main</code>定义了一个独立可执行的程序，而不是一个库。main函数是整个程序执行时的入口函数。                                                                                                                                                                                                                                                                       </p><table><thead><tr><th align="center">函数</th><th align="center">变量</th><th align="center">常量</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center">func</td><td align="center">var</td><td align="center">const</td><td align="center">type</td></tr></tbody></table><p><strong>go不需要语句或者声明的末尾添加分号，除非一行上有多条语句。编译器主动将特定符号后的换行符转换为分号。换行的位置会影响go代码的正确解析。</strong></p><p>不允许使用无用的局部变量。可以使用空标识符:<code>_</code>。用于语法需要变量名，但是程序逻辑不需要。</p><p>空表示<code>nil</code>。 </p><p>函数和包级别的变量可以任意顺序声明，不影响调用。</p><p>go中的传值类似C++的引用传递。指针是另一个指针，但是内存指向同一块区域。</p><p>常量的值只能是数字、字符串、固定的布尔值。<code>const(变量名=值)</code>。</p><p>GO最有意思并且最新奇的特性就是对并发编程的支持。</p><p>Go中的指针类似C。但是不能对指针进行加减操作。<code>*p++</code>只改变变量的值，不改变指针值。</p><p>使用<code>godoc</code>工具可以在本地命令行阅读标准库中的文档。</p><pre class="line-numbers language-shell"><code class="language-shell">go doc package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>golang.org/x/tools/cmd/goimports</code>导入工具，它可以根据需要自动添加或删除导入的包。</p><p>函数的右小括弧，即函数传参数是的参数列表的最后一位的右括号，可以另起一行缩进，并在最后一个参数的后面加上一个逗号，防止编译器在行尾自动插入分号而导致编译错误。例如：</p><pre class="line-numbers language-go"><code class="language-go">函数名<span class="token punctuation">(</span>    变量<span class="token number">1</span>，变量<span class="token number">2</span>，    变量<span class="token number">3</span>，<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自增自减是语句，不能像C++中那样使用。且符号只能放在最后。</strong><code>x=i++</code>这样的语法是错误的。</p><h3 id="定义变量和结构"><a href="#定义变量和结构" class="headerlink" title="定义变量和结构"></a>定义变量和结构</h3><p>变量没有显示初始化，则隐式初始化。数值为0，字符串为空。</p><h4 id="定义、创建变量"><a href="#定义、创建变量" class="headerlink" title="定义、创建变量"></a>定义、创建变量</h4><p><code>var 变量名1,变量名2 变量类型 </code></p><p>变量定义的几种等价方式</p><pre class="line-numbers language-go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true">//只能用在函数内部，不能用于包变量</span><span class="token keyword">var</span> s <span class="token builtin">string</span>  <span class="token comment" spellcheck="true">//依赖字符串的默认初始化零值机制</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true">//用于多变量声明</span><span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true">//多变量多类型时使用</span><span class="token keyword">var</span> <span class="token punctuation">(</span> <span class="token comment" spellcheck="true">//多个包变量的声明</span>    a<span class="token operator">=</span><span class="token string">""</span>    b<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义struct"><a href="#定义struct" class="headerlink" title="定义struct"></a>定义struct</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> 类型名 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    数据元素 类型<span class="token punctuation">}</span><span class="token keyword">var</span> 变量名 类型名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>命名：一个名字以一个字母或者下划线开头。后面跟任意数量的字母、数字或下划线。大小写敏感。</p><p>在函数外部定义的包级名字，是以首字母大写命名的，则它将是导出的，可以被外部的包访问。包本身的名字一般总是用小写字母。                                                                                                                                                                                                                                                                                                                             </p><p>让一些聚合类型的零值具有意义，保证不管任何类型的变量总是有一个合理有效的零值状态。</p><p>在包级别声明的变量会在<code>main</code>入口函数执行前完成初始化，局部变量将在声明语句被执行到的时候完成初始化。</p><p>定义变量有两个方式：<code>var</code>和简短变量声明(<code>:=表达式</code>)。 </p><p>简短变量声明被广泛用于大部分的局部变量的声明和初始化。 var形式的声明语句往往是用于需要显式指定变量类型地方， 或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</p><p>简短变量声明语句中必须<strong>至少</strong>要声明一个新的变量。其中可以有不是全部的变量之前声明过，这里只是简单的赋值。</p><p>简短变量声明语句只有对已经在同级语法域声明过的变量才和赋值操作语句等价。变量是在外部语法域声明的，那么简短变量声明语句将在当前语法域重新声明一个新的变量。</p><h4 id="new函数"><a href="#new函数" class="headerlink" title="new函数"></a>new函数</h4><p>使用new函数创建变量，表达式<code>new(类型名)</code>将创建一个T型的匿名变量，初始化为相应类型的零值，返回变量地址，返回类型为相应类型的指针。</p><p>类型的大小为0，有可能地址相同。</p><p><em>请谨慎使用大小为0的类型。如果类型的大小为0，可能导致Go语言的自动垃圾回收机制有不同的行为。</em></p><p>new函数只是一个预定义的函数，并不是一个关键字。可以将new名字重新定义为别的类型。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-go"><code class="language-go">input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>stdin<span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//读入一行，并移除行末的换行符。读入一行返回true，否则false</span>input<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取一行输入。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><code>fmt</code>package包含格式化输出、接收输入的函数。</p><pre class="line-numbers language-go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//格式化输出</span>fmt<span class="token punctuation">.</span><span class="token function">PrintIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出完后换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">%d</th><th align="center">十进制整数</th></tr></thead><tbody><tr><td align="center">%x,%o,%b</td><td align="center">十六进制，八进制，二进制整数</td></tr><tr><td align="center">%f,%g,%e</td><td align="center">浮点数：3.141593 3.141592653589793 3.141593e+00</td></tr><tr><td align="center">%t</td><td align="center">bool</td></tr><tr><td align="center">%c</td><td align="center">Unicode码点</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%q</td><td align="center">带双引号或单引号的字符或字符串</td></tr><tr><td align="center">%v</td><td align="center">变量的自然形式</td></tr><tr><td align="center">%T</td><td align="center">变量的类型</td></tr><tr><td align="center">%%</td><td align="center">字面上的百分号标志</td></tr></tbody></table><p>通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的<code>[1]</code>这样的副词告诉Printf函数再一次使用第一个操作数。%后的#副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>使用<code>//</code>进行注释。                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               </p><h3 id="包和文件"><a href="#包和文件" class="headerlink" title="包和文件"></a>包和文件</h3><p><strong>必须导入需要的package，缺少了必要的package或者导入了不需要的package，程序都无法编译通过。</strong></p><p><code>import</code>语句必须要跟在文件的<code>package</code>声明之后。</p><p>当import的一个包路径包含多个单词时，通常只用最后的那个单词表示即可。</p><p>go语言通过package管理。一个package由单个目录下的一个或者多个.go源码组成。</p><p>每个go都以一条package声明语句开始。表明文件属于哪一个package。</p><p>每个包都对应一个独立的名字空间，要在外部使用函数，必须要显式声明包名。</p><p>如果一个名字是大写字母开头的，那么该名字是导出的。</p><p>包级别的常量名用大写字母开头。</p><p>每个源文件的包声明前的注释是包注释。通常，包注释的第一句是包功能的概要说明。如果一个文件有多个包注释，当前的文档工具会根据源文件名的先后顺序将它们链接成一个包注释。包注释很大时，通常会放到一个独立的doc.go文件中。</p><p>每个包都有一个全局唯一的导入路径。由构建工具进行解释。一个导入路径代表一个目录中一个或者多个Go源文件。</p><p>包名不一定要唯一。一个包的名字往往和包的导入路径的最后一个字段相同。</p><p>包的初始化首先解决包级变量的依赖顺序，然后按照包级变量声明出现的顺序依次进行初始化。如果包中含有多个源代码文件，它们将按照发给编译器的顺序进行初始化。Go语言的构建工具会首先将.go文件根据文件名排序，然后依次调用编译器编译。</p><p>包级别声明的变量，有初始化表达式用初始化表达式，没有的，可以创建<code>init</code>函数进行初始化工作。每个文件可以包含多个<code>init</code>函数。</p><p><code>init</code>函数不能被调用或者引用。在每个文件中的<code>init</code>初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。</p><p>每个包只会被初始化一次。</p><p>初始化工作自下而上进行，main包最后被初始化。确保在main函数执行之前，所有依赖的包都已经完成了初始化工作。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p><strong>左大括号必须要和post语句在同一行</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span>初始值<span class="token punctuation">;</span>条件<span class="token punctuation">;</span>post <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="range遍历"><a href="#range遍历" class="headerlink" title="range遍历"></a>range遍历</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">for</span> a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token keyword">range</span> 数组<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>range每次返回两个数值：索引和相应元素值，并强制处理。</p><h3 id="选择判断"><a href="#选择判断" class="headerlink" title="选择判断"></a>选择判断</h3><p><code>if</code>可以在比较的时候进行简单语句的赋值行为，以下代码等价：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> err<span class="token operator">:=</span>r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//等价于</span>err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go语言不需要显式的在每一个<code>case</code>后写<code>break</code>，语言默认执行完<code>case</code>后的逻辑语句自动退出。如果需要<em>相邻几个<code>case</code>都执行同一逻辑时，需要自己显式的写上<code>fallthrough</code>来覆盖这种默认行为。</em></p><p>switch不带操作对象时称为无tag switch，默认用true值代替， 然后将每个case的表达式和true值进行比较。等价switch true。</p><p><code>continue</code>和<code>break</code>可以使用在<code>for循环</code>，<code>switch</code>，<code>select</code>中。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Go中返回函数中局部变量的地址是安全的。</p><p>一个变量的有效周期只取决于是否可达。</p><p>对于在包一级声明的变量来说，变量的生命周期和整个程序的运行周期是一致的。局部变量的生命周期是动态的。每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。</p><p>编译器自动选择在栈还是堆上分配局部变量的存储空间，不取决于是var还是new，这点不同于C++。</p><p>当局部变量在函数退出后，依然可以通过包一级的变量找到，则称局部变量从函数中逃逸了。逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</p><p>如果将执行那个短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收，从而影响程序的性能.</p><h3 id="元组赋值"><a href="#元组赋值" class="headerlink" title="元组赋值"></a>元组赋值</h3><p>元组赋值允许同时更新多个变量的值。赋值前，赋值语句右边的所有表达式会先进行求值，然后同意更新左边对应的变量值。例如，两值互换。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>一个类型声明语句创建了一个新的类型名称。即使和现有类型具有相同的底层结构，新命名的类型提供了一个方法，用来分隔不同概念的类型，它们底层类型相同也不兼容。</p><p>创造新的类型：<code>type 类型名字 底层类型</code>。</p><p>类型声明语句一般出现在包一级。如果新创建的类型名字的首字符大写，则在外部包也可以使用。</p><p>对于中文汉字，Unicode标志作为小写处理。因此中文的命名默认不能导出。</p><p>对于每一个类型T，都有一个对应的类型转换操作<code>T(x)</code>。如果T是指针类型，可能需要用小括弧包装T。前提是<strong>两个类型的底层基础类型相同或二者都是指向相同底层结构的指针类型</strong>。</p><p>比较运算符可以用来比较一个命名类型的变量和另一个有着相同类型的变量，或有着相同底层类型的<em>未命名</em>类型的值之间进行比较。如果这两个值有着不同的类型，则不能直接比较。</p><p>自定义类型的函数定义格式如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>x 自定义类型<span class="token punctuation">)</span>函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> 返回类型<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//pass</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域不同于生命周期。声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时概念。</p><h3 id="一些常用的函数介绍"><a href="#一些常用的函数介绍" class="headerlink" title="一些常用的函数介绍"></a>一些常用的函数介绍</h3><p>os包提供一些与操作系统交互的函数和变量。程序的命令行参数可以通过os包的Args变量获得，即：<code>os.Args</code>，返回字符串切片，语法类似python，区间左闭右开。<code>os.Args[0]</code>为命令本身名字。省略默认传入0或len()。</p><p><code>gofmt</code>按照字母顺序对包名进行排列，从而格式化。</p><p><strong>在进行大量字符串拼接的时候使用strings包的Join函数。</strong></p><pre class="line-numbers language-go"><code class="language-go">strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>字符串数组<span class="token punctuation">,</span>字符串拼接时的间隔符<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>map</code>存储了键值对的集合，对集合元素，提供常数时间的存取操作。键的选择只要能用<code>==</code>比较就行。值也可以是任意类型。例如:<code>map[键类型]值类型</code>。<code>make</code>函数创建空map，形如：<code>make(map[string]int)</code>。</p><p>map的迭代顺序不确定。</p><p>系统文件的指针：<code>*os.File</code>。</p><p>系统打开文件：<code>os.Open(路径)</code>，返回的第一个值是被打开的文件，其后被<code>Scanner</code>读取，返回的第二个值是内置的<code>error</code>类型的值。</p><p>文件关闭使用<code>文件.Close()</code>函数。</p><p><code>io/ioutil</code>包中的<code>ReadFile(文件名)</code>函数读取指定文件的全部内容，返回的第一个参数是数据(byte slice)，返回的第二个是错误信息。<code>string.Split(string(数据),分割标志位)</code>函数将字符串分割成子串的切片。</p><p>http包：<code>net/http</code>。</p><p><code>http.Get(url地址)</code>函数创建HTTP请求的函数。返回两个参数，包含访问得到的请求结果的结构体，是一个可读的服务器响应流。第二个是错误信息。<code>ioutil.ReadAll(数据)</code>可以读取返回的数据的相应信息，以及可能发生的错误信息。相应的流用相应的<code>Close()</code>函数进行关闭。</p><p>程序出现错误时使用<code>os.Exit(1)</code>。</p><p>获取现在系统时间，使用包<code>time</code>，<code>time.Now()</code>。</p><p><code>ioutil.Discard</code>输出流是一个“垃圾桶”，可以向里面写入不需要的数据。</p><p><code>io.Copy(拷贝目的地,拷贝源)</code>返回两个参数，第一个字节大小，第二个是错误信息。</p><p>在编写命令行程序时，调用<code>flag.变量</code>函数创建可选的命令行参数，例如<code>flag.Bool</code>或<code>flag.String</code>。有三个参数属性：1.命令行标志参数的名字。2.该标志位的默认值。3.该标志参数的对应的描述信息。返回指向对应命令行标志参数变量的指针，指向的是是否设置参数的bool或者替换的字符串。需要加上<code>*</code>间接引用。</p><p><em>在使用标志参数对应的变量之前先调用flag.Parse函数，用于更新每个标志参数对应变量的值(之前是默认值)。</em>解析命令行参数时遇到错误，默认打印相关的提示信息。然后调用<code>os.Exit(2)</code>终止程序。</p><p><code>flag.Args()</code>获取非标志参数的普通命令行参数，返回一个字符串类型的slice。</p><p><code>strconv.ParseFloat()</code>函数可以进行字符串对浮点型数据的转换，还有类似的字符串转换函数在<code>strconv</code>包中。</p><p><code>unicode</code>包提供了诸多处理rune字符相关功能的函数。</p><p><code>unicode/utf8</code>包提供了用于rune字符序列的UTF-8编码和解码的功能。</p><p><code>utf8.RuneCountInString(变量名)</code>返回字符串的Unicode字符数。</p><p><code>utf8.DecodeRuneInString(变量名)</code>返回两个值，第一个是对应字符本身，另一个是对应字符采用UTF8编码后的编码字节数目。</p><p><code>strings.LastIndex(字符串,需要寻找的字符串)</code>返回相应字符串的索引，未找到返回-1。</p><p>将一个整数转化为字符串，一种是用<code>fmt.Sprintf</code>返回一个格式化的字符串；另一个是用<code>strconv.Itoa()</code>。</p><p><code>FormatInt</code>和<code>FormatUint</code>函数可以用不同进制来格式化数字。</p><p><code>fmt.Sprintf()</code>函数的%b、%d、%o、%x等参数提供的功能比strconv包的Format函数方便很多，还可以添加额外信息。</p><p>将字符串解析为整数，相应的使用strconv包的Atoi或ParseInt函数，用于解析无符号整数的ParseUint函数。ParseInt函数的第三个参数用于制定整数的大小，16表示int16,0表示int。</p><p>使用<code>fmt.Scanf</code>解析输入的字符串和数字。</p><h3 id="垃圾回收的基本思路"><a href="#垃圾回收的基本思路" class="headerlink" title="垃圾回收的基本思路"></a>垃圾回收的基本思路</h3><p>从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，则说明该变量是不可达的。即，它的存在并不会影响程序后续的计算结果。</p><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><p>$$数据类型\begin{cases}\text{基础类型}\begin{cases}\text{数字}\\text{字符串}\\text{布尔值}\end{cases}\\text{复合类型}\begin{cases}\text{结构体}\\text{数组}\end{cases}\\text{引用类型}\begin{cases}\text{指针}\\text{切片}\\text{字典}\\text{函数}\\text{通道}\end{cases}\\text{接口类型}\end{cases}$$</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><table><thead><tr><th>int8</th><th>int16</th><th>int32</th><th align="center">int64</th></tr></thead><tbody><tr><td>uint8</td><td>uint16</td><td>uint32</td><td align="center">uint64</td></tr></tbody></table><p>int和uint类型为32bit或者64bit。根据编译器的不同以及cpu平台的不同，并不一定。</p><p>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。可以相互使用。</p><p>byte和uint8是等价类型。byte类型一般强调数值是一个原始的数据而不是小的整数。</p><p>uintptr是无符号的整数类型，没有指定具体的bit大小，但是足以容乃指针。底层编程用。</p><p>一个n-bit的有符号数的值域为$-2^{n-1}$到$2^{n-1}-1$。</p><p>一个n-bit的无符号数的值域为0到$2^{n}-1$。</p><p>二元运算符，在同一优先级下，使用左优先结合规则。也可以明确使用括号表示优先顺序。</p><p>%取模运算符的符号和被取模数的符号总是一致。</p><table><thead><tr><th align="center">&amp;</th><th align="center">|</th><th align="center">^</th><th align="center">&amp;^</th><th align="center">&lt;&lt;</th><th align="center">&gt;&gt;</th></tr></thead><tbody><tr><td align="center">AND</td><td align="center">OR</td><td align="center">XOR</td><td align="center">AND NOT</td><td align="center">左移</td><td align="center">右移</td></tr></tbody></table><p>在遇到的每种类型，需要保证规则的一致性。</p><p>移位操作bit部分必须是无符号数。</p><p>左/右移运算用零填充右边空缺的bit位。</p><p>有符号数的右移运算会使用符号位的值填充左边空缺的bit位。</p><p>len函数返回值为int有符号类型，这样便于循环时，作为索引。否则循环语句使用–时，无符号数会直接变成最大的整数。</p><p><strong>数据类型之间的转换不存在隐式转换，只能显式转换。</strong></p><p>类型强制转换:<code>类型(需转换的变量名)</code>。</p><p>任何大小的整数字面值都可以用以0来头的八进制书写，或者以0x或者0X开头的十六进制格式书写。十六进制数字可以用大写或者小写字母。</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>GO语言提供了两种精度的浮点数：<code>float32</code>(6个十进制的精度)和<code>float64</code>(15个十进制的精度)。</p><p>常量<code>math.MaxFloat32</code>表示float32能表示的最大数值，大约是3.4e38。</p><p>wi常量<code>math.MaxFloat64</code>表示float64能表示的最大数值，大约是1.8e308。</p><p><strong>通常优先使用float64，float32的累计计算误差易扩散，且能表示的正整数不是很大，当整数大于23bit能表示的范围时，float32的表示将出现误差。</strong>例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> f <span class="token builtin">float32</span><span class="token operator">=</span><span class="token number">16777216</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>f<span class="token operator">==</span>f<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"true"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>小数点前后的数字都有可能被省略。所以<strong>很大很小的数最好使用科学计数法，通过e或者E来指定指数部分。</strong></p><p>math包中提供IEEE754浮点数标准中定义的特殊值：正无穷和负无穷以及NaN。</p><p><code>math.IsInf(检测数,int值)</code>：检查是否是无穷数，int值Wie正数，表示检测其是否是一个正无穷，同理负数，0表示是否是无穷，不论正负。</p><p><code>math.IsNaN</code>：检测一个数是否是非数。</p><p><code>math.NaN</code>：返回一个非数对应的值。可以用其表示一个非法的值，但是测试一个结果是否非数则<em>充满风险</em>。NaN既不大于自己，也不小于自己，也不等于自己。</p><p>浮点数的相等比较是<em>危险的</em>，需要小心处理精度问题。</p><p><strong>一个函数返回的浮点数结果可能失败，最好做单独的标志报告。</strong>例如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">float64</span><span class="token punctuation">,</span>ok <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">if</span> failed <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>Go语言提供两种精度的复数类型：<code>complex64</code>和<code>complex128</code>。对应float。内建的real和imag函数分别返回复数的实部和虚部。</p><p>复数的创建方法：<code>complex(实部,虚部)</code>。</p><p>如果一个浮点数或一个十进制整数后面有一个i，则构成一个实部为0的虚数。</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>两种值：true和false。</p><p>&amp;&amp;的优先级高于ll。(&amp;&amp;对应逻辑乘法，||对应逻辑加法)。</p><p>字符的检验代码可以如下编写：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> <span class="token string">'a'</span><span class="token operator">&lt;=</span>c <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token operator">||</span><span class="token string">'A'</span><span class="token operator">&lt;=</span>c<span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token operator">||</span><span class="token string">'0'</span><span class="token operator">&lt;=</span>c<span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//todo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值不会隐式转换为数字值0或者1，反之亦然。必须使用一个显式的if语句辅助转换。或者自己包装成一个函数，如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">btoi</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> b<span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">itob</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>一个字符串是一个<strong>不可改变</strong>的字节序列。</p><p>字符串可以包含任意数据，包括byte值0。</p><p>文本字符串通常被解释为采用UTF8编码的Unicode码点(rune)序列。</p><p>使用<code>utf8.RuneCountInString</code>获取字符数量。使用<code>[]byte</code>获取字节。</p><p>len函数返回一个字符串中的字节数目，<strong>而不是字符数</strong>，字节数目大于等于字节数目。</p><p>索引操作[i]返回第i个字节的字节值。</p><p>超出索引范围会导致panic异常。</p><p><strong>第i个字节并不一定是字符串的第i个字节，因为对于非ASCII字符的UTF8编码会要两个或多个字节。</strong></p><p>支持切片操作。</p><p>字符串进行运算符比较，比较结果是字符串自然编码的顺序。</p><p>尝试修改字符内部数据的操作是被禁止的。</p><p>不变形保证了两个字符串共享相同的底层数据的话是安全的，复制任意字符串代价是廉价的，字符串和对应的子字符串切片的操作也可以安全的共享相同的内存，这两种情况都没有必要分配新的内存。</p><table><thead><tr><th>转义符</th><th>含义</th></tr></thead><tbody><tr><td>\a</td><td>响铃</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr></tbody></table><p>一个十六进制的转义形式是<code>\xhh</code>，两个hh表示十六进制数字，不区分大小写。</p><p>一个八进制的转义形式是<code>\ooo</code>，o表示八进制数字，不能超过\377。</p><p>相应的十进制的范围应该是255。</p><p>字符串面值形式用``包裹，其中的字符串不进行转义操作。会删除回车保证所有平台上的值都是一样的。(Windows系统会把回车和换行一起放入文本文件中)。常用于编写正则表达式，HTML模板、JSON面值等。</p><p>可以将一个符文序列表示为一个int32序列。这种编码方式叫UTF-32或UCS-4。但是会浪费大量空间</p><p>UTF-8编码的每个符号编码后第一字节的高端bit位用于表示总共有多少编码个字节。UTF-8是变长编码，无法直接通过索引获取指定位置的字符。比较紧凑，完全兼容ASCII编码，可以自动同步，通过向前回溯最多两个字节就能确定当前字符编码的开始字节的位置，是前缀编码，不会出现任何歧义。没有任何字符的编码是其他字符编码的子串，或是其他编码序列的子串。与Unicode码点一致，没有嵌入NUL(0)字节，可以很好的兼容使用NUL作为字符串结尾的编程语言。</p><p>例如：</p><ul><li>0xxxxxxx                                                 runes 0-127</li><li>110xxxxx 10xxxxxx                                  128-2047</li><li>1110xxxx 10xxxxxx 10xxxxxx                  2048-65535</li><li>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  65536-0x10ffff </li></ul><p>对于小于256码点值可以写在一个十六进制转义字节中，但是对于更大的码点则必须使用\u或者\U转义形式。</p><p>判断一个字符串是否是另一个字符串的前缀/后缀：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">==</span>prefix<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">HasSuffix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>suffic <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>suffic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">len</span><span class="token punctuation">(</span>suffic<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">==</span>suffic<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含子串测试：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>substr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>substr<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go语言的range循环在处理字符串的时候，会自动隐式解码UTF8字符串。</p><p>如果遇到一个错误的UTF8编码输入，将会生成一个特殊的Unicode字符<code>\uFFFD</code>，即�。</p><p>UTF8作为交换格式方便，rune序列支持数组索引且方便切割，rune的大小一致。rune序列的长度就是字符的数量，string类型的数量是字符占用的字节空间大小。</p><p>将string转换为rune序列：<code>rune序列名:=[]rune(string类型变量名)</code>。</p><p>构建字符串推荐使用<code>bytes.Buffer</code>。</p><p>[]byte()是一个字节数组，用于保存或者操作字符串数据。</p><p>bytes包提供了Buffer类型用于字节slice的缓存。一个Buffer开始是空的，但随着string、byte或[]byte等类型数据的写入可以动态增长。一个bytes.Buffer变量并不需要初始化，零值也是有效的。</p><p>数组转换成字符串数组：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">intsToString</span><span class="token punctuation">(</span>values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer    buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>v<span class="token operator">:=</span><span class="token keyword">range</span> values<span class="token punctuation">{</span>        <span class="token keyword">if</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">intsToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向bytes.Buffer添加任意字符的UTF8编码时，最好使用bytes.Buffer的WriteRune方法，如果仅仅是写入ASCII字符则可以使用WriteByte方法。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量表达式的值在编译期计算。每种常量的潜在类型都是基础类型。</p><p>形式是：<code>const</code></p><p>可以一次性声明多个常量。语法类似import。</p><p>批量声明常量，除了第一个以外，可以省略常量右边的初始化表达式，其值直接和上一个赋值的结果相同。</p><p>常量声明可以使用iota常量生成器初始化，用以生成一组以相似规则初始化的常量。在一个const声明语句中，在第一个声明的常量所在行iota会被置为0，然后在每一个有常量声明的行加一。类似其他语言的枚举类型。如果有想跳过一个数字，可以写一个<code>-</code>。也可写带有<code>iota</code>的表达式，之后的变量都会按照该表达式进行运算。</p><h4 id="无类型常量"><a href="#无类型常量" class="headerlink" title="无类型常量"></a>无类型常量</h4><p>无类型常量可以作为任意数据类型，可以简单理解为字符替换。</p><p>Go语言中有着无类型常量，编译器为这些没有明确的基础类型的数字常量提供比基础类型更高精度的算数运算，可以认为至少有256bit的运算精度。</p><p>$$无类型常量\begin{cases}无类型的布尔型\无类型的整数\无类型的字符\无类型的浮点数\无类型的复数\无类型的字符串\end{cases}$$</p><p>通过延迟明确常量的具体类型，不仅可以提供更高的运算精度，还可以直接用于更多的表达式而不需要显示的类型转换。</p><p>无类型整数常量转换为int，内存大小不确定。但是无类型浮点数内存大小明确是float64，无类型复数内存大小为complex128。</p><p>当尝试将无类型的常量转为一个接口值时，要依靠它们明确接口对应的动态类型。</p><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><p>数组是由同构的元素组成。结构体是由异构元素构成。都有着固定内存大小的数据结构。slice和map是动态数据结构，能根据需要进行增长。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>int类型的数组声明：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，数组的每个元素都被初始化为元素类型对应的零值。</p><p>可以用索引位置和值来初始化数组<code>var a [3]int =[3]int {1:2}</code>，此时a有三个元素，a[1]为2,其他为0。</p><p>当数组的长度位置是<code>...</code>时，表明数组的长度是依据初始值的个数来计算的。例如<code>q:=[...]int{1,2,3}</code>。</p><p>数组的长度是数组类型的一部分，不同长度的数组是不同的数组类型。</p><p>参数传递数组时，go传递的是数组的复本。当数组较大时，效率低下且无法修改到数组上。此时可以传入指针。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">zreo</span><span class="token punctuation">(</span>ptr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下面的代码可以简化为*ptr=[32]byte{}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token keyword">range</span> ptr<span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><p>$slice\begin{cases}指针:指向第一个slice元素对应的底层数组元素的地址，slice的第一个元素不一定是数组的第一个元素\长度:slice中的元素数目，可以用len函数获取\容量:从slice开始位置到底层数据的结尾位置，可以用cap函数获取\end{cases}$</p><p>多个slice可以共享底层数据，引用的数组部分区间可能重叠。</p><p>slice支持切片<code>s[i:j]</code>，$0\leq i\leq j \leq cap(s)$，引用s的从第i个元素开始到第j-1个元素的子序列。i省略的话，默认为0。j省略为len(s)代替。</p><p>切片操作超过cap(s)的上限导致panic异常，超过len(s)表示拓展了slice</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//翻转数组</span><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>j<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token punctuation">,</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一种将slice元素循环向左旋转n个元素的方法是三次调用reverse反转函数， 第一次是反转开头的n个元素， 然后是反转剩下的元素， 最后是反转整个slice的元素。 （ 如果是向右循环旋转，则将第三个函数调用移到第一个调用位置就可以了。 ）</p><p>数组能比较，slice不能比较。slice和数组在申明上的区别在于没有指明数组长度。</p><p>标准库提供了高度优化的bytes.Equal函数来判断两个字节型slice是否相等（ []byte）</p><p>slice唯一合法的比较是与nil进行比较。一个零值slice为nil，其没有底层数组，长度和容量为0。但是也有非nil值的slice长度和容量为0.</p><p>可以使用<code>[]int(nil)</code>类型转换表达式生成一个对应类型slice的nil值。</p><p>检查slice是否为空<code>len(s)==0</code>而不是<code>s==nil</code>。</p><p>所有go函数应该以相同的方式对待nil值的slice和0长度的slice。</p><p><code>make</code>函数创建一个指定元素类型、长度和容量的slice。容量可以省略，默认等于长度。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//same as make([]T,cap)[:len]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>append(slice名，需要添加的值)</code>向slice中添加元素。添加元素时如果超越cap，系统会重新分配更大的底层数组。</p><p>由于值传递的关系，必须接收append的返回值。</p><p><code>copy(slice名，拷贝源)</code></p><p>删除slice中的元素可以使用如下语法<code>s2=append(s2[:3],s2[4:]...)</code>。<code>...</code>表示这里是可变长度，不能省去。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>map</code>的声明如下:<code>map[K]V</code>，复合<code>map</code>如：<code>map[K1]map[K2]V</code>。如：</p><pre class="line-numbers language-go"><code class="language-go">m<span class="token operator">:=</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token string">"hello"</span><span class="token punctuation">:</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>map</code>是无序的。</p><p><code>map</code>中没有的key对应的value是value类型的初始值。相应取值返回的第二个参数是false，如果有返回true。</p><p><code>delete(map名，key值)</code>删除元素。</p><p><code>map</code>使用哈希表，key必须可以比较。除了<code>slice,map,function的内建类型</code>都可以作为key。<code>stuct</code>不包含上述字段也可作为key。</p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>go的结构体没有构造函数，一般可以直接生成。如果一定要用函数进行构造，可以自己定义一个工厂函数，返回一个局部地址，但是不会出错。</p><p>针对函数体的函数形式如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>node <span class="token operator">*</span>TreeNode<span class="token punctuation">)</span> <span class="token function">setValue</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>go中的函数传递都是值传递，所以想对结构体中的数据进行写操作数时，需要传入的指针，而不能是值。</strong>只有使用指针才可以改变结构内容。</p><p>当改变内容必须使用指针接收者，结构过大也考虑指针接收者，如果有指针接收者，最好都是指针接收者，保持一致性。</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h3 id="文本和HTML模板"><a href="#文本和HTML模板" class="headerlink" title="文本和HTML模板"></a>文本和HTML模板</h3><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>go的函数可以返回两个值。返回值可以命名，这样可以直接写一个<code>return</code>就行，不用再写返回变量名，但是可读性差。短函数可以用。</p><p>函数可以作为参数传入函数。func 函数名_1(函数名_2 func(参数，参数)类型)</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>使用者来定义接口。</p><h2 id="包和工具"><a href="#包和工具" class="headerlink" title="包和工具"></a>包和工具</h2><p><code>go list | wc -l</code>查看标准包的具体数目。</p><p>Go语言的开源程序包可以在<a href="http://godoc.org检索./">http://godoc.org检索。</a></p><p>名字一般使用CamelCase。</p><p>首字母大写表示<code>public</code>，首字母小写表示<code>private</code>。</p><p>每个目录一个包，main包包含可执行入口。</p><p>为结构定义的方法必须放在同一个包内。可以是不同的文件。</p><p>包就是一个目录，一个目录就是一个包，包名可以不和目录名相同，但是一个目录下只能有一个包。</p><p>go扩充系统类型或他人的类型使用两种方法：<strong>定义别名或使用组合</strong></p><p>使用组合就是创建一个新的结构体，其中包含需要拓展的结构体指针作为数据成员。将结构体中的数据提取出来，创建为一个新的结构体，并对其进行操作。</p><p>有些go的第三方包因为国内网络环境的原因影响，可以使用第三方工具进行下载，而不是使用<code>go get</code>。方式如下：</p><pre class="line-numbers language-shell"><code class="language-shell">go get -v github.com/gpmgo/gopmgopm get -u -g -v 包的地址go install 包地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Goroutines和Channels"><a href="#Goroutines和Channels" class="headerlink" title="Goroutines和Channels"></a>Goroutines和Channels</h2><p><code>goroutine</code>是一种函数的并发执行方式，<code>channel</code>在<code>goroutine</code>之间进行参数传递。</p><p><code>main</code>函数本身运行在一个<code>goroutine</code>中。</p><p><code>go 函数名(参数)</code>表示创建一个新的<code>goroutine</code>，并在新的<code>goroutine</code>中运行这个函数。</p><p><code>make(chan 传递的参数类型)</code>表示创建一个指定类型的<code>channel</code>。</p><p>当一个<code>goroutine</code>尝试在一个<code>channel</code>上做<code>send</code>或者<code>receive</code>操作时，这个<code>goroutine</code>会阻塞在调用处，直至另一个<code>goroutine</code>往这个<code>channel</code>里写入或者接收值，这样两个<code>goroutine</code>才会继续执行<code>channel</code>操作之后的逻辑。</p><p>每一个<code>fetch</code>函数往<code>channel</code>中输入数据(ch&lt;-expression)，主函数接收<code>channel</code>中的数值(&lt;-ch)。</p><h3 id="声明共享变量"><a href="#声明共享变量" class="headerlink" title="声明共享变量"></a>声明共享变量</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutexmu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//操作</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sg90舵机控制</title>
      <link href="2019/12/01/sg90-duo-ji-kong-zhi/"/>
      <url>2019/12/01/sg90-duo-ji-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="查看树莓派引脚"><a href="#查看树莓派引脚" class="headerlink" title="查看树莓派引脚"></a>查看树莓派引脚</h3><pre class="line-numbers language-shell"><code class="language-shell">gpio readall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/sg90%E8%88%B5%E6%9C%BA%E6%8E%A7%E5%88%B6_gpio.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> arduino </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理</title>
      <link href="2019/10/07/shu-ju-yu-chu-li/"/>
      <url>2019/10/07/shu-ju-yu-chu-li/</url>
      
        <content type="html"><![CDATA[<h3 id="聚集"><a href="#聚集" class="headerlink" title="聚集"></a>聚集</h3><p>将两个及其以上的对象集合合并成单个对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据预处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归一化算法</title>
      <link href="2019/09/23/gui-yi-hua-suan-fa/"/>
      <url>2019/09/23/gui-yi-hua-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="归一化算法"><a href="#归一化算法" class="headerlink" title="归一化算法"></a>归一化算法</h2><p>归一化是一种简化计算的方法，即将有量纲的表达式，经过变换，化为无量纲的表达式，成为标量。</p><hr><ol><li><p>线性归一化——Min-Max归一化</p><p>$X_{norm}=\frac{X-X_{min}}{X_{max}-X_{min}}$</p><p>该方法将数据压缩到区间[0,1]之间，是原数据的等比缩放。</p><p>P.S：<em>最大值与最小值相等时没法归一化</em>。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算编码阅读笔记</title>
      <link href="2019/09/06/yun-ji-suan-bian-ma-yue-du-bi-ji/"/>
      <url>2019/09/06/yun-ji-suan-bian-ma-yue-du-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="云计算编码阅读笔记"><a href="#云计算编码阅读笔记" class="headerlink" title="云计算编码阅读笔记"></a>云计算编码阅读笔记</h2><h3 id="第一章-云计算概述"><a href="#第一章-云计算概述" class="headerlink" title="第一章 云计算概述"></a>第一章 云计算概述</h3><ul><li><p>摩尔定理：集成电路上可容纳的晶体管数目，约每隔18个月便会增加1倍，性能也会提升1倍。</p></li><li><p>Web1.0 由网站编辑产生内容，用户单向获取信息。</p></li><li><p>Web2.0 由用户产生内容，信息双向互动。</p></li><li><p>Web3.0 互联网成为数字枢纽，形成多维度信息交互和语义网。</p></li><li><p>云计算的云指的是通过计算池提供资源。</p></li><li><p>计算池需满足：统一管理和调度、较大的规模、良好的可拓展性（针对计算池）、良好的可伸缩性（针对单一用户）、及时提供、更对的成本。</p></li><li><p>云计算：基于互联网将规模化资源池的计算、存储、开发平台和软件能力提供给用户，实现自动化、低成本、快速提供和灵活伸缩的IT服务。</p></li><li><p>效用计算：将主机资源基于网络出租给用户，并按用户的资源使用量进行收费。</p></li><li><p>传统分布式计算存在的主要问题是没有统一的编程模型，针对不容应用领域，需要相关专业的人员进行复杂的开发，限制了应用。</p></li><li><p>网格计算试图解决的是异构问题，由跨网络、跨组织（虚拟组织）、异构节点构成网络，统一提供计算和存储能力。</p></li><li><p>复本收费：按用户能用的全部内容收取固定费用。</p></li><li><p>云计算使得整个信息产业从传统的产品交付模式转变为服务交付模式，还原网络化信息的自然本质：让复本流动起来，然后按照每一次使用进行收费。</p></li></ul><h3 id="第二章-云计算产业分析"><a href="#第二章-云计算产业分析" class="headerlink" title="第二章 云计算产业分析"></a>第二章 云计算产业分析</h3><ul><li>互联网的哲学：网络是中立和无控制的，任何人都没有决定权；网络是应用无关的，它的任务就是如何更好的传输数据包。</li><li>互联网的价值体现在使用外部性（Adoption Externality）。实现“胜者全得”的市场。</li><li>万维网&gt;互联网</li><li>$信息价值\begin{cases}充足的信息–&gt;免费\稀缺的信息或者定制的信息–&gt;收费\end{cases}$</li><li>在信息经济中，信息流的方向就是金钱流动的方向。需要注意<strong>注意力经济</strong>和<strong>声誉经济</strong>。</li><li>互联网的信息经济市场是一个多方共存的生态系统，只在某些方面直接进行现金交易。整个市场是同分结合的双层结构：“统”的一层是基础业务平台，是免费生态系统；”分”的一层是多元增值业务，直接进行现金交易。参考免费游戏的运营方式。</li><li>私有云注重的是安全性，公有云侧重性价比。混合云的真正竞争力在于私有云和公有云的无缝集成和协同。</li></ul><h3 id="第三章-云计算技术体系架构"><a href="#第三章-云计算技术体系架构" class="headerlink" title="第三章 云计算技术体系架构"></a>第三章 云计算技术体系架构</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_1.png"></li><li>云计算系统架构的核心部分是操作系统及其拥有的资源管理功能。主要是分布式技术和虚拟化技术。</li><li>新一代的分布式主要特点是：节点同构且对对单节点可靠性要求不高、节点之间有高速网络互联、系统运行时信令流和数据流分离、针对大规模数据处理进行存储管理优化以及结合数据存储提出创新的计算模型等。</li><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_2.png"></li><li>虚拟化体现了一种“分裂”的思想，分布式体现了“聚合”的思想。</li><li>IaaS服务主要依托于云计算基础架构层，向外提供基础资源服务，如弹性计算、弹性存储等；PaaS服务主要依托于云计算应用开发与执行环境，向外提供应用开发与运行托管服务；SaaS服务主要通过云计算应用软件层向外提供应用软件服务。只是层次不同，没有必然的上下层关系。</li><li>分布式技术体系包括：分布式文件系统（位置透明性和性能透明性）、分布式数据库、并行计算模型（通过将计算到存储节点的方式完成数据处理任务）、分布式同步（确保系统一致性）等。</li><li>CDN(Content Delivery Network，内容分发网络)位于IP网络与互联网应用之间，将网站内容推送到离用户最近的地方，从而实现用户就近访问，降低时延。关键技术为：用户访问制度、内容缓存管理。  采用同构节点，提供系统冗余，并将业务流与数据流分离，在设计思想上与分布式架构类似。</li><li>$CDN的技术实现\begin{cases}分发服务系统\负载均衡和调度系统\运营管理系统\end{cases}$<ul><li>分布服务系统的作用是<strong>实现将内容从内容源中心向边缘推送和存储，承担实际的内容数据流的全网分发工作和面向最终用户的数据请求服务</strong>。最基本的工作单元是Cache设备（缓存服务器）。</li><li>负载均衡是CDN的神经中枢，主要功能是父子啊对所有发起服务请求的用户进行调度访问，确定提供给用户的实际访问地址。</li><li>运营管理系统负责整个系统的维护管理和业务计费等工作。</li></ul></li><li>$云计算四层架构\begin{cases}底层基础设施资源（即“池”化的物理资源和虚拟化资源）\操作系统（负责底层基础资源的管理和调度，调度粒度包括虚拟机和计算任务两种方式）\系统软件（支持应用的开发和运行）\应用软件层（基于多租户架构和Web技术，向用户提供云端SaaS应用）\end{cases}$</li><li>IaaS核心：虚拟化和资源管理和资源调度</li><li>PaaS核心：分布式系统</li><li>SaaS核心：多租户和Web技术</li><li>DaaS核心：桌面交付协议</li><li>CDN核心：Cache缓存和内容分发调度</li></ul><h3 id="第四章-IaaS及关键实现技术"><a href="#第四章-IaaS及关键实现技术" class="headerlink" title="第四章 IaaS及关键实现技术"></a>第四章 IaaS及关键实现技术</h3><ul><li><p>Guest OS：运行在虚拟机里的操作系统</p></li><li><p>VMM或者Hypervisor：负责管理虚拟机中的软件</p></li><li><p>$虚拟化架构\begin{cases}寄生架构(Hosted，即VMM安装在宿主操作系统上)\裸金属架构(Bare-metal，即VMM直接安装在物理服务器上)\end{cases}$</p></li><li><p>裸金属架构无法说明VMM能够抛开Host OS运行在硬件之上。Xen的裸金属版本内部包含Domain0其中包含了一个剪裁过的Linux内核。即使是寄生架构的产品，在宿主系统中有一个运行在核心态的驱动程序，直接与物理设备打交道。</p></li><li><p><strong>裸金属架构本身不会给Guest OS的性能带来任何提升。</strong></p></li></ul><h4 id="CPU虚拟化"><a href="#CPU虚拟化" class="headerlink" title="CPU虚拟化"></a>CPU虚拟化</h4><ul><li><p>虚拟CPU分时复用物理CPU，由VMM为虚拟CPU分配时间片，并同时对虚拟CPU的状态进行管理。</p></li><li><p>$x86指令特权级\begin{cases}第0级：具有最高的特权，用于运行操作系统\第1级\第2级\第3级：最低的特权级，用于运行用户程序\end{cases}$</p></li><li><p>CPU特权指令的虚拟化：模拟执行、操作系统辅助、<strong>硬件辅助</strong>（主流）</p><ul><li><p>$模拟执行\begin{cases}解释执行(读取源指令并进行分析，执行操作，逐条)\二进制翻译(将一段源指令翻译成被执行的目标指令并保存，冲重复使用)\end{cases}$</p></li><li><p>模拟执行适用于虚拟化CPU和本地物理CPU的指令集不同的应用场景。对特权指令的模拟执行需要<strong>较高的性能开销</strong>。是完全虚拟化。</p></li><li><p>基于操作系统辅助的CPU虚拟化直接在Guest OS进行修改，将其与特权指令执行相关的操作调用Hypercall（类似系统调用，但并不是针对操作系统进行操作的，而是直接与VMM通信，并在其管理下执行特权指令）的形式改写。提供的是与真实的物理设备有一定差异的CPU指令集接口，然后通过改写Guest OS调用该接口，使Guest OS的相关操作可以直接在底层硬件上实现。最大优点：有效的使Guest OS的运行获得与其在本地物理CPU上直接执行相接近的性能。最大缺点：需要对Guest OS进行改进，可移植性差。早期Xen所使用的技术。</p></li><li><p>上述两种方法都是因为传统的X86CPU不支持硬件虚拟化，只能采用软件层面的虚拟化。</p></li><li><p>基于硬件辅助的CPU虚拟化得益于现行的X86CPU支持硬件层面的虚拟化。</p></li><li><p>$X86CPU硬件辅助虚拟化技术\begin{cases}Intel\ VT-x\AMD\ SVM\end{cases}$</p></li><li><p>$Intel\quad VT-x–&gt;VMX处理模式\begin{cases}VMX\ root \ operation\VMX\ non-root\ operation\end{cases}$</p><ul><li><p>VMX root operation：专为VMM，行为与不带VT-x的技术的x86CPU相同</p></li><li><p>VMX non-root operation：提供了一个在VMM控制下用于支撑虚拟机运行的CPU环境。</p></li><li><p>都具有四个特权级</p></li><li><p>VMX root operation-&gt;VMX non-root operation：VM exit</p></li><li><p>VMX non-root operation-&gt;VMX root operation：VM entry</p></li><li><pre class="mermaid">      graph TDA[CPU正常模式启动]--&gt;|vmxon指令|B[CPU进入VMX模式]B--&gt;C[VMM执行VMX root operation]C--&gt;D[VMM为虚拟机设置环境]D--&gt;|vmlaunch指令|E[启动虚拟机]E--&gt;F[CPU处于VMX non-root operation状态,并由虚拟机执行VMX non-root operation]F--&gt;K{虚拟机管理相关操作}K--&gt;G[虚拟机将CPU控制权让给VMM]G--&gt;|vmcall指令|H[CPU进入VMX root operation]H--&gt;|vmresume指令|I[重新唤起虚拟机]I--&gt;FF--&gt;L{退出VMX模式}L--&gt;J[执行vmxoff指令]J--&gt;AZ[VT-x应用过程]</pre></li><li><p>VMM位于比第0级更高的特权级，且不会影响Guest OS对特权指令的执行。</p><p>优点：有效避免特权指令模拟执行产生的性能消耗，以及操作系统辅助虚拟化对所需的Guest OS的改写。</p><p>缺点：在VMX模式进行模式切换时会消耗大量的 CPU周期。</p><p>发展方向：减少每次切换消耗的周期数以及切换次数。</p></li></ul></li></ul></li></ul><h4 id="内存虚拟化"><a href="#内存虚拟化" class="headerlink" title="内存虚拟化"></a>内存虚拟化</h4><ul><li>$内存系统中的地址种类\begin{cases}机器地址(MA)：真实硬件的机器地址，在地址总线上可以看到的地址信号\虚拟机物理地址(GPA):经过VMM抽象后虚拟机看到的伪物理地址\虚拟地址(VA)：Guest OS提供给其应用使用的线性地址空间\end{cases}$</li><li>操作系统的内存管理单元(MMU)只能完成一次虚拟地址到物理地址的映射。</li><li>$VMM的复合映射方式\begin{cases}MMU半虚拟化(MMU\  Paravirtualization):直接将映射关系f<em>g直接写入Guest OS页表中\影子页表:将f</em>g的映射关系写入影子页表，Guest OS的页表内容保持不变VMM影子页表写入MMU\end{cases}$</li><li>影子页表的缺陷：时间上，Guest OS构建页表时不会主动通知VMM，只能在Guest OS发生缺页中断时补全影子页表；在空间上，每台虚拟机的Guest OS通常都会在其上运行的每个进程创建一套页表系统，空间开销随着线程数量的增多而增大。</li><li>对于上述问题的解决方法是采用影子页表缓存技术。VMM在内存中维护部分最近使用的影子页表，只有当影子页表在缓存中无法命中的时候，才创建新的影子页表。</li></ul><h4 id="I-O虚拟化"><a href="#I-O虚拟化" class="headerlink" title="I/O虚拟化"></a>I/O虚拟化</h4><ul><li>$I/O虚拟化技术\begin{cases}全虚拟化:对设备进行模拟，Guest OS陷入VMM,VMM解析并映射到实际物理设备\半虚拟化:在Guest OS中安装虚拟I/O前端驱动，VMM提供后端驱动。前端驱动接收请求通过\ VMM定义的系统调用与后端驱动通信，后端驱动验证其有效性，并映射到物理设备上。往往和基于\ 操作系统辅助的CPU辅助虚拟化一同使用。\软件模拟:VMM捕捉I/O请求转交给Host OS的用户态进程，然后通过系统调用来模拟设备的行为，\ 性能低，和CPU基于模拟执行的虚拟化技术一同使用\直接划分:将物理I/O设备分配给指定的虚拟机，往往与CPU基于硬件辅助的虚拟化技术一同使用\end{cases}$</li></ul><h4 id="网卡虚拟化"><a href="#网卡虚拟化" class="headerlink" title="网卡虚拟化"></a>网卡虚拟化</h4><ul><li>$网卡虚拟化\begin{cases}虚拟网卡:链接物理机的物理网卡和虚拟机的物理网卡\虚拟网桥:使多张虚拟网卡在同一台物理服务器中共享一块物理网卡的同时对外仍然表现为多张物理网卡\end{cases}$</li></ul><h4 id="存储虚拟化"><a href="#存储虚拟化" class="headerlink" title="存储虚拟化"></a>存储虚拟化</h4><ul><li><p>$存储域\begin{cases}文件/记录层:上层应用与存储资源之间的接口\块聚合层:将多个底层存储设备的存储资源块聚合为能够被统一的存储资源\存储设备层:对数据块存储的物理位置进行识别并进行读写操作，可以直接为文件/记录层提供接口\end{cases}$</p><ul><li><p>$磁盘的存储信息\begin{cases}柱面(Cluster)\磁头(Head)\扇区(Section)\end{cases}$</p></li><li><p>存储设备的虚拟化体现在磁盘固件将CHS地址信息转换成具有连续编号的逻辑块供上层使用，同时保证了磁盘的零缺陷。</p></li><li><p>$块聚合层存储虚拟化技术\begin{cases}带内虚拟化：虚拟化控制器在服务器和存储设备的路径上\带外虚拟化：虚拟化控制器在传输路径之外,每台服务器需安装虚拟化代理程序\end{cases}$</p></li><li><table><thead><tr><th align="center">DAS</th><th align="center">SAN</th></tr></thead><tbody><tr><td align="center">直接附加存储</td><td align="center">存储区域网络</td></tr><tr><td align="center">只能访问直接挂载的存储资源</td><td align="center">访问存储网络的所有存储资源</td></tr></tbody></table></li></ul></li></ul><h4 id="IaaS云计算管理平台"><a href="#IaaS云计算管理平台" class="headerlink" title="IaaS云计算管理平台"></a>IaaS云计算管理平台</h4><ul><li><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%BC%96%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0_3.png"></li><li>将一台没有运行的虚拟机部署到一台物理机上并使其运行起来，称之为初次部署。</li><li>将一台正在运行的虚拟机迁移到另一台物理机上，称之为迁移。</li><li>服务器虚拟化本质上是一种纯软件的技术，VMM可以认为是服务器“操作系统”的程序，虚拟机可以认为是该“操作系统”上的一种特定“进程”。</li><li>选择合理物理服务器的因素$\begin{cases}尽可能不启动新的物理服务器\尽可能让CPU和I/O资源互补\end{cases}$</li><li>通常系统模板会自带一个软件，使其在操作系统第一次启东市从服务端动态获得IP和主机名。关机后释放IP，主机名保留。</li><li>要实现跨物理机的实施迁移，一般来说，需要虚拟机自身能够支持迁移功能且物理服务器之间有共享存储。</li><li>虚拟机实时迁移时产生内存中的“脏”读写，通过重复迁移来解决。直至最后一次迁移的脏数据非常少，停顿时间非常短，对于业务和应用来说基本可以忽略不计。</li><li>$弹性能力模式\begin{cases}资源向上/下扩展(Scale Up/Dowm),即动态的增大/缩小系统的配置(小型机)\资源向外/扩展(Scale Out/In)，即动态的创建/减少虚拟服务器数量\end{cases}$</li><li>为实现弹性能力提供，需设定资源监控阈值（包括监控项目和阈值）、弹性资源提供策略（包括弹性资源提供模式、资源扩展规模等）。</li><li>$虚拟化监控的目的与复杂性\begin{cases}状态监控：监控所有物理资源和虚拟资源的工作状态\性能监控：基本性能监控和与虚拟化相关的性能监控\容量监控：宏观角度的长期系统性能监控\安全监控\begin{cases}传统安全监控\虚拟机蔓生活动监控\合规监控\访问控制监控\end{cases}\使用量度量：度量不同组织、团体、个人使用资源和服务的情况\end{cases}$</li><li>$系统资源监控方法\begin{cases}日志分析\包嗅探\探针采集\end{cases}$</li><li><strong>云资源调度策略的方向1：对应用的资源分配进行分析和预测。在运行时动态的捕捉各个应用在不同时段的执行行为和资源需求，将这两方面的信息进行分析以发现它们各自内在以及彼此之间可能存在的逻辑关联，进而利用发掘出的关联关系进行应用的后续行为和资源需求的预测，并按照预测结果为其提前准备资源调度方案。</strong></li><li><strong>云资源调度策略的方向2：鉴于“云”是分布式计算和存储架构，所以网络因素也相当重要，需要采用位置相关的调度策略。考虑用户和资源之间的网络情况以及分配给同一应用的资源之间的网络情况。</strong></li><li><strong>云资源调度策略的方向3：注重负载均衡，可以体现在计算密集型和存储密集型应用上，通过合理的配比将其部署到特性不同的服务器上。扬长避短</strong></li><li><strong>云资源调度策略的方向4：基于能源的角度考虑，将多个运行在不同服务器上的应用在满足SLA的前提下，迁移至一台服务器上，进而减少不必要的能耗，降低运营成本。</strong></li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析一</title>
      <link href="2019/09/04/shu-ju-fen-xi-yi/"/>
      <url>2019/09/04/shu-ju-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>anaconda 安装软件的步骤：</p><ol><li><code>anaconda search -t conda 包名</code> 查找所需包的信息</li><li><code>ananconda show 完整包名</code> 查看包的安装命令</li><li>使用3中显示的命令进行安装</li><li><code>conda install 包名</code> 安装包</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux</title>
      <link href="2019/08/02/tmux/"/>
      <url>2019/08/02/tmux/</url>
      
        <content type="html"><![CDATA[<h2 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo pacman -S tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建session：tmux new -s <code>session_name</code>。</p><p>直接退出在终端输入<code>exit</code>即可。</p><a id="more"></a><p>暂时退出tmux，按ctrl+b+d。或者输入tmux detach。</p><p><code>tmux ls</code>显示所有tmux的session。</p><p>使用<code>tmux kill-session -t session_name</code>kill掉不要的session。</p><p>当后台只有一个session时，直接输入<code>tmux attach</code>即可返回session。</p><p>当后台session数不唯一时，输入<code>tmux attach -t session_name</code>返回相应session。可以将<code>attach</code>简写为a。</p><p>如果刚好处于会话中怎么办？别担心，我们可以使用对应的tmux快捷键<code>Ctrl+b</code> + <code>s</code>，此时tmux将打开一个会话列表，按上下键(⬆︎⬇︎)或者鼠标滚轮，可选中目标会话，按左右键（⬅︎➜）可收起或展开会话的窗口，选中目标会话或窗口后，按回车键即可完成切换。</p><p>在进入tmux后：</p><ul><li>系统指令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>?</code></td><td align="center">显示快捷键帮助文档</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>d</code></td><td align="center">断开当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>D</code></td><td align="center">选择要断开的会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+z</code></td><td align="center">挂起当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>r</code></td><td align="center">强制重载当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>s</code></td><td align="center">显示会话列表用于选择并切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>:</code></td><td align="center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>[</code></td><td align="center">进入复制模式，按<code>q</code>退出</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>]</code></td><td align="center">粘贴复制模式中复制的文本</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>~</code></td><td align="center">列出提示信息缓存</td></tr></tbody></table><ul><li>窗口指令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>c</code></td><td align="center">新建窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&amp;</code></td><td align="center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>0~9</code></td><td align="center">切换到指定窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>p</code></td><td align="center">切换到上一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>n</code></td><td align="center">切换到下一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>w</code></td><td align="center">打开窗口列表，用于且切换窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>,</code></td><td align="center">重命名当前窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>.</code></td><td align="center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>f</code></td><td align="center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><ul><li>面板命令</li></ul><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>"</code></td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>%</code></td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>x</code></td><td align="center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>z</code></td><td align="center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>!</code></td><td align="center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>;</code></td><td align="center">切换到最后一次使用的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>q</code></td><td align="center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>{</code></td><td align="center">向前置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>}</code></td><td align="center">向后置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+o</code></td><td align="center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>方向键</code></td><td align="center">移动光标切换面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>o</code></td><td align="center">选择下一面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>空格键</code></td><td align="center">在自带的面板布局中循环切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Alt+方向键</code></td><td align="center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+方向键</code></td><td align="center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>t</code></td><td align="center">显示时钟</td></tr></tbody></table><p>默认的tmux风格比较朴素甚至有些丑陋。如果希望做一些美化和个性化配置的话，建议使用<a href="https://github.com/gpakosz/.tmux">gpakosz的tmux配置</a>。它的本质是一个tmux配置文件。</p><h3 id="开启Home和END键"><a href="#开启Home和END键" class="headerlink" title="开启Home和END键"></a>开启Home和END键</h3><p>在.zshrc中添加<code> export TERM="screen-256color"</code>。</p><h3 id="在Tmux中复制"><a href="#在Tmux中复制" class="headerlink" title="在Tmux中复制"></a>在Tmux中复制</h3><p>开启鼠标支持，配置后可以直接<code>Ctrl+a m</code>。</p><p>或者文件配置：</p><pre class="line-numbers language-shell"><code class="language-shell">#开启鼠标支持set-option -g mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制 按住<code>shift</code>键,然后拖动鼠标复制要选择的内容，然后按下<code>shift+ctrl+c</code>,复制到系统剪贴板<br> 粘贴 按下<code>shift+ctrl+v</code> 粘贴系统剪贴板中的内容到tmux中<br> 需要注意的是<br> <code>shift+ctrl+v</code>是在终端设置的粘贴快捷键<br> <code>shift+ctrl+c</code>是在终端设置的复制快捷键</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="2019/07/18/wei-fu-wu/"/>
      <url>2019/07/18/wei-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-k8s微服务"><a href="#Docker-k8s微服务" class="headerlink" title="Docker+k8s微服务"></a>Docker+k8s微服务</h2><ul><li><p>什么是软件架构？</p><p>软件架构是在软件内部，经过综合各种因素的考量、权衡，选择特定的技术，将系统划分成不同的部分并使这些部分相互分工，彼此协作，为用户提供需要的价值。</p></li><li><p>什么是微服务？</p><p>使用一套小服务来开发单个应用的方式，每个服务运行在独立的进程中，一般采用轻量级的通讯机制互联，并且它们可以通过自动化的方式部署。</p><p>特点：单一职责；轻量级通信（语言无关、平台无关）；隔离性；有自己的数据；技术多样性。</p></li><li><p>什么是单体架构？</p><p>功能、业务集中在一个发布包里，部署运行在同一进程中。</p><p>优点：易于开发、易于部署、易于测试、易于水平伸缩。</p><p>缺点：代码膨胀，难以维护；创新困难；构建、部署成本大；可扩展性差。</p></li><li><p>微服务之间如何通讯？</p><p>从通讯模式角度考虑：</p><table><thead><tr><th align="center"></th><th align="center">一对一</th><th align="center">一对多</th></tr></thead><tbody><tr><td align="center">同步</td><td align="center">请求响应模式，最常见</td><td align="center"></td></tr><tr><td align="center">异步</td><td align="center">通知/请求异步响应</td><td align="center">发布订阅/发布异步响应</td></tr></tbody></table><p>从通讯协议角度考虑：</p><ul><li>REST API</li><li>RPC:Dubbo/Dubbox、Thrift、Motan、Grpc</li><li>MQ</li></ul></li><li><p>RPC框架要向调用方屏蔽各种复杂性，要向服务提供方也屏蔽各类复杂性：</p><ul><li>调用方感觉就像调用本地函数一样</li><li>服务提供方感觉就像实现一个本地函数一样来实现服务</li></ul></li><li><p>Dubbo的架构为：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_architecture.png"></p></li><li><p>Motan</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_Motan.png"></p></li><li><p>Thrift</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_Thrift.png"></p></li><li><p>Grpc</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_GRPC.png"></p><table><thead><tr><th align="center">RPC对比</th><th align="center">Dubbo</th><th align="center">Motan</th><th align="center">Thrift</th><th align="center">Grpc</th></tr></thead><tbody><tr><td align="center">开发语言</td><td align="center">Java</td><td align="center">Java</td><td align="center">跨语言</td><td align="center">跨语言</td></tr><tr><td align="center">服务治理</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">多种序列化</td><td align="center">√</td><td align="center">√</td><td align="center">只支持thrift</td><td align="center">只支持protobuf</td></tr><tr><td align="center">多种注册中心</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">管理中心</td><td align="center">√</td><td align="center">√</td><td align="center">χ</td><td align="center">χ</td></tr><tr><td align="center">跨语言通讯</td><td align="center">χ</td><td align="center">χ</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">整体性能</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">3</td></tr></tbody></table></li><li><p>服务发现</p><ul><li><p>传统服务</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E4%BC%A0%E7%BB%9F%E6%9C%8D%E5%8A%A1.png"></p></li><li><p>微服务的客户端发现</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E7%8E%B0.png"></p></li><li><p>微服务的服务端发现</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/%E5%BE%AE%E6%9C%8D%E5%8A%A1_%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E7%8E%B0.png"></p></li></ul></li><li><p>流行的服务编排工具：Mesos、Docker Swarm、Kubernetes。</p></li><li><p>Spring Cloud vs Spring Boot：</p><ul><li>Spring Boot意在简化，是一种开发、配置风格。</li><li>Spring Cloud意在简化分布式，是功能的集合，风格的统一。</li></ul></li><li><p>Spring Cloud核心组件：</p><ul><li>Netflix Eureka 服务发现组件</li><li>Netflix Ribbon 客户端负载均衡组件</li><li>Netflix Hystrix 容错组件</li><li>Netflix Zuul 服务网关</li><li>Spring Cloud Config 分布式配置</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python OOP</title>
      <link href="2019/07/17/python-oop/"/>
      <url>2019/07/17/python-oop/</url>
      
        <content type="html"><![CDATA[<h2 id="Python面向对象编程"><a href="#Python面向对象编程" class="headerlink" title="Python面向对象编程"></a>Python面向对象编程</h2><pre class="line-numbers language-Python"><code class="language-Python">class ClassName(继承的类名):    def __init__(变量):        self.类内变量=变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。创建实例是通过类名+()实现的。可以自由的给一个实例变量绑定一个属性。</p></li><li><p><strong>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</strong></p><a id="more"></a></li><li><p><strong>在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>。并且，调用时，不用传递该参数。</strong></p></li><li><p>类里面定义的数据成员可以将变量名通过加上<code>__</code>变成私有变量。如果硬是要访问，可以通过<code>_类名__变量名</code></p></li><li><p>单<code>_</code>表示的变量意思是，虽然我可以被访问，但请不要访问我。</p></li><li><p>相较于一般的静态语言中的多态，python不强制要求传入的参数必须属于同一父类，而是只要你有所调用的方法，那么你就可以传入，都被视为“file-like object“。</p></li><li><p>通过<code>type()</code>函数判断对象所属类型。判断函数类型时通过<code>type()</code>的内置常量。如：<code>FunctionType</code>、<code>BuiltinFunctionType</code>、<code>LambdaType</code>、<code>GeneratorType</code>。</p></li><li><p><code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。<strong>总是优先使用<code>isinstance()</code>判断类型，可以将指定类型及其子类“一网打尽”。</strong></p></li><li><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list。</p></li><li><p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法。</p></li><li><p>配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态。</p></li><li><p>直接在class中定义属性，此时的属性就是类属性，所有对象都可以访问到类属性。但是如果给对象的类属性重新赋值，会覆盖这个对象的类属性，但其他对象依然可以访问到。当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p></li><li><p>因为动态语言的特殊性，可以在创建实例后，动态的给对象添加属性或者方法。动态给对象绑定方法的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义一个函数作为实例方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> types <span class="token keyword">import</span> MethodType<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age <span class="token operator">=</span> MethodType<span class="token punctuation">(</span>set_age<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 给实例绑定一个方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 调用实例方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true"># 测试结果</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想给所有类对象绑定函数使用如下代码:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> Student<span class="token punctuation">.</span>set_score <span class="token operator">=</span> set_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性，对子类不起作用。</strong></p><pre class="line-numbers language-Python"><code class="language-Python">>>> class Student(object):...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰<code>@变量名.setter</code>，负责把一个setter方法变成属性赋值。</p></li><li><p>只定义getter方法，不定义setter方法就是一个只读属性。</p></li><li><p>Python支持多继承，可以将共有的方法定义成一个方法类。基于Python的动态特性，只要拥有相同方法名的类，即可体现出类的多态性。</p></li><li><p><code>MixIn</code>设计模式是主线通过单一继承实现，但是需要“混入”额外的功能，可以通过多重继承来实现。</p></li><li><p>直接打印一个对象的信息，会调用类中的<code>__str__()</code>。直接显示变量调用，会调用类中的<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。样例代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Student object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 初始化两个计数器a，b</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self <span class="token comment" spellcheck="true"># 实例本身就是迭代对象，故返回自己</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true"># 计算下一个值</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 退出循环的条件</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true"># 返回下一个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>要表现得像list那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要使用切片功能，需要在<code>__getitem__()</code>函数中对传入的参数类型进行判断。使用<code>if isinstance(参数，slice)：</code>，可以获取切片的start参数和stop参数。</p></li><li><p>对于在类中找不到的属性，python会调用<code>__getattr__</code>函数。默认返回None。可以用于url的动态调用，如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_path <span class="token operator">=</span> path    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Chain<span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_path    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p></li><li><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p></li><li><p>枚举类，<code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> EnumMonth <span class="token operator">=</span> Enum<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Mar'</span><span class="token punctuation">,</span> <span class="token string">'Apr'</span><span class="token punctuation">,</span> <span class="token string">'May'</span><span class="token punctuation">,</span> <span class="token string">'Jun'</span><span class="token punctuation">,</span> <span class="token string">'Jul'</span><span class="token punctuation">,</span> <span class="token string">'Aug'</span><span class="token punctuation">,</span> <span class="token string">'Sep'</span><span class="token punctuation">,</span> <span class="token string">'Oct'</span><span class="token punctuation">,</span> <span class="token string">'Nov'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> member <span class="token keyword">in</span> Month<span class="token punctuation">.</span>__members__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'=>'</span><span class="token punctuation">,</span> member<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。自定义枚举类：</p><pre class="line-numbers language-python"><code class="language-python">@unique<span class="token keyword">class</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    Sun <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># Sun的value被设定为0</span>    Mon <span class="token operator">=</span> <span class="token number">1</span>    Tue <span class="token operator">=</span> <span class="token number">2</span>    Wed <span class="token operator">=</span> <span class="token number">3</span>    Thu <span class="token operator">=</span> <span class="token number">4</span>    Fri <span class="token operator">=</span> <span class="token number">5</span>    Sat <span class="token operator">=</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>type()</code>函数可以查看一个类型或变量的类型，还可以创建class。</p></li><li><p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p><ol><li><p>class的名称；</p></li><li><p>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</p></li><li><p>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 先定义函数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s.'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> Hello <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建Hello class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>可以使用metaclass控制类的创建行为，你可以把类看成是metaclass创建出来的“实例”。按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass。</p><pre class="line-numbers language-python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在子类中调用父类方法时，可以通过如下语句进行编写。</p><pre class="line-numbers language-python"><code class="language-python">super<span class="token punctuation">(</span>child_class<span class="token punctuation">,</span>child_object<span class="token punctuation">)</span><span class="token punctuation">.</span>parent_attribute<span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数表示调用父类的起始处，也就是子类的名字。</p><p>第二个参数表示类实例（一般使用self）。</p><p>第三个参数表示需要传入父类函数的参数，只有self是可以不用传入。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python模块</title>
      <link href="2019/07/17/python-mo-kuai/"/>
      <url>2019/07/17/python-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h2 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h2><ul><li><p>在Python中，一个.py文件就是一个模块。好处是<strong>提高了代码的可维护性，避免函数名和变量名的冲突，便于使用</strong>。模块名与文件名相同。</p></li><li><p>利用包名来避免模块名相同的情况。<strong>每个包下面都必须要有一个<code>__int__.py</code>文件</strong>，否则就是只是一个普通文件夹，而非一个包。<code>__int__.py</code>文件本身就是一个模块，模块名为当前文件夹的名字。</p></li><li><p>任何模块代码的第一个字符串都被视为模块的文档注释。</p></li><li><p>进行模块测试时，使用以下代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><code>if __name__ == '__main__'</code> 的意思是：当 <code>.py</code> 文件被直接运行时，<code>if __name__ =='__main__'</code> 之下的代码块将被运行；当 <code>.py</code> 文件以模块形式被导入时，<code>if __name__ =='__main__'</code>之下的代码块不会被运行。</p><ul><li><code>__author__</code>、<code>__name__</code>等是特殊变量，模块定义的文档注释可以用特殊变量<code>__doc__</code>访问。变量名前面加上下划线的变量不应该直接被引用。</li><li>默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数式编程</title>
      <link href="2019/07/16/python-han-shu-shi-bian-cheng/"/>
      <url>2019/07/16/python-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="Python函数式编程"><a href="#Python函数式编程" class="headerlink" title="Python函数式编程"></a>Python函数式编程</h2><ul><li><p>函数式编程没有变量，在确定输入时，输出就已经确定了，没有因为变量的不确定导致的副作用。允许将番薯本身作为参数传入另一个函数，允许返回一个函数。</p></li><li><p>一个函数可以接收另一个函数作为参数，称之为高阶函数。</p></li><li><p><code>map()</code>函数接收两个参数，一个是函数，一个是Iterable。<code>map()</code>将传入的函数传入到序列的每一个元素，并将结果作为新的<code>Iterator</code>返回。</p><a id="more"></a></li><li><p><code>reduce()</code>函数接收两个参数，将结果继续和序列的下一个元素做累计运算。</p><pre class="line-numbers language-python"><code class="language-python">reduce<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceDIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> map<span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>filter()</code>函数用于过滤序列，接收一个函数和一个序列。<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素，返回的是一个惰性序列。需要用<code>list()</code>强制取出。</p></li><li><p>埃式筛法实现获取素数，思想是通过了除去所有数字的倍数，获得素数。实现代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_odd_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">yield</span> n<span class="token keyword">def</span> <span class="token function">_not_divisible</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">2</span>    it <span class="token operator">=</span> _odd_iter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始序列</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> next<span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回序列的第一个数</span>        <span class="token keyword">yield</span> n        it <span class="token operator">=</span> filter<span class="token punctuation">(</span>_not_divisible<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 构造新序列</span><span class="token keyword">for</span> x <span class="token keyword">in</span> primes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sorted()</code>函数可以对list进行排序，接收一个list和一个key来定义自定义的序列，如<code>key=abs</code>，还有一个参数<code>reverse=True</code>。</p></li><li><p>当返回值为一个函数时，调用时需要加上参数后再加上()才能调用。参数会传入函数内部的函数，返回一个装有数据的函数闭包，调用外函数时，每次调用都会返回一个新的函数。返回的函数并不会立即执行，而是知道调用了f()才执行。<strong>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p></li><li><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p></li><li><p>函数对象有一个<code>_name_</code>属性，可以获取到函数的名字。</p></li><li><p>在代码运行期间动态增加功能的方式，称之为装饰器。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">setTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#由于此装饰器需要参数，所以要再套一层</span>    <span class="token keyword">def</span> <span class="token function">myDecorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#装饰器的核心，接受函数对象做参数，返回包装后的函数对象</span>        @functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">myWrapper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#包装的具体过程</span>            sign <span class="token operator">=</span> <span class="token string">"&lt;"</span> <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">">"</span>            <span class="token keyword">return</span> sign <span class="token operator">+</span> func<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> sign        <span class="token keyword">return</span> myWrapper    <span class="token keyword">return</span> myDecorator@setTag<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#用@标签在定义函数时套上装饰器</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span> <span class="token operator">+</span> name<span class="token keyword">print</span><span class="token punctuation">(</span>hello<span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时被装饰的函数的属性会被修改，改成装饰器的包装的具体函数的名字。可以使用<code>@functools.wraps(func)</code>，放在第二层嵌套后面。</p></li><li><p>偏函数可以降低函数的使用难度，由<code>functools</code>提供。作用是把一个函数的某些参数固定住（设置默认值），返回一个新的函数。可以接收函数对象、<code>*args</code>、<code>**kw</code>。如下所示：</p><pre class="line-numbers language-python"><code class="language-python">int2<span class="token operator">=</span>functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>int<span class="token punctuation">,</span>base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级特性</title>
      <link href="2019/07/15/python-gao-ji-te-xing/"/>
      <url>2019/07/15/python-gao-ji-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Python语法糖"><a href="#Python语法糖" class="headerlink" title="Python语法糖"></a>Python语法糖</h2><hr><ul><li><p>对于取制定索引范围的操作，Python提供了切片(Slice)实现。例如：<code>L[0:3]</code>，这里表示的是从索引0开始取，知道索引3为止，<strong>左闭右开的区间</strong>。<em>如果第一个数是0，还可以省略</em>。<code>[:10:2]</code>其中的2表示每两位取一个。<code>[:]</code>表示原样复制一个list。</p></li><li><p>默认情况下，dict迭代的是key。如果要迭代value，可以使用<code>for value ind.values()</code>。如果需要同事迭代key和value，可以使用<code>for k,v in d.items()</code>。</p><a id="more"></a></li><li><p>通过collections模块的Iterable类型判断是否是一个可迭代对象。<code>isinstance(变量,Iterable)</code>，这会返回一个布尔值。</p></li><li><p><code>enumerate</code>函数可以将一个list变成一个索引-元素树。</p></li><li><p>使用列表生成器来生成有一定复杂度的list。</p><pre class="line-numbers language-Python"><code class="language-Python">>>> [x * x for x in range(1, 11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中还可以加入if判断</p><pre class="line-numbers language-Python"><code class="language-Python">>>> [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以嵌套使用</p><pre class="line-numbers language-Python"><code class="language-Python">>>> [m + n for m in 'ABC' for n in 'XYZ']['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>要善于使用生成器，避免存有大量有规律的数组存在。启用方法就是将列表生成器的<code>[]</code>替换成<code>()</code>。可以通过<code>next()</code>函数来获取生成器的下一个返回值。generator是一个可迭代对象。直接调用返回的是一个生成器对象。</p></li><li><p>可以使用<code>yield</code>定义generation。每次调用<code>next()</code>时执行generation，遇到<code>yield</code>语句返回，再次执行从上次返回<code>yield</code>处继续执行。</p></li><li><p>用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p></li><li><p><code>a, b = b, a + b</code>本质上等于a=b，同时b=a+b。先赋值，后改变a、b值。</p></li><li><p>生成器是<code>Iterator</code>对象，而<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，但不是<code>Iterator</code>。若想将其变成<code>Iterator</code>可以使用<code>iter()</code>函数。本质上**<code>Iterator</code>是一个数据流，可以被<code>next()</code>函数调用并不断返回下一个数据，直至抛出<code>StopIteration</code>错误。期间无法获知序列长度，惰性计算。**凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型，凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列。</p></li><li><p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QoS知识</title>
      <link href="2019/07/13/qos-zhi-shi/"/>
      <url>2019/07/13/qos-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="QoS"><a href="#QoS" class="headerlink" title="QoS"></a>QoS</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>QoS(Quality of Service)表示的是服务质量。广义上讲，服务质量涉及网络应用的方方面面，只要是对网络应用有利的措施，其实都是在提高服务质量。</p><h3 id="2-QoS模型"><a href="#2-QoS模型" class="headerlink" title="2. QoS模型"></a>2. QoS模型</h3><ol><li><p>Best Effort<br>应用可以在任何时候，发出任意数量的报文，网络尽最大可能来发送报文，对带宽、时延、抖动和可靠性等不提供任何保证。<br>Best Effort是Internet的缺省服务模型，通过FIFO（First In First Out，先进先出）队列来实现。<br>尽力而为的服务实质上并不属于QoS的范畴，因为在转发尽力而为的通信时，并没有提供任何服务或转发保证。</p></li><li><p>2.DiffServ</p><p>根据服务要求对不同任务的数据进行分类，对报文按类进行优先级标记，然后有差别的提供服务。为重要的应用提供端对端的ＱoS。通过以下技术实现： </p></li></ol><ul><li><p>流量标记与控制技术：它根据报文的CoS（Class of Service，服务等级）域、ToS域（对于IP报文是指IP优先级或者DSCP）、IP报文的五元组（协议、源地址、目的地址、源端口号、目的端口号）等信息进行报文分类，完成报文的标记和流量监管。目前实现流量监管技术多采用令牌桶机制。</p></li><li><p>拥塞管理与拥塞避免技术：WRED、PQ、CQ、WFQ、CBQ等队列技术对拥塞的报文进行缓存和调度，实现拥塞管理与拥塞避免。</p><ol start="3"><li><p>IntServ</p><p>Integrated Service，综合服务。在这种模型中，节点在发送报文前，需要向网络申请资源预留，确保网络能够满足数据流的特定服务要求。</p><p>IntServ可以提供保证服务和负载控制服务两种服务，保证服务提供延迟和带宽来满足应用程序的要求；负载控制服务保证即使在网络过载的情况下，也能对报文提供与网络未过载时类似的服务。</p><p>在IntServ模型中，网络资源的申请是通过信令来完成的，应用程序首先通知网络它自己的流量参数和需要的特定服务质量请求，包括带宽、时延等，应用程序一般在收到网络的确认信息，即确认网络已经为这个应用程序的报文预留了资源后，才开始发送报文。同时应用程序发出的报文应该控制在流量参数描述的范围以内。负责完成保证服务的信令为RSVP（Resource Reservation Protocol，资源预留协议），它通知网络设备应用程序的QoS需求。RSVP是在应用程序开始发送报文之前来为该应用申请网络资源的，所以是带外信令。</p><p>保证服务要求为单个流预先保留所有连接路径上的网络资源，而当前在Internet主干网络上有着成千上万条应用流，保证服务如果要为每一条流提供QoS服务就变得不可想象了。因此，IntServ模型很难独立应用于大规模的网络，目前主要与MPLS TE（Traffic Engineering，流量工程）结合使用。</p></li></ol></li></ul><h3 id="3-QoS基本原理"><a href="#3-QoS基本原理" class="headerlink" title="3. QoS基本原理"></a>3. QoS基本原理</h3><ol><li><p>流量分类与标记</p><p>将流量划分成多个优先级或多个服务类。如使用以太网帧中802.1Q头保留的User Priority(用户优先级)字段标记服务级别，可以将以太网帧最多分成23 = 8类；使用IP报文头的ToS（Type of service，服务类型）字段的前三位（即IP优先级）来标记报文，可以将报文最多分成23 = 8类；使用DSCP（Differentiated Services Codepoint，区分服务编码点，ToS域的前6位），则最多可分成26 = 64类。在报文分类后，就可以将其它的QoS特性应用到不同的分类，实现基于类的拥塞管理、流量整形等。</p><p>对于MPLS网络报文，则一般是根据MPLS报文中的EXP域进行处理。EXP域包括3位，虽然RFC 3032把它叫做实验域，但它通常作为MPLS报文的CoS域，与IP网络的ToS或DSCP域等效。</p><p>对于流量的分类，上面提到的关于以太网帧的Cos域、IP报文的ToS域等与MPLS报文的EXP域等仅是分类的一种情况，其实几乎可以对报文的任何信息段进行分类，比如也可以根据源IP地址、目的IP地址、源端口号、目的端口号、协议ID等进行流量的分类。</p><p>虽然流量分类几乎可以根据报文的任何字段进行，但是流量分类标记则一般只对802.1Q 以太网帧的CoS域、IP报文的ToS域、MPLS报文的EXP域进行标记。<strong>流量的标记主要的目的就是让其他处理此报文的应用系统或设备知道该报文的类别，并根据这种类别对报文进行一些事先约定了的处理。</strong></p><p>例如，在网络的边界做如下分类和标记：</p><p>1）所有VoIP数据报文聚合为EF业务类，将报文的IP优先级标记为5，或者将DSCP值标记为EF；</p><p>2）所有VoIP控制报文聚合AF业务类，将报文的IP优先级标记为4，或者将DSCP值标记为AF31。</p><p>当报文在网络边界被标记分类之后，在网络的中间节点，就可以根据标记，对不同类别的流量给予差别服务了。例如：对上述例子中的EF类业务保证时延和减少抖动，同时进行流量监管；对AF业务类在网络拥塞时仍然保证一定的带宽，等等。</p></li><li><p>拥塞管理技术原理</p><ol><li><p>拥塞管理的基本概念</p><p>在计算机数据通信中，通信信道是被多个计算机共享的，并且，广域网的带宽通常要比局域网的带宽小，这样，当一个局域网的计算机向另一个局域网的计算机发送数据时，由于广域网的带宽小于局域网的带宽，数据将不可能按局域网发送的速度在广域网上传输。此时，处在局域网和广域网之间的路由器将不能发送一些报文，即网络发生了拥塞。</p><p>如下图所示，当公司分支1向公司总部以100M的速度发送数据时，将会使Router2的串口S0/1发生拥塞。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_%E7%BD%91%E7%BB%9C%E6%8B%A5%E5%A1%9E.png"></p><p>拥塞管理是指网络在发生拥塞时，如何进行管理和控制。处理的方法是使用队列技术。将所有要从一个接口发出的报文进入多个队列，按照各个队列的优先级进行处理。不同的队列算法用来解决不同的问题，并产生不同的效果。常用的队列技术有FIFO、PQ、CQ、WFQ、CBWFQ等，下文逐一介绍这些常用队列技术的基本原理。</p></li><li><p>FIFO</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_FIFO.png"></p><p>FIFO队列不对报文进行分类，当报文进入接口的速度大于接口能发送的速度时，FIFO按报文到达接口的先后顺序让报文进入队列，同时，FIFO在队列的出口让报文按进队的顺序出队，先进的报文将先出队，后进的报文将后出队。</p><p>FIFO队列具有处理简单，开销小的优点。但FIFO不区分报文类型，采用尽力而为的转发模式，使对时间敏感的实时应用（如VOIP）的延迟得不到保证，关键业务的带宽也不能得到保证。</p></li><li><p>PQ(Priority Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_PQ.png"></p><p>优先队列是针对关键业务应用设计的。关键业务有一个重要特点，在拥塞发生时根据优先获得服务以减少响应的延迟。PQ可以根据网络协议（如IP、IPX）、数据流入接口、报文长短、IP报文的ToS、五元组（协议ID、源IP地址、目的IP地址、源端口号、目的端口号）等条件进行分类，对于MPLS网络，则根据MPLS报文EXP域值进行分类。最终将所有报文分成最多4类，分别属于PQ的4个队列中的一个，然后，按报文所属类别将报文送入相应的队列。</p><p>$$PQ队列\begin{cases}\text{高优先级队列}\\text{中优先级队列}\\text{正常优先级队列}\\text{低优先级队列}\end{cases}$$</p><p>它们的优先级依次降低。在报文出队的时候，PQ首先让高优先队列中的报文出队并发送，直到高优先队列中的报文发送完，然后发送中优先队列中的报文，同样，直到发送完，然后是正常优先队列和低优先队列。这样，分类时属于较高优先级队列的报文将会得到优先发送，而较低优先级的报文将会在发生拥塞时被较高优先级的报文*<em>抢占**</em>。这样会使得实时业务（如VoIP）的报文能够得到优先处理，非实时业务（如E-Mail）的报文在网络处理完关键业务后的空闲间隙得到处理，既保证了实时业务的优先，又充分利用了网络资源。</p><p>缺点：当较高优先级队列中总有报文存在时，则低优先级队列中的报文将一直得不到服务，出现队列“饿死”现象。</p></li><li><p>CQ(Custom Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_CQ.png"></p><p>CQ的分类方法和PQ基本相同，不同的是它最终将所有报文分成最多至17类，每类报文对应CQ中的一个队列，接口拥塞时，报文按匹配规则被送入对应的队列；如果报文不匹配任何规则，则被送入缺省队列（缺省队列默认为1，可配置修改缺省队列）。</p><p>CQ的17个队列中，0号队列是优先队列，路由器总是先把0号队列中的报文发送完，然后才处理1到16号队列中的报文，所以0号队列一般作为<strong>系统队列</strong>，把实时性要求高的交互式协议报文放到0号队列。1到16号队列调度采用<strong>轮询</strong>方式，按照用户预先配置的额度依次从1到16号用户队列中取出一定数量的报文发送。如果轮询到某队列时该队列恰好为空，则立即转而轮询下一个队列。</p><p>优点：既保证关键业务能获得较多的带宽，又不至于使非关键业务得不到带宽。</p><p>缺点：由于采用轮询调度各个队列，CQ无法保证任何数据流的延迟。</p></li><li><p>WFQ(Weighted Fair Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_WFQ.png"></p><p>加权公平队列对报文按流特征进行分类，对于IP网络，相同源IP地址、目的IP地址、源端口号、目的端口号、协议号、ToS的报文属于同一个流，而对于MPLS网络，具有相同的标签和EXP域值的报文属于同一个流。每一个流被分配到一个队列，该过程称为<strong>散列</strong>，采用HASH算法来自动完成，这种方式会尽量将不同特征的流分入不同的队列中。每个队列类别可以看作是一类流，其报文进入WFQ中的同一个队列。<em>WFQ允许的队列数目是有限的，用户可以根据需要配置该值。</em></p><p>在出队的时候，WFQ按流的优先级（precedence）来分配每个流应占有出口的带宽。优先级的数值越小，所得的带宽越少。优先级的数值越大，所得的带宽越多。这样就保证了相同优先级业务之间的公平，体现了不同优先级业务之间的权值。</p><p>优点：在于配置简单，有利于小包的转发，每条流都可以获得公平调度，同时照顾高优先级报文的利益，WFQ均衡各个流的延迟与抖动。</p><p>缺点：由于流是自动分类，无法手工干预，故缺乏一定的灵活性，且受资源限制，当多个流进入同一个队列时无法提供精确服务，无法保证每个流获得的实际资源量，不适合延迟敏感的业务应用。</p></li><li><p>CBQ(Class Bases Queuing)</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_CBQ.jpg"></p><p>基于类的队列首先根据IP优先级或者DSCP、输入接口、IP报文的五元组等规则来对报文进行分类；对于MPLS网络的LSR，主要是根据EXP域值进行分类。然后让不同类别的报文进入不同的队列。对于不匹配任何类别的报文，报文被送入系统定义的缺省类。</p><p>CBQ包括一个低时延队列LLQ（Low Latency Queuing，低时延队列），用来支撑EF（Expedited Forwarding，快速转发）类业务，绝对优先发送，保证时延。进入EF的报文在接口没有发生拥塞的时候（此时所有队列中都没有报文），所有属于EF的报文都可以被发送。在接口发生拥塞的时候（队列中有报文时），进入EF的报文被限速，超出规定流量的报文将被丢弃。另外有64个BQ队列（Bandwidth Queuing，带宽保证队列），用来支撑AF（Assured Forwarding，确保转发）类业务，可以保证每一个队列的带宽及可控的时延。系统调度报文出队列的时候，按用户为各类报文设定的带宽将报文出队发送。这种队列技术应用了先进的队列调度算法，可以实现各个类的队列的公平调度。当接口中某些类别的队列没有报文时，BQ队列的报文还可以公平地得到空闲的带宽，和时分复用系统相比，大大提高了线路的利用率。同时，在接口拥塞的时候，仍然能保证各类报文得到用户设定的最小带宽。</p><p><em>AF业务类型着重定义了确保带宽的服务质量，EF业务则在确保带宽的基础 之上，增加了低时延、低抖动等服务质量定义。BE业务顾名思义，没有特殊的服务质量要求</em></p><p>最后还有一个WFQ队列，对应BE（Best Effort，尽力传送）业务，使用接口剩余带宽进行发送。</p><p>CBQ可根据报文的输入接口、满足ACL情况、IP Precedence、DSCP、EXP、Label等规则对报文进行分类、进入相应队列。对于进入EF和AF的报文，要进行测量；考虑到链路层控制报文的发送、链路层封装开销及物理层开销（如ATM信元头），建议EF与AF占用接口的总带宽不要超过接口带宽的75%。</p><p>优点：CBQ可为不同的业务定义不同的调度策略（如带宽、时延等）。</p><p>缺点：由于涉及到复杂的流分类，对于高速接口（GE以上）启用CBQ特性系统资源存在一定的开销。</p></li><li><p>RTP(Real Time Protocol Priority Queuing) </p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_RTP.jpg"></p><p>RTP优先队列是一种保证实时业务（包括语音与视频业务）服务质量的简单队列技术。其原理就是将承载语音或视频的RTP报文送入高优先级队列，使其得到优先发送，保证时延和抖动降低为最低限度，从而保证了语音或视频这种对时延敏感业务的服务质量。</p><p>RTP优先队列将RTP报文送入一个具有较高优先级的队列，RTP报文是端口号在一定范围内为偶数的UDP报文，端口号的范围可以配置，一般为16384~32767。RTP优先队列可以同前面所述的任何一种队列（包括FIFO、PQ、CQ、WFQ与CBQ）结合使用，它的优先级是最高的。由于CBQ中的EF完全可以解决实时业务，所以不推荐将RTP优先队列与CBQ结合应用。</p><p>由于对进入RTP优先队列的报文进行了限速，超出规定流量的报文将被丢弃，这样在接口拥塞的情况下，可以保证属于RTP优先队列的报文不会占用超出规定的带宽，保护了其他报文的应得带宽，解决了PQ的高优先级队列的流量可能“饿死”低优先级流量的问题。</p></li></ol></li><li><p>拥塞避免原理</p><p>传统的丢弃策略采用尾部丢弃的方法，同等对待所有报文，不对报文进行服务等级的区分。对于TCP报文，如果大量的报文被丢弃，将造成TCP超时，从而引发TCP的慢启动和拥塞避免机制，使TCP减少报文的发送。当队列同时丢弃多个TCP连接的报文时，将造成多个TCP连接同时进入慢启动和拥塞避免，称之为：<strong>TCP全局同步</strong>。这样多个TCP连接发向队列的报文将同时减少，使得发向队列的报文的量不及线路发送的速度，减少了线路带宽的利用。并且，发向队列的报文的流量总是忽大忽小，使线路的上的流量总在极少和饱满之间波动。</p><p>为了避免这种情况的发生，队列可以采用加权随机早期检测<strong>WRED（Weighted Random Early Detection）</strong>的报文丢弃策略（WRED与RED的区别在于前者引入IP优先权，DSCP值，和MPLS EXP来区别丢弃策略）。采用WRED时，用户可以设定队列的阈值（threshold）。当队列的长度小于低阈值时，不丢弃报文；当队列的长度在低阈值和高阈值之间时，WRED开始随机丢弃报文（队列的长度越长，丢弃的概率越高）；当队列的长度大于高阈值时，丢弃所有的报文。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_WRED.png"></p></li><li><p>流量监控原理</p><p>流量监管（Commit Access Rate，简称CAR）的典型作用是限制进入某一网络的某一连接的流量与突发。在报文满足一定的条件时，如某个连接的报文流量过大，流量监管就可以对该报文采取不同的处理动作，例如丢弃报文，或重新设置报文的优先级等。通常的用法是使用CAR来限制某类报文的流量，例如限制HTTP报文不能占用超过50%的网络带宽。</p><p>CAR利用令牌桶（Token Bucket，简称TB）进行流量控制。下图所示为利用CAR进行流量控制的基本处理过程：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_CAR.png"></p><p>首先，根据预先设置的匹配规则来对报文进行分类，如果是没有规定流量特性的报文，就直接继续发送，并不需要经过令牌桶的处理；如果是需要进行流量控制的报文，则会进入令牌桶中进行处理。如果令牌桶中有足够的令牌可以用来发送报文，则允许报文通过，报文可以被继续发送下去。如果令牌桶中的令牌不满足报文的发送条件，则报文被丢弃。这样，就可以对某类报文的流量进行控制。</p><p>在实际应用中，CAR不仅可以用来进行流量控制，还可以进行报文的标记（mark）或重新标记（re-mark）。具体来讲就是CAR<strong>可以设置IP报文的优先级或修改IP报文的优先级，达到标记报文的目的</strong>。</p></li><li><p>流量整形原理</p><p>通用流量整形（Generic Traffic Shaping，简称GTS）可以对不规则或不符合预定流量特性的流量进行整形，以利于网络上下游之间的带宽匹配。</p><p>GTS与CAR一样，均采用了令牌桶技术来控制流量。GTS与CAR的主要区别在于：利用CAR在接口的出、入方向进行报文的流量控制，对不符合流量特性的报文进行丢弃；而GTS只在接口的出方向对于不符合流量特性的报文进行缓冲，减少了报文的丢弃，同时满足报文的流量特性，但增加了报文的延迟。</p><p>GTS的基本处理过程如下图所示，其中用于缓存报文的队列称为GTS队列。</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_GTS.png"></p></li><li><p>物理接口总速率限制原理</p><p>利用物理接口总速率限制（Line Rate，简称LR）可以在一个物理接口上，限制接口发送报文（包括紧急报文）的总速率。</p><p>LR的处理过程仍然采用令牌桶进行流量控制。如果用户在路由器的某个接口上配置了LR，规定了流量特性，则所有经由该接口发送的报文首先要经过LR的令牌桶进行处理。如果令牌桶中有足够的令牌可以用来发送报文，则报文可以发送。如果令牌桶中的令牌不满足报文的发送条件，则报文入QoS队列进行拥塞管理。这样，就可以对通过该物理接口的报文流量进行控制。</p><p>LR的基本处理过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_LR.png"></p></li></ol><h3 id="4-其他提高QoS的技术"><a href="#4-其他提高QoS的技术" class="headerlink" title="4. 其他提高QoS的技术"></a>4. 其他提高QoS的技术</h3><ol><li><p>链路效率机制</p><p> 链路效率机制，用于改善链路的性能，间接提高网络的QoS，如降低链路发包的时延（针对特定业务）、调整有效带宽。链路效率机制有很多种，下面介绍两种比较典型的链路效率机制及其基本原理。</p><ol><li><p>链路分片与交叉（Link Fragment &amp; Interleave，LFI）</p><p>  对于低速链路，即使为语音等实时业务报文配置了高优先级队列（如RTP优先队列或LLQ），也不能够保证其时延与抖动，原因在于接口在发送其他数据报文的瞬间，语音业务报文只能等待，而对于低速接口发送较大的数据报文要花费相当长的时间。采用LFI以后，数据报文（非RTP实时队列和LLQ中的报文）在发送前被分片、逐一发送，而此时如果有语音报文到达则被优先发送，从而保证了语音等实时业务的时延与抖动。LFI主要用于低速链路。</p><p>  链路效率机制的工作原理图如下所示：</p><p>  <img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_LFI.png"></p><p>  如上图所示，应用LFI技术，在大报文出队的时候，可以将其分为定制长度的小片报文，这就使RTP优先队列或LLQ中的报文不必等到大片报文发完后再得到调度，它等候的时间只是其中小片报文的发送时间，这样就很大程度的降低了低速链路因为发送大片报文造成的时延。</p><ol start="2"><li><p>RTP报文头压缩（RTP Header Compression，CRTP）</p><p>CRTP用于RTP（Real-time Transport Protocol）协议，对IP头、UDP头和RTP头进行压缩，通常在低速链路上使用。可将40字节的IP/UDP/RTP头压缩到2~4个字节（不使用UDP校验和可到2字节），提高链路带宽的利用率。CRTP主要得益于同一会话的语音分组头和语音分组头之间的差别往往是不变的，因此只需传递增量。</p><p>RTP协议用于在IP网络上承载语音、视频等实时多媒体业务。RTP报文包括头部分和数据部分，RTP的头部分包括：12字节的RTP头，加上20字节的IP头和8字节的UDP头，就是40字节的IP/UDP/RTP头；RTP数据部分典型载荷是20字节到160字节。为了避免不必要的带宽消耗，可以使用CRTP特性对报文头进行压缩。CRTP可以将IP/UDP/RTP头从40字节压缩到2～4字节，对于40字节的载荷，头压缩到4字节，压缩比为（40+40）/（40+4），约为1.82，可见效果是相当可观的，可以有效的减少链路带宽的消耗，尤其是低速链路。</p><p>RTP报文头压缩的处理过程如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/weiyouwozuiku/buerlog_img/BlogImage/QoS%E7%9F%A5%E8%AF%86_CRTP.png"></p></li></ol></li></ol></li><li><p>链路层QoS技术</p><p> 链路层QoS技术主要针对ATM（Asynchronous Transfer Mode，异步传输模式）、帧中继等链路层协议支持QoS。ATM作为一种面向连接的技术，提供对QoS最强有力的支持，而且可以基于每个连接提供特定的QoS保证；帧中继网络确保连接的CIR（Committed Information Rate，承诺信息速率）最小，即在网络拥塞时，传输速度不能小于这个值。</p><ol><li><p>ATM QoS</p><p> ATM是异步传输模式（Asynchronous Transfer Mode）的简称，以信元为基本单位进行信息传输、复接和交换。ATM信元具有53字节的固定长度，其中5个字节构成信元头部，主要用来标识虚连接，另外也完成了一些功能有限的流量控制，拥塞控制，差错控制等功能，其余48个字节是有效载荷。ATM是面向连接的交换，其连接是逻辑连接，即虚电路。每条虚电路（Virtual Circuit，VC）用虚路径标识符（Virtual Path Identifier，VPI）和虚通道标识符（Virtual Channel Identifier，VCI）来标识。一个VPI/VCI值对只具有本地意义，不具有全局有效性。它在ATM节点上被翻译。当一个连接被释放时，与此相关的VPI/VCI值对也被释放，它被放回资源表，供其它连接使用。</p><p> ATM中每一条VC都有一定的QoS保障，这是由ATM的连接管理来实现的。当用户与网络或网络与网络建立一个连接的时候，双方就确定了一份通信契约，契约中包括流量参数和QoS参数两部分。此通信契约为双方所共识，双方必须遵守。流量参数包括峰值信元速率（PCR，Peak Cell Rate）、持续信元速率（SCR，Sustained Cell Rate）、最小信元速率（MCR，Minimum Cell Rate）以及最大突发量（MBS，Maximum Burst Size），它们描述业务本身的流量特性，又称为源流量参数。QoS参数主要包括最大信元传递时延（MCTD，MeanCell Transfer Delay）、信元抖动容限（CDVT，CellDelayVariationTolerance）和信元丢失率（CLR，Cell Loss Ratio）， MCTD是信元从一个端点到另一个端点所需要的时间， CDVT是信元间隔的上限， CLR是可以接受的因网络拥塞而导致信元丢失比例。</p><p> ATM端系统负责确保传输的流量符合QoS合同。ATM端系统通过缓冲数据来对流量进行整形，并按约定的QoS参数传输通信。ATM交换机控制每个用户的通信指标，并将其与QoS合同进行比较。对于超过了QoS合同的通信，ATM节点可以设置信元的CLP（Cell Loss Priority，信元丢弃优先级）位。在网络拥塞时，CLP置位的信元被丢弃的可能性更大。</p><p> ATM网络拥塞管理的基本思想在于：引入预防性控制措施，不再是出现拥塞之后再采取措施来消除拥塞，而是通过精心管理网络资源来避免拥塞的出现。</p></li><li><p>FR QoS</p><p> FR（Frame Relay，帧中继）是一种统计复用的协议，它能够在单一物理传输线路上提供多条虚电路。每条虚电路用DLCI（Data Link Connection Identifier，数据链路连接标识）来标识。每条虚电路通过LMI（Local Management Interface，本地管理接口）协议检测和维护虚电路的状态。</p><p> 帧中继采用VC（Virtual Circuit）虚电路技术，即帧中继传送数据使用的传输链路是逻辑连接，而不是物理连接。虚电路是面向连接的，可以保证用户帧按顺序传送至目的地。根据虚电路建立方式的不同，将帧中继虚电路分为两种类型：永久虚电路（PVC，Permanent Virtual Circuit）和交换虚电路（SVC，Switched Virtual Circuit）。PVC是手工设置产生的虚电路，而SVC是通过协议协商自动创建和删除的虚电路。</p><p> 帧中继报头中的3个位提供了帧中继网络中的拥塞控制机制，这3个位分别叫做向前显式拥塞通知（FECN，Forward Explicit Congestion Notification）位、向后显式拥塞通知（BECN，Backward Explicit Congestion Notification）位和丢弃合格（DE，Discard Eligible）位。可以通过帧中继交换机将FECN位置1来告知诸如路由器等目标数据终端设备（DTE，Data Terminal Equipment），在帧从源传送到目的地的方向发生了拥塞。帧中继交换机将BECN位置1则告知目标路由器，在帧从源传送到目的地的反方向上发生了拥塞。DE位由路由器或其他DTE设备设置，指出被标记的帧没有传输的其他帧那么重要，它在帧中继网络中提供了一种基本的优先级机制，如果发生拥塞时，DE位置位的帧会被优先丢弃。</p><p> 帧中继流量整形（FRTS，Frame Relay Traffic Shaping）对从帧中继VC输出的通信进行整形，使之与配置速率一致，它将超出平均速率的分组放到缓冲区来使突发通信变得平滑。根据配置的排队机制，当有足够的可用资源时，这些缓冲的分组出队并等候被传输。排队算法是基于单个VC配置的，它只能针对接口的出站通信进行设置。FRTS可对每个VC的流量进行整形，将其峰值速率整形为承诺信息速率（CIR，Committed Information Rate）或其他定义的值，如超额信息速率（EIR，Excess Information Rate）。自适应模式的FRTS还能够根据收到的网络BECN拥塞指示符降低帧中继VC的输出量，将PVC的输出流量整形为与网络的可用带宽一致。</p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> QoS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数</title>
      <link href="2019/07/13/python-han-shu/"/>
      <url>2019/07/13/python-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h2><ul><li><p>调用函数时，如果传入的参数或者类型不对，Python会报TypeError的错误。</p></li><li><p><code>int(参数)</code>将参数转换成整数，其他类型也用类似的函数进行转换。</p></li><li><p>函数名是指向一个函数对象的引用。可以将函数赋值给另一个对象，效果是给这个函数起了别名。</p></li><li><p>函数定义</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）：    函数逻辑    <span class="token keyword">return</span> 返回值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>没有返回值的函数，其实也会返回结果，是None。返回return None可以简写为return。</p></li></ul><a id="more"></a><ul><li><p>未实现的函数可以将函数体先写成<code>pass</code>。<code>pass</code>表示什么都不做，只有起占位符的作用。</p></li><li><p>定义函数时可以进行数据类型检查，使用<code>isinstance()</code>实现。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>需校验参数<span class="token punctuation">,</span><span class="token punctuation">(</span>数据类型集合或单一数据类型<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'bad operand type'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数return多个值，本质上是返回了一个tuple</p></li><li><p>默认参数同java。必选参数在前，默认参数在后。</p></li><li><p>当不按照顺序进行传参时，需要把参数名写上。</p></li><li><p><strong>默认参数必须指向不变对象！</strong></p></li><li><p>在参数名前面加上*，参数就变成了可变参数。如果传递的参数原本就是一个tuple或者list，那么需要在参数名前加上*，使其编程可变参数。</p></li><li><p>关键字参数就是在参数名前面加上<code>**</code>。如果传入一个dict集合，在参数前加上<code>**</code>。</p></li><li><p>命名关键字参数，可以限制关键字参数中只接收需要的关键字参数。</p><pre class="line-numbers language-Python"><code class="language-Python">def 函数名(参数1,参数2,*,参数三,参数四)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面那个例子的参数三、参数四就是命名关键字，传入时必须要传入参数名。可以有缺省值。</p></li><li><p>通过尾递归来优化递归造成的栈溢出。尾递归是指，在函数返回的时候，调用自身本身，并且，<code>return</code>语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。重点是把每一步计算的值传递到函数中去。如下所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> fact_iter<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fact_iter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> product  <span class="token keyword">return</span> fact_iter<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">*</span> product<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云任务调度算法</title>
      <link href="2019/07/12/yun-ren-wu-diao-du-suan-fa/"/>
      <url>2019/07/12/yun-ren-wu-diao-du-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="云任务调度算法"><a href="#云任务调度算法" class="headerlink" title="云任务调度算法"></a>云任务调度算法</h2><p>云环境下评价任务调度性能主要取决于三个性能指标：<strong>完成时间、服务质量、资源利用率</strong>。</p><p>云计算通常将一个大规模计算任务进行分布式并行计算。逻辑上将一个完整的任务（job）通过Map/Reduce模型拆分成若干个子任务（task），依赖不同的调度算法，将子任务分配到不同的资源节点上运行。当所有子任务处理结束，系统将每个子任务执行完毕的任务结果汇总到用户那。</p><p>云计算调度的总目标函数为：</p><p>$$f(x)=min \displaystyle \sum^{n}<em>{i=1} \displaystyle \sum^{m}</em>{j=1}makespan_{ij}cost_{ij}$$</p><p>其中$makespan_{ij}=ECT_{ij}+start(r_{j})$，表示的是任务$t_i$在处理节点$r_j$上执行的最早完成时间。其中$ECT_{ij}$表示任务$t_i$在处理节点$r_j$上执行的预期执行时间，可以通过n×m的矩阵表示。$start(r_j)$表示处理节点的最早可用时间。而$cost_{ij}=ECT*q_j$,$q_j$表示处理节点$q_j$在单位时间上被使用的价格。</p><h3 id="基于网格计算的传统调度算法"><a href="#基于网格计算的传统调度算法" class="headerlink" title="基于网格计算的传统调度算法"></a>基于网格计算的传统调度算法</h3><h4 id="Min-min算法"><a href="#Min-min算法" class="headerlink" title="Min-min算法"></a>Min-min算法</h4><p>思想：<strong>尽可能将需要调度的任务分配给最早可用且执行速度最快的资源，通过获取任务执行的两个最小值，即任务最早执行开始时间和最快执行速度来完成选择</strong></p><p>通俗化理解：选取完成时间最短的任务在运行速度最快的机器上运行。</p><pre class="mermaid">graph TBA{判断任务集合是否为空}--&gt;|不为空|B[求出任务映射到所有可用机器上的最早完成时间]B--&gt;D[找出最早完成时间最小的任务和相应机器]D--&gt;E[将任务映射到机器上并将该任务从任务集合中删除]E--&gt;F[更新机器的期望就绪时间]F--&gt;G[更新其他任务在现在使用的机器上的最早完成时间]G--&gt;AA--&gt;|为空|C[退出程序]</pre><p>缺点：1. 容易导致负载过度集中在能力较强的节点，导致资源不均衡产生的浪费。</p><p>​           2. 长执行时间的任务得不到处理资源。</p><h4 id="Max-min算法"><a href="#Max-min算法" class="headerlink" title="Max-min算法"></a>Max-min算法</h4><p>思想：<strong>将某个任务分配给可用的资源时，将具有最大最早完成时间的任务$t_i$指派给具有最早执行时间的计算资源$r_j$ ，然后更新资源的最早可用时间和任务集，直到全部任务调度完成。</strong></p><p>通俗化理解：将执行时间最长的任务放在运行速度最慢的机器上。</p><pre class="mermaid">graph TBA{判断任务集合是否为空}--&gt;|不为空|B[求出任务映射到所有可用机器上的最早完成时间]B--&gt;C[找出最早完成时间最大的任务和对用的机器]C--&gt;D[任务映射到机器上并将任务从任务集合中删除]D--&gt;E[更新机器的期望就绪时间]E--&gt;F[更新其他任务在机器上的最早完成时间]F--&gt;AA--&gt;|为空|G[退出程序]</pre><p>优点：具有较好的负载均衡性。</p><h4 id="Sufferage算法"><a href="#Sufferage算法" class="headerlink" title="Sufferage算法"></a>Sufferage算法</h4><p>思想：<strong>以任务最小完成时间为调度目标．在Sufferage算法中，将任务的最早完成时间与次早完成时间之间的差值定义为 Sufferage。Sufferage值反映了某个任务如果不分配到完成时间最早的资源上将造成的损失．所以，用该算法调度时总是将资源分配到估计执行损失最大的资源节点上，否则将会遭受最大的损失．当任务发生竞争关系时，先比较各任务的执行损失，再将候选资源分配给损失最大的任务，从而使得调度结果逼近最优解。</strong></p><p>缺点：负载的平衡性不高。</p><hr><h3 id="Hadoop中的任务调度算法"><a href="#Hadoop中的任务调度算法" class="headerlink" title="Hadoop中的任务调度算法"></a>Hadoop中的任务调度算法</h3><p>Hadoop将云计算系统的用户、系统的主控节点、接收并完成计算任务的节点分别抽象为三个角色，即User、Master和Worker。</p><h4 id="FIFO算法"><a href="#FIFO算法" class="headerlink" title="FIFO算法"></a>FIFO算法</h4><p>思想：<strong>根据用户提交作业的先后时间和优先级的高低来进行任务调度。当系统中有空闲Worker请求任务时，Master会选择一个<em>最早提交并且优先级最高的任务</em>分配给该Worker节点。</strong></p><p>优点：易于实现，可保证系统的调度开销小。</p><p>缺点：不能及时相应小作业的请求；不支持抢占。</p><h4 id="公平调度算法-fair-scheduling"><a href="#公平调度算法-fair-scheduling" class="headerlink" title="公平调度算法(fair scheduling)"></a>公平调度算法(fair scheduling)</h4><p>思想：<strong>尽可能满足不同需求的用户能够有平等的机会使用系统资源。当只有一个作业提交到系统后，整个系统的所有计算资源都会被这个作业独占．当有新作业提交时，原作业所占资源中已经完成任务的worker会被释放，供那些新提交的作业使用。</strong></p><p>公平调度算法中，系统通过为用户建立作业池来管理和维护作业，并保证作业调度的公平性。在每个作业池中，各个作业<strong>平分</strong>池内的资源。</p><p>$$公平调度\begin{cases}\text{作业池间的调度            ⇒     最小共享额度及公平共享额度}\\text{作业池内资源槽的调度     ⇒   默认使用基于优先级的FIFO算法}\end{cases}$$</p><p>优点：支持抢占。保证小作业得到合理的响应。</p><p>缺点：不能保证多种类型服务质量需求的作业获得响应所需的资源。且达到较高的满意度。</p><h4 id="计算能力调度算法-capacity-scheduling"><a href="#计算能力调度算法-capacity-scheduling" class="headerlink" title="计算能力调度算法(capacity scheduling)"></a>计算能力调度算法(capacity scheduling)</h4><p>思想：<strong>按照各个队列不同的需求将相应的资源分配出去，保证各个作业都能占用各自需要的资源．当作业被提交给系统后，按照配置文件由系统放入指定的队列，也通过配置文件将系统资源分配给每个队列，各个队列获得指定数量计算资源来运行任务。</strong></p><p>该算法通过建立作业队列来管理和维护作业，对于分配出去但未完成计算任务的资源，或者处于空闲状态的资源，允许各个队列占用。</p><p>$$计算能力调度\begin{cases}\text{队伍间的调度        ⇒    选择一个具有最多空闲空间的队列 }\\text{队伍内的调度        ⇒     默认采用带有优先级的额FIFO}\end{cases}$$</p><p>缺点：不支持抢占；限制了用户占用资源的比例</p><p>优点：能够有效地处理各种类型的作业且考虑了一部分服务质量需求</p><hr><h3 id="智能化的任务调度算法"><a href="#智能化的任务调度算法" class="headerlink" title="智能化的任务调度算法"></a>智能化的任务调度算法</h3><h4 id="遗传算法-genetic-algorithm"><a href="#遗传算法-genetic-algorithm" class="headerlink" title="遗传算法(genetic algorithm)"></a>遗传算法(genetic algorithm)</h4><p>是一种基于生物遗传和进化机制、适合复杂系统优化的自适应概率优化技术。</p><p>思想：<strong>在搜索过程中自动获取和积累有关搜索空间的知识，并自适应地控制搜索过程求得最优解。</strong></p><p>$$标准的遗传算法\begin{cases}\text{种群}\\text{适应度函数♥   重要，直接影响收敛速度与最优解的查找}\\text{遗传操作}\end{cases}$$</p><h4 id="粒子群算法-particle-swarm-optimization"><a href="#粒子群算法-particle-swarm-optimization" class="headerlink" title="粒子群算法(particle swarm optimization)"></a>粒子群算法(particle swarm optimization)</h4><p>思想：<strong>采用速度－位置搜索模型，每个粒子代表解空间的一个候选解，解的优劣程度由适应度函数决定</strong></p><p>优点：保留了种群的全局搜索策略；避免了复杂的遗传操作；它特有的记忆使其可以跟踪当前整个种群的最优粒子。</p><h4 id="蚁群算法-ant-colony-optimization"><a href="#蚁群算法-ant-colony-optimization" class="headerlink" title="蚁群算法(ant colony optimization)"></a>蚁群算法(ant colony optimization)</h4><p>思想：是一种群体智能的模拟进化算法 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown流程图</title>
      <link href="2019/07/12/markdown-liu-cheng-tu/"/>
      <url>2019/07/12/markdown-liu-cheng-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="文字不如图"><a href="#文字不如图" class="headerlink" title="文字不如图"></a>文字不如图</h2><hr><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>Markdown中的流程图都是通过代码实现的，即平时展示代码的地方写流程图代码，使用的语言是<strong>mermaid</strong>。</p><h4 id="连线选择"><a href="#连线选择" class="headerlink" title="连线选择"></a>连线选择</h4><table><thead><tr><th align="center">圆角</th><th align="center">方形</th><th align="center">条件</th><th align="center">圆形</th><th align="center">带箭头的连线</th><th align="center">不带箭头的连线</th></tr></thead><tbody><tr><td align="center">()</td><td align="center">[]</td><td align="center">{}</td><td align="center">(())</td><td align="center">–&gt;</td><td align="center">—</td></tr></tbody></table><table><thead><tr><th align="center">虚线连线</th><th align="center">带文字的虚线连线</th><th align="center">粗连线</th><th align="center">带文字的粗连线</th></tr></thead><tbody><tr><td align="center">-.-</td><td align="center">-. text .-</td><td align="center">==&gt;</td><td align="center">== text ==&gt;</td></tr></tbody></table><p><em>连线上的文字在连线代码后用||包裹</em></p><h4 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h4><pre class="mermaid">graph LRA["方形 ♥#9733;"]--&gt;B(圆角)B--&gt;C{条件a}C--&gt;|a=1|D[结果1]C--&gt;|a=2|E[结果2]F[横向流程图]</pre><h4 id="竖直流程图"><a href="#竖直流程图" class="headerlink" title="竖直流程图"></a>竖直流程图</h4><pre class="mermaid">graph TDA[方形]--&gt;B(圆角)B --&gt; C{条件a}C --&gt;|a=1| D&gt;结果1]C --&gt;|a=2| E((结果2))F[竖向流程图]</pre><h4 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h4><pre class="mermaid">graph TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end</pre><hr><h3 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h3><pre class="mermaid">sequenceDiagram    participant A as Alice    participant J as John    A-&gt;&gt;J: Hello John, how are you?    J-&gt;&gt;A: Great!</pre><p>或者使用</p><pre class="mermaid">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    John--&gt;&gt;-Alice: Great!</pre><h4 id="连线选择-1"><a href="#连线选择-1" class="headerlink" title="连线选择"></a>连线选择</h4><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-&gt;</td><td align="center">没有箭头的实线</td></tr><tr><td align="center">–&gt;</td><td align="center">没有箭头的虚线</td></tr><tr><td align="center">-&gt;&gt;</td><td align="center">带箭头的实线</td></tr><tr><td align="center">–&gt;&gt;</td><td align="center">带箭头的虚线</td></tr><tr><td align="center">-x</td><td align="center">实线与末端的十字架（异步）</td></tr><tr><td align="center">–x</td><td align="center">最后用十字线的虚线（异步）</td></tr></tbody></table><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><pre class="mermaid">sequenceDiagram    Alice-&gt;&gt;+John: Hello John, how are you?    Alice-&gt;&gt;+John: John, can you hear me?    John--&gt;&gt;-Alice: Hi Alice, I can hear you!    John--&gt;&gt;-Alice: I feel great!</pre><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><pre class="mermaid">sequenceDiagram    participant John    Note right of John: Text in note</pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre class="mermaid">sequenceDiagram    Alice-&gt;John: Hello John, how are you?    loop Every minute        John--&gt;Alice: Great!    end</pre><hr><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre class="mermaid">gantt    title A Gantt Diagram    dateFormat  YYYY-MM-DD    section Section    A task           :a1, 2014-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2014-01-12  , 12d    another task      : 24d</pre><pre class="mermaid">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task in the critical line :crit, done, 2014-01-06,24h       Implement parser and jison          :crit, done, after des1, 2d       Create tests for parser             :crit, active, 3d       Future task in critical line        :crit, 5d       Create tests for renderer           :2d       Add to mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       Add gantt diagram to demo page      :after a1  , 20h       Add another diagram to demo page    :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       Add gantt diagram to demo page      :20h       Add another diagram to demo page    :48h</pre>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudSim能耗计算模型</title>
      <link href="2019/07/12/cloudsim-neng-hao-ji-suan-mo-xing/"/>
      <url>2019/07/12/cloudsim-neng-hao-ji-suan-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="CloudSim能耗计算模型的不同"><a href="#CloudSim能耗计算模型的不同" class="headerlink" title="CloudSim能耗计算模型的不同"></a>CloudSim能耗计算模型的不同</h2><h3 id="一：CloudSim能耗计算模型综述"><a href="#一：CloudSim能耗计算模型综述" class="headerlink" title="一：CloudSim能耗计算模型综述"></a>一：CloudSim能耗计算模型综述</h3><p>CloudSim定义了一个能耗计算模型接口类<code>PowerModel</code>，分别有5个子类继承，这个五个子类分别为：</p><ol><li>：<code>PowerModelLinear</code>，以线性增长的方式计算能耗。</li><li>：<code>PowerModelSquare</code>，以平方增长的方式计算能耗。</li><li>：<code>PowerModelCubic</code>，以立方增长的方式计算能耗。</li><li>：<code>PowerModelSqrt</code>，以平方根增长的方式计算能耗。</li><li>：<code>PowerModelSpecPower</code>，以基于SPECpower benchmark计算能耗。</li></ol><h3 id="二：CloudSim能耗计算模型分析"><a href="#二：CloudSim能耗计算模型分析" class="headerlink" title="二：CloudSim能耗计算模型分析"></a>二：CloudSim能耗计算模型分析</h3><p>​    2.1：<code>PowerModelLinear</code>类，其中定义了三个属性：</p><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗。</p><p>​    <code>PowerModelLinear</code>是以线性增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100)得出：</p><p>​    y=staticpower+constant*(utlization*100)</p><p>​    抽象可以得出:y=ax+b,可以得出PowerModelLinear类是以线性增长的方式计算能耗。</p><p>​    2.2：<code>PowerModelSquare</code>类，其中定义了三个属性：</p><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗。</p><p>​    <code>PowerModelSquare</code>是以平方增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100²)得出：</p><p>​    y=staticpower+constant*(utlization*100)²</p><p>​    抽象可以得出:y=ax²+b,可以得出PowerModelSquare类是以平方增长的方式计算能耗。</p><pre><code> 2.3：`PowerModelCubic`类，其中定义了三个属性：</code></pre><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗消耗。</p><p>​    <code>PowerModelCubic</code>是以立方增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /100³)得出：</p><p>​    y=staticpower+constant*(utlization*100)³</p><p>​    抽象可以得出:y=ax³+b,可以得出PowerModelLinear类是以立方增长的方式计算能耗。</p><pre><code> 2.4：`PowerModelSqrt`类，其中定义了三个属性：</code></pre><p>​        (1)<code>maxPower</code>：maxpower定义了最大可以消耗的能耗。</p><p>​        (2)<code>constant</code>：constant可以反应每个被使用的资源的能耗消耗。</p><p>​        (3)<code>staticPower</code>：staticpower表示机器不运行任何程序时候的静态能耗消耗。</p><p>​    <code>PowerModelSqrt</code>是以平方根增长的方式计算能耗，我们可以用一个公式表达，设最后计算的power为y，constant为a，staticpower为b，(utlization*100)为x,其中constant=(maxPower - StaticPower) /√100)得出：</p><p>​    y=staticpower+constant<em>√(utlization</em>100)</p><p>​    抽象可以得出:y=a√x+b,可以得出PowerModelLinear类是以平方根增长的方式计算能耗</p><pre><code> 2.5：`PowerModelSpecPower`类其中底下还有七个子类分别为：</code></pre><p>​        (1)：PowerModelSpecPowerIbmX3550XeonX5675</p><p>​        (2)：PowerModelSpecPowerHpProLiantMl110G4Xeon3040</p><p>​        (3)：PowerModelSpecPowerHpProLiantMl110G3PentiumD930</p><p>​        (4)：PowerModelSpecPowerIbmX3250XeonX3480</p><p>​        (5)：PowerModelSpecPowerIbmX3550XeonX5670</p><p>​        (6)：PowerModelSpecPowerHpProLiantMl110G5Xeon3075</p><p>​        (7)：PowerModelSpecPowerIbmX3250XeonX3470</p><p>​    这七个子类不同的只是自身的powerData数组所存储的数组不同，其他没有区别，PowerModelSpecpower主要实现的过程是，首先传来一个utlization，让后根据utlization在不同的子类数组中选择两个返回值定义为power1和power2，定义一个变量delta=(power1-power2)/10，最终计算出</p><p>power=power1 + delta * (utilization - utilization1 / 10) * 100即为PowerModelSpecPower策略所测量出来的能耗。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CloudSim </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装OpenCV</title>
      <link href="2019/07/10/shu-mei-pai-an-zhuang-opencv/"/>
      <url>2019/07/10/shu-mei-pai-an-zhuang-opencv/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派安装OpenCV"><a href="#树莓派安装OpenCV" class="headerlink" title="树莓派安装OpenCV"></a>树莓派安装OpenCV</h2><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt updatesudo apt upgradesudo rpi-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装一些OpenCV相关工具"><a href="#安装一些OpenCV相关工具" class="headerlink" title="安装一些OpenCV相关工具"></a>安装一些OpenCV相关工具</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install git cmake build-essential pkg-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><h3 id="安装四个常用的图像工具包"><a href="#安装四个常用的图像工具包" class="headerlink" title="安装四个常用的图像工具包"></a>安装四个常用的图像工具包</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装视频IO包"><a href="#安装视频IO包" class="headerlink" title="安装视频IO包"></a>安装视频IO包</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装gtk2-0"><a href="#安装gtk2-0" class="headerlink" title="安装gtk2.0"></a>安装gtk2.0</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install libgtk2.0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装优化函数包"><a href="#安装优化函数包" class="headerlink" title="安装优化函数包"></a>安装优化函数包</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install libatlas-base-dev gfortran<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Python开发包"><a href="#安装Python开发包" class="headerlink" title="安装Python开发包"></a>安装Python开发包</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt install python-dev python3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>这一步在新版的树莓派上不需要</em></p><h3 id="下载OpenCV源码"><a href="#下载OpenCV源码" class="headerlink" title="下载OpenCV源码"></a>下载OpenCV源码</h3><pre class="line-numbers language-shell"><code class="language-shell">wget -O opencv-3.4.6.zip https://github.com/opencv/opencv/archive/3.4.6.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载OpenCV-contrib包"><a href="#下载OpenCV-contrib包" class="headerlink" title="下载OpenCV_contrib包"></a>下载OpenCV_contrib包</h3><pre class="line-numbers language-shell"><code class="language-shell">wget -O opencv_contrib.3.4.6.tar.gz https://github.com/opencv/opencv_contrib/archive/3.4.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>将上面下载的两个OpenCV文件压缩包进行解压，并在OpenCV的主文件夹中新建一个release文件夹。进入release文件夹中，执行一下命令。</p><pre class="line-numbers language-shell"><code class="language-shell">sudo cmake -D CMAKE_BUILD_TYPE=RELEASE \    -D CMAKE_INSTALL_PREFIX=/usr/local \    -D OPENCV_EXTRA+MODULES_PATH=~/opencv_contrib-3.4.6/modules \    -D INSTALL_PYTHON_EXAMPLES=ON \    -D BUILD_EXAMPLES=ON ..screen -S opencvsudo make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo make install// 更新动态链接库sudo ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="树莓派连接隐藏网络"><a href="#树莓派连接隐藏网络" class="headerlink" title="树莓派连接隐藏网络"></a>树莓派连接隐藏网络</h3><p>修改/etc/wpa_supplicant/wpa_supplicant.conf，在相应的wifi设置中添加上scan_ssid=1即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="2019/07/10/python-ji-chu/"/>
      <url>2019/07/10/python-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><ul><li><code>print()</code>函数可以接收多个字符串，之间用逗号隔开，python会将逗号打印成空格。</li><li>输入：直接将<code>input()</code>的值赋予需要被复制的变量。<code>input()</code>中可以放置提示用的文字，<em>获取的值是字符串类型，如果想要使用，注意将其转换成相应的格式。</em></li><li>可以直接使用%进行输出控制，采用与C类似的字符表现形式，用括号包裹，后面加上一个%，相应的变量放最后的括号中。</li><li>python的注释使用#符号。以冒号结尾时，缩进的语句视为代码块。python中的缩进是四个空格。<strong>注意将tab设置为四个空格</strong></li><li>十六进制使用0x开头。科学计数法中使用e代替底数10。</li><li>若是单引号需要放置在字符串中，需要用双引号进行包裹。实在不行，使用转义字符<code>\</code>。使用<code>r""</code>其中的字符都不进行转义。python使用<code>'''...'''</code>格式表示多行内容。</li></ul><a id="more"></a><ul><li><p>Python中使用<code>and、or、not</code>进行布尔运算。</p></li><li><p>Python中空值用<code>None</code>表示。</p></li><li><p>使用全部大写的变量名表示这是一个认知意义上的常亮，但Python不提供任何机制进行保障。</p></li><li><p><code>/</code>除法计算结果永远是浮点数。</p></li><li><p><code>//</code>除法结果为整数，只取结果的整数部分。使用%进行取余。</p></li><li><p>python中整数没有大小限制，浮点数也没有，但是超过一定大小直接显示为<code>inf（无限大）</code>。</p></li><li><p>Python3，字符串以Unicode编码。<code>ord()</code>函数获取字符的整数表现形式。<code>chr()</code>将编码转换成对应的字符。带b前缀的单引号或者双引号将指定字符串为bytes类型，每个字符只占用一个字节。<code>encode()</code>函数将字符串编码为指定的bytes，例如：<code>'ABC'.encode('utf-8')</code>。在bytes中，无法显示为ASCII字符的字节用<code>\x##</code>显示。使用<code>decode()</code>函数将bytes转换成相应编码下的文字，若是传来的数据中有一部分无效的字节，可以传入<code>errors='ignore'</code>忽略错误的字节。</p></li><li><p>使用<code>len()</code>函数计算字符数。例如:<code>len('haha')</code></p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>格式化字符，与c一致，用%实现。</p><table><thead><tr><th align="center">占位符</th><th align="center">提换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr><tr><td align="center">%%</td><td align="center">%</td></tr></tbody></table></li><li><p><code>format()</code>函数同样可以格式化。例如’Hello, {0}, 成绩提升了 {1:.1f}%’.format(‘小明’, 17.125)</p></li><li><table><thead><tr><th align="center">list</th><th align="center">tuple（<em>推荐</em>）</th></tr></thead><tbody><tr><td align="center">有序集合，可以随时增删元素，元素之间的类型可以不同，使用内存小</td><td align="center">一旦初始化不能修改，但可以存放list元素，固定的是指向</td></tr><tr><td align="center">[ ]</td><td align="center">( )</td></tr><tr><td align="center">追加元素append()</td><td align="center">无</td></tr><tr><td align="center">将元素插入到指定的位置insert(位置，元素)</td><td align="center">无</td></tr><tr><td align="center">删除末尾元素直接pop()，指定位置pop(位置)，用sort()函数进行排序</td><td align="center">无</td></tr></tbody></table><p><strong>可以使用负数直接访问容器中倒数的元素。</strong></p><p><strong><code>len()</code>获取元素个数</strong>。</p><p><strong>tuple只存放一个元素需在那一个元素之后加上一个逗号，消除歧义。</strong></p></li><li><p>条件判断</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意if和else后面的冒号，还可以使用elif进行判断。</strong></p></li><li><p>循环有两种方式：<code>for...in</code>循环，类似java中的foreach，注意最后有一个冒号。或者使用while循环</p></li><li><p>使用<code>range(参数1，参数2)</code>函数，可以生成一个从参数1到参数2-1的一个左闭右开整数list序列。</p></li><li><table><thead><tr><th align="center">dict</th><th align="center">set</th></tr></thead><tbody><tr><td align="center">键值对，极快的查找速度，占用大量内存</td><td align="center">不重复的key集合</td></tr><tr><td align="center">{ }</td><td align="center">set( )，或者使用frozenset()函数将列表转换成set字典</td></tr><tr><td align="center">可以初始化后，通过key值存放value；多次存放同一个key，会覆盖前面的value值</td><td align="center">使用add(key)函数添加</td></tr><tr><td align="center">可以通过in查看key是否存在字典中；或者通过get(需查询的key，自定义的返回值)函数</td><td align="center">可以使用&amp;或者|进行集合运算</td></tr><tr><td align="center">使用pop(key)删除元素</td><td align="center">remove(key)删除元素</td></tr><tr><td align="center">key值是不可变对象，不可以使用list作为key</td><td align="center">key值是不可变对象</td></tr></tbody></table></li><li><p>字符串使用<code>replace()</code>函数，将会返回一个新的字符串，而不是直接修改那个字符串。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop了解</title>
      <link href="2019/07/09/hadoop-liao-jie/"/>
      <url>2019/07/09/hadoop-liao-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ol><li>特点<ul><li>数据大</li><li>价值大</li><li>速度快（时效性）</li><li>多样性</li></ul></li><li>架构<ul><li>数据采集：Mysql</li><li>数据存储：HDFS、HBase、Hive</li><li>数据计算：Spark、MapReduce</li></ul></li></ol><hr><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop实现了HDFS分布式存储，下面介绍其中的八个相关部件：</p><ul><li><p>HDFS中NameNode管理DataNode</p><p><em>HDFS是分布式存储，具有数据备份和数据容错的优点。</em></p><p><strong>DataNode由block组成，其中的数据平行传递，不通过client，通过心跳检测（监测数据是否正常）。</strong></p><p><strong>每个block数据块大小都是128M，因此不适合小数据的存储。</strong></p><p>$$主从模式<br>\begin{cases}<br>\text{NameNode（master）}\<br>\text{DataNode（slave）}<br>\end{cases}$$</p></li><li><p>Yarn（资源管理器），负责创建RM（资源管理、作业调度）和AM（任务调度）</p><p><strong>先启动Hadoop，后启动Yarn。</strong></p></li><li><p>MapReduce，处理大规模数据集的编程模型。</p><p>Map:输入数据格式解析：InputFormat</p><p>​        输入数据处理：Mapper</p><p>​        输入数据分组：Partitioner</p><p><strong>总的来说，Map负责分割。</strong></p><p>Reduce：数据远程拷贝</p><p>​                数据按Key排序</p><p>​                数据处理：Reducer</p><p>​                数据输出格式：OutFormat</p><p><strong>总的来说，Reduce负责处理。</strong></p><p><em>其中有一个shuffle，可以打乱分组。</em></p></li><li><p>Hive 数据仓库工具，将SQL转换成MapReduce执行。</p></li><li><p>HBase 存放结构化的数据。</p></li><li><p>ZooKeeper 担任服务生产者和服务消费者的注册中心。</p><p>大致上分成<br>$$<br>\begin{cases} Leader\<br>Follower\<br>Obsever<br>\end{cases}<br>$$<br><strong>推荐使用奇数集群</strong></p></li><li><p>Flume 分布式日志收集系统</p></li><li><p>Storm 分布式流式计算的架构</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudSim学习</title>
      <link href="2019/07/08/cloudsim-xue-xi/"/>
      <url>2019/07/08/cloudsim-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="CloudSim"><a href="#CloudSim" class="headerlink" title="CloudSim"></a>CloudSim</h1><h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><ul><li>Cloudlet 对应的是云端应用</li><li>Vm 对应的是虚拟机，其中封装了虚拟机相应的属性和行为</li><li>Broker 对应的是用户代理，是云端用户的代表，包括虚拟机和云应用在内的资源都要绑定到Broker上。</li><li>Host 对应的是物理主机</li><li>Datacenter 对应的是数据中心，所有物理主机资源必须绑定到数据中心，至少创建一个</li></ul><hr><h2 id="模拟实验步骤"><a href="#模拟实验步骤" class="headerlink" title="模拟实验步骤"></a>模拟实验步骤</h2><ol><li>初始化CloudSim</li><li>创建数据中心DataCenter</li><li>创建用户代理Broker</li><li>创建虚拟机Vm</li><li>创建应用Cloudlet</li><li>将云端应用绑定到指定的虚拟机上</li><li>开启模拟仿真</li><li>结束模拟仿真</li><li>打印输出仿真结果</li></ol><hr><h2 id="DataCenter中Host的创建"><a href="#DataCenter中Host的创建" class="headerlink" title="DataCenter中Host的创建"></a>DataCenter中Host的创建</h2><p>所需参数：</p><ul><li>主机编号</li><li>内存</li><li>网络带宽</li><li>外存容量</li><li>cpu列表</li><li>虚拟机调度策略（主机上的）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span>    hostId<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">RamProvisionerSimple</span><span class="token punctuation">(</span>ram<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">BwProvisionerSimple</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">,</span>    storage<span class="token punctuation">,</span>    peList<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">VmSchedulerTimeShared</span><span class="token punctuation">(</span>peList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数据中心的创建"><a href="#数据中心的创建" class="headerlink" title="数据中心的创建"></a>数据中心的创建</h2><p>首先创建数据中心特性：<br>需要的参数 @parameter :</p><ol><li>主机架构</li><li>操作系统</li><li>虚拟机监视器种类</li><li>时区</li><li>cpu的使用费用</li><li>内存的使用费用</li><li>外存的使用费用</li><li>带宽的使用费用</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">DatacenterCharacteristics</span><span class="token punctuation">(</span>         arch<span class="token punctuation">,</span> os<span class="token punctuation">,</span> vmm<span class="token punctuation">,</span> hostList<span class="token punctuation">,</span> time_zone<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> costPerMem<span class="token punctuation">,</span>costPerStorage<span class="token punctuation">,</span> costPerBw         <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建数据中心：</p><ol><li>数据中心的名字</li><li>数据中心特性</li><li>虚拟机的创建策略</li><li>存储设备列表</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Datacenter</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> characteristics<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VmAllocationPolicySimple</span><span class="token punctuation">(</span>hostList<span class="token punctuation">)</span><span class="token punctuation">,</span> storageList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="虚拟机的创建"><a href="#虚拟机的创建" class="headerlink" title="虚拟机的创建"></a>虚拟机的创建</h2><p>需要的参数 @parameter:</p><ol><li>虚拟机编号</li><li>用户</li><li>MIPS（Tips:CPU是由MIPS来标定其计算能力的）</li><li>镜像大小（MB）</li><li>内存大小（MB）</li><li>网络带宽</li><li>cpu数量</li><li>虚拟机监视器类型</li><li>应用调度策略（虚拟机上的）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Vm</span><span class="token punctuation">(</span>vmid<span class="token punctuation">,</span> brokerId<span class="token punctuation">,</span> mips<span class="token punctuation">,</span> pesNumber<span class="token punctuation">,</span> ram<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> size<span class="token punctuation">,</span> vmm<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CloudletSchedulerTimeShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="应用的创建"><a href="#应用的创建" class="headerlink" title="应用的创建"></a>应用的创建</h2><p>需要的参数 @parameter ：</p><ol><li>应用编号</li><li>执行时的应用长度(MI)</li><li>要使用到的处理器数量</li><li>提交应用前的文件大小（byte）</li><li>应用执行完成后的文件大小(byte)</li><li>cpu的使用模型/策略</li><li>ram的使用模型/策略</li><li>网络带宽的使用模型/策略</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Cloudlet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> length<span class="token punctuation">,</span> pesNumber<span class="token punctuation">,</span> fileSize<span class="token punctuation">,</span> outputSize<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">,</span> utilizationModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="用户的创建"><a href="#用户的创建" class="headerlink" title="用户的创建"></a>用户的创建</h2><p>一般情况下，Broker的创建需要自定义以适应不同的用户策略.</p><h2 id="暂停仿真"><a href="#暂停仿真" class="headerlink" title="暂停仿真"></a>暂停仿真</h2><ul><li>覆盖Runnable接口的run方法;</li><li>将要运行的代码放在run方法中;</li><li>向cloudsim核心引擎层提交暂停仿真事件;</li><li>Cloudsim仿真暂停5秒钟后,动态创建数据中心代理broker_1;</li><li>创建虚拟机和云任务并提交到broker_1代理中;</li><li>提交虚拟机列表和云任务列表;</li><li>重启Cloudsim仿真;</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// A thread that will create a new broker at 200 clock time</span>            Runnable monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//TODO 仿真暂停的代码</span>        <span class="token comment" spellcheck="true">//动态创建数据中心代理代码</span>        <span class="token comment" spellcheck="true">//以下代码为一个样例</span>        <span class="token comment" spellcheck="true">//仿真暂停到第200个时钟时间</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span>CloudSim<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//在CLoudsim中的clock到200时暂停Cloudsim</span>                    CloudSim<span class="token punctuation">.</span><span class="token function">pauseSimulation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span>CloudSim<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>CloudSim<span class="token punctuation">.</span><span class="token function">isPaused</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span>CloudSim<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"Cloudsim暂停中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"线程睡眠100ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span>CloudSim<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    Log<span class="token punctuation">.</span><span class="token function">printLine</span><span class="token punctuation">(</span><span class="token string">"\n\n\n"</span> <span class="token operator">+</span> CloudSim<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": The simulation is paused for 5 sec \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//主程序暂停运行5秒</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    DatacenterBroker broker <span class="token operator">=</span> <span class="token function">createBroker</span><span class="token punctuation">(</span><span class="token string">"Broker_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> brokerId <span class="token operator">=</span> broker<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//Create VMs and Cloudlets and send them to broker</span>                    vmlist <span class="token operator">=</span> <span class="token function">createVM</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//creating 5 vms</span>                    cloudletList <span class="token operator">=</span> <span class="token function">createCloudlet</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// creating 10 cloudlets</span>                    broker<span class="token punctuation">.</span><span class="token function">submitVmList</span><span class="token punctuation">(</span>vmlist<span class="token punctuation">)</span><span class="token punctuation">;</span>                    broker<span class="token punctuation">.</span><span class="token function">submitCloudletList</span><span class="token punctuation">(</span>cloudletList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CloudSim<span class="token punctuation">.</span><span class="token function">resumeSimulation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改写仿真事件"><a href="#改写仿真事件" class="headerlink" title="改写仿真事件"></a>改写仿真事件</h2><h4 id="processEvent"><a href="#processEvent" class="headerlink" title="processEvent"></a>processEvent</h4><ul><li>继承SimEntity类</li><li>创建代理</li><li>创建虚拟机和云任务并提交虚拟机列表和云任务列表</li><li>Cloudsim.resumeSimulation();</li></ul><h4 id="startEntity"><a href="#startEntity" class="headerlink" title="startEntity"></a>startEntity</h4><ul><li>调用schedule()</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络拓扑的信息包括:</p><ul><li>节点的位置</li><li>节点的有向边</li><li>边时延</li><li>边带宽等信息</li></ul><p>调用<code>org.cloudbus.cloudsim.NetworkTopology</code>构建网络拓扑图,然后把Cloudsim实体与拓扑图的节点进行映射.生成延迟矩阵(利用FloydWarshall计算的最短路径之后得出的)和带宽矩阵.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Sixth step: configure network</span>            <span class="token comment" spellcheck="true">//load the network topology file</span>            NetworkTopology<span class="token punctuation">.</span><span class="token function">buildNetworkTopology</span><span class="token punctuation">(</span><span class="token string">"modules/cloudsim-examples/src/main/java/org/cloudbus/cloudsim/examples/network/topology.brite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//maps CloudSim entities to BRITE entities</span>            <span class="token comment" spellcheck="true">//PowerDatacenter will correspond to BRITE node 0</span>            <span class="token keyword">int</span> briteNode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            NetworkTopology<span class="token punctuation">.</span><span class="token function">mapNode</span><span class="token punctuation">(</span>datacenter0<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>briteNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Broker will correspond to BRITE node 3</span>            briteNode<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>            NetworkTopology<span class="token punctuation">.</span><span class="token function">mapNode</span><span class="token punctuation">(</span>broker<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>briteNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在brite文件中,程序寻找标记<code>Nodes</code>和<code>Edges</code>.从其下一行开始执行.</p><p>Node的格式(列)为:NodeID,xpos,ypos,indegree,outdegree,ASid(AS应用服务器,如果分层,节点属于的ASid),type(router/AS)</p><p>Edge的格式(列)为:边序号,始节点序号,终节点序号,边长度,边时延,边带宽.</p><p>通过事件管理引擎实现实体i到实体j的传递总共的仿真时间是t+d,其中t表示消息传送最初的仿真时间,d代表实体i与j之间的网络延时.</p><p>在<code>network</code>的<code>datacenter</code>中<code>AppCloudlet</code>可以理解为一个完整的工作流程,<code>NetworkCloudlet</code>可以理解为工作流程中的一个功能.</p>]]></content>
      
      
      
        <tags>
            
            <tag> CloudSim </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
